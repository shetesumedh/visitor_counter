{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getWebSocketRpcClient = getWebSocketRpcClient;\nconst request_js_1 = require(\"../../errors/request.js\");\nconst socket_js_1 = require(\"./socket.js\");\nasync function getWebSocketRpcClient(url, options = {}) {\n  const {\n    keepAlive,\n    reconnect\n  } = options;\n  return (0, socket_js_1.getSocketRpcClient)({\n    async getSocket({\n      onClose,\n      onError,\n      onOpen,\n      onResponse\n    }) {\n      const WebSocket = await Promise.resolve().then(() => require('isows')).then(module => module.WebSocket);\n      const socket = new WebSocket(url);\n      function onClose_() {\n        socket.removeEventListener('close', onClose_);\n        socket.removeEventListener('message', onMessage);\n        socket.removeEventListener('error', onError);\n        socket.removeEventListener('open', onOpen);\n        onClose();\n      }\n      function onMessage({\n        data\n      }) {\n        try {\n          const _data = JSON.parse(data);\n          onResponse(_data);\n        } catch (error) {\n          onError(error);\n        }\n      }\n      socket.addEventListener('close', onClose_);\n      socket.addEventListener('message', onMessage);\n      socket.addEventListener('error', onError);\n      socket.addEventListener('open', onOpen);\n      if (socket.readyState === WebSocket.CONNECTING) {\n        await new Promise((resolve, reject) => {\n          if (!socket) return;\n          socket.onopen = resolve;\n          socket.onerror = reject;\n        });\n      }\n      const {\n        close: close_\n      } = socket;\n      return Object.assign(socket, {\n        close() {\n          close_.bind(socket)();\n          onClose_();\n        },\n        ping() {\n          try {\n            if (socket.readyState === socket.CLOSED || socket.readyState === socket.CLOSING) throw new request_js_1.WebSocketRequestError({\n              url: socket.url,\n              cause: new request_js_1.SocketClosedError({\n                url: socket.url\n              })\n            });\n            const body = {\n              jsonrpc: '2.0',\n              method: 'net_version',\n              params: []\n            };\n            socket.send(JSON.stringify(body));\n          } catch (error) {\n            onError(error);\n          }\n        },\n        request({\n          body\n        }) {\n          if (socket.readyState === socket.CLOSED || socket.readyState === socket.CLOSING) throw new request_js_1.WebSocketRequestError({\n            body,\n            url: socket.url,\n            cause: new request_js_1.SocketClosedError({\n              url: socket.url\n            })\n          });\n          return socket.send(JSON.stringify(body));\n        }\n      });\n    },\n    keepAlive,\n    reconnect,\n    url\n  });\n}","map":{"version":3,"names":["exports","getWebSocketRpcClient","request_js_1","require","socket_js_1","url","options","keepAlive","reconnect","getSocketRpcClient","getSocket","onClose","onError","onOpen","onResponse","WebSocket","Promise","resolve","then","module","socket","onClose_","removeEventListener","onMessage","data","_data","JSON","parse","error","addEventListener","readyState","CONNECTING","reject","onopen","onerror","close","close_","Object","assign","bind","ping","CLOSED","CLOSING","WebSocketRequestError","cause","SocketClosedError","body","jsonrpc","method","params","send","stringify","request"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/viem/utils/rpc/webSocket.ts"],"sourcesContent":["import type { MessageEvent } from 'isows'\n\nimport {\n  SocketClosedError,\n  WebSocketRequestError,\n} from '../../errors/request.js'\nimport type { RpcRequest } from '../../types/rpc.js'\nimport {\n  type GetSocketRpcClientParameters,\n  type Socket,\n  type SocketRpcClient,\n  getSocketRpcClient,\n} from './socket.js'\n\nexport type GetWebSocketRpcClientOptions = Pick<\n  GetSocketRpcClientParameters,\n  'keepAlive' | 'reconnect'\n>\n\nexport async function getWebSocketRpcClient(\n  url: string,\n  options: GetWebSocketRpcClientOptions | undefined = {},\n): Promise<SocketRpcClient<WebSocket>> {\n  const { keepAlive, reconnect } = options\n\n  return getSocketRpcClient({\n    async getSocket({ onClose, onError, onOpen, onResponse }) {\n      const WebSocket = await import('isows').then((module) => module.WebSocket)\n      const socket = new WebSocket(url)\n\n      function onClose_() {\n        socket.removeEventListener('close', onClose_)\n        socket.removeEventListener('message', onMessage)\n        socket.removeEventListener('error', onError)\n        socket.removeEventListener('open', onOpen)\n        onClose()\n      }\n      function onMessage({ data }: MessageEvent) {\n        try {\n          const _data = JSON.parse(data)\n          onResponse(_data)\n        } catch (error) {\n          onError(error as Error)\n        }\n      }\n\n      // Setup event listeners for RPC & subscription responses.\n      socket.addEventListener('close', onClose_)\n      socket.addEventListener('message', onMessage)\n      socket.addEventListener('error', onError)\n      socket.addEventListener('open', onOpen)\n\n      // Wait for the socket to open.\n      if (socket.readyState === WebSocket.CONNECTING) {\n        await new Promise((resolve, reject) => {\n          if (!socket) return\n          socket.onopen = resolve\n          socket.onerror = reject\n        })\n      }\n\n      const { close: close_ } = socket\n\n      return Object.assign(socket, {\n        close() {\n          close_.bind(socket)()\n          onClose_()\n        },\n        ping() {\n          try {\n            if (\n              socket.readyState === socket.CLOSED ||\n              socket.readyState === socket.CLOSING\n            )\n              throw new WebSocketRequestError({\n                url: socket.url,\n                cause: new SocketClosedError({ url: socket.url }),\n              })\n\n            const body: RpcRequest = {\n              jsonrpc: '2.0',\n              method: 'net_version',\n              params: [],\n            }\n            socket.send(JSON.stringify(body))\n          } catch (error) {\n            onError(error as Error)\n          }\n        },\n        request({ body }) {\n          if (\n            socket.readyState === socket.CLOSED ||\n            socket.readyState === socket.CLOSING\n          )\n            throw new WebSocketRequestError({\n              body,\n              url: socket.url,\n              cause: new SocketClosedError({ url: socket.url }),\n            })\n\n          return socket.send(JSON.stringify(body))\n        },\n      } as Socket<WebSocket>)\n    },\n    keepAlive,\n    reconnect,\n    url,\n  })\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}