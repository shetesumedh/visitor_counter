{"ast":null,"code":"import { decodeEventLog, formatUnits } from 'viem';\nimport { logPaymentStatusCheckCompleted, logPaymentStatusCheckError, logPaymentStatusCheckStarted } from '../../core/telemetry/events/payment.js';\nimport { ERC20_TRANSFER_ABI, TOKENS } from './constants.js';\n/**\n * Check the status of a payment transaction using its transaction ID (userOp hash)\n *\n * @param options - Payment status check options\n * @returns Promise<PaymentStatus> - Status information about the payment\n *\n * @example\n * const status = await getPaymentStatus({\n *   id: \"0x1234...5678\",\n *   testnet: true\n * })\n *\n * @note The id is the userOp hash returned from the pay function\n */\nexport async function getPaymentStatus(options) {\n  var _a;\n  const {\n    id,\n    testnet = false\n  } = options;\n  // Generate correlation ID for this status check\n  const correlationId = crypto.randomUUID();\n  // Log status check started\n  logPaymentStatusCheckStarted({\n    testnet,\n    correlationId\n  });\n  try {\n    // Get the bundler URL based on network\n    const bundlerUrl = testnet ? 'https://api.developer.coinbase.com/rpc/v1/base-sepolia/S-fOd2n2Oi4fl4e1Crm83XeDXZ7tkg8O' : 'https://api.developer.coinbase.com/rpc/v1/base/S-fOd2n2Oi4fl4e1Crm83XeDXZ7tkg8O';\n    // Call eth_getUserOperationReceipt via the bundler\n    const receipt = await fetch(bundlerUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        jsonrpc: '2.0',\n        id: 1,\n        method: 'eth_getUserOperationReceipt',\n        params: [id]\n      })\n    }).then(res => res.json());\n    // Handle RPC errors\n    if (receipt.error) {\n      console.error('[getPaymentStatus] RPC error:', receipt.error);\n      const errorMessage = receipt.error.message || 'Network error';\n      logPaymentStatusCheckError({\n        testnet,\n        correlationId,\n        errorMessage\n      });\n      return {\n        status: 'failed',\n        id: id,\n        message: 'Unable to check payment status. Please try again later.',\n        error: errorMessage\n      };\n    }\n    // If no result, payment is still pending or not found\n    if (!receipt.result) {\n      // Try eth_getUserOperationByHash to see if it's in mempool\n      const userOpResponse = await fetch(bundlerUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          jsonrpc: '2.0',\n          id: 2,\n          method: 'eth_getUserOperationByHash',\n          params: [id]\n        })\n      }).then(res => res.json());\n      if (userOpResponse.result) {\n        // UserOp exists but no receipt yet - it's pending\n        logPaymentStatusCheckCompleted({\n          testnet,\n          status: 'pending',\n          correlationId\n        });\n        const result = {\n          status: 'pending',\n          id: id,\n          message: 'Your payment is being processed. This usually takes a few seconds.',\n          sender: userOpResponse.result.sender\n        };\n        return result;\n      }\n      // Not found at all\n      logPaymentStatusCheckCompleted({\n        testnet,\n        status: 'not_found',\n        correlationId\n      });\n      const result = {\n        status: 'not_found',\n        id: id,\n        message: 'Payment not found. Please check your transaction ID.'\n      };\n      return result;\n    }\n    // Parse the receipt\n    const {\n      success,\n      receipt: txReceipt,\n      reason\n    } = receipt.result;\n    // Determine status based on success flag\n    if (success) {\n      // Parse USDC amount from logs\n      let amount;\n      let recipient;\n      if (txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.logs) {\n        const network = testnet ? 'baseSepolia' : 'base';\n        const usdcAddress = TOKENS.USDC.addresses[network].toLowerCase();\n        for (const log of txReceipt.logs) {\n          if (((_a = log.address) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === usdcAddress) {\n            try {\n              const decoded = decodeEventLog({\n                abi: ERC20_TRANSFER_ABI,\n                data: log.data,\n                topics: log.topics\n              });\n              if (decoded.eventName === 'Transfer' && decoded.args) {\n                // The Transfer event has indexed 'from' and 'to', and non-indexed 'value'\n                // viem's decodeEventLog returns indexed args in the args object\n                const args = decoded.args;\n                if (args.value && args.to) {\n                  amount = formatUnits(args.value, 6);\n                  recipient = args.to;\n                  break;\n                }\n              }\n            } catch (e) {\n              console.error('[getPaymentStatus] Error parsing log:', e);\n            }\n          }\n        }\n      }\n      logPaymentStatusCheckCompleted({\n        testnet,\n        status: 'completed',\n        correlationId\n      });\n      const result = {\n        status: 'completed',\n        id: id,\n        message: 'Payment completed successfully',\n        sender: receipt.result.sender,\n        amount,\n        recipient\n      };\n      return result;\n    } else {\n      // Parse a user-friendly reason for failure\n      let userFriendlyError = 'Payment could not be completed';\n      if (reason) {\n        if (reason.toLowerCase().includes('insufficient')) {\n          userFriendlyError = 'Insufficient USDC balance';\n        } else if (reason.toLowerCase().includes('revert')) {\n          userFriendlyError = 'Payment was rejected';\n        } else {\n          userFriendlyError = reason;\n        }\n      }\n      logPaymentStatusCheckCompleted({\n        testnet,\n        status: 'failed',\n        correlationId\n      });\n      const result = {\n        status: 'failed',\n        id: id,\n        message: 'Payment failed',\n        sender: receipt.result.sender,\n        error: userFriendlyError\n      };\n      return result;\n    }\n  } catch (error) {\n    console.error('[getPaymentStatus] Error checking status:', error);\n    const errorMessage = error instanceof Error ? error.message : 'Connection error';\n    logPaymentStatusCheckError({\n      testnet,\n      correlationId,\n      errorMessage\n    });\n    const result = {\n      status: 'failed',\n      id: id,\n      message: 'Unable to check payment status',\n      error: errorMessage\n    };\n    return result;\n  }\n}","map":{"version":3,"names":["decodeEventLog","formatUnits","logPaymentStatusCheckCompleted","logPaymentStatusCheckError","logPaymentStatusCheckStarted","ERC20_TRANSFER_ABI","TOKENS","getPaymentStatus","options","id","testnet","correlationId","crypto","randomUUID","bundlerUrl","receipt","fetch","method","headers","body","JSON","stringify","jsonrpc","params","then","res","json","error","console","errorMessage","message","status","result","userOpResponse","sender","success","txReceipt","reason","amount","recipient","logs","network","usdcAddress","USDC","addresses","toLowerCase","log","_a","address","decoded","abi","data","topics","eventName","args","value","to","e","userFriendlyError","includes","Error"],"sources":["../../../src/interface/payment/getPaymentStatus.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}