{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getBalance = getBalance;\nconst toHex_js_1 = require(\"../../utils/encoding/toHex.js\");\nasync function getBalance(client, {\n  address,\n  blockNumber,\n  blockTag = client.experimental_blockTag ?? 'latest'\n}) {\n  const blockNumberHex = typeof blockNumber === 'bigint' ? (0, toHex_js_1.numberToHex)(blockNumber) : undefined;\n  const balance = await client.request({\n    method: 'eth_getBalance',\n    params: [address, blockNumberHex || blockTag]\n  });\n  return BigInt(balance);\n}","map":{"version":3,"names":["exports","getBalance","toHex_js_1","require","client","address","blockNumber","blockTag","experimental_blockTag","blockNumberHex","numberToHex","undefined","balance","request","method","params","BigInt"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/viem/actions/public/getBalance.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\n\nexport type GetBalanceParameters = {\n  /** The address of the account. */\n  address: Address\n} & (\n  | {\n      /** The balance of the account at a block number. */\n      blockNumber?: bigint | undefined\n      blockTag?: undefined\n    }\n  | {\n      blockNumber?: undefined\n      /** The balance of the account at a block tag. */\n      blockTag?: BlockTag | undefined\n    }\n)\n\nexport type GetBalanceReturnType = bigint\n\nexport type GetBalanceErrorType =\n  | NumberToHexErrorType\n  | RequestErrorType\n  | ErrorType\n\n/**\n * Returns the balance of an address in wei.\n *\n * - Docs: https://viem.sh/docs/actions/public/getBalance\n * - JSON-RPC Methods: [`eth_getBalance`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getbalance)\n *\n * You can convert the balance to ether units with [`formatEther`](https://viem.sh/docs/utilities/formatEther).\n *\n * ```ts\n * const balance = await getBalance(client, {\n *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   blockTag: 'safe'\n * })\n * const balanceAsEther = formatEther(balance)\n * // \"6.942\"\n * ```\n *\n * @param client - Client to use\n * @param parameters - {@link GetBalanceParameters}\n * @returns The balance of the address in wei. {@link GetBalanceReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getBalance } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const balance = await getBalance(client, {\n *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n * })\n * // 10000000000000000000000n (wei)\n */\nexport async function getBalance<chain extends Chain | undefined>(\n  client: Client<Transport, chain>,\n  {\n    address,\n    blockNumber,\n    blockTag = client.experimental_blockTag ?? 'latest',\n  }: GetBalanceParameters,\n): Promise<GetBalanceReturnType> {\n  const blockNumberHex =\n    typeof blockNumber === 'bigint' ? numberToHex(blockNumber) : undefined\n\n  const balance = await client.request({\n    method: 'eth_getBalance',\n    params: [address, blockNumberHex || blockTag],\n  })\n  return BigInt(balance)\n}\n"],"mappings":";;;;;AAuEAA,OAAA,CAAAC,UAAA,GAAAA,UAAA;AA/DA,MAAAC,UAAA,GAAAC,OAAA;AA+DO,eAAeF,UAAUA,CAC9BG,MAAgC,EAChC;EACEC,OAAO;EACPC,WAAW;EACXC,QAAQ,GAAGH,MAAM,CAACI,qBAAqB,IAAI;AAAQ,CAC9B;EAEvB,MAAMC,cAAc,GAClB,OAAOH,WAAW,KAAK,QAAQ,GAAG,IAAAJ,UAAA,CAAAQ,WAAW,EAACJ,WAAW,CAAC,GAAGK,SAAS;EAExE,MAAMC,OAAO,GAAG,MAAMR,MAAM,CAACS,OAAO,CAAC;IACnCC,MAAM,EAAE,gBAAgB;IACxBC,MAAM,EAAE,CAACV,OAAO,EAAEI,cAAc,IAAIF,QAAQ;GAC7C,CAAC;EACF,OAAOS,MAAM,CAACJ,OAAO,CAAC;AACxB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}