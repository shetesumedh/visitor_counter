{"ast":null,"code":"import { hexStringToUint8Array, uint8ArrayToHex } from '../core/type/util.js';\nexport async function generateKeyPair() {\n  return crypto.subtle.generateKey({\n    name: 'ECDH',\n    namedCurve: 'P-256'\n  }, true, ['deriveKey']);\n}\nexport async function deriveSharedSecret(ownPrivateKey, peerPublicKey) {\n  return crypto.subtle.deriveKey({\n    name: 'ECDH',\n    public: peerPublicKey\n  }, ownPrivateKey, {\n    name: 'AES-GCM',\n    length: 256\n  }, false, ['encrypt', 'decrypt']);\n}\nexport async function encrypt(sharedSecret, plainText) {\n  const iv = crypto.getRandomValues(new Uint8Array(12));\n  const cipherText = await crypto.subtle.encrypt({\n    name: 'AES-GCM',\n    iv\n  }, sharedSecret, new TextEncoder().encode(plainText));\n  return {\n    iv,\n    cipherText\n  };\n}\nexport async function decrypt(sharedSecret, {\n  iv,\n  cipherText\n}) {\n  const plainText = await crypto.subtle.decrypt({\n    name: 'AES-GCM',\n    iv\n  }, sharedSecret, cipherText);\n  return new TextDecoder().decode(plainText);\n}\nfunction getFormat(keyType) {\n  switch (keyType) {\n    case 'public':\n      return 'spki';\n    case 'private':\n      return 'pkcs8';\n  }\n}\nexport async function exportKeyToHexString(type, key) {\n  const format = getFormat(type);\n  const exported = await crypto.subtle.exportKey(format, key);\n  return uint8ArrayToHex(new Uint8Array(exported));\n}\nexport async function importKeyFromHexString(type, hexString) {\n  const format = getFormat(type);\n  const arrayBuffer = hexStringToUint8Array(hexString).buffer;\n  return await crypto.subtle.importKey(format, new Uint8Array(arrayBuffer), {\n    name: 'ECDH',\n    namedCurve: 'P-256'\n  }, true, type === 'private' ? ['deriveKey'] : []);\n}\nexport async function encryptContent(content, sharedSecret) {\n  const serialized = JSON.stringify(content, (_, value) => {\n    if (!(value instanceof Error)) return value;\n    const error = value;\n    return Object.assign(Object.assign({}, error.code ? {\n      code: error.code\n    } : {}), {\n      message: error.message\n    });\n  });\n  return encrypt(sharedSecret, serialized);\n}\nexport async function decryptContent(encryptedData, sharedSecret) {\n  return JSON.parse(await decrypt(sharedSecret, encryptedData));\n}","map":{"version":3,"names":["hexStringToUint8Array","uint8ArrayToHex","generateKeyPair","crypto","subtle","generateKey","name","namedCurve","deriveSharedSecret","ownPrivateKey","peerPublicKey","deriveKey","public","length","encrypt","sharedSecret","plainText","iv","getRandomValues","Uint8Array","cipherText","TextEncoder","encode","decrypt","TextDecoder","decode","getFormat","keyType","exportKeyToHexString","type","key","format","exported","exportKey","importKeyFromHexString","hexString","arrayBuffer","buffer","importKey","encryptContent","content","serialized","JSON","stringify","_","value","Error","error","Object","assign","code","message","decryptContent","encryptedData","parse"],"sources":["../../src/util/cipher.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}