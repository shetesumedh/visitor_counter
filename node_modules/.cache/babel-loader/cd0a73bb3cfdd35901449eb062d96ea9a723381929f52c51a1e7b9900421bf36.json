{"ast":null,"code":"import * as Signature from 'ox/Signature';\nimport { readContract } from '../../../actions/public/readContract.js';\nimport { entryPoint06Address } from '../../../constants/address.js';\nimport { BaseError } from '../../../errors/base.js';\nimport { decodeFunctionData } from '../../../utils/abi/decodeFunctionData.js';\nimport { encodeAbiParameters } from '../../../utils/abi/encodeAbiParameters.js';\nimport { encodeFunctionData } from '../../../utils/abi/encodeFunctionData.js';\nimport { encodePacked } from '../../../utils/abi/encodePacked.js';\nimport { pad } from '../../../utils/data/pad.js';\nimport { size } from '../../../utils/data/size.js';\nimport { stringToHex } from '../../../utils/encoding/toHex.js';\nimport { hashMessage } from '../../../utils/signature/hashMessage.js';\nimport { hashTypedData } from '../../../utils/signature/hashTypedData.js';\nimport { parseSignature } from '../../../utils/signature/parseSignature.js';\nimport { entryPoint06Abi } from '../../constants/abis.js';\nimport { getUserOperationHash } from '../../utils/userOperation/getUserOperationHash.js';\nimport { toSmartAccount } from '../toSmartAccount.js';\nconst factoryAddress = {\n  '1.1': '0xba5ed110efdba3d005bfc882d75358acbbb85842',\n  '1': '0x0ba5ed0c6aa8c49038f819e587e2633c4a9f428a'\n};\n/**\n * @description Create a Coinbase Smart Account.\n *\n * @param parameters - {@link ToCoinbaseSmartAccountParameters}\n * @returns Coinbase Smart Account. {@link ToCoinbaseSmartAccountReturnType}\n *\n * @example\n * import { toCoinbaseSmartAccount } from 'viem/account-abstraction'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { client } from './client.js'\n *\n * const account = toCoinbaseSmartAccount({\n *   client,\n *   owners: [privateKeyToAccount('0x...')],\n *   version: '1.1',\n * })\n */\nexport async function toCoinbaseSmartAccount(parameters) {\n  const {\n    client,\n    ownerIndex = 0,\n    owners,\n    nonce = 0n,\n    version = '1'\n  } = parameters;\n  let address = parameters.address;\n  const entryPoint = {\n    abi: entryPoint06Abi,\n    address: entryPoint06Address,\n    version: '0.6'\n  };\n  const factory = {\n    abi: factoryAbi,\n    address: factoryAddress[version]\n  };\n  const owners_bytes = owners.map(owner => {\n    if (typeof owner === 'string') return pad(owner);\n    if (owner.type === 'webAuthn') return owner.publicKey;\n    if (owner.type === 'local') return pad(owner.address);\n    throw new BaseError('invalid owner type');\n  });\n  const owner = (() => {\n    const owner = owners[ownerIndex] ?? owners[0];\n    if (typeof owner === 'string') return {\n      address: owner,\n      type: 'address'\n    };\n    return owner;\n  })();\n  return toSmartAccount({\n    client,\n    entryPoint,\n    extend: {\n      abi,\n      factory\n    },\n    async decodeCalls(data) {\n      const result = decodeFunctionData({\n        abi,\n        data\n      });\n      if (result.functionName === 'execute') return [{\n        to: result.args[0],\n        value: result.args[1],\n        data: result.args[2]\n      }];\n      if (result.functionName === 'executeBatch') return result.args[0].map(arg => ({\n        to: arg.target,\n        value: arg.value,\n        data: arg.data\n      }));\n      throw new BaseError(`unable to decode calls for \"${result.functionName}\"`);\n    },\n    async encodeCalls(calls) {\n      if (calls.length === 1) return encodeFunctionData({\n        abi,\n        functionName: 'execute',\n        args: [calls[0].to, calls[0].value ?? 0n, calls[0].data ?? '0x']\n      });\n      return encodeFunctionData({\n        abi,\n        functionName: 'executeBatch',\n        args: [calls.map(call => ({\n          data: call.data ?? '0x',\n          target: call.to,\n          value: call.value ?? 0n\n        }))]\n      });\n    },\n    async getAddress() {\n      address ??= await readContract(client, {\n        ...factory,\n        functionName: 'getAddress',\n        args: [owners_bytes, nonce]\n      });\n      return address;\n    },\n    async getFactoryArgs() {\n      const factoryData = encodeFunctionData({\n        abi: factory.abi,\n        functionName: 'createAccount',\n        args: [owners_bytes, nonce]\n      });\n      return {\n        factory: factory.address,\n        factoryData\n      };\n    },\n    async getStubSignature() {\n      if (owner.type === 'webAuthn') return '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000170000000000000000000000000000000000000000000000000000000000000001949fc7c88032b9fcb5f6efc7a7b8c63668eae9871b765e23123bb473ff57aa831a7c0d9276168ebcc29f2875a0239cffdf2a9cd1c2007c5c77c071db9264df1d000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97630500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008a7b2274797065223a22776562617574686e2e676574222c226368616c6c656e6765223a2273496a396e6164474850596759334b7156384f7a4a666c726275504b474f716d59576f4d57516869467773222c226f726967696e223a2268747470733a2f2f7369676e2e636f696e626173652e636f6d222c2263726f73734f726967696e223a66616c73657d00000000000000000000000000000000000000000000';\n      return wrapSignature({\n        ownerIndex,\n        signature: '0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c'\n      });\n    },\n    async sign(parameters) {\n      const address = await this.getAddress();\n      const typedData = toReplaySafeTypedData({\n        address,\n        chainId: client.chain.id,\n        hash: parameters.hash\n      });\n      if (owner.type === 'address') throw new Error('owner cannot sign');\n      const signature = await signTypedData({\n        owner,\n        typedData\n      });\n      return wrapSignature({\n        ownerIndex,\n        signature\n      });\n    },\n    async signMessage(parameters) {\n      const {\n        message\n      } = parameters;\n      const address = await this.getAddress();\n      const typedData = toReplaySafeTypedData({\n        address,\n        chainId: client.chain.id,\n        hash: hashMessage(message)\n      });\n      if (owner.type === 'address') throw new Error('owner cannot sign');\n      const signature = await signTypedData({\n        owner,\n        typedData\n      });\n      return wrapSignature({\n        ownerIndex,\n        signature\n      });\n    },\n    async signTypedData(parameters) {\n      const {\n        domain,\n        types,\n        primaryType,\n        message\n      } = parameters;\n      const address = await this.getAddress();\n      const typedData = toReplaySafeTypedData({\n        address,\n        chainId: client.chain.id,\n        hash: hashTypedData({\n          domain,\n          message,\n          primaryType,\n          types\n        })\n      });\n      if (owner.type === 'address') throw new Error('owner cannot sign');\n      const signature = await signTypedData({\n        owner,\n        typedData\n      });\n      return wrapSignature({\n        ownerIndex,\n        signature\n      });\n    },\n    async signUserOperation(parameters) {\n      const {\n        chainId = client.chain.id,\n        ...userOperation\n      } = parameters;\n      const address = await this.getAddress();\n      const hash = getUserOperationHash({\n        chainId,\n        entryPointAddress: entryPoint.address,\n        entryPointVersion: entryPoint.version,\n        userOperation: {\n          ...userOperation,\n          sender: address\n        }\n      });\n      if (owner.type === 'address') throw new Error('owner cannot sign');\n      const signature = await sign({\n        hash,\n        owner\n      });\n      return wrapSignature({\n        ownerIndex,\n        signature\n      });\n    },\n    userOperation: {\n      async estimateGas(userOperation) {\n        if (owner.type !== 'webAuthn') return;\n        // Accounts with WebAuthn owner require a minimum verification gas limit of 800,000.\n        return {\n          verificationGasLimit: BigInt(Math.max(Number(userOperation.verificationGasLimit ?? 0n), 800_000))\n        };\n      }\n    }\n  });\n}\n/////////////////////////////////////////////////////////////////////////////////////////////\n// Utilities\n/////////////////////////////////////////////////////////////////////////////////////////////\n/** @internal */\nexport async function signTypedData({\n  typedData,\n  owner\n}) {\n  if (owner.type === 'local' && owner.signTypedData) return owner.signTypedData(typedData);\n  const hash = hashTypedData(typedData);\n  return sign({\n    hash,\n    owner\n  });\n}\n/** @internal */\nexport async function sign({\n  hash,\n  owner\n}) {\n  // WebAuthn Account (Passkey)\n  if (owner.type === 'webAuthn') {\n    const {\n      signature,\n      webauthn\n    } = await owner.sign({\n      hash\n    });\n    return toWebAuthnSignature({\n      signature,\n      webauthn\n    });\n  }\n  if (owner.sign) return owner.sign({\n    hash\n  });\n  throw new BaseError('`owner` does not support raw sign.');\n}\n/** @internal */\nexport function toReplaySafeTypedData({\n  address,\n  chainId,\n  hash\n}) {\n  return {\n    domain: {\n      chainId,\n      name: 'Coinbase Smart Wallet',\n      verifyingContract: address,\n      version: '1'\n    },\n    types: {\n      CoinbaseSmartWalletMessage: [{\n        name: 'hash',\n        type: 'bytes32'\n      }]\n    },\n    primaryType: 'CoinbaseSmartWalletMessage',\n    message: {\n      hash\n    }\n  };\n}\n/** @internal */\nexport function toWebAuthnSignature({\n  webauthn,\n  signature\n}) {\n  const {\n    r,\n    s\n  } = Signature.fromHex(signature);\n  return encodeAbiParameters([{\n    components: [{\n      name: 'authenticatorData',\n      type: 'bytes'\n    }, {\n      name: 'clientDataJSON',\n      type: 'bytes'\n    }, {\n      name: 'challengeIndex',\n      type: 'uint256'\n    }, {\n      name: 'typeIndex',\n      type: 'uint256'\n    }, {\n      name: 'r',\n      type: 'uint256'\n    }, {\n      name: 's',\n      type: 'uint256'\n    }],\n    type: 'tuple'\n  }], [{\n    authenticatorData: webauthn.authenticatorData,\n    clientDataJSON: stringToHex(webauthn.clientDataJSON),\n    challengeIndex: BigInt(webauthn.challengeIndex),\n    typeIndex: BigInt(webauthn.typeIndex),\n    r,\n    s\n  }]);\n}\n/** @internal */\nexport function wrapSignature(parameters) {\n  const {\n    ownerIndex = 0\n  } = parameters;\n  const signatureData = (() => {\n    if (size(parameters.signature) !== 65) return parameters.signature;\n    const signature = parseSignature(parameters.signature);\n    return encodePacked(['bytes32', 'bytes32', 'uint8'], [signature.r, signature.s, signature.yParity === 0 ? 27 : 28]);\n  })();\n  return encodeAbiParameters([{\n    components: [{\n      name: 'ownerIndex',\n      type: 'uint8'\n    }, {\n      name: 'signatureData',\n      type: 'bytes'\n    }],\n    type: 'tuple'\n  }], [{\n    ownerIndex,\n    signatureData\n  }]);\n}\n/////////////////////////////////////////////////////////////////////////////////////////////\n// Constants\n/////////////////////////////////////////////////////////////////////////////////////////////\nconst abi = [{\n  inputs: [],\n  stateMutability: 'nonpayable',\n  type: 'constructor'\n}, {\n  inputs: [{\n    name: 'owner',\n    type: 'bytes'\n  }],\n  name: 'AlreadyOwner',\n  type: 'error'\n}, {\n  inputs: [],\n  name: 'Initialized',\n  type: 'error'\n}, {\n  inputs: [{\n    name: 'owner',\n    type: 'bytes'\n  }],\n  name: 'InvalidEthereumAddressOwner',\n  type: 'error'\n}, {\n  inputs: [{\n    name: 'key',\n    type: 'uint256'\n  }],\n  name: 'InvalidNonceKey',\n  type: 'error'\n}, {\n  inputs: [{\n    name: 'owner',\n    type: 'bytes'\n  }],\n  name: 'InvalidOwnerBytesLength',\n  type: 'error'\n}, {\n  inputs: [],\n  name: 'LastOwner',\n  type: 'error'\n}, {\n  inputs: [{\n    name: 'index',\n    type: 'uint256'\n  }],\n  name: 'NoOwnerAtIndex',\n  type: 'error'\n}, {\n  inputs: [{\n    name: 'ownersRemaining',\n    type: 'uint256'\n  }],\n  name: 'NotLastOwner',\n  type: 'error'\n}, {\n  inputs: [{\n    name: 'selector',\n    type: 'bytes4'\n  }],\n  name: 'SelectorNotAllowed',\n  type: 'error'\n}, {\n  inputs: [],\n  name: 'Unauthorized',\n  type: 'error'\n}, {\n  inputs: [],\n  name: 'UnauthorizedCallContext',\n  type: 'error'\n}, {\n  inputs: [],\n  name: 'UpgradeFailed',\n  type: 'error'\n}, {\n  inputs: [{\n    name: 'index',\n    type: 'uint256'\n  }, {\n    name: 'expectedOwner',\n    type: 'bytes'\n  }, {\n    name: 'actualOwner',\n    type: 'bytes'\n  }],\n  name: 'WrongOwnerAtIndex',\n  type: 'error'\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    name: 'index',\n    type: 'uint256'\n  }, {\n    indexed: false,\n    name: 'owner',\n    type: 'bytes'\n  }],\n  name: 'AddOwner',\n  type: 'event'\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    name: 'index',\n    type: 'uint256'\n  }, {\n    indexed: false,\n    name: 'owner',\n    type: 'bytes'\n  }],\n  name: 'RemoveOwner',\n  type: 'event'\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    name: 'implementation',\n    type: 'address'\n  }],\n  name: 'Upgraded',\n  type: 'event'\n}, {\n  stateMutability: 'payable',\n  type: 'fallback'\n}, {\n  inputs: [],\n  name: 'REPLAYABLE_NONCE_KEY',\n  outputs: [{\n    name: '',\n    type: 'uint256'\n  }],\n  stateMutability: 'view',\n  type: 'function'\n}, {\n  inputs: [{\n    name: 'owner',\n    type: 'address'\n  }],\n  name: 'addOwnerAddress',\n  outputs: [],\n  stateMutability: 'nonpayable',\n  type: 'function'\n}, {\n  inputs: [{\n    name: 'x',\n    type: 'bytes32'\n  }, {\n    name: 'y',\n    type: 'bytes32'\n  }],\n  name: 'addOwnerPublicKey',\n  outputs: [],\n  stateMutability: 'nonpayable',\n  type: 'function'\n}, {\n  inputs: [{\n    name: 'functionSelector',\n    type: 'bytes4'\n  }],\n  name: 'canSkipChainIdValidation',\n  outputs: [{\n    name: '',\n    type: 'bool'\n  }],\n  stateMutability: 'pure',\n  type: 'function'\n}, {\n  inputs: [],\n  name: 'domainSeparator',\n  outputs: [{\n    name: '',\n    type: 'bytes32'\n  }],\n  stateMutability: 'view',\n  type: 'function'\n}, {\n  inputs: [],\n  name: 'eip712Domain',\n  outputs: [{\n    name: 'fields',\n    type: 'bytes1'\n  }, {\n    name: 'name',\n    type: 'string'\n  }, {\n    name: 'version',\n    type: 'string'\n  }, {\n    name: 'chainId',\n    type: 'uint256'\n  }, {\n    name: 'verifyingContract',\n    type: 'address'\n  }, {\n    name: 'salt',\n    type: 'bytes32'\n  }, {\n    name: 'extensions',\n    type: 'uint256[]'\n  }],\n  stateMutability: 'view',\n  type: 'function'\n}, {\n  inputs: [],\n  name: 'entryPoint',\n  outputs: [{\n    name: '',\n    type: 'address'\n  }],\n  stateMutability: 'view',\n  type: 'function'\n}, {\n  inputs: [{\n    name: 'target',\n    type: 'address'\n  }, {\n    name: 'value',\n    type: 'uint256'\n  }, {\n    name: 'data',\n    type: 'bytes'\n  }],\n  name: 'execute',\n  outputs: [],\n  stateMutability: 'payable',\n  type: 'function'\n}, {\n  inputs: [{\n    components: [{\n      name: 'target',\n      type: 'address'\n    }, {\n      name: 'value',\n      type: 'uint256'\n    }, {\n      name: 'data',\n      type: 'bytes'\n    }],\n    name: 'calls',\n    type: 'tuple[]'\n  }],\n  name: 'executeBatch',\n  outputs: [],\n  stateMutability: 'payable',\n  type: 'function'\n}, {\n  inputs: [{\n    name: 'calls',\n    type: 'bytes[]'\n  }],\n  name: 'executeWithoutChainIdValidation',\n  outputs: [],\n  stateMutability: 'payable',\n  type: 'function'\n}, {\n  inputs: [{\n    components: [{\n      name: 'sender',\n      type: 'address'\n    }, {\n      name: 'nonce',\n      type: 'uint256'\n    }, {\n      name: 'initCode',\n      type: 'bytes'\n    }, {\n      name: 'callData',\n      type: 'bytes'\n    }, {\n      name: 'callGasLimit',\n      type: 'uint256'\n    }, {\n      name: 'verificationGasLimit',\n      type: 'uint256'\n    }, {\n      name: 'preVerificationGas',\n      type: 'uint256'\n    }, {\n      name: 'maxFeePerGas',\n      type: 'uint256'\n    }, {\n      name: 'maxPriorityFeePerGas',\n      type: 'uint256'\n    }, {\n      name: 'paymasterAndData',\n      type: 'bytes'\n    }, {\n      name: 'signature',\n      type: 'bytes'\n    }],\n    name: 'userOp',\n    type: 'tuple'\n  }],\n  name: 'getUserOpHashWithoutChainId',\n  outputs: [{\n    name: '',\n    type: 'bytes32'\n  }],\n  stateMutability: 'view',\n  type: 'function'\n}, {\n  inputs: [],\n  name: 'implementation',\n  outputs: [{\n    name: '$',\n    type: 'address'\n  }],\n  stateMutability: 'view',\n  type: 'function'\n}, {\n  inputs: [{\n    name: 'owners',\n    type: 'bytes[]'\n  }],\n  name: 'initialize',\n  outputs: [],\n  stateMutability: 'payable',\n  type: 'function'\n}, {\n  inputs: [{\n    name: 'account',\n    type: 'address'\n  }],\n  name: 'isOwnerAddress',\n  outputs: [{\n    name: '',\n    type: 'bool'\n  }],\n  stateMutability: 'view',\n  type: 'function'\n}, {\n  inputs: [{\n    name: 'account',\n    type: 'bytes'\n  }],\n  name: 'isOwnerBytes',\n  outputs: [{\n    name: '',\n    type: 'bool'\n  }],\n  stateMutability: 'view',\n  type: 'function'\n}, {\n  inputs: [{\n    name: 'x',\n    type: 'bytes32'\n  }, {\n    name: 'y',\n    type: 'bytes32'\n  }],\n  name: 'isOwnerPublicKey',\n  outputs: [{\n    name: '',\n    type: 'bool'\n  }],\n  stateMutability: 'view',\n  type: 'function'\n}, {\n  inputs: [{\n    name: 'hash',\n    type: 'bytes32'\n  }, {\n    name: 'signature',\n    type: 'bytes'\n  }],\n  name: 'isValidSignature',\n  outputs: [{\n    name: 'result',\n    type: 'bytes4'\n  }],\n  stateMutability: 'view',\n  type: 'function'\n}, {\n  inputs: [],\n  name: 'nextOwnerIndex',\n  outputs: [{\n    name: '',\n    type: 'uint256'\n  }],\n  stateMutability: 'view',\n  type: 'function'\n}, {\n  inputs: [{\n    name: 'index',\n    type: 'uint256'\n  }],\n  name: 'ownerAtIndex',\n  outputs: [{\n    name: '',\n    type: 'bytes'\n  }],\n  stateMutability: 'view',\n  type: 'function'\n}, {\n  inputs: [],\n  name: 'ownerCount',\n  outputs: [{\n    name: '',\n    type: 'uint256'\n  }],\n  stateMutability: 'view',\n  type: 'function'\n}, {\n  inputs: [],\n  name: 'proxiableUUID',\n  outputs: [{\n    name: '',\n    type: 'bytes32'\n  }],\n  stateMutability: 'view',\n  type: 'function'\n}, {\n  inputs: [{\n    name: 'index',\n    type: 'uint256'\n  }, {\n    name: 'owner',\n    type: 'bytes'\n  }],\n  name: 'removeLastOwner',\n  outputs: [],\n  stateMutability: 'nonpayable',\n  type: 'function'\n}, {\n  inputs: [{\n    name: 'index',\n    type: 'uint256'\n  }, {\n    name: 'owner',\n    type: 'bytes'\n  }],\n  name: 'removeOwnerAtIndex',\n  outputs: [],\n  stateMutability: 'nonpayable',\n  type: 'function'\n}, {\n  inputs: [],\n  name: 'removedOwnersCount',\n  outputs: [{\n    name: '',\n    type: 'uint256'\n  }],\n  stateMutability: 'view',\n  type: 'function'\n}, {\n  inputs: [{\n    name: 'hash',\n    type: 'bytes32'\n  }],\n  name: 'replaySafeHash',\n  outputs: [{\n    name: '',\n    type: 'bytes32'\n  }],\n  stateMutability: 'view',\n  type: 'function'\n}, {\n  inputs: [{\n    name: 'newImplementation',\n    type: 'address'\n  }, {\n    name: 'data',\n    type: 'bytes'\n  }],\n  name: 'upgradeToAndCall',\n  outputs: [],\n  stateMutability: 'payable',\n  type: 'function'\n}, {\n  inputs: [{\n    components: [{\n      name: 'sender',\n      type: 'address'\n    }, {\n      name: 'nonce',\n      type: 'uint256'\n    }, {\n      name: 'initCode',\n      type: 'bytes'\n    }, {\n      name: 'callData',\n      type: 'bytes'\n    }, {\n      name: 'callGasLimit',\n      type: 'uint256'\n    }, {\n      name: 'verificationGasLimit',\n      type: 'uint256'\n    }, {\n      name: 'preVerificationGas',\n      type: 'uint256'\n    }, {\n      name: 'maxFeePerGas',\n      type: 'uint256'\n    }, {\n      name: 'maxPriorityFeePerGas',\n      type: 'uint256'\n    }, {\n      name: 'paymasterAndData',\n      type: 'bytes'\n    }, {\n      name: 'signature',\n      type: 'bytes'\n    }],\n    name: 'userOp',\n    type: 'tuple'\n  }, {\n    name: 'userOpHash',\n    type: 'bytes32'\n  }, {\n    name: 'missingAccountFunds',\n    type: 'uint256'\n  }],\n  name: 'validateUserOp',\n  outputs: [{\n    name: 'validationData',\n    type: 'uint256'\n  }],\n  stateMutability: 'nonpayable',\n  type: 'function'\n}, {\n  stateMutability: 'payable',\n  type: 'receive'\n}];\nconst factoryAbi = [{\n  inputs: [{\n    name: 'implementation_',\n    type: 'address'\n  }],\n  stateMutability: 'payable',\n  type: 'constructor'\n}, {\n  inputs: [],\n  name: 'OwnerRequired',\n  type: 'error'\n}, {\n  inputs: [{\n    name: 'owners',\n    type: 'bytes[]'\n  }, {\n    name: 'nonce',\n    type: 'uint256'\n  }],\n  name: 'createAccount',\n  outputs: [{\n    name: 'account',\n    type: 'address'\n  }],\n  stateMutability: 'payable',\n  type: 'function'\n}, {\n  inputs: [{\n    name: 'owners',\n    type: 'bytes[]'\n  }, {\n    name: 'nonce',\n    type: 'uint256'\n  }],\n  name: 'getAddress',\n  outputs: [{\n    name: '',\n    type: 'address'\n  }],\n  stateMutability: 'view',\n  type: 'function'\n}, {\n  inputs: [],\n  name: 'implementation',\n  outputs: [{\n    name: '',\n    type: 'address'\n  }],\n  stateMutability: 'view',\n  type: 'function'\n}, {\n  inputs: [],\n  name: 'initCodeHash',\n  outputs: [{\n    name: '',\n    type: 'bytes32'\n  }],\n  stateMutability: 'view',\n  type: 'function'\n}];","map":{"version":3,"names":["Signature","readContract","entryPoint06Address","BaseError","decodeFunctionData","encodeAbiParameters","encodeFunctionData","encodePacked","pad","size","stringToHex","hashMessage","hashTypedData","parseSignature","entryPoint06Abi","getUserOperationHash","toSmartAccount","factoryAddress","toCoinbaseSmartAccount","parameters","client","ownerIndex","owners","nonce","version","address","entryPoint","abi","factory","factoryAbi","owners_bytes","map","owner","type","publicKey","extend","decodeCalls","data","result","functionName","to","args","value","arg","target","encodeCalls","calls","length","call","getAddress","getFactoryArgs","factoryData","getStubSignature","wrapSignature","signature","sign","typedData","toReplaySafeTypedData","chainId","chain","id","hash","Error","signTypedData","signMessage","message","domain","types","primaryType","signUserOperation","userOperation","entryPointAddress","entryPointVersion","sender","estimateGas","verificationGasLimit","BigInt","Math","max","Number","webauthn","toWebAuthnSignature","name","verifyingContract","CoinbaseSmartWalletMessage","r","s","fromHex","components","authenticatorData","clientDataJSON","challengeIndex","typeIndex","signatureData","yParity","inputs","stateMutability","anonymous","indexed","outputs"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/viem/account-abstraction/accounts/implementations/toCoinbaseSmartAccount.ts"],"sourcesContent":["import type { Address, TypedData } from 'abitype'\nimport * as Signature from 'ox/Signature'\nimport type * as WebAuthnP256 from 'ox/WebAuthnP256'\n\nimport type { LocalAccount } from '../../../accounts/types.js'\nimport { readContract } from '../../../actions/public/readContract.js'\nimport { entryPoint06Address } from '../../../constants/address.js'\nimport { BaseError } from '../../../errors/base.js'\nimport type { Hash, Hex } from '../../../types/misc.js'\nimport type { TypedDataDefinition } from '../../../types/typedData.js'\nimport type { Assign, OneOf, Prettify } from '../../../types/utils.js'\nimport { decodeFunctionData } from '../../../utils/abi/decodeFunctionData.js'\nimport { encodeAbiParameters } from '../../../utils/abi/encodeAbiParameters.js'\nimport { encodeFunctionData } from '../../../utils/abi/encodeFunctionData.js'\nimport { encodePacked } from '../../../utils/abi/encodePacked.js'\nimport { pad } from '../../../utils/data/pad.js'\nimport { size } from '../../../utils/data/size.js'\nimport { stringToHex } from '../../../utils/encoding/toHex.js'\nimport { hashMessage } from '../../../utils/signature/hashMessage.js'\nimport { hashTypedData } from '../../../utils/signature/hashTypedData.js'\nimport { parseSignature } from '../../../utils/signature/parseSignature.js'\nimport { entryPoint06Abi } from '../../constants/abis.js'\nimport type { UserOperation } from '../../types/userOperation.js'\nimport { getUserOperationHash } from '../../utils/userOperation/getUserOperationHash.js'\nimport { toSmartAccount } from '../toSmartAccount.js'\nimport type {\n  SmartAccount,\n  SmartAccountImplementation,\n  WebAuthnAccount,\n} from '../types.js'\n\nexport type ToCoinbaseSmartAccountParameters = {\n  address?: Address | undefined\n  client: CoinbaseSmartAccountImplementation['client']\n  ownerIndex?: number | undefined\n  owners: readonly (Address | OneOf<LocalAccount | WebAuthnAccount>)[]\n  nonce?: bigint | undefined\n  version: '1.1' | '1'\n}\n\nexport type ToCoinbaseSmartAccountReturnType = Prettify<\n  SmartAccount<CoinbaseSmartAccountImplementation>\n>\n\nexport type CoinbaseSmartAccountImplementation = Assign<\n  SmartAccountImplementation<\n    typeof entryPoint06Abi,\n    '0.6',\n    { abi: typeof abi; factory: { abi: typeof factoryAbi; address: Address } }\n  >,\n  {\n    decodeCalls: NonNullable<SmartAccountImplementation['decodeCalls']>\n    sign: NonNullable<SmartAccountImplementation['sign']>\n  }\n>\n\nconst factoryAddress = {\n  '1.1': '0xba5ed110efdba3d005bfc882d75358acbbb85842',\n  '1': '0x0ba5ed0c6aa8c49038f819e587e2633c4a9f428a',\n} as const\n\n/**\n * @description Create a Coinbase Smart Account.\n *\n * @param parameters - {@link ToCoinbaseSmartAccountParameters}\n * @returns Coinbase Smart Account. {@link ToCoinbaseSmartAccountReturnType}\n *\n * @example\n * import { toCoinbaseSmartAccount } from 'viem/account-abstraction'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { client } from './client.js'\n *\n * const account = toCoinbaseSmartAccount({\n *   client,\n *   owners: [privateKeyToAccount('0x...')],\n *   version: '1.1',\n * })\n */\nexport async function toCoinbaseSmartAccount(\n  parameters: ToCoinbaseSmartAccountParameters,\n): Promise<ToCoinbaseSmartAccountReturnType> {\n  const {\n    client,\n    ownerIndex = 0,\n    owners,\n    nonce = 0n,\n    version = '1',\n  } = parameters\n\n  let address = parameters.address\n\n  const entryPoint = {\n    abi: entryPoint06Abi,\n    address: entryPoint06Address,\n    version: '0.6',\n  } as const\n  const factory = {\n    abi: factoryAbi,\n    address: factoryAddress[version],\n  } as const\n\n  const owners_bytes = owners.map((owner) => {\n    if (typeof owner === 'string') return pad(owner)\n    if (owner.type === 'webAuthn') return owner.publicKey\n    if (owner.type === 'local') return pad(owner.address)\n    throw new BaseError('invalid owner type')\n  })\n\n  const owner = (() => {\n    const owner = owners[ownerIndex] ?? owners[0]\n    if (typeof owner === 'string')\n      return { address: owner, type: 'address' } as const\n    return owner\n  })()\n\n  return toSmartAccount({\n    client,\n    entryPoint,\n\n    extend: { abi, factory },\n\n    async decodeCalls(data) {\n      const result = decodeFunctionData({\n        abi,\n        data,\n      })\n\n      if (result.functionName === 'execute')\n        return [\n          { to: result.args[0], value: result.args[1], data: result.args[2] },\n        ]\n      if (result.functionName === 'executeBatch')\n        return result.args[0].map((arg) => ({\n          to: arg.target,\n          value: arg.value,\n          data: arg.data,\n        }))\n      throw new BaseError(`unable to decode calls for \"${result.functionName}\"`)\n    },\n\n    async encodeCalls(calls) {\n      if (calls.length === 1)\n        return encodeFunctionData({\n          abi,\n          functionName: 'execute',\n          args: [calls[0].to, calls[0].value ?? 0n, calls[0].data ?? '0x'],\n        })\n      return encodeFunctionData({\n        abi,\n        functionName: 'executeBatch',\n        args: [\n          calls.map((call) => ({\n            data: call.data ?? '0x',\n            target: call.to,\n            value: call.value ?? 0n,\n          })),\n        ],\n      })\n    },\n\n    async getAddress() {\n      address ??= await readContract(client, {\n        ...factory,\n        functionName: 'getAddress',\n        args: [owners_bytes, nonce],\n      })\n      return address\n    },\n\n    async getFactoryArgs() {\n      const factoryData = encodeFunctionData({\n        abi: factory.abi,\n        functionName: 'createAccount',\n        args: [owners_bytes, nonce],\n      })\n      return { factory: factory.address, factoryData }\n    },\n\n    async getStubSignature() {\n      if (owner.type === 'webAuthn')\n        return '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000170000000000000000000000000000000000000000000000000000000000000001949fc7c88032b9fcb5f6efc7a7b8c63668eae9871b765e23123bb473ff57aa831a7c0d9276168ebcc29f2875a0239cffdf2a9cd1c2007c5c77c071db9264df1d000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97630500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008a7b2274797065223a22776562617574686e2e676574222c226368616c6c656e6765223a2273496a396e6164474850596759334b7156384f7a4a666c726275504b474f716d59576f4d57516869467773222c226f726967696e223a2268747470733a2f2f7369676e2e636f696e626173652e636f6d222c2263726f73734f726967696e223a66616c73657d00000000000000000000000000000000000000000000'\n      return wrapSignature({\n        ownerIndex,\n        signature:\n          '0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c',\n      })\n    },\n\n    async sign(parameters) {\n      const address = await this.getAddress()\n\n      const typedData = toReplaySafeTypedData({\n        address,\n        chainId: client.chain!.id,\n        hash: parameters.hash,\n      })\n\n      if (owner.type === 'address') throw new Error('owner cannot sign')\n      const signature = await signTypedData({ owner, typedData })\n\n      return wrapSignature({\n        ownerIndex,\n        signature,\n      })\n    },\n\n    async signMessage(parameters) {\n      const { message } = parameters\n      const address = await this.getAddress()\n\n      const typedData = toReplaySafeTypedData({\n        address,\n        chainId: client.chain!.id,\n        hash: hashMessage(message),\n      })\n\n      if (owner.type === 'address') throw new Error('owner cannot sign')\n      const signature = await signTypedData({ owner, typedData })\n\n      return wrapSignature({\n        ownerIndex,\n        signature,\n      })\n    },\n\n    async signTypedData(parameters) {\n      const { domain, types, primaryType, message } =\n        parameters as TypedDataDefinition<TypedData, string>\n      const address = await this.getAddress()\n\n      const typedData = toReplaySafeTypedData({\n        address,\n        chainId: client.chain!.id,\n        hash: hashTypedData({\n          domain,\n          message,\n          primaryType,\n          types,\n        }),\n      })\n\n      if (owner.type === 'address') throw new Error('owner cannot sign')\n      const signature = await signTypedData({ owner, typedData })\n\n      return wrapSignature({\n        ownerIndex,\n        signature,\n      })\n    },\n\n    async signUserOperation(parameters) {\n      const { chainId = client.chain!.id, ...userOperation } = parameters\n\n      const address = await this.getAddress()\n      const hash = getUserOperationHash({\n        chainId,\n        entryPointAddress: entryPoint.address,\n        entryPointVersion: entryPoint.version,\n        userOperation: {\n          ...(userOperation as unknown as UserOperation),\n          sender: address,\n        },\n      })\n\n      if (owner.type === 'address') throw new Error('owner cannot sign')\n      const signature = await sign({ hash, owner })\n\n      return wrapSignature({\n        ownerIndex,\n        signature,\n      })\n    },\n\n    userOperation: {\n      async estimateGas(userOperation) {\n        if (owner.type !== 'webAuthn') return\n\n        // Accounts with WebAuthn owner require a minimum verification gas limit of 800,000.\n        return {\n          verificationGasLimit: BigInt(\n            Math.max(Number(userOperation.verificationGasLimit ?? 0n), 800_000),\n          ),\n        }\n      },\n    },\n  })\n}\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n// Utilities\n/////////////////////////////////////////////////////////////////////////////////////////////\n\n/** @internal */\nexport async function signTypedData({\n  typedData,\n  owner,\n}: {\n  typedData: TypedDataDefinition\n  owner: OneOf<LocalAccount | WebAuthnAccount>\n}) {\n  if (owner.type === 'local' && owner.signTypedData)\n    return owner.signTypedData(typedData)\n\n  const hash = hashTypedData(typedData)\n  return sign({ hash, owner })\n}\n\n/** @internal */\nexport async function sign({\n  hash,\n  owner,\n}: { hash: Hash; owner: OneOf<LocalAccount | WebAuthnAccount> }) {\n  // WebAuthn Account (Passkey)\n  if (owner.type === 'webAuthn') {\n    const { signature, webauthn } = await owner.sign({\n      hash,\n    })\n    return toWebAuthnSignature({ signature, webauthn })\n  }\n\n  if (owner.sign) return owner.sign({ hash })\n\n  throw new BaseError('`owner` does not support raw sign.')\n}\n\n/** @internal */\nexport function toReplaySafeTypedData({\n  address,\n  chainId,\n  hash,\n}: { address: Address; chainId: number; hash: Hash }) {\n  return {\n    domain: {\n      chainId,\n      name: 'Coinbase Smart Wallet',\n      verifyingContract: address,\n      version: '1',\n    },\n    types: {\n      CoinbaseSmartWalletMessage: [\n        {\n          name: 'hash',\n          type: 'bytes32',\n        },\n      ],\n    },\n    primaryType: 'CoinbaseSmartWalletMessage',\n    message: {\n      hash,\n    },\n  } as const\n}\n\n/** @internal */\nexport function toWebAuthnSignature({\n  webauthn,\n  signature,\n}: {\n  webauthn: WebAuthnP256.SignMetadata\n  signature: Hex\n}) {\n  const { r, s } = Signature.fromHex(signature)\n  return encodeAbiParameters(\n    [\n      {\n        components: [\n          {\n            name: 'authenticatorData',\n            type: 'bytes',\n          },\n          { name: 'clientDataJSON', type: 'bytes' },\n          { name: 'challengeIndex', type: 'uint256' },\n          { name: 'typeIndex', type: 'uint256' },\n          {\n            name: 'r',\n            type: 'uint256',\n          },\n          {\n            name: 's',\n            type: 'uint256',\n          },\n        ],\n        type: 'tuple',\n      },\n    ],\n    [\n      {\n        authenticatorData: webauthn.authenticatorData,\n        clientDataJSON: stringToHex(webauthn.clientDataJSON),\n        challengeIndex: BigInt(webauthn.challengeIndex),\n        typeIndex: BigInt(webauthn.typeIndex),\n        r,\n        s,\n      },\n    ],\n  )\n}\n\n/** @internal */\nexport function wrapSignature(parameters: {\n  ownerIndex?: number | undefined\n  signature: Hex\n}) {\n  const { ownerIndex = 0 } = parameters\n  const signatureData = (() => {\n    if (size(parameters.signature) !== 65) return parameters.signature\n    const signature = parseSignature(parameters.signature)\n    return encodePacked(\n      ['bytes32', 'bytes32', 'uint8'],\n      [signature.r, signature.s, signature.yParity === 0 ? 27 : 28],\n    )\n  })()\n  return encodeAbiParameters(\n    [\n      {\n        components: [\n          {\n            name: 'ownerIndex',\n            type: 'uint8',\n          },\n          {\n            name: 'signatureData',\n            type: 'bytes',\n          },\n        ],\n        type: 'tuple',\n      },\n    ],\n    [\n      {\n        ownerIndex,\n        signatureData,\n      },\n    ],\n  )\n}\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n// Constants\n/////////////////////////////////////////////////////////////////////////////////////////////\n\nconst abi = [\n  { inputs: [], stateMutability: 'nonpayable', type: 'constructor' },\n  {\n    inputs: [{ name: 'owner', type: 'bytes' }],\n    name: 'AlreadyOwner',\n    type: 'error',\n  },\n  { inputs: [], name: 'Initialized', type: 'error' },\n  {\n    inputs: [{ name: 'owner', type: 'bytes' }],\n    name: 'InvalidEthereumAddressOwner',\n    type: 'error',\n  },\n  {\n    inputs: [{ name: 'key', type: 'uint256' }],\n    name: 'InvalidNonceKey',\n    type: 'error',\n  },\n  {\n    inputs: [{ name: 'owner', type: 'bytes' }],\n    name: 'InvalidOwnerBytesLength',\n    type: 'error',\n  },\n  { inputs: [], name: 'LastOwner', type: 'error' },\n  {\n    inputs: [{ name: 'index', type: 'uint256' }],\n    name: 'NoOwnerAtIndex',\n    type: 'error',\n  },\n  {\n    inputs: [{ name: 'ownersRemaining', type: 'uint256' }],\n    name: 'NotLastOwner',\n    type: 'error',\n  },\n  {\n    inputs: [{ name: 'selector', type: 'bytes4' }],\n    name: 'SelectorNotAllowed',\n    type: 'error',\n  },\n  { inputs: [], name: 'Unauthorized', type: 'error' },\n  { inputs: [], name: 'UnauthorizedCallContext', type: 'error' },\n  { inputs: [], name: 'UpgradeFailed', type: 'error' },\n  {\n    inputs: [\n      { name: 'index', type: 'uint256' },\n      { name: 'expectedOwner', type: 'bytes' },\n      { name: 'actualOwner', type: 'bytes' },\n    ],\n    name: 'WrongOwnerAtIndex',\n    type: 'error',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n\n        name: 'index',\n        type: 'uint256',\n      },\n      { indexed: false, name: 'owner', type: 'bytes' },\n    ],\n    name: 'AddOwner',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n\n        name: 'index',\n        type: 'uint256',\n      },\n      { indexed: false, name: 'owner', type: 'bytes' },\n    ],\n    name: 'RemoveOwner',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n\n        name: 'implementation',\n        type: 'address',\n      },\n    ],\n    name: 'Upgraded',\n    type: 'event',\n  },\n  { stateMutability: 'payable', type: 'fallback' },\n  {\n    inputs: [],\n    name: 'REPLAYABLE_NONCE_KEY',\n    outputs: [{ name: '', type: 'uint256' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [{ name: 'owner', type: 'address' }],\n    name: 'addOwnerAddress',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      { name: 'x', type: 'bytes32' },\n      { name: 'y', type: 'bytes32' },\n    ],\n    name: 'addOwnerPublicKey',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [{ name: 'functionSelector', type: 'bytes4' }],\n    name: 'canSkipChainIdValidation',\n    outputs: [{ name: '', type: 'bool' }],\n    stateMutability: 'pure',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'domainSeparator',\n    outputs: [{ name: '', type: 'bytes32' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'eip712Domain',\n    outputs: [\n      { name: 'fields', type: 'bytes1' },\n      { name: 'name', type: 'string' },\n      { name: 'version', type: 'string' },\n      { name: 'chainId', type: 'uint256' },\n      { name: 'verifyingContract', type: 'address' },\n      { name: 'salt', type: 'bytes32' },\n      { name: 'extensions', type: 'uint256[]' },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'entryPoint',\n    outputs: [{ name: '', type: 'address' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      { name: 'target', type: 'address' },\n      { name: 'value', type: 'uint256' },\n      { name: 'data', type: 'bytes' },\n    ],\n    name: 'execute',\n    outputs: [],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          { name: 'target', type: 'address' },\n          { name: 'value', type: 'uint256' },\n          { name: 'data', type: 'bytes' },\n        ],\n\n        name: 'calls',\n        type: 'tuple[]',\n      },\n    ],\n    name: 'executeBatch',\n    outputs: [],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [{ name: 'calls', type: 'bytes[]' }],\n    name: 'executeWithoutChainIdValidation',\n    outputs: [],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          { name: 'sender', type: 'address' },\n          { name: 'nonce', type: 'uint256' },\n          { name: 'initCode', type: 'bytes' },\n          { name: 'callData', type: 'bytes' },\n          { name: 'callGasLimit', type: 'uint256' },\n          {\n            name: 'verificationGasLimit',\n            type: 'uint256',\n          },\n          {\n            name: 'preVerificationGas',\n            type: 'uint256',\n          },\n          { name: 'maxFeePerGas', type: 'uint256' },\n          {\n            name: 'maxPriorityFeePerGas',\n            type: 'uint256',\n          },\n          { name: 'paymasterAndData', type: 'bytes' },\n          { name: 'signature', type: 'bytes' },\n        ],\n\n        name: 'userOp',\n        type: 'tuple',\n      },\n    ],\n    name: 'getUserOpHashWithoutChainId',\n    outputs: [{ name: '', type: 'bytes32' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'implementation',\n    outputs: [{ name: '$', type: 'address' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [{ name: 'owners', type: 'bytes[]' }],\n    name: 'initialize',\n    outputs: [],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [{ name: 'account', type: 'address' }],\n    name: 'isOwnerAddress',\n    outputs: [{ name: '', type: 'bool' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [{ name: 'account', type: 'bytes' }],\n    name: 'isOwnerBytes',\n    outputs: [{ name: '', type: 'bool' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      { name: 'x', type: 'bytes32' },\n      { name: 'y', type: 'bytes32' },\n    ],\n    name: 'isOwnerPublicKey',\n    outputs: [{ name: '', type: 'bool' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      { name: 'hash', type: 'bytes32' },\n      { name: 'signature', type: 'bytes' },\n    ],\n    name: 'isValidSignature',\n    outputs: [{ name: 'result', type: 'bytes4' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'nextOwnerIndex',\n    outputs: [{ name: '', type: 'uint256' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [{ name: 'index', type: 'uint256' }],\n    name: 'ownerAtIndex',\n    outputs: [{ name: '', type: 'bytes' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'ownerCount',\n    outputs: [{ name: '', type: 'uint256' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'proxiableUUID',\n    outputs: [{ name: '', type: 'bytes32' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      { name: 'index', type: 'uint256' },\n      { name: 'owner', type: 'bytes' },\n    ],\n    name: 'removeLastOwner',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      { name: 'index', type: 'uint256' },\n      { name: 'owner', type: 'bytes' },\n    ],\n    name: 'removeOwnerAtIndex',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'removedOwnersCount',\n    outputs: [{ name: '', type: 'uint256' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [{ name: 'hash', type: 'bytes32' }],\n    name: 'replaySafeHash',\n    outputs: [{ name: '', type: 'bytes32' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      { name: 'newImplementation', type: 'address' },\n      { name: 'data', type: 'bytes' },\n    ],\n    name: 'upgradeToAndCall',\n    outputs: [],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          { name: 'sender', type: 'address' },\n          { name: 'nonce', type: 'uint256' },\n          { name: 'initCode', type: 'bytes' },\n          { name: 'callData', type: 'bytes' },\n          { name: 'callGasLimit', type: 'uint256' },\n          {\n            name: 'verificationGasLimit',\n            type: 'uint256',\n          },\n          {\n            name: 'preVerificationGas',\n            type: 'uint256',\n          },\n          { name: 'maxFeePerGas', type: 'uint256' },\n          {\n            name: 'maxPriorityFeePerGas',\n            type: 'uint256',\n          },\n          { name: 'paymasterAndData', type: 'bytes' },\n          { name: 'signature', type: 'bytes' },\n        ],\n\n        name: 'userOp',\n        type: 'tuple',\n      },\n      { name: 'userOpHash', type: 'bytes32' },\n      { name: 'missingAccountFunds', type: 'uint256' },\n    ],\n    name: 'validateUserOp',\n    outputs: [{ name: 'validationData', type: 'uint256' }],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  { stateMutability: 'payable', type: 'receive' },\n] as const\n\nconst factoryAbi = [\n  {\n    inputs: [{ name: 'implementation_', type: 'address' }],\n    stateMutability: 'payable',\n    type: 'constructor',\n  },\n  { inputs: [], name: 'OwnerRequired', type: 'error' },\n  {\n    inputs: [\n      { name: 'owners', type: 'bytes[]' },\n      { name: 'nonce', type: 'uint256' },\n    ],\n    name: 'createAccount',\n    outputs: [\n      {\n        name: 'account',\n        type: 'address',\n      },\n    ],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      { name: 'owners', type: 'bytes[]' },\n      { name: 'nonce', type: 'uint256' },\n    ],\n    name: 'getAddress',\n    outputs: [{ name: '', type: 'address' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'implementation',\n    outputs: [{ name: '', type: 'address' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'initCodeHash',\n    outputs: [{ name: '', type: 'bytes32' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n] as const\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}