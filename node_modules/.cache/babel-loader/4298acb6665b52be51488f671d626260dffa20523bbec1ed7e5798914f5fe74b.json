{"ast":null,"code":"import { toPackedUserOperation } from './toPackedUserOperation.js';\nconst types = {\n  PackedUserOperation: [{\n    type: 'address',\n    name: 'sender'\n  }, {\n    type: 'uint256',\n    name: 'nonce'\n  }, {\n    type: 'bytes',\n    name: 'initCode'\n  }, {\n    type: 'bytes',\n    name: 'callData'\n  }, {\n    type: 'bytes32',\n    name: 'accountGasLimits'\n  }, {\n    type: 'uint256',\n    name: 'preVerificationGas'\n  }, {\n    type: 'bytes32',\n    name: 'gasFees'\n  }, {\n    type: 'bytes',\n    name: 'paymasterAndData'\n  }]\n};\nexport function getUserOperationTypedData(parameters) {\n  const {\n    chainId,\n    entryPointAddress,\n    userOperation\n  } = parameters;\n  const packedUserOp = toPackedUserOperation(userOperation);\n  return {\n    types,\n    primaryType: 'PackedUserOperation',\n    domain: {\n      name: 'ERC4337',\n      version: '1',\n      chainId,\n      verifyingContract: entryPointAddress\n    },\n    message: packedUserOp\n  };\n}","map":{"version":3,"names":["toPackedUserOperation","types","PackedUserOperation","type","name","getUserOperationTypedData","parameters","chainId","entryPointAddress","userOperation","packedUserOp","primaryType","domain","version","verifyingContract","message"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/viem/account-abstraction/utils/userOperation/getUserOperationTypedData.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport type { TypedDataDefinition } from '../../../types/typedData.js'\nimport type { UserOperation } from '../../types/userOperation.js'\nimport { toPackedUserOperation } from './toPackedUserOperation.js'\n\nexport type GetUserOperationTypedDataParameters = {\n  chainId: number\n  entryPointAddress: Address\n  userOperation: UserOperation<'0.8'>\n}\n\nexport type GetUserOperationTypedDataReturnType = TypedDataDefinition<\n  typeof types,\n  'PackedUserOperation'\n>\n\nconst types = {\n  PackedUserOperation: [\n    { type: 'address', name: 'sender' },\n    { type: 'uint256', name: 'nonce' },\n    { type: 'bytes', name: 'initCode' },\n    { type: 'bytes', name: 'callData' },\n    { type: 'bytes32', name: 'accountGasLimits' },\n    { type: 'uint256', name: 'preVerificationGas' },\n    { type: 'bytes32', name: 'gasFees' },\n    { type: 'bytes', name: 'paymasterAndData' },\n  ],\n} as const\n\nexport function getUserOperationTypedData(\n  parameters: GetUserOperationTypedDataParameters,\n): GetUserOperationTypedDataReturnType {\n  const { chainId, entryPointAddress, userOperation } = parameters\n\n  const packedUserOp = toPackedUserOperation(userOperation)\n\n  return {\n    types,\n    primaryType: 'PackedUserOperation',\n    domain: {\n      name: 'ERC4337',\n      version: '1',\n      chainId,\n      verifyingContract: entryPointAddress,\n    },\n    message: packedUserOp,\n  }\n}\n"],"mappings":"AAIA,SAASA,qBAAqB,QAAQ,4BAA4B;AAalE,MAAMC,KAAK,GAAG;EACZC,mBAAmB,EAAE,CACnB;IAAEC,IAAI,EAAE,SAAS;IAAEC,IAAI,EAAE;EAAQ,CAAE,EACnC;IAAED,IAAI,EAAE,SAAS;IAAEC,IAAI,EAAE;EAAO,CAAE,EAClC;IAAED,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE;EAAU,CAAE,EACnC;IAAED,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE;EAAU,CAAE,EACnC;IAAED,IAAI,EAAE,SAAS;IAAEC,IAAI,EAAE;EAAkB,CAAE,EAC7C;IAAED,IAAI,EAAE,SAAS;IAAEC,IAAI,EAAE;EAAoB,CAAE,EAC/C;IAAED,IAAI,EAAE,SAAS;IAAEC,IAAI,EAAE;EAAS,CAAE,EACpC;IAAED,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE;EAAkB,CAAE;CAErC;AAEV,OAAM,SAAUC,yBAAyBA,CACvCC,UAA+C;EAE/C,MAAM;IAAEC,OAAO;IAAEC,iBAAiB;IAAEC;EAAa,CAAE,GAAGH,UAAU;EAEhE,MAAMI,YAAY,GAAGV,qBAAqB,CAACS,aAAa,CAAC;EAEzD,OAAO;IACLR,KAAK;IACLU,WAAW,EAAE,qBAAqB;IAClCC,MAAM,EAAE;MACNR,IAAI,EAAE,SAAS;MACfS,OAAO,EAAE,GAAG;MACZN,OAAO;MACPO,iBAAiB,EAAEN;KACpB;IACDO,OAAO,EAAEL;GACV;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}