{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAccessList = createAccessList;\nconst parseAccount_js_1 = require(\"../../accounts/utils/parseAccount.js\");\nconst toHex_js_1 = require(\"../../utils/encoding/toHex.js\");\nconst getCallError_js_1 = require(\"../../utils/errors/getCallError.js\");\nconst extract_js_1 = require(\"../../utils/formatters/extract.js\");\nconst transactionRequest_js_1 = require(\"../../utils/formatters/transactionRequest.js\");\nconst assertRequest_js_1 = require(\"../../utils/transaction/assertRequest.js\");\nasync function createAccessList(client, args) {\n  const {\n    account: account_ = client.account,\n    blockNumber,\n    blockTag = 'latest',\n    blobs,\n    data,\n    gas,\n    gasPrice,\n    maxFeePerBlobGas,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    to,\n    value,\n    ...rest\n  } = args;\n  const account = account_ ? (0, parseAccount_js_1.parseAccount)(account_) : undefined;\n  try {\n    (0, assertRequest_js_1.assertRequest)(args);\n    const blockNumberHex = typeof blockNumber === 'bigint' ? (0, toHex_js_1.numberToHex)(blockNumber) : undefined;\n    const block = blockNumberHex || blockTag;\n    const chainFormat = client.chain?.formatters?.transactionRequest?.format;\n    const format = chainFormat || transactionRequest_js_1.formatTransactionRequest;\n    const request = format({\n      ...(0, extract_js_1.extract)(rest, {\n        format: chainFormat\n      }),\n      from: account?.address,\n      blobs,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerBlobGas,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      to,\n      value\n    });\n    const response = await client.request({\n      method: 'eth_createAccessList',\n      params: [request, block]\n    });\n    return {\n      accessList: response.accessList,\n      gasUsed: BigInt(response.gasUsed)\n    };\n  } catch (err) {\n    throw (0, getCallError_js_1.getCallError)(err, {\n      ...args,\n      account,\n      chain: client.chain\n    });\n  }\n}","map":{"version":3,"names":["exports","createAccessList","parseAccount_js_1","require","toHex_js_1","getCallError_js_1","extract_js_1","transactionRequest_js_1","assertRequest_js_1","client","args","account","account_","blockNumber","blockTag","blobs","data","gas","gasPrice","maxFeePerBlobGas","maxFeePerGas","maxPriorityFeePerGas","to","value","rest","parseAccount","undefined","assertRequest","blockNumberHex","numberToHex","block","chainFormat","chain","formatters","transactionRequest","format","formatTransactionRequest","request","extract","from","address","response","method","params","accessList","gasUsed","BigInt","err","getCallError"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/viem/actions/public/createAccessList.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport type { Account } from '../../accounts/types.js'\nimport {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../../accounts/utils/parseAccount.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RpcTransactionRequest } from '../../types/rpc.js'\nimport type { AccessList, TransactionRequest } from '../../types/transaction.js'\nimport type { ExactPartial, Prettify, UnionOmit } from '../../types/utils.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\nimport {\n  type GetCallErrorReturnType,\n  getCallError,\n} from '../../utils/errors/getCallError.js'\nimport { extract } from '../../utils/formatters/extract.js'\nimport {\n  type FormatTransactionRequestErrorType,\n  type FormattedTransactionRequest,\n  formatTransactionRequest,\n} from '../../utils/formatters/transactionRequest.js'\nimport { assertRequest } from '../../utils/transaction/assertRequest.js'\nimport type {\n  AssertRequestErrorType,\n  AssertRequestParameters,\n} from '../../utils/transaction/assertRequest.js'\n\nexport type CreateAccessListParameters<\n  chain extends Chain | undefined = Chain | undefined,\n> = UnionOmit<\n  FormattedTransactionRequest<chain>,\n  'from' | 'nonce' | 'accessList'\n> & {\n  /** Account attached to the call (msg.sender). */\n  account?: Account | Address | undefined\n} & (\n    | {\n        /** The balance of the account at a block number. */\n        blockNumber?: bigint | undefined\n        blockTag?: undefined\n      }\n    | {\n        blockNumber?: undefined\n        /**\n         * The balance of the account at a block tag.\n         * @default 'latest'\n         */\n        blockTag?: BlockTag | undefined\n      }\n  )\n\nexport type CreateAccessListReturnType = Prettify<{\n  accessList: AccessList\n  gasUsed: bigint\n}>\n\nexport type CreateAccessListErrorType = GetCallErrorReturnType<\n  | ParseAccountErrorType\n  | AssertRequestErrorType\n  | NumberToHexErrorType\n  | FormatTransactionRequestErrorType\n  | RequestErrorType\n>\n\n/**\n * Creates an EIP-2930 access list.\n *\n * - Docs: https://viem.sh/docs/actions/public/createAccessList\n * - JSON-RPC Methods: `eth_createAccessList`\n *\n * @param client - Client to use\n * @param parameters - {@link CreateAccessListParameters}\n * @returns The access list. {@link CreateAccessListReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createAccessList } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const data = await createAccessList(client, {\n *   account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n *   data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n * })\n */\nexport async function createAccessList<chain extends Chain | undefined>(\n  client: Client<Transport, chain>,\n  args: CreateAccessListParameters<chain>,\n): Promise<CreateAccessListReturnType> {\n  const {\n    account: account_ = client.account,\n    blockNumber,\n    blockTag = 'latest',\n    blobs,\n    data,\n    gas,\n    gasPrice,\n    maxFeePerBlobGas,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    to,\n    value,\n    ...rest\n  } = args\n  const account = account_ ? parseAccount(account_) : undefined\n\n  try {\n    assertRequest(args as AssertRequestParameters)\n\n    const blockNumberHex =\n      typeof blockNumber === 'bigint' ? numberToHex(blockNumber) : undefined\n    const block = blockNumberHex || blockTag\n\n    const chainFormat = client.chain?.formatters?.transactionRequest?.format\n    const format = chainFormat || formatTransactionRequest\n\n    const request = format({\n      // Pick out extra data that might exist on the chain's transaction request type.\n      ...extract(rest, { format: chainFormat }),\n      from: account?.address,\n      blobs,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerBlobGas,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      to,\n      value,\n    } as TransactionRequest) as TransactionRequest\n\n    const response = await client.request({\n      method: 'eth_createAccessList',\n      params: [request as ExactPartial<RpcTransactionRequest>, block],\n    })\n    return {\n      accessList: response.accessList,\n      gasUsed: BigInt(response.gasUsed),\n    }\n  } catch (err) {\n    throw getCallError(err as ErrorType, {\n      ...args,\n      account,\n      chain: client.chain,\n    })\n  }\n}\n"],"mappings":";;;;;AAkGAA,OAAA,CAAAC,gBAAA,GAAAA,gBAAA;AA/FA,MAAAC,iBAAA,GAAAC,OAAA;AAaA,MAAAC,UAAA,GAAAD,OAAA;AAIA,MAAAE,iBAAA,GAAAF,OAAA;AAIA,MAAAG,YAAA,GAAAH,OAAA;AACA,MAAAI,uBAAA,GAAAJ,OAAA;AAKA,MAAAK,kBAAA,GAAAL,OAAA;AAoEO,eAAeF,gBAAgBA,CACpCQ,MAAgC,EAChCC,IAAuC;EAEvC,MAAM;IACJC,OAAO,EAAEC,QAAQ,GAAGH,MAAM,CAACE,OAAO;IAClCE,WAAW;IACXC,QAAQ,GAAG,QAAQ;IACnBC,KAAK;IACLC,IAAI;IACJC,GAAG;IACHC,QAAQ;IACRC,gBAAgB;IAChBC,YAAY;IACZC,oBAAoB;IACpBC,EAAE;IACFC,KAAK;IACL,GAAGC;EAAI,CACR,GAAGd,IAAI;EACR,MAAMC,OAAO,GAAGC,QAAQ,GAAG,IAAAV,iBAAA,CAAAuB,YAAY,EAACb,QAAQ,CAAC,GAAGc,SAAS;EAE7D,IAAI;IACF,IAAAlB,kBAAA,CAAAmB,aAAa,EAACjB,IAA+B,CAAC;IAE9C,MAAMkB,cAAc,GAClB,OAAOf,WAAW,KAAK,QAAQ,GAAG,IAAAT,UAAA,CAAAyB,WAAW,EAAChB,WAAW,CAAC,GAAGa,SAAS;IACxE,MAAMI,KAAK,GAAGF,cAAc,IAAId,QAAQ;IAExC,MAAMiB,WAAW,GAAGtB,MAAM,CAACuB,KAAK,EAAEC,UAAU,EAAEC,kBAAkB,EAAEC,MAAM;IACxE,MAAMA,MAAM,GAAGJ,WAAW,IAAIxB,uBAAA,CAAA6B,wBAAwB;IAEtD,MAAMC,OAAO,GAAGF,MAAM,CAAC;MAErB,GAAG,IAAA7B,YAAA,CAAAgC,OAAO,EAACd,IAAI,EAAE;QAAEW,MAAM,EAAEJ;MAAW,CAAE,CAAC;MACzCQ,IAAI,EAAE5B,OAAO,EAAE6B,OAAO;MACtBzB,KAAK;MACLC,IAAI;MACJC,GAAG;MACHC,QAAQ;MACRC,gBAAgB;MAChBC,YAAY;MACZC,oBAAoB;MACpBC,EAAE;MACFC;KACqB,CAAuB;IAE9C,MAAMkB,QAAQ,GAAG,MAAMhC,MAAM,CAAC4B,OAAO,CAAC;MACpCK,MAAM,EAAE,sBAAsB;MAC9BC,MAAM,EAAE,CAACN,OAA8C,EAAEP,KAAK;KAC/D,CAAC;IACF,OAAO;MACLc,UAAU,EAAEH,QAAQ,CAACG,UAAU;MAC/BC,OAAO,EAAEC,MAAM,CAACL,QAAQ,CAACI,OAAO;KACjC;EACH,CAAC,CAAC,OAAOE,GAAG,EAAE;IACZ,MAAM,IAAA1C,iBAAA,CAAA2C,YAAY,EAACD,GAAgB,EAAE;MACnC,GAAGrC,IAAI;MACPC,OAAO;MACPqB,KAAK,EAAEvB,MAAM,CAACuB;KACf,CAAC;EACJ;AACF","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}