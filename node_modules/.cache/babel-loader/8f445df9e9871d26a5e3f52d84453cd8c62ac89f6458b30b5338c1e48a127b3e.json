{"ast":null,"code":"import { proxy, subscribe as sub } from 'valtio/vanilla';\nimport { proxyMap, subscribeKey as subKey } from 'valtio/vanilla/utils';\nimport { ConstantsUtil as CommonConstantsUtil, NetworkUtil } from '@reown/appkit-common';\nimport { ConstantsUtil } from '../utils/ConstantsUtil.js';\nimport { CoreHelperUtil } from '../utils/CoreHelperUtil.js';\nimport { StorageUtil } from '../utils/StorageUtil.js';\nimport { withErrorBoundary } from '../utils/withErrorBoundary.js';\nimport { AccountController } from './AccountController.js';\nimport { ConnectionController } from './ConnectionController.js';\nimport { ConnectorController } from './ConnectorController.js';\nimport { EventsController } from './EventsController.js';\nimport { ModalController } from './ModalController.js';\nimport { OptionsController } from './OptionsController.js';\nimport { PublicStateController } from './PublicStateController.js';\nimport { RouterController } from './RouterController.js';\nimport { SendController } from './SendController.js';\n// -- Constants ----------------------------------------- //\nconst accountState = {\n  currentTab: 0,\n  tokenBalance: [],\n  smartAccountDeployed: false,\n  addressLabels: new Map(),\n  allAccounts: [],\n  user: undefined\n};\nconst networkState = {\n  caipNetwork: undefined,\n  supportsAllNetworks: true,\n  smartAccountEnabledNetworks: []\n};\n// -- State --------------------------------------------- //\nconst state = proxy({\n  chains: proxyMap(),\n  activeCaipAddress: undefined,\n  activeChain: undefined,\n  activeCaipNetwork: undefined,\n  noAdapters: false,\n  universalAdapter: {\n    networkControllerClient: undefined,\n    connectionControllerClient: undefined\n  },\n  isSwitchingNamespace: false\n});\n// -- Controller ---------------------------------------- //\nconst controller = {\n  state,\n  subscribe(callback) {\n    return sub(state, () => {\n      callback(state);\n    });\n  },\n  subscribeKey(key, callback) {\n    return subKey(state, key, callback);\n  },\n  subscribeChainProp(property, callback, chain) {\n    let prev = undefined;\n    return sub(state.chains, () => {\n      const activeChain = chain || state.activeChain;\n      if (activeChain) {\n        const nextValue = state.chains.get(activeChain)?.[property];\n        if (prev !== nextValue) {\n          prev = nextValue;\n          callback(nextValue);\n        }\n      }\n    });\n  },\n  initialize(adapters, caipNetworks, clients) {\n    const {\n      chainId: activeChainId,\n      namespace: activeNamespace\n    } = StorageUtil.getActiveNetworkProps();\n    const activeCaipNetwork = caipNetworks?.find(network => network.id.toString() === activeChainId?.toString());\n    const defaultAdapter = adapters.find(adapter => adapter?.namespace === activeNamespace);\n    const adapterToActivate = defaultAdapter || adapters?.[0];\n    const namespacesFromAdapters = adapters.map(a => a.namespace).filter(n => n !== undefined);\n    /**\n     * If the AppKit is in embedded mode (for Demo app), we should get the available namespaces from the adapters.\n     */\n    const namespaces = OptionsController.state.enableEmbedded ? new Set([...namespacesFromAdapters]) : new Set([...(caipNetworks?.map(network => network.chainNamespace) ?? [])]);\n    if (adapters?.length === 0 || !adapterToActivate) {\n      state.noAdapters = true;\n    }\n    if (!state.noAdapters) {\n      state.activeChain = adapterToActivate?.namespace;\n      state.activeCaipNetwork = activeCaipNetwork;\n      ChainController.setChainNetworkData(adapterToActivate?.namespace, {\n        caipNetwork: activeCaipNetwork\n      });\n      if (state.activeChain) {\n        PublicStateController.set({\n          activeChain: adapterToActivate?.namespace\n        });\n      }\n    }\n    namespaces.forEach(namespace => {\n      const namespaceNetworks = caipNetworks?.filter(network => network.chainNamespace === namespace);\n      ChainController.state.chains.set(namespace, {\n        namespace,\n        networkState: proxy({\n          ...networkState,\n          caipNetwork: namespaceNetworks?.[0]\n        }),\n        accountState: proxy(accountState),\n        caipNetworks: namespaceNetworks ?? [],\n        ...clients\n      });\n      ChainController.setRequestedCaipNetworks(namespaceNetworks ?? [], namespace);\n    });\n  },\n  removeAdapter(namespace) {\n    if (state.activeChain === namespace) {\n      const nextAdapter = Array.from(state.chains.entries()).find(([chainNamespace]) => chainNamespace !== namespace);\n      if (nextAdapter) {\n        const caipNetwork = nextAdapter[1]?.caipNetworks?.[0];\n        if (caipNetwork) {\n          ChainController.setActiveCaipNetwork(caipNetwork);\n        }\n      }\n    }\n    state.chains.delete(namespace);\n  },\n  addAdapter(adapter, {\n    networkControllerClient,\n    connectionControllerClient\n  }, caipNetworks) {\n    state.chains.set(adapter.namespace, {\n      namespace: adapter.namespace,\n      networkState: {\n        ...networkState,\n        caipNetwork: caipNetworks[0]\n      },\n      accountState,\n      caipNetworks,\n      connectionControllerClient,\n      networkControllerClient\n    });\n    ChainController.setRequestedCaipNetworks(caipNetworks?.filter(caipNetwork => caipNetwork.chainNamespace === adapter.namespace) ?? [], adapter.namespace);\n  },\n  addNetwork(network) {\n    const chainAdapter = state.chains.get(network.chainNamespace);\n    if (chainAdapter) {\n      const newNetworks = [...(chainAdapter.caipNetworks || [])];\n      if (!chainAdapter.caipNetworks?.find(caipNetwork => caipNetwork.id === network.id)) {\n        newNetworks.push(network);\n      }\n      state.chains.set(network.chainNamespace, {\n        ...chainAdapter,\n        caipNetworks: newNetworks\n      });\n      ChainController.setRequestedCaipNetworks(newNetworks, network.chainNamespace);\n      ConnectorController.filterByNamespace(network.chainNamespace, true);\n    }\n  },\n  removeNetwork(namespace, networkId) {\n    const chainAdapter = state.chains.get(namespace);\n    if (chainAdapter) {\n      // Check if network being removed is active network\n      const isActiveNetwork = state.activeCaipNetwork?.id === networkId;\n      // Filter out the network being removed\n      const newCaipNetworksOfAdapter = [...(chainAdapter.caipNetworks?.filter(network => network.id !== networkId) || [])];\n      // If active network was removed and there are other networks available, switch to first one\n      if (isActiveNetwork && chainAdapter?.caipNetworks?.[0]) {\n        ChainController.setActiveCaipNetwork(chainAdapter.caipNetworks[0]);\n      }\n      state.chains.set(namespace, {\n        ...chainAdapter,\n        caipNetworks: newCaipNetworksOfAdapter\n      });\n      ChainController.setRequestedCaipNetworks(newCaipNetworksOfAdapter || [], namespace);\n      if (newCaipNetworksOfAdapter.length === 0) {\n        ConnectorController.filterByNamespace(namespace, false);\n      }\n    }\n  },\n  setAdapterNetworkState(chain, props) {\n    const chainAdapter = state.chains.get(chain);\n    if (chainAdapter) {\n      chainAdapter.networkState = {\n        ...(chainAdapter.networkState || networkState),\n        ...props\n      };\n      state.chains.set(chain, chainAdapter);\n    }\n  },\n  setChainAccountData(chain, accountProps, _unknown = true) {\n    if (!chain) {\n      throw new Error('Chain is required to update chain account data');\n    }\n    const chainAdapter = state.chains.get(chain);\n    if (chainAdapter) {\n      const newAccountState = {\n        ...(chainAdapter.accountState || accountState),\n        ...accountProps\n      };\n      state.chains.set(chain, {\n        ...chainAdapter,\n        accountState: newAccountState\n      });\n      if (state.chains.size === 1 || state.activeChain === chain) {\n        if (accountProps.caipAddress) {\n          state.activeCaipAddress = accountProps.caipAddress;\n        }\n        AccountController.replaceState(newAccountState);\n      }\n    }\n  },\n  setChainNetworkData(chain, networkProps) {\n    if (!chain) {\n      return;\n    }\n    const chainAdapter = state.chains.get(chain);\n    if (chainAdapter) {\n      const newNetworkState = {\n        ...(chainAdapter.networkState || networkState),\n        ...networkProps\n      };\n      state.chains.set(chain, {\n        ...chainAdapter,\n        networkState: newNetworkState\n      });\n    }\n  },\n  // eslint-disable-next-line max-params\n  setAccountProp(prop, value, chain, replaceState = true) {\n    ChainController.setChainAccountData(chain, {\n      [prop]: value\n    }, replaceState);\n    if (prop === 'status' && value === 'disconnected' && chain) {\n      ConnectorController.removeConnectorId(chain);\n    }\n  },\n  setActiveNamespace(chain) {\n    state.activeChain = chain;\n    const newAdapter = chain ? state.chains.get(chain) : undefined;\n    const caipNetwork = newAdapter?.networkState?.caipNetwork;\n    if (caipNetwork?.id && chain) {\n      state.activeCaipAddress = newAdapter?.accountState?.caipAddress;\n      state.activeCaipNetwork = caipNetwork;\n      ChainController.setChainNetworkData(chain, {\n        caipNetwork\n      });\n      StorageUtil.setActiveCaipNetworkId(caipNetwork?.caipNetworkId);\n      PublicStateController.set({\n        activeChain: chain,\n        selectedNetworkId: caipNetwork?.caipNetworkId\n      });\n    }\n  },\n  setActiveCaipNetwork(caipNetwork) {\n    if (!caipNetwork) {\n      return;\n    }\n    if (state.activeChain !== caipNetwork.chainNamespace) {\n      ChainController.setIsSwitchingNamespace(true);\n    }\n    const newAdapter = state.chains.get(caipNetwork.chainNamespace);\n    state.activeChain = caipNetwork.chainNamespace;\n    state.activeCaipNetwork = caipNetwork;\n    ChainController.setChainNetworkData(caipNetwork.chainNamespace, {\n      caipNetwork\n    });\n    if (newAdapter?.accountState?.address) {\n      state.activeCaipAddress = `${caipNetwork.chainNamespace}:${caipNetwork.id}:${newAdapter?.accountState?.address}`;\n    } else {\n      state.activeCaipAddress = undefined;\n    }\n    // Update the chain's account state with the new caip address value\n    ChainController.setAccountProp('caipAddress', state.activeCaipAddress, caipNetwork.chainNamespace);\n    if (newAdapter) {\n      AccountController.replaceState(newAdapter.accountState);\n    }\n    // Reset send state when switching networks\n    SendController.resetSend();\n    PublicStateController.set({\n      activeChain: state.activeChain,\n      selectedNetworkId: state.activeCaipNetwork?.caipNetworkId\n    });\n    StorageUtil.setActiveCaipNetworkId(caipNetwork.caipNetworkId);\n    const isSupported = ChainController.checkIfSupportedNetwork(caipNetwork.chainNamespace);\n    if (!isSupported && OptionsController.state.enableNetworkSwitch && !OptionsController.state.allowUnsupportedChain && !ConnectionController.state.wcBasic) {\n      ChainController.showUnsupportedChainUI();\n    }\n  },\n  addCaipNetwork(caipNetwork) {\n    if (!caipNetwork) {\n      return;\n    }\n    const chain = state.chains.get(caipNetwork.chainNamespace);\n    if (chain) {\n      chain?.caipNetworks?.push(caipNetwork);\n    }\n  },\n  async switchActiveNamespace(namespace) {\n    if (!namespace) {\n      return;\n    }\n    const isDifferentChain = namespace !== ChainController.state.activeChain;\n    const caipNetworkOfNamespace = ChainController.getNetworkData(namespace)?.caipNetwork;\n    const firstNetworkWithChain = ChainController.getCaipNetworkByNamespace(namespace, caipNetworkOfNamespace?.id);\n    if (isDifferentChain && firstNetworkWithChain) {\n      await ChainController.switchActiveNetwork(firstNetworkWithChain);\n    }\n  },\n  async switchActiveNetwork(network) {\n    const activeAdapter = ChainController.state.chains.get(ChainController.state.activeChain);\n    const unsupportedNetwork = !activeAdapter?.caipNetworks?.some(caipNetwork => caipNetwork.id === state.activeCaipNetwork?.id);\n    const networkControllerClient = ChainController.getNetworkControllerClient(network.chainNamespace);\n    if (networkControllerClient) {\n      try {\n        await networkControllerClient.switchCaipNetwork(network);\n        if (unsupportedNetwork) {\n          ModalController.close();\n        }\n      } catch (error) {\n        RouterController.goBack();\n      }\n      EventsController.sendEvent({\n        type: 'track',\n        event: 'SWITCH_NETWORK',\n        properties: {\n          network: network.caipNetworkId\n        }\n      });\n    }\n  },\n  getNetworkControllerClient(chainNamespace) {\n    const chain = chainNamespace || state.activeChain;\n    const chainAdapter = state.chains.get(chain);\n    if (!chainAdapter) {\n      throw new Error('Chain adapter not found');\n    }\n    if (!chainAdapter.networkControllerClient) {\n      throw new Error('NetworkController client not set');\n    }\n    return chainAdapter.networkControllerClient;\n  },\n  getConnectionControllerClient(_chain) {\n    const chain = _chain || state.activeChain;\n    if (!chain) {\n      throw new Error('Chain is required to get connection controller client');\n    }\n    const chainAdapter = state.chains.get(chain);\n    if (!chainAdapter?.connectionControllerClient) {\n      throw new Error('ConnectionController client not set');\n    }\n    return chainAdapter.connectionControllerClient;\n  },\n  getAccountProp(key, _chain) {\n    let chain = state.activeChain;\n    if (_chain) {\n      chain = _chain;\n    }\n    if (!chain) {\n      return undefined;\n    }\n    const chainAccountState = state.chains.get(chain)?.accountState;\n    if (!chainAccountState) {\n      return undefined;\n    }\n    return chainAccountState[key];\n  },\n  getNetworkProp(key, namespace) {\n    const chainNetworkState = state.chains.get(namespace)?.networkState;\n    if (!chainNetworkState) {\n      return undefined;\n    }\n    return chainNetworkState[key];\n  },\n  getRequestedCaipNetworks(chainToFilter) {\n    const adapter = state.chains.get(chainToFilter);\n    const {\n      approvedCaipNetworkIds = [],\n      requestedCaipNetworks = []\n    } = adapter?.networkState || {};\n    const sortedNetworks = CoreHelperUtil.sortRequestedNetworks(approvedCaipNetworkIds, requestedCaipNetworks);\n    return sortedNetworks;\n  },\n  getAllRequestedCaipNetworks() {\n    const requestedCaipNetworks = [];\n    state.chains.forEach(chainAdapter => {\n      const caipNetworks = ChainController.getRequestedCaipNetworks(chainAdapter.namespace);\n      requestedCaipNetworks.push(...caipNetworks);\n    });\n    return requestedCaipNetworks;\n  },\n  setRequestedCaipNetworks(caipNetworks, chain) {\n    ChainController.setAdapterNetworkState(chain, {\n      requestedCaipNetworks: caipNetworks\n    });\n    const allRequestedCaipNetworks = ChainController.getAllRequestedCaipNetworks();\n    const namespaces = allRequestedCaipNetworks.map(network => network.chainNamespace);\n    const uniqueNamespaces = Array.from(new Set(namespaces));\n    ConnectorController.filterByNamespaces(uniqueNamespaces);\n  },\n  getAllApprovedCaipNetworkIds() {\n    const approvedCaipNetworkIds = [];\n    state.chains.forEach(chainAdapter => {\n      const approvedIds = ChainController.getApprovedCaipNetworkIds(chainAdapter.namespace);\n      approvedCaipNetworkIds.push(...approvedIds);\n    });\n    return approvedCaipNetworkIds;\n  },\n  getActiveCaipNetwork() {\n    return state.activeCaipNetwork;\n  },\n  getActiveCaipAddress() {\n    return state.activeCaipAddress;\n  },\n  getApprovedCaipNetworkIds(namespace) {\n    const adapter = state.chains.get(namespace);\n    const approvedCaipNetworkIds = adapter?.networkState?.approvedCaipNetworkIds || [];\n    return approvedCaipNetworkIds;\n  },\n  async setApprovedCaipNetworksData(namespace) {\n    const networkControllerClient = ChainController.getNetworkControllerClient();\n    const data = await networkControllerClient?.getApprovedCaipNetworksData();\n    ChainController.setAdapterNetworkState(namespace, {\n      approvedCaipNetworkIds: data?.approvedCaipNetworkIds,\n      supportsAllNetworks: data?.supportsAllNetworks\n    });\n  },\n  checkIfSupportedNetwork(namespace, caipNetwork) {\n    const activeCaipNetwork = caipNetwork || state.activeCaipNetwork;\n    const requestedCaipNetworks = ChainController.getRequestedCaipNetworks(namespace);\n    if (!requestedCaipNetworks.length) {\n      return true;\n    }\n    return requestedCaipNetworks?.some(network => network.id === activeCaipNetwork?.id);\n  },\n  checkIfSupportedChainId(chainId) {\n    if (!state.activeChain) {\n      return true;\n    }\n    const requestedCaipNetworks = ChainController.getRequestedCaipNetworks(state.activeChain);\n    return requestedCaipNetworks?.some(network => network.id === chainId);\n  },\n  // Smart Account Network Handlers\n  setSmartAccountEnabledNetworks(smartAccountEnabledNetworks, chain) {\n    ChainController.setAdapterNetworkState(chain, {\n      smartAccountEnabledNetworks\n    });\n  },\n  checkIfSmartAccountEnabled() {\n    const networkId = NetworkUtil.caipNetworkIdToNumber(state.activeCaipNetwork?.caipNetworkId);\n    const activeChain = state.activeChain;\n    if (!activeChain || !networkId) {\n      return false;\n    }\n    const smartAccountEnabledNetworks = ChainController.getNetworkProp('smartAccountEnabledNetworks', activeChain);\n    return Boolean(smartAccountEnabledNetworks?.includes(Number(networkId)));\n  },\n  getActiveNetworkTokenAddress() {\n    const namespace = state.activeCaipNetwork?.chainNamespace || 'eip155';\n    const chainId = state.activeCaipNetwork?.id || 1;\n    const address = ConstantsUtil.NATIVE_TOKEN_ADDRESS[namespace];\n    return `${namespace}:${chainId}:${address}`;\n  },\n  showUnsupportedChainUI() {\n    ModalController.open({\n      view: 'UnsupportedChain'\n    });\n  },\n  checkIfNamesSupported() {\n    const activeCaipNetwork = state.activeCaipNetwork;\n    return Boolean(activeCaipNetwork?.chainNamespace && ConstantsUtil.NAMES_SUPPORTED_CHAIN_NAMESPACES.includes(activeCaipNetwork.chainNamespace));\n  },\n  resetNetwork(namespace) {\n    ChainController.setAdapterNetworkState(namespace, {\n      approvedCaipNetworkIds: undefined,\n      supportsAllNetworks: true,\n      smartAccountEnabledNetworks: []\n    });\n  },\n  resetAccount(chain) {\n    const chainToWrite = chain;\n    if (!chainToWrite) {\n      throw new Error('Chain is required to set account prop');\n    }\n    state.activeCaipAddress = undefined;\n    ChainController.setChainAccountData(chainToWrite, {\n      smartAccountDeployed: false,\n      currentTab: 0,\n      caipAddress: undefined,\n      address: undefined,\n      balance: undefined,\n      balanceSymbol: undefined,\n      profileName: undefined,\n      profileImage: undefined,\n      addressExplorerUrl: undefined,\n      tokenBalance: [],\n      connectedWalletInfo: undefined,\n      preferredAccountTypes: undefined,\n      socialProvider: undefined,\n      socialWindow: undefined,\n      farcasterUrl: undefined,\n      allAccounts: [],\n      user: undefined,\n      status: 'disconnected'\n    });\n    ConnectorController.removeConnectorId(chainToWrite);\n  },\n  setIsSwitchingNamespace(isSwitchingNamespace) {\n    state.isSwitchingNamespace = isSwitchingNamespace;\n  },\n  getFirstCaipNetworkSupportsAuthConnector() {\n    const availableChains = [];\n    let firstCaipNetwork = undefined;\n    state.chains.forEach(chain => {\n      if (CommonConstantsUtil.AUTH_CONNECTOR_SUPPORTED_CHAINS.find(ns => ns === chain.namespace)) {\n        if (chain.namespace) {\n          availableChains.push(chain.namespace);\n        }\n      }\n    });\n    if (availableChains.length > 0) {\n      const firstAvailableChain = availableChains[0];\n      firstCaipNetwork = firstAvailableChain ? state.chains.get(firstAvailableChain)?.caipNetworks?.[0] : undefined;\n      return firstCaipNetwork;\n    }\n    return undefined;\n  },\n  getAccountData(chainNamespace) {\n    if (!chainNamespace) {\n      return AccountController.state;\n    }\n    return ChainController.state.chains.get(chainNamespace)?.accountState;\n  },\n  getNetworkData(chainNamespace) {\n    const namespace = chainNamespace || state.activeChain;\n    if (!namespace) {\n      return undefined;\n    }\n    return ChainController.state.chains.get(namespace)?.networkState;\n  },\n  getCaipNetworkByNamespace(chainNamespace, chainId) {\n    if (!chainNamespace) {\n      return undefined;\n    }\n    const chain = ChainController.state.chains.get(chainNamespace);\n    const byChainId = chain?.caipNetworks?.find(network => network.id === chainId);\n    if (byChainId) {\n      return byChainId;\n    }\n    return chain?.networkState?.caipNetwork || chain?.caipNetworks?.[0];\n  },\n  /**\n   * Get the requested CaipNetwork IDs for a given namespace. If namespace is not provided, all requested CaipNetwork IDs will be returned\n   * @param namespace - The namespace to get the requested CaipNetwork IDs for\n   * @returns The requested CaipNetwork IDs\n   */\n  getRequestedCaipNetworkIds() {\n    const namespace = ConnectorController.state.filterByNamespace;\n    const chains = namespace ? [state.chains.get(namespace)] : Array.from(state.chains.values());\n    return chains.flatMap(chain => chain?.caipNetworks || []).map(caipNetwork => caipNetwork.caipNetworkId);\n  },\n  getCaipNetworks(namespace) {\n    if (namespace) {\n      return ChainController.getRequestedCaipNetworks(namespace);\n    }\n    return ChainController.getAllRequestedCaipNetworks();\n  }\n};\n// Export the controller wrapped with our error boundary\nexport const ChainController = withErrorBoundary(controller);","map":{"version":3,"names":["proxy","subscribe","sub","proxyMap","subscribeKey","subKey","ConstantsUtil","CommonConstantsUtil","NetworkUtil","CoreHelperUtil","StorageUtil","withErrorBoundary","AccountController","ConnectionController","ConnectorController","EventsController","ModalController","OptionsController","PublicStateController","RouterController","SendController","accountState","currentTab","tokenBalance","smartAccountDeployed","addressLabels","Map","allAccounts","user","undefined","networkState","caipNetwork","supportsAllNetworks","smartAccountEnabledNetworks","state","chains","activeCaipAddress","activeChain","activeCaipNetwork","noAdapters","universalAdapter","networkControllerClient","connectionControllerClient","isSwitchingNamespace","controller","callback","key","subscribeChainProp","property","chain","prev","nextValue","get","initialize","adapters","caipNetworks","clients","chainId","activeChainId","namespace","activeNamespace","getActiveNetworkProps","find","network","id","toString","defaultAdapter","adapter","adapterToActivate","namespacesFromAdapters","map","a","filter","n","namespaces","enableEmbedded","Set","chainNamespace","length","ChainController","setChainNetworkData","set","forEach","namespaceNetworks","setRequestedCaipNetworks","removeAdapter","nextAdapter","Array","from","entries","setActiveCaipNetwork","delete","addAdapter","addNetwork","chainAdapter","newNetworks","push","filterByNamespace","removeNetwork","networkId","isActiveNetwork","newCaipNetworksOfAdapter","setAdapterNetworkState","props","setChainAccountData","accountProps","_unknown","Error","newAccountState","size","caipAddress","replaceState","networkProps","newNetworkState","setAccountProp","prop","value","removeConnectorId","setActiveNamespace","newAdapter","setActiveCaipNetworkId","caipNetworkId","selectedNetworkId","setIsSwitchingNamespace","address","resetSend","isSupported","checkIfSupportedNetwork","enableNetworkSwitch","allowUnsupportedChain","wcBasic","showUnsupportedChainUI","addCaipNetwork","switchActiveNamespace","isDifferentChain","caipNetworkOfNamespace","getNetworkData","firstNetworkWithChain","getCaipNetworkByNamespace","switchActiveNetwork","activeAdapter","unsupportedNetwork","some","getNetworkControllerClient","switchCaipNetwork","close","error","goBack","sendEvent","type","event","properties","getConnectionControllerClient","_chain","getAccountProp","chainAccountState","getNetworkProp","chainNetworkState","getRequestedCaipNetworks","chainToFilter","approvedCaipNetworkIds","requestedCaipNetworks","sortedNetworks","sortRequestedNetworks","getAllRequestedCaipNetworks","allRequestedCaipNetworks","uniqueNamespaces","filterByNamespaces","getAllApprovedCaipNetworkIds","approvedIds","getApprovedCaipNetworkIds","getActiveCaipNetwork","getActiveCaipAddress","setApprovedCaipNetworksData","data","getApprovedCaipNetworksData","checkIfSupportedChainId","setSmartAccountEnabledNetworks","checkIfSmartAccountEnabled","caipNetworkIdToNumber","Boolean","includes","Number","getActiveNetworkTokenAddress","NATIVE_TOKEN_ADDRESS","open","view","checkIfNamesSupported","NAMES_SUPPORTED_CHAIN_NAMESPACES","resetNetwork","resetAccount","chainToWrite","balance","balanceSymbol","profileName","profileImage","addressExplorerUrl","connectedWalletInfo","preferredAccountTypes","socialProvider","socialWindow","farcasterUrl","status","getFirstCaipNetworkSupportsAuthConnector","availableChains","firstCaipNetwork","AUTH_CONNECTOR_SUPPORTED_CHAINS","ns","firstAvailableChain","getAccountData","byChainId","getRequestedCaipNetworkIds","values","flatMap","getCaipNetworks"],"sources":["../../../../src/controllers/ChainController.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}