{"ast":null,"code":"import { CB_KEYS_URL } from '../constants.js';\nimport { standardErrors } from '../error/errors.js';\nimport { logPopupSetupCompleted, logPopupSetupStarted, logPopupUnloadReceived } from '../telemetry/events/communicator.js';\nimport { closePopup, openPopup } from '../../util/web.js';\nimport { VERSION } from '../../sdk-info.js';\n/**\n * Communicates with a popup window for Coinbase keys.coinbase.com (or another url)\n * to send and receive messages.\n *\n * This class is responsible for opening a popup window, posting messages to it,\n * and listening for responses.\n *\n * It also handles cleanup of event listeners and the popup window itself when necessary.\n */\nexport class Communicator {\n  constructor({\n    url = CB_KEYS_URL,\n    metadata,\n    preference\n  }) {\n    this.popup = null;\n    this.listeners = new Map();\n    /**\n     * Posts a message to the popup window\n     */\n    this.postMessage = async message => {\n      const popup = await this.waitForPopupLoaded();\n      popup.postMessage(message, this.url.origin);\n    };\n    /**\n     * Posts a request to the popup window and waits for a response\n     */\n    this.postRequestAndWaitForResponse = async request => {\n      const responsePromise = this.onMessage(({\n        requestId\n      }) => requestId === request.id);\n      this.postMessage(request);\n      return await responsePromise;\n    };\n    /**\n     * Listens for messages from the popup window that match a given predicate.\n     */\n    this.onMessage = async predicate => {\n      return new Promise((resolve, reject) => {\n        const listener = event => {\n          if (event.origin !== this.url.origin) return; // origin validation\n          const message = event.data;\n          if (predicate(message)) {\n            resolve(message);\n            window.removeEventListener('message', listener);\n            this.listeners.delete(listener);\n          }\n        };\n        window.addEventListener('message', listener);\n        this.listeners.set(listener, {\n          reject\n        });\n      });\n    };\n    /**\n     * Closes the popup, rejects all requests and clears the listeners\n     */\n    this.disconnect = () => {\n      // Note: keys popup handles closing itself. this is a fallback.\n      closePopup(this.popup);\n      this.popup = null;\n      this.listeners.forEach(({\n        reject\n      }, listener) => {\n        reject(standardErrors.provider.userRejectedRequest('Request rejected'));\n        window.removeEventListener('message', listener);\n      });\n      this.listeners.clear();\n    };\n    /**\n     * Waits for the popup window to fully load and then sends a version message.\n     */\n    this.waitForPopupLoaded = async () => {\n      if (this.popup && !this.popup.closed) {\n        // In case the user un-focused the popup between requests, focus it again\n        this.popup.focus();\n        return this.popup;\n      }\n      logPopupSetupStarted();\n      this.popup = await openPopup(this.url);\n      this.onMessage(({\n        event\n      }) => event === 'PopupUnload').then(() => {\n        this.disconnect();\n        logPopupUnloadReceived();\n      }).catch(() => {});\n      return this.onMessage(({\n        event\n      }) => event === 'PopupLoaded').then(message => {\n        this.postMessage({\n          requestId: message.id,\n          data: {\n            version: VERSION,\n            metadata: this.metadata,\n            preference: this.preference,\n            location: window.location.toString()\n          }\n        });\n      }).then(() => {\n        if (!this.popup) throw standardErrors.rpc.internal();\n        logPopupSetupCompleted();\n        return this.popup;\n      });\n    };\n    this.url = new URL(url);\n    this.metadata = metadata;\n    this.preference = preference;\n  }\n}","map":{"version":3,"names":["CB_KEYS_URL","standardErrors","logPopupSetupCompleted","logPopupSetupStarted","logPopupUnloadReceived","closePopup","openPopup","VERSION","Communicator","constructor","url","metadata","preference","popup","listeners","Map","postMessage","message","waitForPopupLoaded","origin","postRequestAndWaitForResponse","request","responsePromise","onMessage","requestId","id","predicate","Promise","resolve","reject","listener","event","data","window","removeEventListener","delete","addEventListener","set","disconnect","forEach","provider","userRejectedRequest","clear","closed","focus","then","catch","version","location","toString","rpc","internal","URL"],"sources":["../../../src/core/communicator/Communicator.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}