{"ast":null,"code":"// TODO(v3): Remove this.\nimport { sendCalls } from '../../../actions/wallet/sendCalls.js';\nimport { encodeFunctionData } from '../../../utils/abi/encodeFunctionData.js';\nimport { getAction } from '../../../utils/getAction.js';\n/**\n * Requests for the wallet to sign and broadcast a batch of write contract calls (transactions) to the network.\n *\n * - Docs: https://viem.sh/experimental/eip5792/writeContracts\n *\n * @param client - Client to use\n * @param parameters - {@link WriteContractsParameters}\n * @returns Unique identifier for the call batch. {@link WriteContractsReturnType}\n *\n * @example\n * import { createPublicClient, http, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { writeContracts } from 'viem/experimental'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const abi = parseAbi([\n *   'function approve(address, uint256) returns (bool)',\n *   'function transferFrom(address, address, uint256) returns (bool)',\n * ])\n * const id = await writeContracts(client, {\n *   contracts: [\n *     {\n *       address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *       abi,\n *       functionName: 'approve',\n *       args: ['0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC', 100n],\n *     },\n *     {\n *       address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *       abi,\n *       functionName: 'transferFrom',\n *       args: [\n *         '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n *         '0x0000000000000000000000000000000000000000',\n *         100n\n *       ],\n *     },\n *   ],\n * })\n */\nexport async function writeContracts(client, parameters) {\n  const contracts = parameters.contracts;\n  const calls = contracts.map(contract => {\n    const {\n      address,\n      abi,\n      functionName,\n      args,\n      value\n    } = contract;\n    return {\n      data: encodeFunctionData({\n        abi,\n        functionName,\n        args\n      }),\n      to: address,\n      value\n    };\n  });\n  return getAction(client, sendCalls, 'sendCalls')({\n    ...parameters,\n    calls\n  });\n}","map":{"version":3,"names":["sendCalls","encodeFunctionData","getAction","writeContracts","client","parameters","contracts","calls","map","contract","address","abi","functionName","args","value","data","to"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/viem/experimental/eip5792/actions/writeContracts.ts"],"sourcesContent":["// TODO(v3): Remove this.\n\nimport type { Abi, AbiStateMutability, Address, Narrow } from 'abitype'\n\nimport {\n  type SendCallsErrorType,\n  type SendCallsParameters,\n  type SendCallsReturnType,\n  sendCalls,\n} from '../../../actions/wallet/sendCalls.js'\nimport type { Client } from '../../../clients/createClient.js'\nimport type { Transport } from '../../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../../errors/utils.js'\nimport type { Account, GetAccountParameter } from '../../../types/account.js'\nimport type { Chain, GetChainParameter } from '../../../types/chain.js'\nimport type {\n  ContractFunctionArgs,\n  ContractFunctionName,\n  GetValue,\n  UnionWiden,\n  Widen,\n} from '../../../types/contract.js'\nimport type { MulticallContracts } from '../../../types/multicall.js'\nimport {\n  type EncodeFunctionDataErrorType,\n  encodeFunctionData,\n} from '../../../utils/abi/encodeFunctionData.js'\nimport { getAction } from '../../../utils/getAction.js'\n\nexport type WriteContractsParameters<\n  contracts extends\n    readonly unknown[] = readonly WriteContractFunctionParameters[],\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n  chainOverride extends Chain | undefined = Chain | undefined,\n> = Pick<\n  SendCallsParameters<chain, account, chainOverride>,\n  'capabilities' | 'version'\n> & {\n  contracts: MulticallContracts<\n    Narrow<contracts>,\n    { mutability: AbiStateMutability }\n  >\n} & GetAccountParameter<account> &\n  GetChainParameter<chain, chainOverride>\n\nexport type WriteContractsReturnType = SendCallsReturnType\n\nexport type WriteContractsErrorType =\n  | EncodeFunctionDataErrorType\n  | SendCallsErrorType\n  | ErrorType\n\n/**\n * Requests for the wallet to sign and broadcast a batch of write contract calls (transactions) to the network.\n *\n * - Docs: https://viem.sh/experimental/eip5792/writeContracts\n *\n * @param client - Client to use\n * @param parameters - {@link WriteContractsParameters}\n * @returns Unique identifier for the call batch. {@link WriteContractsReturnType}\n *\n * @example\n * import { createPublicClient, http, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { writeContracts } from 'viem/experimental'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const abi = parseAbi([\n *   'function approve(address, uint256) returns (bool)',\n *   'function transferFrom(address, address, uint256) returns (bool)',\n * ])\n * const id = await writeContracts(client, {\n *   contracts: [\n *     {\n *       address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *       abi,\n *       functionName: 'approve',\n *       args: ['0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC', 100n],\n *     },\n *     {\n *       address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *       abi,\n *       functionName: 'transferFrom',\n *       args: [\n *         '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n *         '0x0000000000000000000000000000000000000000',\n *         100n\n *       ],\n *     },\n *   ],\n * })\n */\nexport async function writeContracts<\n  const contracts extends readonly unknown[],\n  chain extends Chain | undefined,\n  account extends Account | undefined = undefined,\n  chainOverride extends Chain | undefined = undefined,\n>(\n  client: Client<Transport, chain>,\n  parameters: WriteContractsParameters<\n    contracts,\n    chain,\n    account,\n    chainOverride\n  >,\n): Promise<WriteContractsReturnType> {\n  const contracts = parameters.contracts as WriteContractFunctionParameters[]\n  const calls = contracts.map((contract) => {\n    const { address, abi, functionName, args, value } = contract\n    return {\n      data: encodeFunctionData({\n        abi,\n        functionName,\n        args,\n      }),\n      to: address,\n      value,\n    } satisfies SendCallsParameters['calls'][number]\n  })\n  return getAction(\n    client,\n    sendCalls,\n    'sendCalls',\n  )({ ...parameters, calls } as SendCallsParameters)\n}\n\nexport type WriteContractFunctionParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  mutability extends AbiStateMutability = AbiStateMutability,\n  functionName extends ContractFunctionName<\n    abi,\n    mutability\n  > = ContractFunctionName<abi, mutability>,\n  args extends ContractFunctionArgs<\n    abi,\n    mutability,\n    functionName\n  > = ContractFunctionArgs<abi, mutability, functionName>,\n  ///\n  allFunctionNames = ContractFunctionName<abi, mutability>,\n  allArgs = ContractFunctionArgs<abi, mutability, functionName>,\n  // when `args` is inferred to `readonly []` (\"inputs\": []) or `never` (`abi` declared as `Abi` or not inferrable), allow `args` to be optional.\n  // important that both branches return same structural type\n> = {\n  address: Address\n  abi: abi\n  functionName:\n    | allFunctionNames // show all options\n    | (functionName extends allFunctionNames ? functionName : never) // infer value\n  args?: (abi extends Abi ? UnionWiden<args> : never) | allArgs | undefined\n} & (readonly [] extends allArgs ? {} : { args: Widen<args> }) &\n  GetValue<abi, functionName>\n"],"mappings":"AAAA;AAIA,SAIEA,SAAS,QACJ,sCAAsC;AAc7C,SAEEC,kBAAkB,QACb,0CAA0C;AACjD,SAASC,SAAS,QAAQ,6BAA6B;AA0BvD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA,OAAO,eAAeC,cAAcA,CAMlCC,MAAgC,EAChCC,UAKC;EAED,MAAMC,SAAS,GAAGD,UAAU,CAACC,SAA8C;EAC3E,MAAMC,KAAK,GAAGD,SAAS,CAACE,GAAG,CAAEC,QAAQ,IAAI;IACvC,MAAM;MAAEC,OAAO;MAAEC,GAAG;MAAEC,YAAY;MAAEC,IAAI;MAAEC;IAAK,CAAE,GAAGL,QAAQ;IAC5D,OAAO;MACLM,IAAI,EAAEd,kBAAkB,CAAC;QACvBU,GAAG;QACHC,YAAY;QACZC;OACD,CAAC;MACFG,EAAE,EAAEN,OAAO;MACXI;KAC8C;EAClD,CAAC,CAAC;EACF,OAAOZ,SAAS,CACdE,MAAM,EACNJ,SAAS,EACT,WAAW,CACZ,CAAC;IAAE,GAAGK,UAAU;IAAEE;EAAK,CAAyB,CAAC;AACpD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}