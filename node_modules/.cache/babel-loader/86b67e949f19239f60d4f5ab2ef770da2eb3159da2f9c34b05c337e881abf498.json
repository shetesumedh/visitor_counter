{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.estimateContractGas = estimateContractGas;\nconst parseAccount_js_1 = require(\"../../accounts/utils/parseAccount.js\");\nconst encodeFunctionData_js_1 = require(\"../../utils/abi/encodeFunctionData.js\");\nconst getContractError_js_1 = require(\"../../utils/errors/getContractError.js\");\nconst getAction_js_1 = require(\"../../utils/getAction.js\");\nconst estimateGas_js_1 = require(\"./estimateGas.js\");\nasync function estimateContractGas(client, parameters) {\n  const {\n    abi,\n    address,\n    args,\n    functionName,\n    dataSuffix,\n    ...request\n  } = parameters;\n  const data = (0, encodeFunctionData_js_1.encodeFunctionData)({\n    abi,\n    args,\n    functionName\n  });\n  try {\n    const gas = await (0, getAction_js_1.getAction)(client, estimateGas_js_1.estimateGas, 'estimateGas')({\n      data: `${data}${dataSuffix ? dataSuffix.replace('0x', '') : ''}`,\n      to: address,\n      ...request\n    });\n    return gas;\n  } catch (error) {\n    const account = request.account ? (0, parseAccount_js_1.parseAccount)(request.account) : undefined;\n    throw (0, getContractError_js_1.getContractError)(error, {\n      abi,\n      address,\n      args,\n      docsPath: '/docs/contract/estimateContractGas',\n      functionName,\n      sender: account?.address\n    });\n  }\n}","map":{"version":3,"names":["exports","estimateContractGas","parseAccount_js_1","require","encodeFunctionData_js_1","getContractError_js_1","getAction_js_1","estimateGas_js_1","client","parameters","abi","address","args","functionName","dataSuffix","request","data","encodeFunctionData","gas","getAction","estimateGas","replace","to","error","account","parseAccount","undefined","getContractError","docsPath","sender"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/viem/actions/public/estimateContractGas.ts"],"sourcesContent":["import type { Abi } from 'abitype'\n\nimport type { Account } from '../../accounts/types.js'\nimport {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../../accounts/utils/parseAccount.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { BaseError } from '../../errors/base.js'\nimport type { Chain } from '../../types/chain.js'\nimport type {\n  ContractFunctionArgs,\n  ContractFunctionName,\n  ContractFunctionParameters,\n  GetValue,\n} from '../../types/contract.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { UnionOmit } from '../../types/utils.js'\nimport {\n  type EncodeFunctionDataErrorType,\n  type EncodeFunctionDataParameters,\n  encodeFunctionData,\n} from '../../utils/abi/encodeFunctionData.js'\nimport {\n  type GetContractErrorReturnType,\n  getContractError,\n} from '../../utils/errors/getContractError.js'\nimport { getAction } from '../../utils/getAction.js'\nimport {\n  type EstimateGasErrorType,\n  type EstimateGasParameters,\n  estimateGas,\n} from './estimateGas.js'\n\nexport type EstimateContractGasParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  functionName extends ContractFunctionName<\n    abi,\n    'nonpayable' | 'payable'\n  > = ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n  args extends ContractFunctionArgs<\n    abi,\n    'nonpayable' | 'payable',\n    functionName\n  > = ContractFunctionArgs<abi, 'nonpayable' | 'payable', functionName>,\n  chain extends Chain | undefined = Chain | undefined,\n> = ContractFunctionParameters<\n  abi,\n  'nonpayable' | 'payable',\n  functionName,\n  args\n> &\n  UnionOmit<EstimateGasParameters<chain>, 'data' | 'to' | 'value'> &\n  GetValue<\n    abi,\n    functionName,\n    EstimateGasParameters<chain> extends EstimateGasParameters\n      ? EstimateGasParameters<chain>['value']\n      : EstimateGasParameters['value']\n  > & {\n    /** Data to append to the end of the calldata. Useful for adding a [\"domain\" tag](https://opensea.notion.site/opensea/Seaport-Order-Attributions-ec2d69bf455041a5baa490941aad307f). */\n    dataSuffix?: Hex | undefined\n  }\n\nexport type EstimateContractGasReturnType = bigint\n\nexport type EstimateContractGasErrorType = GetContractErrorReturnType<\n  EncodeFunctionDataErrorType | EstimateGasErrorType | ParseAccountErrorType\n>\n\n/**\n * Estimates the gas required to successfully execute a contract write function call.\n *\n * - Docs: https://viem.sh/docs/contract/estimateContractGas\n *\n * Internally, uses a [Public Client](https://viem.sh/docs/clients/public) to call the [`estimateGas` action](https://viem.sh/docs/actions/public/estimateGas) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\n *\n * @param client - Client to use\n * @param parameters - {@link EstimateContractGasParameters}\n * @returns The gas estimate (in wei). {@link EstimateContractGasReturnType}\n *\n * @example\n * import { createPublicClient, http, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { estimateContractGas } from 'viem/contract'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const gas = await estimateContractGas(client, {\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *   abi: parseAbi(['function mint() public']),\n *   functionName: 'mint',\n *   account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n * })\n */\nexport async function estimateContractGas<\n  const abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n  args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\n  chain extends Chain | undefined,\n  account extends Account | undefined = undefined,\n>(\n  client: Client<Transport, chain, account>,\n  parameters: EstimateContractGasParameters<abi, functionName, args, chain>,\n): Promise<EstimateContractGasReturnType> {\n  const { abi, address, args, functionName, dataSuffix, ...request } =\n    parameters as EstimateContractGasParameters\n  const data = encodeFunctionData({\n    abi,\n    args,\n    functionName,\n  } as EncodeFunctionDataParameters)\n  try {\n    const gas = await getAction(\n      client,\n      estimateGas,\n      'estimateGas',\n    )({\n      data: `${data}${dataSuffix ? dataSuffix.replace('0x', '') : ''}`,\n      to: address,\n      ...request,\n    } as unknown as EstimateGasParameters)\n    return gas\n  } catch (error) {\n    const account = request.account ? parseAccount(request.account) : undefined\n    throw getContractError(error as BaseError, {\n      abi,\n      address,\n      args,\n      docsPath: '/docs/contract/estimateContractGas',\n      functionName,\n      sender: account?.address,\n    })\n  }\n}\n"],"mappings":";;;;;AAkGAA,OAAA,CAAAC,mBAAA,GAAAA,mBAAA;AA/FA,MAAAC,iBAAA,GAAAC,OAAA;AAgBA,MAAAC,uBAAA,GAAAD,OAAA;AAKA,MAAAE,qBAAA,GAAAF,OAAA;AAIA,MAAAG,cAAA,GAAAH,OAAA;AACA,MAAAI,gBAAA,GAAAJ,OAAA;AAqEO,eAAeF,mBAAmBA,CAOvCO,MAAyC,EACzCC,UAAyE;EAEzE,MAAM;IAAEC,GAAG;IAAEC,OAAO;IAAEC,IAAI;IAAEC,YAAY;IAAEC,UAAU;IAAE,GAAGC;EAAO,CAAE,GAChEN,UAA2C;EAC7C,MAAMO,IAAI,GAAG,IAAAZ,uBAAA,CAAAa,kBAAkB,EAAC;IAC9BP,GAAG;IACHE,IAAI;IACJC;GAC+B,CAAC;EAClC,IAAI;IACF,MAAMK,GAAG,GAAG,MAAM,IAAAZ,cAAA,CAAAa,SAAS,EACzBX,MAAM,EACND,gBAAA,CAAAa,WAAW,EACX,aAAa,CACd,CAAC;MACAJ,IAAI,EAAE,GAAGA,IAAI,GAAGF,UAAU,GAAGA,UAAU,CAACO,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE;MAChEC,EAAE,EAAEX,OAAO;MACX,GAAGI;KACgC,CAAC;IACtC,OAAOG,GAAG;EACZ,CAAC,CAAC,OAAOK,KAAK,EAAE;IACd,MAAMC,OAAO,GAAGT,OAAO,CAACS,OAAO,GAAG,IAAAtB,iBAAA,CAAAuB,YAAY,EAACV,OAAO,CAACS,OAAO,CAAC,GAAGE,SAAS;IAC3E,MAAM,IAAArB,qBAAA,CAAAsB,gBAAgB,EAACJ,KAAkB,EAAE;MACzCb,GAAG;MACHC,OAAO;MACPC,IAAI;MACJgB,QAAQ,EAAE,oCAAoC;MAC9Cf,YAAY;MACZgB,MAAM,EAAEL,OAAO,EAAEb;KAClB,CAAC;EACJ;AACF","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}