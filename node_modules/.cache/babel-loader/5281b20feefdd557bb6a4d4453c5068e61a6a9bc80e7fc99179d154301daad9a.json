{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getEnsName = getEnsName;\nconst abis_js_1 = require(\"../../constants/abis.js\");\nconst getChainContractAddress_js_1 = require(\"../../utils/chain/getChainContractAddress.js\");\nconst toHex_js_1 = require(\"../../utils/encoding/toHex.js\");\nconst errors_js_1 = require(\"../../utils/ens/errors.js\");\nconst packetToBytes_js_1 = require(\"../../utils/ens/packetToBytes.js\");\nconst getAction_js_1 = require(\"../../utils/getAction.js\");\nconst readContract_js_1 = require(\"../public/readContract.js\");\nasync function getEnsName(client, {\n  address,\n  blockNumber,\n  blockTag,\n  gatewayUrls,\n  strict,\n  universalResolverAddress: universalResolverAddress_\n}) {\n  let universalResolverAddress = universalResolverAddress_;\n  if (!universalResolverAddress) {\n    if (!client.chain) throw new Error('client chain not configured. universalResolverAddress is required.');\n    universalResolverAddress = (0, getChainContractAddress_js_1.getChainContractAddress)({\n      blockNumber,\n      chain: client.chain,\n      contract: 'ensUniversalResolver'\n    });\n  }\n  const reverseNode = `${address.toLowerCase().substring(2)}.addr.reverse`;\n  try {\n    const readContractParameters = {\n      address: universalResolverAddress,\n      abi: abis_js_1.universalResolverReverseAbi,\n      functionName: 'reverse',\n      args: [(0, toHex_js_1.toHex)((0, packetToBytes_js_1.packetToBytes)(reverseNode))],\n      blockNumber,\n      blockTag\n    };\n    const readContractAction = (0, getAction_js_1.getAction)(client, readContract_js_1.readContract, 'readContract');\n    const [name, resolvedAddress] = gatewayUrls ? await readContractAction({\n      ...readContractParameters,\n      args: [...readContractParameters.args, gatewayUrls]\n    }) : await readContractAction(readContractParameters);\n    if (address.toLowerCase() !== resolvedAddress.toLowerCase()) return null;\n    return name;\n  } catch (err) {\n    if (strict) throw err;\n    if ((0, errors_js_1.isNullUniversalResolverError)(err, 'reverse')) return null;\n    throw err;\n  }\n}","map":{"version":3,"names":["exports","getEnsName","abis_js_1","require","getChainContractAddress_js_1","toHex_js_1","errors_js_1","packetToBytes_js_1","getAction_js_1","readContract_js_1","client","address","blockNumber","blockTag","gatewayUrls","strict","universalResolverAddress","universalResolverAddress_","chain","Error","getChainContractAddress","contract","reverseNode","toLowerCase","substring","readContractParameters","abi","universalResolverReverseAbi","functionName","args","toHex","packetToBytes","readContractAction","getAction","readContract","name","resolvedAddress","err","isNullUniversalResolverError"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/viem/actions/ens/getEnsName.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { universalResolverReverseAbi } from '../../constants/abis.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Prettify } from '../../types/utils.js'\nimport {\n  type GetChainContractAddressErrorType,\n  getChainContractAddress,\n} from '../../utils/chain/getChainContractAddress.js'\nimport { type ToHexErrorType, toHex } from '../../utils/encoding/toHex.js'\nimport { isNullUniversalResolverError } from '../../utils/ens/errors.js'\nimport {\n  type PacketToBytesErrorType,\n  packetToBytes,\n} from '../../utils/ens/packetToBytes.js'\nimport { getAction } from '../../utils/getAction.js'\nimport {\n  type ReadContractErrorType,\n  type ReadContractParameters,\n  readContract,\n} from '../public/readContract.js'\n\nexport type GetEnsNameParameters = Prettify<\n  Pick<ReadContractParameters, 'blockNumber' | 'blockTag'> & {\n    /** Address to get ENS name for. */\n    address: Address\n    /** Universal Resolver gateway URLs to use for resolving CCIP-read requests. */\n    gatewayUrls?: string[] | undefined\n    /** Whether or not to throw errors propagated from the ENS Universal Resolver Contract. */\n    strict?: boolean | undefined\n    /** Address of ENS Universal Resolver Contract. */\n    universalResolverAddress?: Address | undefined\n  }\n>\n\nexport type GetEnsNameReturnType = string | null\n\nexport type GetEnsNameErrorType =\n  | GetChainContractAddressErrorType\n  | ReadContractErrorType\n  | ToHexErrorType\n  | PacketToBytesErrorType\n  | ErrorType\n\n/**\n * Gets primary name for specified address.\n *\n * - Docs: https://viem.sh/docs/ens/actions/getEnsName\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\n *\n * Calls `reverse(bytes)` on ENS Universal Resolver Contract to \"reverse resolve\" the address to the primary ENS name.\n *\n * @param client - Client to use\n * @param parameters - {@link GetEnsNameParameters}\n * @returns Name or `null` if not found. {@link GetEnsNameReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getEnsName } from 'viem/ens'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const ensName = await getEnsName(client, {\n *   address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n * })\n * // 'wevm.eth'\n */\nexport async function getEnsName<chain extends Chain | undefined>(\n  client: Client<Transport, chain>,\n  {\n    address,\n    blockNumber,\n    blockTag,\n    gatewayUrls,\n    strict,\n    universalResolverAddress: universalResolverAddress_,\n  }: GetEnsNameParameters,\n): Promise<GetEnsNameReturnType> {\n  let universalResolverAddress = universalResolverAddress_\n  if (!universalResolverAddress) {\n    if (!client.chain)\n      throw new Error(\n        'client chain not configured. universalResolverAddress is required.',\n      )\n\n    universalResolverAddress = getChainContractAddress({\n      blockNumber,\n      chain: client.chain,\n      contract: 'ensUniversalResolver',\n    })\n  }\n\n  const reverseNode = `${address.toLowerCase().substring(2)}.addr.reverse`\n  try {\n    const readContractParameters = {\n      address: universalResolverAddress,\n      abi: universalResolverReverseAbi,\n      functionName: 'reverse',\n      args: [toHex(packetToBytes(reverseNode))],\n      blockNumber,\n      blockTag,\n    } as const\n\n    const readContractAction = getAction(client, readContract, 'readContract')\n\n    const [name, resolvedAddress] = gatewayUrls\n      ? await readContractAction({\n          ...readContractParameters,\n          args: [...readContractParameters.args, gatewayUrls],\n        })\n      : await readContractAction(readContractParameters)\n\n    if (address.toLowerCase() !== resolvedAddress.toLowerCase()) return null\n    return name\n  } catch (err) {\n    if (strict) throw err\n    if (isNullUniversalResolverError(err, 'reverse')) return null\n    throw err\n  }\n}\n"],"mappings":";;;;;AAyEAA,OAAA,CAAAC,UAAA,GAAAA,UAAA;AArEA,MAAAC,SAAA,GAAAC,OAAA;AAIA,MAAAC,4BAAA,GAAAD,OAAA;AAIA,MAAAE,UAAA,GAAAF,OAAA;AACA,MAAAG,WAAA,GAAAH,OAAA;AACA,MAAAI,kBAAA,GAAAJ,OAAA;AAIA,MAAAK,cAAA,GAAAL,OAAA;AACA,MAAAM,iBAAA,GAAAN,OAAA;AAsDO,eAAeF,UAAUA,CAC9BS,MAAgC,EAChC;EACEC,OAAO;EACPC,WAAW;EACXC,QAAQ;EACRC,WAAW;EACXC,MAAM;EACNC,wBAAwB,EAAEC;AAAyB,CAC9B;EAEvB,IAAID,wBAAwB,GAAGC,yBAAyB;EACxD,IAAI,CAACD,wBAAwB,EAAE;IAC7B,IAAI,CAACN,MAAM,CAACQ,KAAK,EACf,MAAM,IAAIC,KAAK,CACb,oEAAoE,CACrE;IAEHH,wBAAwB,GAAG,IAAAZ,4BAAA,CAAAgB,uBAAuB,EAAC;MACjDR,WAAW;MACXM,KAAK,EAAER,MAAM,CAACQ,KAAK;MACnBG,QAAQ,EAAE;KACX,CAAC;EACJ;EAEA,MAAMC,WAAW,GAAG,GAAGX,OAAO,CAACY,WAAW,EAAE,CAACC,SAAS,CAAC,CAAC,CAAC,eAAe;EACxE,IAAI;IACF,MAAMC,sBAAsB,GAAG;MAC7Bd,OAAO,EAAEK,wBAAwB;MACjCU,GAAG,EAAExB,SAAA,CAAAyB,2BAA2B;MAChCC,YAAY,EAAE,SAAS;MACvBC,IAAI,EAAE,CAAC,IAAAxB,UAAA,CAAAyB,KAAK,EAAC,IAAAvB,kBAAA,CAAAwB,aAAa,EAACT,WAAW,CAAC,CAAC,CAAC;MACzCV,WAAW;MACXC;KACQ;IAEV,MAAMmB,kBAAkB,GAAG,IAAAxB,cAAA,CAAAyB,SAAS,EAACvB,MAAM,EAAED,iBAAA,CAAAyB,YAAY,EAAE,cAAc,CAAC;IAE1E,MAAM,CAACC,IAAI,EAAEC,eAAe,CAAC,GAAGtB,WAAW,GACvC,MAAMkB,kBAAkB,CAAC;MACvB,GAAGP,sBAAsB;MACzBI,IAAI,EAAE,CAAC,GAAGJ,sBAAsB,CAACI,IAAI,EAAEf,WAAW;KACnD,CAAC,GACF,MAAMkB,kBAAkB,CAACP,sBAAsB,CAAC;IAEpD,IAAId,OAAO,CAACY,WAAW,EAAE,KAAKa,eAAe,CAACb,WAAW,EAAE,EAAE,OAAO,IAAI;IACxE,OAAOY,IAAI;EACb,CAAC,CAAC,OAAOE,GAAG,EAAE;IACZ,IAAItB,MAAM,EAAE,MAAMsB,GAAG;IACrB,IAAI,IAAA/B,WAAA,CAAAgC,4BAA4B,EAACD,GAAG,EAAE,SAAS,CAAC,EAAE,OAAO,IAAI;IAC7D,MAAMA,GAAG;EACX;AACF","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}