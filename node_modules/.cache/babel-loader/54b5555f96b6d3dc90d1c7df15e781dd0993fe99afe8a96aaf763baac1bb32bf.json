{"ast":null,"code":"import { UserOperationNotFoundError } from '../../errors/userOperation.js';\nimport { formatUserOperation } from '../../utils/formatters/userOperation.js';\n/**\n * Retrieves information about a User Operation given a hash.\n *\n * - Docs: https://viem.sh/account-abstraction/actions/bundler/getUserOperation\n *\n * @param client - Client to use\n * @param parameters - {@link GetUserOperationParameters}\n * @returns The receipt. {@link GetUserOperationReturnType}\n *\n * @example\n * import { createBundlerClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getUserOperation } from 'viem/actions\n *\n * const client = createBundlerClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n *\n * const receipt = await getUserOperation(client, {\n *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n * })\n */\nexport async function getUserOperation(client, {\n  hash\n}) {\n  const result = await client.request({\n    method: 'eth_getUserOperationByHash',\n    params: [hash]\n  }, {\n    dedupe: true\n  });\n  if (!result) throw new UserOperationNotFoundError({\n    hash\n  });\n  const {\n    blockHash,\n    blockNumber,\n    entryPoint,\n    transactionHash,\n    userOperation\n  } = result;\n  return {\n    blockHash,\n    blockNumber: BigInt(blockNumber),\n    entryPoint,\n    transactionHash,\n    userOperation: formatUserOperation(userOperation)\n  };\n}","map":{"version":3,"names":["UserOperationNotFoundError","formatUserOperation","getUserOperation","client","hash","result","request","method","params","dedupe","blockHash","blockNumber","entryPoint","transactionHash","userOperation","BigInt"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/viem/account-abstraction/actions/bundler/getUserOperation.ts"],"sourcesContent":["import type { Address } from 'abitype'\nimport type { Client } from '../../../clients/createClient.js'\nimport type { Transport } from '../../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../../errors/utils.js'\nimport type { Hash } from '../../../types/misc.js'\nimport type { Prettify } from '../../../types/utils.js'\nimport type { RequestErrorType } from '../../../utils/buildRequest.js'\nimport {\n  UserOperationNotFoundError,\n  type UserOperationNotFoundErrorType,\n} from '../../errors/userOperation.js'\nimport type { UserOperation } from '../../types/userOperation.js'\nimport { formatUserOperation } from '../../utils/formatters/userOperation.js'\n\nexport type GetUserOperationParameters = {\n  /** The hash of the User Operation. */\n  hash: Hash\n}\n\nexport type GetUserOperationReturnType = Prettify<{\n  /** The block hash the User Operation was included on. */\n  blockHash: Hash\n  /** The block number the User Operation was included on. */\n  blockNumber: bigint\n  /** The EntryPoint which handled the User Operation. */\n  entryPoint: Address\n  /** The hash of the transaction which included the User Operation. */\n  transactionHash: Hash\n  /** The User Operation. */\n  userOperation: UserOperation\n}>\n\nexport type GetUserOperationErrorType =\n  | RequestErrorType\n  | UserOperationNotFoundErrorType\n  | ErrorType\n\n/**\n * Retrieves information about a User Operation given a hash.\n *\n * - Docs: https://viem.sh/account-abstraction/actions/bundler/getUserOperation\n *\n * @param client - Client to use\n * @param parameters - {@link GetUserOperationParameters}\n * @returns The receipt. {@link GetUserOperationReturnType}\n *\n * @example\n * import { createBundlerClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getUserOperation } from 'viem/actions\n *\n * const client = createBundlerClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n *\n * const receipt = await getUserOperation(client, {\n *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n * })\n */\nexport async function getUserOperation(\n  client: Client<Transport>,\n  { hash }: GetUserOperationParameters,\n) {\n  const result = await client.request(\n    {\n      method: 'eth_getUserOperationByHash',\n      params: [hash],\n    },\n    { dedupe: true },\n  )\n\n  if (!result) throw new UserOperationNotFoundError({ hash })\n\n  const { blockHash, blockNumber, entryPoint, transactionHash, userOperation } =\n    result\n\n  return {\n    blockHash,\n    blockNumber: BigInt(blockNumber),\n    entryPoint,\n    transactionHash,\n    userOperation: formatUserOperation(userOperation),\n  }\n}\n"],"mappings":"AAOA,SACEA,0BAA0B,QAErB,+BAA+B;AAEtC,SAASC,mBAAmB,QAAQ,yCAAyC;AAyB7E;;;;;;;;;;;;;;;;;;;;;;;AAuBA,OAAO,eAAeC,gBAAgBA,CACpCC,MAAyB,EACzB;EAAEC;AAAI,CAA8B;EAEpC,MAAMC,MAAM,GAAG,MAAMF,MAAM,CAACG,OAAO,CACjC;IACEC,MAAM,EAAE,4BAA4B;IACpCC,MAAM,EAAE,CAACJ,IAAI;GACd,EACD;IAAEK,MAAM,EAAE;EAAI,CAAE,CACjB;EAED,IAAI,CAACJ,MAAM,EAAE,MAAM,IAAIL,0BAA0B,CAAC;IAAEI;EAAI,CAAE,CAAC;EAE3D,MAAM;IAAEM,SAAS;IAAEC,WAAW;IAAEC,UAAU;IAAEC,eAAe;IAAEC;EAAa,CAAE,GAC1ET,MAAM;EAER,OAAO;IACLK,SAAS;IACTC,WAAW,EAAEI,MAAM,CAACJ,WAAW,CAAC;IAChCC,UAAU;IACVC,eAAe;IACfC,aAAa,EAAEb,mBAAmB,CAACa,aAAa;GACjD;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}