{"ast":null,"code":"import { getEnsName } from '../actions/getEnsName.js';\nimport { filterQueryOptions } from './utils.js';\nexport function getEnsNameQueryOptions(config, options = {}) {\n  return {\n    async queryFn({\n      queryKey\n    }) {\n      const {\n        address,\n        scopeKey: _,\n        ...parameters\n      } = queryKey[1];\n      if (!address) throw new Error('address is required');\n      return getEnsName(config, {\n        ...parameters,\n        address\n      });\n    },\n    queryKey: getEnsNameQueryKey(options)\n  };\n}\nexport function getEnsNameQueryKey(options = {}) {\n  return ['ensName', filterQueryOptions(options)];\n}","map":{"version":3,"names":["getEnsName","filterQueryOptions","getEnsNameQueryOptions","config","options","queryFn","queryKey","address","scopeKey","_","parameters","Error","getEnsNameQueryKey"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/@wagmi/core/src/query/getEnsName.ts"],"sourcesContent":["import type { QueryOptions } from '@tanstack/query-core'\n\nimport {\n  type GetEnsNameErrorType,\n  type GetEnsNameParameters,\n  type GetEnsNameReturnType,\n  getEnsName,\n} from '../actions/getEnsName.js'\nimport type { Config } from '../createConfig.js'\nimport type { ScopeKeyParameter } from '../types/properties.js'\nimport type { Compute, ExactPartial } from '../types/utils.js'\nimport { filterQueryOptions } from './utils.js'\n\nexport type GetEnsNameOptions<config extends Config> = Compute<\n  ExactPartial<GetEnsNameParameters<config>> & ScopeKeyParameter\n>\n\nexport function getEnsNameQueryOptions<config extends Config>(\n  config: config,\n  options: GetEnsNameOptions<config> = {},\n) {\n  return {\n    async queryFn({ queryKey }) {\n      const { address, scopeKey: _, ...parameters } = queryKey[1]\n      if (!address) throw new Error('address is required')\n      return getEnsName(config, { ...parameters, address })\n    },\n    queryKey: getEnsNameQueryKey(options),\n  } as const satisfies QueryOptions<\n    GetEnsNameQueryFnData,\n    GetEnsNameErrorType,\n    GetEnsNameData,\n    GetEnsNameQueryKey<config>\n  >\n}\n\nexport type GetEnsNameQueryFnData = GetEnsNameReturnType\n\nexport type GetEnsNameData = GetEnsNameQueryFnData\n\nexport function getEnsNameQueryKey<config extends Config>(\n  options: GetEnsNameOptions<config> = {},\n) {\n  return ['ensName', filterQueryOptions(options)] as const\n}\n\nexport type GetEnsNameQueryKey<config extends Config> = ReturnType<\n  typeof getEnsNameQueryKey<config>\n>\n"],"mappings":"AAEA,SAIEA,UAAU,QACL,0BAA0B;AAIjC,SAASC,kBAAkB,QAAQ,YAAY;AAM/C,OAAM,SAAUC,sBAAsBA,CACpCC,MAAc,EACdC,OAAA,GAAqC,EAAE;EAEvC,OAAO;IACL,MAAMC,OAAOA,CAAC;MAAEC;IAAQ,CAAE;MACxB,MAAM;QAAEC,OAAO;QAAEC,QAAQ,EAAEC,CAAC;QAAE,GAAGC;MAAU,CAAE,GAAGJ,QAAQ,CAAC,CAAC,CAAC;MAC3D,IAAI,CAACC,OAAO,EAAE,MAAM,IAAII,KAAK,CAAC,qBAAqB,CAAC;MACpD,OAAOX,UAAU,CAACG,MAAM,EAAE;QAAE,GAAGO,UAAU;QAAEH;MAAO,CAAE,CAAC;IACvD,CAAC;IACDD,QAAQ,EAAEM,kBAAkB,CAACR,OAAO;GAMrC;AACH;AAMA,OAAM,SAAUQ,kBAAkBA,CAChCR,OAAA,GAAqC,EAAE;EAEvC,OAAO,CAAC,SAAS,EAAEH,kBAAkB,CAACG,OAAO,CAAC,CAAU;AAC1D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}