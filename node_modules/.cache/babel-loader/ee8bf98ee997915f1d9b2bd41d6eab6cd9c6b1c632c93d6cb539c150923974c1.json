{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseTransaction = parseTransaction;\nexports.toTransactionArray = toTransactionArray;\nexports.parseAccessList = parseAccessList;\nconst address_js_1 = require(\"../../errors/address.js\");\nconst transaction_js_1 = require(\"../../errors/transaction.js\");\nconst isAddress_js_1 = require(\"../address/isAddress.js\");\nconst toBlobSidecars_js_1 = require(\"../blob/toBlobSidecars.js\");\nconst isHex_js_1 = require(\"../data/isHex.js\");\nconst pad_js_1 = require(\"../data/pad.js\");\nconst trim_js_1 = require(\"../data/trim.js\");\nconst fromHex_js_1 = require(\"../encoding/fromHex.js\");\nconst fromRlp_js_1 = require(\"../encoding/fromRlp.js\");\nconst isHash_js_1 = require(\"../hash/isHash.js\");\nconst assertTransaction_js_1 = require(\"./assertTransaction.js\");\nconst getSerializedTransactionType_js_1 = require(\"./getSerializedTransactionType.js\");\nfunction parseTransaction(serializedTransaction) {\n  const type = (0, getSerializedTransactionType_js_1.getSerializedTransactionType)(serializedTransaction);\n  if (type === 'eip1559') return parseTransactionEIP1559(serializedTransaction);\n  if (type === 'eip2930') return parseTransactionEIP2930(serializedTransaction);\n  if (type === 'eip4844') return parseTransactionEIP4844(serializedTransaction);\n  if (type === 'eip7702') return parseTransactionEIP7702(serializedTransaction);\n  return parseTransactionLegacy(serializedTransaction);\n}\nfunction parseTransactionEIP7702(serializedTransaction) {\n  const transactionArray = toTransactionArray(serializedTransaction);\n  const [chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gas, to, value, data, accessList, authorizationList, v, r, s] = transactionArray;\n  if (transactionArray.length !== 10 && transactionArray.length !== 13) throw new transaction_js_1.InvalidSerializedTransactionError({\n    attributes: {\n      chainId,\n      nonce,\n      maxPriorityFeePerGas,\n      maxFeePerGas,\n      gas,\n      to,\n      value,\n      data,\n      accessList,\n      authorizationList,\n      ...(transactionArray.length > 9 ? {\n        v,\n        r,\n        s\n      } : {})\n    },\n    serializedTransaction,\n    type: 'eip7702'\n  });\n  const transaction = {\n    chainId: (0, fromHex_js_1.hexToNumber)(chainId),\n    type: 'eip7702'\n  };\n  if ((0, isHex_js_1.isHex)(to) && to !== '0x') transaction.to = to;\n  if ((0, isHex_js_1.isHex)(gas) && gas !== '0x') transaction.gas = (0, fromHex_js_1.hexToBigInt)(gas);\n  if ((0, isHex_js_1.isHex)(data) && data !== '0x') transaction.data = data;\n  if ((0, isHex_js_1.isHex)(nonce)) transaction.nonce = nonce === '0x' ? 0 : (0, fromHex_js_1.hexToNumber)(nonce);\n  if ((0, isHex_js_1.isHex)(value) && value !== '0x') transaction.value = (0, fromHex_js_1.hexToBigInt)(value);\n  if ((0, isHex_js_1.isHex)(maxFeePerGas) && maxFeePerGas !== '0x') transaction.maxFeePerGas = (0, fromHex_js_1.hexToBigInt)(maxFeePerGas);\n  if ((0, isHex_js_1.isHex)(maxPriorityFeePerGas) && maxPriorityFeePerGas !== '0x') transaction.maxPriorityFeePerGas = (0, fromHex_js_1.hexToBigInt)(maxPriorityFeePerGas);\n  if (accessList.length !== 0 && accessList !== '0x') transaction.accessList = parseAccessList(accessList);\n  if (authorizationList.length !== 0 && authorizationList !== '0x') transaction.authorizationList = parseAuthorizationList(authorizationList);\n  (0, assertTransaction_js_1.assertTransactionEIP7702)(transaction);\n  const signature = transactionArray.length === 13 ? parseEIP155Signature(transactionArray) : undefined;\n  return {\n    ...signature,\n    ...transaction\n  };\n}\nfunction parseTransactionEIP4844(serializedTransaction) {\n  const transactionOrWrapperArray = toTransactionArray(serializedTransaction);\n  const hasNetworkWrapper = transactionOrWrapperArray.length === 4;\n  const transactionArray = hasNetworkWrapper ? transactionOrWrapperArray[0] : transactionOrWrapperArray;\n  const wrapperArray = hasNetworkWrapper ? transactionOrWrapperArray.slice(1) : [];\n  const [chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gas, to, value, data, accessList, maxFeePerBlobGas, blobVersionedHashes, v, r, s] = transactionArray;\n  const [blobs, commitments, proofs] = wrapperArray;\n  if (!(transactionArray.length === 11 || transactionArray.length === 14)) throw new transaction_js_1.InvalidSerializedTransactionError({\n    attributes: {\n      chainId,\n      nonce,\n      maxPriorityFeePerGas,\n      maxFeePerGas,\n      gas,\n      to,\n      value,\n      data,\n      accessList,\n      ...(transactionArray.length > 9 ? {\n        v,\n        r,\n        s\n      } : {})\n    },\n    serializedTransaction,\n    type: 'eip4844'\n  });\n  const transaction = {\n    blobVersionedHashes: blobVersionedHashes,\n    chainId: (0, fromHex_js_1.hexToNumber)(chainId),\n    type: 'eip4844'\n  };\n  if ((0, isHex_js_1.isHex)(to) && to !== '0x') transaction.to = to;\n  if ((0, isHex_js_1.isHex)(gas) && gas !== '0x') transaction.gas = (0, fromHex_js_1.hexToBigInt)(gas);\n  if ((0, isHex_js_1.isHex)(data) && data !== '0x') transaction.data = data;\n  if ((0, isHex_js_1.isHex)(nonce)) transaction.nonce = nonce === '0x' ? 0 : (0, fromHex_js_1.hexToNumber)(nonce);\n  if ((0, isHex_js_1.isHex)(value) && value !== '0x') transaction.value = (0, fromHex_js_1.hexToBigInt)(value);\n  if ((0, isHex_js_1.isHex)(maxFeePerBlobGas) && maxFeePerBlobGas !== '0x') transaction.maxFeePerBlobGas = (0, fromHex_js_1.hexToBigInt)(maxFeePerBlobGas);\n  if ((0, isHex_js_1.isHex)(maxFeePerGas) && maxFeePerGas !== '0x') transaction.maxFeePerGas = (0, fromHex_js_1.hexToBigInt)(maxFeePerGas);\n  if ((0, isHex_js_1.isHex)(maxPriorityFeePerGas) && maxPriorityFeePerGas !== '0x') transaction.maxPriorityFeePerGas = (0, fromHex_js_1.hexToBigInt)(maxPriorityFeePerGas);\n  if (accessList.length !== 0 && accessList !== '0x') transaction.accessList = parseAccessList(accessList);\n  if (blobs && commitments && proofs) transaction.sidecars = (0, toBlobSidecars_js_1.toBlobSidecars)({\n    blobs: blobs,\n    commitments: commitments,\n    proofs: proofs\n  });\n  (0, assertTransaction_js_1.assertTransactionEIP4844)(transaction);\n  const signature = transactionArray.length === 14 ? parseEIP155Signature(transactionArray) : undefined;\n  return {\n    ...signature,\n    ...transaction\n  };\n}\nfunction parseTransactionEIP1559(serializedTransaction) {\n  const transactionArray = toTransactionArray(serializedTransaction);\n  const [chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gas, to, value, data, accessList, v, r, s] = transactionArray;\n  if (!(transactionArray.length === 9 || transactionArray.length === 12)) throw new transaction_js_1.InvalidSerializedTransactionError({\n    attributes: {\n      chainId,\n      nonce,\n      maxPriorityFeePerGas,\n      maxFeePerGas,\n      gas,\n      to,\n      value,\n      data,\n      accessList,\n      ...(transactionArray.length > 9 ? {\n        v,\n        r,\n        s\n      } : {})\n    },\n    serializedTransaction,\n    type: 'eip1559'\n  });\n  const transaction = {\n    chainId: (0, fromHex_js_1.hexToNumber)(chainId),\n    type: 'eip1559'\n  };\n  if ((0, isHex_js_1.isHex)(to) && to !== '0x') transaction.to = to;\n  if ((0, isHex_js_1.isHex)(gas) && gas !== '0x') transaction.gas = (0, fromHex_js_1.hexToBigInt)(gas);\n  if ((0, isHex_js_1.isHex)(data) && data !== '0x') transaction.data = data;\n  if ((0, isHex_js_1.isHex)(nonce)) transaction.nonce = nonce === '0x' ? 0 : (0, fromHex_js_1.hexToNumber)(nonce);\n  if ((0, isHex_js_1.isHex)(value) && value !== '0x') transaction.value = (0, fromHex_js_1.hexToBigInt)(value);\n  if ((0, isHex_js_1.isHex)(maxFeePerGas) && maxFeePerGas !== '0x') transaction.maxFeePerGas = (0, fromHex_js_1.hexToBigInt)(maxFeePerGas);\n  if ((0, isHex_js_1.isHex)(maxPriorityFeePerGas) && maxPriorityFeePerGas !== '0x') transaction.maxPriorityFeePerGas = (0, fromHex_js_1.hexToBigInt)(maxPriorityFeePerGas);\n  if (accessList.length !== 0 && accessList !== '0x') transaction.accessList = parseAccessList(accessList);\n  (0, assertTransaction_js_1.assertTransactionEIP1559)(transaction);\n  const signature = transactionArray.length === 12 ? parseEIP155Signature(transactionArray) : undefined;\n  return {\n    ...signature,\n    ...transaction\n  };\n}\nfunction parseTransactionEIP2930(serializedTransaction) {\n  const transactionArray = toTransactionArray(serializedTransaction);\n  const [chainId, nonce, gasPrice, gas, to, value, data, accessList, v, r, s] = transactionArray;\n  if (!(transactionArray.length === 8 || transactionArray.length === 11)) throw new transaction_js_1.InvalidSerializedTransactionError({\n    attributes: {\n      chainId,\n      nonce,\n      gasPrice,\n      gas,\n      to,\n      value,\n      data,\n      accessList,\n      ...(transactionArray.length > 8 ? {\n        v,\n        r,\n        s\n      } : {})\n    },\n    serializedTransaction,\n    type: 'eip2930'\n  });\n  const transaction = {\n    chainId: (0, fromHex_js_1.hexToNumber)(chainId),\n    type: 'eip2930'\n  };\n  if ((0, isHex_js_1.isHex)(to) && to !== '0x') transaction.to = to;\n  if ((0, isHex_js_1.isHex)(gas) && gas !== '0x') transaction.gas = (0, fromHex_js_1.hexToBigInt)(gas);\n  if ((0, isHex_js_1.isHex)(data) && data !== '0x') transaction.data = data;\n  if ((0, isHex_js_1.isHex)(nonce)) transaction.nonce = nonce === '0x' ? 0 : (0, fromHex_js_1.hexToNumber)(nonce);\n  if ((0, isHex_js_1.isHex)(value) && value !== '0x') transaction.value = (0, fromHex_js_1.hexToBigInt)(value);\n  if ((0, isHex_js_1.isHex)(gasPrice) && gasPrice !== '0x') transaction.gasPrice = (0, fromHex_js_1.hexToBigInt)(gasPrice);\n  if (accessList.length !== 0 && accessList !== '0x') transaction.accessList = parseAccessList(accessList);\n  (0, assertTransaction_js_1.assertTransactionEIP2930)(transaction);\n  const signature = transactionArray.length === 11 ? parseEIP155Signature(transactionArray) : undefined;\n  return {\n    ...signature,\n    ...transaction\n  };\n}\nfunction parseTransactionLegacy(serializedTransaction) {\n  const transactionArray = (0, fromRlp_js_1.fromRlp)(serializedTransaction, 'hex');\n  const [nonce, gasPrice, gas, to, value, data, chainIdOrV_, r, s] = transactionArray;\n  if (!(transactionArray.length === 6 || transactionArray.length === 9)) throw new transaction_js_1.InvalidSerializedTransactionError({\n    attributes: {\n      nonce,\n      gasPrice,\n      gas,\n      to,\n      value,\n      data,\n      ...(transactionArray.length > 6 ? {\n        v: chainIdOrV_,\n        r,\n        s\n      } : {})\n    },\n    serializedTransaction,\n    type: 'legacy'\n  });\n  const transaction = {\n    type: 'legacy'\n  };\n  if ((0, isHex_js_1.isHex)(to) && to !== '0x') transaction.to = to;\n  if ((0, isHex_js_1.isHex)(gas) && gas !== '0x') transaction.gas = (0, fromHex_js_1.hexToBigInt)(gas);\n  if ((0, isHex_js_1.isHex)(data) && data !== '0x') transaction.data = data;\n  if ((0, isHex_js_1.isHex)(nonce)) transaction.nonce = nonce === '0x' ? 0 : (0, fromHex_js_1.hexToNumber)(nonce);\n  if ((0, isHex_js_1.isHex)(value) && value !== '0x') transaction.value = (0, fromHex_js_1.hexToBigInt)(value);\n  if ((0, isHex_js_1.isHex)(gasPrice) && gasPrice !== '0x') transaction.gasPrice = (0, fromHex_js_1.hexToBigInt)(gasPrice);\n  (0, assertTransaction_js_1.assertTransactionLegacy)(transaction);\n  if (transactionArray.length === 6) return transaction;\n  const chainIdOrV = (0, isHex_js_1.isHex)(chainIdOrV_) && chainIdOrV_ !== '0x' ? (0, fromHex_js_1.hexToBigInt)(chainIdOrV_) : 0n;\n  if (s === '0x' && r === '0x') {\n    if (chainIdOrV > 0) transaction.chainId = Number(chainIdOrV);\n    return transaction;\n  }\n  const v = chainIdOrV;\n  const chainId = Number((v - 35n) / 2n);\n  if (chainId > 0) transaction.chainId = chainId;else if (v !== 27n && v !== 28n) throw new transaction_js_1.InvalidLegacyVError({\n    v\n  });\n  transaction.v = v;\n  transaction.s = s;\n  transaction.r = r;\n  transaction.yParity = v % 2n === 0n ? 1 : 0;\n  return transaction;\n}\nfunction toTransactionArray(serializedTransaction) {\n  return (0, fromRlp_js_1.fromRlp)(`0x${serializedTransaction.slice(4)}`, 'hex');\n}\nfunction parseAccessList(accessList_) {\n  const accessList = [];\n  for (let i = 0; i < accessList_.length; i++) {\n    const [address, storageKeys] = accessList_[i];\n    if (!(0, isAddress_js_1.isAddress)(address, {\n      strict: false\n    })) throw new address_js_1.InvalidAddressError({\n      address\n    });\n    accessList.push({\n      address: address,\n      storageKeys: storageKeys.map(key => (0, isHash_js_1.isHash)(key) ? key : (0, trim_js_1.trim)(key))\n    });\n  }\n  return accessList;\n}\nfunction parseAuthorizationList(serializedAuthorizationList) {\n  const authorizationList = [];\n  for (let i = 0; i < serializedAuthorizationList.length; i++) {\n    const [chainId, address, nonce, yParity, r, s] = serializedAuthorizationList[i];\n    authorizationList.push({\n      address,\n      chainId: (0, fromHex_js_1.hexToNumber)(chainId),\n      nonce: (0, fromHex_js_1.hexToNumber)(nonce),\n      ...parseEIP155Signature([yParity, r, s])\n    });\n  }\n  return authorizationList;\n}\nfunction parseEIP155Signature(transactionArray) {\n  const signature = transactionArray.slice(-3);\n  const v = signature[0] === '0x' || (0, fromHex_js_1.hexToBigInt)(signature[0]) === 0n ? 27n : 28n;\n  return {\n    r: (0, pad_js_1.padHex)(signature[1], {\n      size: 32\n    }),\n    s: (0, pad_js_1.padHex)(signature[2], {\n      size: 32\n    }),\n    v,\n    yParity: v === 27n ? 0 : 1\n  };\n}","map":{"version":3,"names":["exports","parseTransaction","toTransactionArray","parseAccessList","address_js_1","require","transaction_js_1","isAddress_js_1","toBlobSidecars_js_1","isHex_js_1","pad_js_1","trim_js_1","fromHex_js_1","fromRlp_js_1","isHash_js_1","assertTransaction_js_1","getSerializedTransactionType_js_1","serializedTransaction","type","getSerializedTransactionType","parseTransactionEIP1559","parseTransactionEIP2930","parseTransactionEIP4844","parseTransactionEIP7702","parseTransactionLegacy","transactionArray","chainId","nonce","maxPriorityFeePerGas","maxFeePerGas","gas","to","value","data","accessList","authorizationList","v","r","s","length","InvalidSerializedTransactionError","attributes","transaction","hexToNumber","isHex","hexToBigInt","parseAuthorizationList","assertTransactionEIP7702","signature","parseEIP155Signature","undefined","transactionOrWrapperArray","hasNetworkWrapper","wrapperArray","slice","maxFeePerBlobGas","blobVersionedHashes","blobs","commitments","proofs","sidecars","toBlobSidecars","assertTransactionEIP4844","assertTransactionEIP1559","gasPrice","assertTransactionEIP2930","fromRlp","chainIdOrV_","assertTransactionLegacy","chainIdOrV","Number","InvalidLegacyVError","yParity","accessList_","i","address","storageKeys","isAddress","strict","InvalidAddressError","push","map","key","isHash","trim","serializedAuthorizationList","padHex","size"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/viem/utils/transaction/parseTransaction.ts"],"sourcesContent":["import {\n  InvalidAddressError,\n  type InvalidAddressErrorType,\n} from '../../errors/address.js'\nimport {\n  InvalidLegacyVError,\n  type InvalidLegacyVErrorType,\n  InvalidSerializedTransactionError,\n  type InvalidSerializedTransactionErrorType,\n} from '../../errors/transaction.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type {\n  SerializedAuthorizationList,\n  SignedAuthorizationList,\n} from '../../types/authorization.js'\nimport type { Hex, Signature } from '../../types/misc.js'\nimport type {\n  AccessList,\n  TransactionRequestEIP2930,\n  TransactionRequestLegacy,\n  TransactionSerializable,\n  TransactionSerializableEIP1559,\n  TransactionSerializableEIP2930,\n  TransactionSerializableEIP4844,\n  TransactionSerializableEIP7702,\n  TransactionSerializableLegacy,\n  TransactionSerialized,\n  TransactionSerializedEIP1559,\n  TransactionSerializedEIP2930,\n  TransactionSerializedEIP4844,\n  TransactionSerializedEIP7702,\n  TransactionSerializedGeneric,\n  TransactionType,\n} from '../../types/transaction.js'\nimport type { IsNarrowable, Mutable } from '../../types/utils.js'\nimport { type IsAddressErrorType, isAddress } from '../address/isAddress.js'\nimport { toBlobSidecars } from '../blob/toBlobSidecars.js'\nimport { type IsHexErrorType, isHex } from '../data/isHex.js'\nimport { type PadHexErrorType, padHex } from '../data/pad.js'\nimport { trim } from '../data/trim.js'\nimport {\n  type HexToBigIntErrorType,\n  type HexToNumberErrorType,\n  hexToBigInt,\n  hexToNumber,\n} from '../encoding/fromHex.js'\nimport { type FromRlpErrorType, fromRlp } from '../encoding/fromRlp.js'\nimport type { RecursiveArray } from '../encoding/toRlp.js'\nimport { isHash } from '../hash/isHash.js'\n\nimport {\n  type AssertTransactionEIP1559ErrorType,\n  type AssertTransactionEIP2930ErrorType,\n  type AssertTransactionEIP4844ErrorType,\n  type AssertTransactionEIP7702ErrorType,\n  type AssertTransactionLegacyErrorType,\n  assertTransactionEIP1559,\n  assertTransactionEIP2930,\n  assertTransactionEIP4844,\n  assertTransactionEIP7702,\n  assertTransactionLegacy,\n} from './assertTransaction.js'\nimport {\n  type GetSerializedTransactionType,\n  type GetSerializedTransactionTypeErrorType,\n  getSerializedTransactionType,\n} from './getSerializedTransactionType.js'\n\nexport type ParseTransactionReturnType<\n  serialized extends TransactionSerializedGeneric = TransactionSerialized,\n  type extends TransactionType = GetSerializedTransactionType<serialized>,\n> = IsNarrowable<serialized, Hex> extends true\n  ?\n      | (type extends 'eip1559' ? TransactionSerializableEIP1559 : never)\n      | (type extends 'eip2930' ? TransactionSerializableEIP2930 : never)\n      | (type extends 'eip4844' ? TransactionSerializableEIP4844 : never)\n      | (type extends 'eip7702' ? TransactionSerializableEIP7702 : never)\n      | (type extends 'legacy' ? TransactionSerializableLegacy : never)\n  : TransactionSerializable\n\nexport type ParseTransactionErrorType =\n  | GetSerializedTransactionTypeErrorType\n  | ParseTransactionEIP1559ErrorType\n  | ParseTransactionEIP2930ErrorType\n  | ParseTransactionEIP4844ErrorType\n  | ParseTransactionEIP7702ErrorType\n  | ParseTransactionLegacyErrorType\n\nexport function parseTransaction<\n  const serialized extends TransactionSerializedGeneric,\n>(serializedTransaction: serialized): ParseTransactionReturnType<serialized> {\n  const type = getSerializedTransactionType(serializedTransaction)\n\n  if (type === 'eip1559')\n    return parseTransactionEIP1559(\n      serializedTransaction as TransactionSerializedEIP1559,\n    ) as ParseTransactionReturnType<serialized>\n\n  if (type === 'eip2930')\n    return parseTransactionEIP2930(\n      serializedTransaction as TransactionSerializedEIP2930,\n    ) as ParseTransactionReturnType<serialized>\n\n  if (type === 'eip4844')\n    return parseTransactionEIP4844(\n      serializedTransaction as TransactionSerializedEIP4844,\n    ) as ParseTransactionReturnType<serialized>\n\n  if (type === 'eip7702')\n    return parseTransactionEIP7702(\n      serializedTransaction as TransactionSerializedEIP7702,\n    ) as ParseTransactionReturnType<serialized>\n\n  return parseTransactionLegacy(\n    serializedTransaction,\n  ) as ParseTransactionReturnType<serialized>\n}\n\ntype ParseTransactionEIP7702ErrorType =\n  | ToTransactionArrayErrorType\n  | AssertTransactionEIP7702ErrorType\n  | ToTransactionArrayErrorType\n  | HexToBigIntErrorType\n  | HexToNumberErrorType\n  | InvalidLegacyVErrorType\n  | InvalidSerializedTransactionErrorType\n  | IsHexErrorType\n  | ParseAuthorizationListErrorType\n  | ParseEIP155SignatureErrorType\n  | ErrorType\n\nfunction parseTransactionEIP7702(\n  serializedTransaction: TransactionSerializedEIP7702,\n): TransactionSerializableEIP7702 {\n  const transactionArray = toTransactionArray(serializedTransaction)\n\n  const [\n    chainId,\n    nonce,\n    maxPriorityFeePerGas,\n    maxFeePerGas,\n    gas,\n    to,\n    value,\n    data,\n    accessList,\n    authorizationList,\n    v,\n    r,\n    s,\n  ] = transactionArray\n\n  if (transactionArray.length !== 10 && transactionArray.length !== 13)\n    throw new InvalidSerializedTransactionError({\n      attributes: {\n        chainId,\n        nonce,\n        maxPriorityFeePerGas,\n        maxFeePerGas,\n        gas,\n        to,\n        value,\n        data,\n        accessList,\n        authorizationList,\n        ...(transactionArray.length > 9\n          ? {\n              v,\n              r,\n              s,\n            }\n          : {}),\n      },\n      serializedTransaction,\n      type: 'eip7702',\n    })\n\n  const transaction = {\n    chainId: hexToNumber(chainId as Hex),\n    type: 'eip7702',\n  } as TransactionSerializableEIP7702\n  if (isHex(to) && to !== '0x') transaction.to = to\n  if (isHex(gas) && gas !== '0x') transaction.gas = hexToBigInt(gas)\n  if (isHex(data) && data !== '0x') transaction.data = data\n  if (isHex(nonce)) transaction.nonce = nonce === '0x' ? 0 : hexToNumber(nonce)\n  if (isHex(value) && value !== '0x') transaction.value = hexToBigInt(value)\n  if (isHex(maxFeePerGas) && maxFeePerGas !== '0x')\n    transaction.maxFeePerGas = hexToBigInt(maxFeePerGas)\n  if (isHex(maxPriorityFeePerGas) && maxPriorityFeePerGas !== '0x')\n    transaction.maxPriorityFeePerGas = hexToBigInt(maxPriorityFeePerGas)\n  if (accessList.length !== 0 && accessList !== '0x')\n    transaction.accessList = parseAccessList(accessList as RecursiveArray<Hex>)\n  if (authorizationList.length !== 0 && authorizationList !== '0x')\n    transaction.authorizationList = parseAuthorizationList(\n      authorizationList as SerializedAuthorizationList,\n    )\n\n  assertTransactionEIP7702(transaction)\n\n  const signature =\n    transactionArray.length === 13\n      ? parseEIP155Signature(transactionArray as RecursiveArray<Hex>)\n      : undefined\n\n  return { ...signature, ...transaction }\n}\n\ntype ParseTransactionEIP4844ErrorType =\n  | ToTransactionArrayErrorType\n  | AssertTransactionEIP4844ErrorType\n  | ToTransactionArrayErrorType\n  | HexToBigIntErrorType\n  | HexToNumberErrorType\n  | InvalidLegacyVErrorType\n  | InvalidSerializedTransactionErrorType\n  | IsHexErrorType\n  | ParseEIP155SignatureErrorType\n  | ErrorType\n\nfunction parseTransactionEIP4844(\n  serializedTransaction: TransactionSerializedEIP4844,\n): TransactionSerializableEIP4844 {\n  const transactionOrWrapperArray = toTransactionArray(serializedTransaction)\n\n  const hasNetworkWrapper = transactionOrWrapperArray.length === 4\n\n  const transactionArray = hasNetworkWrapper\n    ? transactionOrWrapperArray[0]\n    : transactionOrWrapperArray\n  const wrapperArray = hasNetworkWrapper\n    ? transactionOrWrapperArray.slice(1)\n    : []\n\n  const [\n    chainId,\n    nonce,\n    maxPriorityFeePerGas,\n    maxFeePerGas,\n    gas,\n    to,\n    value,\n    data,\n    accessList,\n    maxFeePerBlobGas,\n    blobVersionedHashes,\n    v,\n    r,\n    s,\n  ] = transactionArray\n  const [blobs, commitments, proofs] = wrapperArray\n\n  if (!(transactionArray.length === 11 || transactionArray.length === 14))\n    throw new InvalidSerializedTransactionError({\n      attributes: {\n        chainId,\n        nonce,\n        maxPriorityFeePerGas,\n        maxFeePerGas,\n        gas,\n        to,\n        value,\n        data,\n        accessList,\n        ...(transactionArray.length > 9\n          ? {\n              v,\n              r,\n              s,\n            }\n          : {}),\n      },\n      serializedTransaction,\n      type: 'eip4844',\n    })\n\n  const transaction = {\n    blobVersionedHashes: blobVersionedHashes as Hex[],\n    chainId: hexToNumber(chainId as Hex),\n    type: 'eip4844',\n  } as TransactionSerializableEIP4844\n  if (isHex(to) && to !== '0x') transaction.to = to\n  if (isHex(gas) && gas !== '0x') transaction.gas = hexToBigInt(gas)\n  if (isHex(data) && data !== '0x') transaction.data = data\n  if (isHex(nonce)) transaction.nonce = nonce === '0x' ? 0 : hexToNumber(nonce)\n  if (isHex(value) && value !== '0x') transaction.value = hexToBigInt(value)\n  if (isHex(maxFeePerBlobGas) && maxFeePerBlobGas !== '0x')\n    transaction.maxFeePerBlobGas = hexToBigInt(maxFeePerBlobGas)\n  if (isHex(maxFeePerGas) && maxFeePerGas !== '0x')\n    transaction.maxFeePerGas = hexToBigInt(maxFeePerGas)\n  if (isHex(maxPriorityFeePerGas) && maxPriorityFeePerGas !== '0x')\n    transaction.maxPriorityFeePerGas = hexToBigInt(maxPriorityFeePerGas)\n  if (accessList.length !== 0 && accessList !== '0x')\n    transaction.accessList = parseAccessList(accessList as RecursiveArray<Hex>)\n  if (blobs && commitments && proofs)\n    transaction.sidecars = toBlobSidecars({\n      blobs: blobs as Hex[],\n      commitments: commitments as Hex[],\n      proofs: proofs as Hex[],\n    })\n\n  assertTransactionEIP4844(transaction)\n\n  const signature =\n    transactionArray.length === 14\n      ? parseEIP155Signature(transactionArray as RecursiveArray<Hex>)\n      : undefined\n\n  return { ...signature, ...transaction }\n}\n\ntype ParseTransactionEIP1559ErrorType =\n  | ToTransactionArrayErrorType\n  | AssertTransactionEIP1559ErrorType\n  | ToTransactionArrayErrorType\n  | HexToBigIntErrorType\n  | HexToNumberErrorType\n  | InvalidLegacyVErrorType\n  | InvalidSerializedTransactionErrorType\n  | IsHexErrorType\n  | ParseEIP155SignatureErrorType\n  | ParseAccessListErrorType\n  | ErrorType\n\nfunction parseTransactionEIP1559(\n  serializedTransaction: TransactionSerializedEIP1559,\n): TransactionSerializableEIP1559 {\n  const transactionArray = toTransactionArray(serializedTransaction)\n\n  const [\n    chainId,\n    nonce,\n    maxPriorityFeePerGas,\n    maxFeePerGas,\n    gas,\n    to,\n    value,\n    data,\n    accessList,\n    v,\n    r,\n    s,\n  ] = transactionArray\n\n  if (!(transactionArray.length === 9 || transactionArray.length === 12))\n    throw new InvalidSerializedTransactionError({\n      attributes: {\n        chainId,\n        nonce,\n        maxPriorityFeePerGas,\n        maxFeePerGas,\n        gas,\n        to,\n        value,\n        data,\n        accessList,\n        ...(transactionArray.length > 9\n          ? {\n              v,\n              r,\n              s,\n            }\n          : {}),\n      },\n      serializedTransaction,\n      type: 'eip1559',\n    })\n\n  const transaction: TransactionSerializableEIP1559 = {\n    chainId: hexToNumber(chainId as Hex),\n    type: 'eip1559',\n  }\n  if (isHex(to) && to !== '0x') transaction.to = to\n  if (isHex(gas) && gas !== '0x') transaction.gas = hexToBigInt(gas)\n  if (isHex(data) && data !== '0x') transaction.data = data\n  if (isHex(nonce)) transaction.nonce = nonce === '0x' ? 0 : hexToNumber(nonce)\n  if (isHex(value) && value !== '0x') transaction.value = hexToBigInt(value)\n  if (isHex(maxFeePerGas) && maxFeePerGas !== '0x')\n    transaction.maxFeePerGas = hexToBigInt(maxFeePerGas)\n  if (isHex(maxPriorityFeePerGas) && maxPriorityFeePerGas !== '0x')\n    transaction.maxPriorityFeePerGas = hexToBigInt(maxPriorityFeePerGas)\n  if (accessList.length !== 0 && accessList !== '0x')\n    transaction.accessList = parseAccessList(accessList as RecursiveArray<Hex>)\n\n  assertTransactionEIP1559(transaction)\n\n  const signature =\n    transactionArray.length === 12\n      ? parseEIP155Signature(transactionArray)\n      : undefined\n\n  return { ...signature, ...transaction }\n}\n\ntype ParseTransactionEIP2930ErrorType =\n  | ToTransactionArrayErrorType\n  | AssertTransactionEIP2930ErrorType\n  | ToTransactionArrayErrorType\n  | HexToBigIntErrorType\n  | HexToNumberErrorType\n  | InvalidLegacyVErrorType\n  | InvalidSerializedTransactionErrorType\n  | IsHexErrorType\n  | ParseEIP155SignatureErrorType\n  | ParseAccessListErrorType\n  | ErrorType\n\nfunction parseTransactionEIP2930(\n  serializedTransaction: TransactionSerializedEIP2930,\n): Omit<TransactionRequestEIP2930, 'from'> &\n  ({ chainId: number } | ({ chainId: number } & Signature)) {\n  const transactionArray = toTransactionArray(serializedTransaction)\n\n  const [chainId, nonce, gasPrice, gas, to, value, data, accessList, v, r, s] =\n    transactionArray\n\n  if (!(transactionArray.length === 8 || transactionArray.length === 11))\n    throw new InvalidSerializedTransactionError({\n      attributes: {\n        chainId,\n        nonce,\n        gasPrice,\n        gas,\n        to,\n        value,\n        data,\n        accessList,\n        ...(transactionArray.length > 8\n          ? {\n              v,\n              r,\n              s,\n            }\n          : {}),\n      },\n      serializedTransaction,\n      type: 'eip2930',\n    })\n\n  const transaction: TransactionSerializableEIP2930 = {\n    chainId: hexToNumber(chainId as Hex),\n    type: 'eip2930',\n  }\n  if (isHex(to) && to !== '0x') transaction.to = to\n  if (isHex(gas) && gas !== '0x') transaction.gas = hexToBigInt(gas)\n  if (isHex(data) && data !== '0x') transaction.data = data\n  if (isHex(nonce)) transaction.nonce = nonce === '0x' ? 0 : hexToNumber(nonce)\n  if (isHex(value) && value !== '0x') transaction.value = hexToBigInt(value)\n  if (isHex(gasPrice) && gasPrice !== '0x')\n    transaction.gasPrice = hexToBigInt(gasPrice)\n  if (accessList.length !== 0 && accessList !== '0x')\n    transaction.accessList = parseAccessList(accessList as RecursiveArray<Hex>)\n\n  assertTransactionEIP2930(transaction)\n\n  const signature =\n    transactionArray.length === 11\n      ? parseEIP155Signature(transactionArray)\n      : undefined\n\n  return { ...signature, ...transaction }\n}\n\ntype ParseTransactionLegacyErrorType =\n  | AssertTransactionLegacyErrorType\n  | FromRlpErrorType\n  | HexToBigIntErrorType\n  | HexToNumberErrorType\n  | InvalidLegacyVErrorType\n  | InvalidSerializedTransactionErrorType\n  | IsHexErrorType\n  | ErrorType\n\nfunction parseTransactionLegacy(\n  serializedTransaction: Hex,\n): Omit<TransactionRequestLegacy, 'from'> &\n  ({ chainId?: number | undefined } | ({ chainId: number } & Signature)) {\n  const transactionArray = fromRlp(serializedTransaction, 'hex')\n\n  const [nonce, gasPrice, gas, to, value, data, chainIdOrV_, r, s] =\n    transactionArray\n\n  if (!(transactionArray.length === 6 || transactionArray.length === 9))\n    throw new InvalidSerializedTransactionError({\n      attributes: {\n        nonce,\n        gasPrice,\n        gas,\n        to,\n        value,\n        data,\n        ...(transactionArray.length > 6\n          ? {\n              v: chainIdOrV_,\n              r,\n              s,\n            }\n          : {}),\n      },\n      serializedTransaction,\n      type: 'legacy',\n    })\n\n  const transaction: TransactionSerializableLegacy = {\n    type: 'legacy',\n  }\n  if (isHex(to) && to !== '0x') transaction.to = to\n  if (isHex(gas) && gas !== '0x') transaction.gas = hexToBigInt(gas)\n  if (isHex(data) && data !== '0x') transaction.data = data\n  if (isHex(nonce)) transaction.nonce = nonce === '0x' ? 0 : hexToNumber(nonce)\n  if (isHex(value) && value !== '0x') transaction.value = hexToBigInt(value)\n  if (isHex(gasPrice) && gasPrice !== '0x')\n    transaction.gasPrice = hexToBigInt(gasPrice)\n\n  assertTransactionLegacy(transaction)\n\n  if (transactionArray.length === 6) return transaction\n\n  const chainIdOrV =\n    isHex(chainIdOrV_) && chainIdOrV_ !== '0x'\n      ? hexToBigInt(chainIdOrV_ as Hex)\n      : 0n\n\n  if (s === '0x' && r === '0x') {\n    if (chainIdOrV > 0) transaction.chainId = Number(chainIdOrV)\n    return transaction\n  }\n\n  const v = chainIdOrV\n\n  const chainId: number | undefined = Number((v - 35n) / 2n)\n  if (chainId > 0) transaction.chainId = chainId\n  else if (v !== 27n && v !== 28n) throw new InvalidLegacyVError({ v })\n\n  transaction.v = v\n  transaction.s = s as Hex\n  transaction.r = r as Hex\n  transaction.yParity = v % 2n === 0n ? 1 : 0\n\n  return transaction\n}\n\ntype ToTransactionArrayErrorType = FromRlpErrorType | ErrorType\n\nexport function toTransactionArray(serializedTransaction: string) {\n  return fromRlp(`0x${serializedTransaction.slice(4)}` as Hex, 'hex')\n}\n\ntype ParseAccessListErrorType =\n  | InvalidAddressErrorType\n  | IsAddressErrorType\n  | ErrorType\n\nexport function parseAccessList(accessList_: RecursiveArray<Hex>): AccessList {\n  const accessList: Mutable<AccessList> = []\n  for (let i = 0; i < accessList_.length; i++) {\n    const [address, storageKeys] = accessList_[i] as [Hex, Hex[]]\n\n    if (!isAddress(address, { strict: false }))\n      throw new InvalidAddressError({ address })\n\n    accessList.push({\n      address: address,\n      storageKeys: storageKeys.map((key) => (isHash(key) ? key : trim(key))),\n    })\n  }\n  return accessList\n}\n\ntype ParseAuthorizationListErrorType =\n  | HexToNumberErrorType\n  | ParseEIP155SignatureErrorType\n  | ErrorType\n\nfunction parseAuthorizationList(\n  serializedAuthorizationList: SerializedAuthorizationList,\n): SignedAuthorizationList {\n  const authorizationList: Mutable<SignedAuthorizationList> = []\n  for (let i = 0; i < serializedAuthorizationList.length; i++) {\n    const [chainId, address, nonce, yParity, r, s] =\n      serializedAuthorizationList[i]\n\n    authorizationList.push({\n      address,\n      chainId: hexToNumber(chainId),\n      nonce: hexToNumber(nonce),\n      ...parseEIP155Signature([yParity, r, s]),\n    })\n  }\n  return authorizationList\n}\n\ntype ParseEIP155SignatureErrorType =\n  | HexToBigIntErrorType\n  | PadHexErrorType\n  | ErrorType\n\nfunction parseEIP155Signature(\n  transactionArray: RecursiveArray<Hex>,\n): Signature & { yParity: number } {\n  const signature = transactionArray.slice(-3)\n  const v =\n    signature[0] === '0x' || hexToBigInt(signature[0] as Hex) === 0n ? 27n : 28n\n  return {\n    r: padHex(signature[1] as Hex, { size: 32 }),\n    s: padHex(signature[2] as Hex, { size: 32 }),\n    v,\n    yParity: v === 27n ? 0 : 1,\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}