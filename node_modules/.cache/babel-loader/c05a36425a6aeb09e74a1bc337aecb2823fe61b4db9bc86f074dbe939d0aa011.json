{"ast":null,"code":"import * as Hex from './Hex.js';\nimport * as Transaction from './Transaction.js';\nimport * as Withdrawal from './Withdrawal.js';\n/**\n * Converts a {@link ox#Block.Block} to an {@link ox#Block.Rpc}.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Block } from 'ox'\n *\n * const block = Block.toRpc({\n *   // ...\n *   hash: '0xebc3644804e4040c0a74c5a5bbbc6b46a71a5d4010fe0c92ebb2fdf4a43ea5dd',\n *   number: 19868020n,\n *   size: 520n\n *   timestamp: 1662222222n,\n *   // ...\n * })\n * // @log: {\n * // @log:   // ...\n * // @log:   hash: '0xebc3644804e4040c0a74c5a5bbbc6b46a71a5d4010fe0c92ebb2fdf4a43ea5dd',\n * // @log:   number: '0xec6fc6',\n * // @log:   size: '0x208',\n * // @log:   timestamp: '0x63198f6f',\n * // @log:   // ...\n * // @log: }\n * ```\n *\n * @param block - The Block to convert.\n * @returns An RPC Block.\n */\nexport function toRpc(block, _options = {}) {\n  const transactions = block.transactions.map(transaction => {\n    if (typeof transaction === 'string') return transaction;\n    return Transaction.toRpc(transaction);\n  });\n  return {\n    baseFeePerGas: typeof block.baseFeePerGas === 'bigint' ? Hex.fromNumber(block.baseFeePerGas) : undefined,\n    blobGasUsed: typeof block.blobGasUsed === 'bigint' ? Hex.fromNumber(block.blobGasUsed) : undefined,\n    excessBlobGas: typeof block.excessBlobGas === 'bigint' ? Hex.fromNumber(block.excessBlobGas) : undefined,\n    extraData: block.extraData,\n    difficulty: typeof block.difficulty === 'bigint' ? Hex.fromNumber(block.difficulty) : undefined,\n    gasLimit: Hex.fromNumber(block.gasLimit),\n    gasUsed: Hex.fromNumber(block.gasUsed),\n    hash: block.hash,\n    logsBloom: block.logsBloom,\n    miner: block.miner,\n    mixHash: block.mixHash,\n    nonce: block.nonce,\n    number: typeof block.number === 'bigint' ? Hex.fromNumber(block.number) : null,\n    parentBeaconBlockRoot: block.parentBeaconBlockRoot,\n    parentHash: block.parentHash,\n    receiptsRoot: block.receiptsRoot,\n    sealFields: block.sealFields,\n    sha3Uncles: block.sha3Uncles,\n    size: Hex.fromNumber(block.size),\n    stateRoot: block.stateRoot,\n    timestamp: Hex.fromNumber(block.timestamp),\n    totalDifficulty: typeof block.totalDifficulty === 'bigint' ? Hex.fromNumber(block.totalDifficulty) : undefined,\n    transactions,\n    transactionsRoot: block.transactionsRoot,\n    uncles: block.uncles,\n    withdrawals: block.withdrawals?.map(Withdrawal.toRpc),\n    withdrawalsRoot: block.withdrawalsRoot\n  };\n}\n/**\n * Converts a {@link ox#Block.Rpc} to an {@link ox#Block.Block}.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Block } from 'ox'\n *\n * const block = Block.fromRpc({\n *   // ...\n *   hash: '0xebc3644804e4040c0a74c5a5bbbc6b46a71a5d4010fe0c92ebb2fdf4a43ea5dd',\n *   number: '0xec6fc6',\n *   size: '0x208',\n *   timestamp: '0x63198f6f',\n *   // ...\n * })\n * // @log: {\n * // @log:   // ...\n * // @log:   hash: '0xebc3644804e4040c0a74c5a5bbbc6b46a71a5d4010fe0c92ebb2fdf4a43ea5dd',\n * // @log:   number: 19868020n,\n * // @log:   size: 520n,\n * // @log:   timestamp: 1662222222n,\n * // @log:   // ...\n * // @log: }\n * ```\n *\n * @example\n * ### End-to-end\n *\n * Below is an end-to-end example of using `Block.fromRpc` to fetch a block from the network and convert it to an {@link ox#Block.Block}.\n *\n * ```ts twoslash\n * import 'ox/window'\n * import { Block } from 'ox'\n *\n * const block = await window.ethereum!\n *   .request({\n *     method: 'eth_getBlockByNumber',\n *     params: ['latest', false],\n *   })\n *   .then(Block.fromRpc) // [!code hl]\n * // @log: {\n * // @log:   // ...\n * // @log:   hash: '0xebc3644804e4040c0a74c5a5bbbc6b46a71a5d4010fe0c92ebb2fdf4a43ea5dd',\n * // @log:   number: 19868020n,\n * // @log:   size: 520n,\n * // @log:   timestamp: 1662222222n,\n * // @log:   // ...\n * // @log: }\n * ```\n *\n * :::note\n *\n * For simplicity, the above example uses `window.ethereum.request`, but you can use any\n * type of JSON-RPC interface.\n *\n * :::\n *\n * @param block - The RPC block to convert.\n * @returns An instantiated {@link ox#Block.Block}.\n */\nexport function fromRpc(block, _options = {}) {\n  if (!block) return null;\n  const transactions = block.transactions.map(transaction => {\n    if (typeof transaction === 'string') return transaction;\n    return Transaction.fromRpc(transaction);\n  });\n  return {\n    ...block,\n    baseFeePerGas: block.baseFeePerGas ? BigInt(block.baseFeePerGas) : undefined,\n    blobGasUsed: block.blobGasUsed ? BigInt(block.blobGasUsed) : undefined,\n    difficulty: block.difficulty ? BigInt(block.difficulty) : undefined,\n    excessBlobGas: block.excessBlobGas ? BigInt(block.excessBlobGas) : undefined,\n    gasLimit: BigInt(block.gasLimit ?? 0n),\n    gasUsed: BigInt(block.gasUsed ?? 0n),\n    number: block.number ? BigInt(block.number) : null,\n    size: BigInt(block.size ?? 0n),\n    stateRoot: block.stateRoot,\n    timestamp: BigInt(block.timestamp ?? 0n),\n    totalDifficulty: BigInt(block.totalDifficulty ?? 0n),\n    transactions,\n    withdrawals: block.withdrawals?.map(Withdrawal.fromRpc)\n  };\n}","map":{"version":3,"names":["Hex","Transaction","Withdrawal","toRpc","block","_options","transactions","map","transaction","baseFeePerGas","fromNumber","undefined","blobGasUsed","excessBlobGas","extraData","difficulty","gasLimit","gasUsed","hash","logsBloom","miner","mixHash","nonce","number","parentBeaconBlockRoot","parentHash","receiptsRoot","sealFields","sha3Uncles","size","stateRoot","timestamp","totalDifficulty","transactionsRoot","uncles","withdrawals","withdrawalsRoot","fromRpc","BigInt"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/ox/core/Block.ts"],"sourcesContent":["import type * as Address from './Address.js'\nimport type * as Errors from './Errors.js'\nimport * as Hex from './Hex.js'\nimport * as Transaction from './Transaction.js'\nimport * as Withdrawal from './Withdrawal.js'\nimport type { Compute, OneOf } from './internal/types.js'\n\n/** A Block as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/main/src/schemas/block.yaml). */\nexport type Block<\n  includeTransactions extends boolean = false,\n  blockTag extends Tag = 'latest',\n  bigintType = bigint,\n  numberType = number,\n  transaction = Transaction.Transaction<\n    blockTag extends 'pending' ? true : false,\n    bigintType,\n    numberType\n  >,\n> = Compute<{\n  /** Base fee per gas */\n  baseFeePerGas?: bigintType | undefined\n  /** Total used blob gas by all transactions in this block */\n  blobGasUsed?: bigintType | undefined\n  /** Difficulty for this block */\n  difficulty?: bigintType | undefined\n  /** Excess blob gas */\n  excessBlobGas?: bigintType | undefined\n  /** \"Extra data\" field of this block */\n  extraData?: Hex.Hex | undefined\n  /** Maximum gas allowed in this block */\n  gasLimit: bigintType\n  /** Total used gas by all transactions in this block */\n  gasUsed: bigintType\n  /** Block hash or `null` if pending */\n  hash: blockTag extends 'pending' ? null : Hex.Hex\n  /** Logs bloom filter or `null` if pending */\n  logsBloom: blockTag extends 'pending' ? null : Hex.Hex\n  /** Address that received this block’s mining rewards */\n  miner: Address.Address\n  /** Unique identifier for the block. */\n  mixHash: Hex.Hex\n  /** Proof-of-work hash or `null` if pending */\n  nonce: blockTag extends 'pending' ? null : Hex.Hex\n  /** Block number or `null` if pending */\n  number: blockTag extends 'pending' ? null : bigintType\n  parentBeaconBlockRoot?: Hex.Hex | undefined\n  /** Parent block hash */\n  parentHash: Hex.Hex\n  /** Root of the this block’s receipts trie */\n  receiptsRoot: Hex.Hex\n  sealFields?: readonly Hex.Hex[] | undefined\n  /** SHA3 of the uncles data in this block */\n  sha3Uncles: Hex.Hex\n  /** Size of this block in bytes */\n  size: bigintType\n  /** Root of this block’s final state trie */\n  stateRoot: Hex.Hex\n  /** Unix timestamp of when this block was collated */\n  timestamp: bigintType\n  /** Total difficulty of the chain until this block */\n  totalDifficulty?: bigintType | undefined\n  /** List of transaction objects or hashes */\n  transactions: includeTransactions extends true\n    ? readonly transaction[]\n    : readonly Hex.Hex[]\n  /** Root of this block’s transaction trie */\n  transactionsRoot: Hex.Hex\n  /** List of uncle hashes */\n  uncles: readonly Hex.Hex[]\n  /** List of withdrawal objects */\n  withdrawals?:\n    | readonly Withdrawal.Withdrawal<bigintType, numberType>[]\n    | undefined\n  /** Root of the this block’s withdrawals trie */\n  withdrawalsRoot?: Hex.Hex | undefined\n}>\n\n/** A Block hash. */\nexport type Hash = Hex.Hex\n\n/** A Block identifier. */\nexport type Identifier<bigintType = bigint> = {\n  /** Whether or not to throw an error if the block is not in the canonical chain as described below. Only allowed in conjunction with the blockHash tag. Defaults to false. */\n  requireCanonical?: boolean | undefined\n} & OneOf<\n  | {\n      /** The block in the canonical chain with this number */\n      blockNumber: Number<bigintType>\n    }\n  | {\n      /** The block uniquely identified by this hash. The `blockNumber` and `blockHash` properties are mutually exclusive; exactly one of them must be set. */\n      blockHash: Hash\n    }\n>\n\n/** A Block number. */\nexport type Number<bigintType = bigint> = bigintType\n\n/** An RPC Block as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/main/src/schemas/block.yaml). */\nexport type Rpc<\n  includeTransactions extends boolean = boolean,\n  blockTag extends Tag = 'latest',\n  transaction = Transaction.Rpc<blockTag extends 'pending' ? true : false>,\n> = Block<includeTransactions, blockTag, Hex.Hex, Hex.Hex, transaction>\n\n/**\n * A Block Tag as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/main/src/schemas/block.yaml).\n *\n * - `earliest`: The lowest numbered block the client has available;\n * - `finalized`: The most recent crypto-economically secure block, cannot be re-orged outside of manual intervention driven by community coordination;\n * - `safe`: The most recent block that is safe from re-orgs under honest majority and certain synchronicity assumptions;\n * - `latest`: The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions;\n * - `pending`: A sample next block built by the client on top of `latest` and containing the set of transactions usually taken from local mempool.\n */\nexport type Tag = 'latest' | 'earliest' | 'pending' | 'safe' | 'finalized'\n\n/**\n * Converts a {@link ox#Block.Block} to an {@link ox#Block.Rpc}.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Block } from 'ox'\n *\n * const block = Block.toRpc({\n *   // ...\n *   hash: '0xebc3644804e4040c0a74c5a5bbbc6b46a71a5d4010fe0c92ebb2fdf4a43ea5dd',\n *   number: 19868020n,\n *   size: 520n\n *   timestamp: 1662222222n,\n *   // ...\n * })\n * // @log: {\n * // @log:   // ...\n * // @log:   hash: '0xebc3644804e4040c0a74c5a5bbbc6b46a71a5d4010fe0c92ebb2fdf4a43ea5dd',\n * // @log:   number: '0xec6fc6',\n * // @log:   size: '0x208',\n * // @log:   timestamp: '0x63198f6f',\n * // @log:   // ...\n * // @log: }\n * ```\n *\n * @param block - The Block to convert.\n * @returns An RPC Block.\n */\nexport function toRpc<\n  includeTransactions extends boolean = false,\n  blockTag extends Tag = 'latest',\n>(\n  block: Block<includeTransactions, blockTag>,\n  _options: toRpc.Options<includeTransactions, blockTag> = {},\n): Rpc<boolean, blockTag> {\n  const transactions = block.transactions.map((transaction) => {\n    if (typeof transaction === 'string') return transaction\n    return Transaction.toRpc(transaction as any) as any\n  })\n  return {\n    baseFeePerGas:\n      typeof block.baseFeePerGas === 'bigint'\n        ? Hex.fromNumber(block.baseFeePerGas)\n        : undefined,\n    blobGasUsed:\n      typeof block.blobGasUsed === 'bigint'\n        ? Hex.fromNumber(block.blobGasUsed)\n        : undefined,\n    excessBlobGas:\n      typeof block.excessBlobGas === 'bigint'\n        ? Hex.fromNumber(block.excessBlobGas)\n        : undefined,\n    extraData: block.extraData,\n    difficulty:\n      typeof block.difficulty === 'bigint'\n        ? Hex.fromNumber(block.difficulty)\n        : undefined,\n    gasLimit: Hex.fromNumber(block.gasLimit),\n    gasUsed: Hex.fromNumber(block.gasUsed),\n    hash: block.hash,\n    logsBloom: block.logsBloom,\n    miner: block.miner,\n    mixHash: block.mixHash,\n    nonce: block.nonce,\n    number: (typeof block.number === 'bigint'\n      ? Hex.fromNumber(block.number)\n      : null) as never,\n    parentBeaconBlockRoot: block.parentBeaconBlockRoot,\n    parentHash: block.parentHash,\n    receiptsRoot: block.receiptsRoot,\n    sealFields: block.sealFields,\n    sha3Uncles: block.sha3Uncles,\n    size: Hex.fromNumber(block.size),\n    stateRoot: block.stateRoot,\n    timestamp: Hex.fromNumber(block.timestamp),\n    totalDifficulty:\n      typeof block.totalDifficulty === 'bigint'\n        ? Hex.fromNumber(block.totalDifficulty)\n        : undefined,\n    transactions,\n    transactionsRoot: block.transactionsRoot,\n    uncles: block.uncles,\n    withdrawals: block.withdrawals?.map(Withdrawal.toRpc),\n    withdrawalsRoot: block.withdrawalsRoot,\n  }\n}\n\nexport declare namespace toRpc {\n  type Options<\n    includeTransactions extends boolean = false,\n    blockTag extends Tag = 'latest',\n  > = {\n    blockTag?: blockTag | Tag | undefined\n    includeTransactions?: includeTransactions | boolean | undefined\n  }\n\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Converts a {@link ox#Block.Rpc} to an {@link ox#Block.Block}.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Block } from 'ox'\n *\n * const block = Block.fromRpc({\n *   // ...\n *   hash: '0xebc3644804e4040c0a74c5a5bbbc6b46a71a5d4010fe0c92ebb2fdf4a43ea5dd',\n *   number: '0xec6fc6',\n *   size: '0x208',\n *   timestamp: '0x63198f6f',\n *   // ...\n * })\n * // @log: {\n * // @log:   // ...\n * // @log:   hash: '0xebc3644804e4040c0a74c5a5bbbc6b46a71a5d4010fe0c92ebb2fdf4a43ea5dd',\n * // @log:   number: 19868020n,\n * // @log:   size: 520n,\n * // @log:   timestamp: 1662222222n,\n * // @log:   // ...\n * // @log: }\n * ```\n *\n * @example\n * ### End-to-end\n *\n * Below is an end-to-end example of using `Block.fromRpc` to fetch a block from the network and convert it to an {@link ox#Block.Block}.\n *\n * ```ts twoslash\n * import 'ox/window'\n * import { Block } from 'ox'\n *\n * const block = await window.ethereum!\n *   .request({\n *     method: 'eth_getBlockByNumber',\n *     params: ['latest', false],\n *   })\n *   .then(Block.fromRpc) // [!code hl]\n * // @log: {\n * // @log:   // ...\n * // @log:   hash: '0xebc3644804e4040c0a74c5a5bbbc6b46a71a5d4010fe0c92ebb2fdf4a43ea5dd',\n * // @log:   number: 19868020n,\n * // @log:   size: 520n,\n * // @log:   timestamp: 1662222222n,\n * // @log:   // ...\n * // @log: }\n * ```\n *\n * :::note\n *\n * For simplicity, the above example uses `window.ethereum.request`, but you can use any\n * type of JSON-RPC interface.\n *\n * :::\n *\n * @param block - The RPC block to convert.\n * @returns An instantiated {@link ox#Block.Block}.\n */\nexport function fromRpc<\n  const block extends Rpc | null,\n  includeTransactions extends boolean = false,\n  blockTag extends Tag = 'latest',\n>(\n  block: block | Rpc | null,\n  _options: fromRpc.Options<includeTransactions, blockTag> = {},\n): block extends Rpc ? Block<includeTransactions, blockTag> : null {\n  if (!block) return null as never\n\n  const transactions = block.transactions.map((transaction) => {\n    if (typeof transaction === 'string') return transaction\n    return Transaction.fromRpc(transaction) as any\n  })\n  return {\n    ...block,\n    baseFeePerGas: block.baseFeePerGas\n      ? BigInt(block.baseFeePerGas)\n      : undefined,\n    blobGasUsed: block.blobGasUsed ? BigInt(block.blobGasUsed) : undefined,\n    difficulty: block.difficulty ? BigInt(block.difficulty) : undefined,\n    excessBlobGas: block.excessBlobGas\n      ? BigInt(block.excessBlobGas)\n      : undefined,\n    gasLimit: BigInt(block.gasLimit ?? 0n),\n    gasUsed: BigInt(block.gasUsed ?? 0n),\n    number: block.number ? BigInt(block.number) : null,\n    size: BigInt(block.size ?? 0n),\n    stateRoot: block.stateRoot,\n    timestamp: BigInt(block.timestamp ?? 0n),\n    totalDifficulty: BigInt(block.totalDifficulty ?? 0n),\n    transactions,\n    withdrawals: block.withdrawals?.map(Withdrawal.fromRpc),\n  } as Block as never\n}\n\nexport declare namespace fromRpc {\n  type Options<\n    includeTransactions extends boolean = false,\n    blockTag extends Tag = 'latest',\n  > = {\n    blockTag?: blockTag | Tag | undefined\n    includeTransactions?: includeTransactions | boolean | undefined\n  }\n\n  type ErrorType = Errors.GlobalErrorType\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}