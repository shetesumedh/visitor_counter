{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.deployContract = deployContract;\nconst encodeDeployData_js_1 = require(\"../../utils/abi/encodeDeployData.js\");\nconst sendTransaction_js_1 = require(\"./sendTransaction.js\");\nfunction deployContract(walletClient, parameters) {\n  const {\n    abi,\n    args,\n    bytecode,\n    ...request\n  } = parameters;\n  const calldata = (0, encodeDeployData_js_1.encodeDeployData)({\n    abi,\n    args,\n    bytecode\n  });\n  return (0, sendTransaction_js_1.sendTransaction)(walletClient, {\n    ...request,\n    ...(request.authorizationList ? {\n      to: null\n    } : {}),\n    data: calldata\n  });\n}","map":{"version":3,"names":["exports","deployContract","encodeDeployData_js_1","require","sendTransaction_js_1","walletClient","parameters","abi","args","bytecode","request","calldata","encodeDeployData","sendTransaction","authorizationList","to","data"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/viem/actions/wallet/deployContract.ts"],"sourcesContent":["import type { Abi } from 'abitype'\n\nimport type { Account } from '../../accounts/types.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { GetChainParameter } from '../../types/chain.js'\nimport type { ContractConstructorArgs } from '../../types/contract.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { UnionEvaluate, UnionOmit } from '../../types/utils.js'\nimport { encodeDeployData } from '../../utils/abi/encodeDeployData.js'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport {\n  type SendTransactionErrorType,\n  type SendTransactionParameters,\n  type SendTransactionReturnType,\n  sendTransaction,\n} from './sendTransaction.js'\n\nexport type DeployContractParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n  chainOverride extends Chain | undefined = Chain | undefined,\n  ///\n  allArgs = ContractConstructorArgs<abi>,\n> = UnionOmit<\n  SendTransactionParameters<chain, account, chainOverride>,\n  'accessList' | 'chain' | 'to' | 'data'\n> &\n  GetChainParameter<chain, chainOverride> &\n  UnionEvaluate<\n    readonly [] extends allArgs\n      ? { args?: allArgs | undefined }\n      : { args: allArgs }\n  > & {\n    abi: abi\n    bytecode: Hex\n  }\n\nexport type DeployContractReturnType = SendTransactionReturnType\n\nexport type DeployContractErrorType = SendTransactionErrorType | ErrorType\n\n/**\n * Deploys a contract to the network, given bytecode and constructor arguments.\n *\n * - Docs: https://viem.sh/docs/contract/deployContract\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts_deploying-contracts\n *\n * @param client - Client to use\n * @param parameters - {@link DeployContractParameters}\n * @returns The [Transaction](https://viem.sh/docs/glossary/terms#transaction) hash. {@link DeployContractReturnType}\n *\n * @example\n * import { createWalletClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { deployContract } from 'viem/contract'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0x…'),\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const hash = await deployContract(client, {\n *   abi: [],\n *   account: '0x…,\n *   bytecode: '0x608060405260405161083e38038061083e833981016040819052610...',\n * })\n */\nexport function deployContract<\n  const abi extends Abi | readonly unknown[],\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n  chainOverride extends Chain | undefined,\n>(\n  walletClient: Client<Transport, chain, account>,\n  parameters: DeployContractParameters<abi, chain, account, chainOverride>,\n): Promise<DeployContractReturnType> {\n  const { abi, args, bytecode, ...request } =\n    parameters as DeployContractParameters\n  const calldata = encodeDeployData({ abi, args, bytecode })\n  return sendTransaction(walletClient, {\n    ...request,\n    ...(request.authorizationList ? { to: null } : {}),\n    data: calldata,\n  } as unknown as SendTransactionParameters<chain, account, chainOverride>)\n}\n"],"mappings":";;;;;AAwEAA,OAAA,CAAAC,cAAA,GAAAA,cAAA;AA9DA,MAAAC,qBAAA,GAAAC,OAAA;AAGA,MAAAC,oBAAA,GAAAD,OAAA;AA2DA,SAAgBF,cAAcA,CAM5BI,YAA+C,EAC/CC,UAAwE;EAExE,MAAM;IAAEC,GAAG;IAAEC,IAAI;IAAEC,QAAQ;IAAE,GAAGC;EAAO,CAAE,GACvCJ,UAAsC;EACxC,MAAMK,QAAQ,GAAG,IAAAT,qBAAA,CAAAU,gBAAgB,EAAC;IAAEL,GAAG;IAAEC,IAAI;IAAEC;EAAQ,CAAE,CAAC;EAC1D,OAAO,IAAAL,oBAAA,CAAAS,eAAe,EAACR,YAAY,EAAE;IACnC,GAAGK,OAAO;IACV,IAAIA,OAAO,CAACI,iBAAiB,GAAG;MAAEC,EAAE,EAAE;IAAI,CAAE,GAAG,EAAE,CAAC;IAClDC,IAAI,EAAEL;GACgE,CAAC;AAC3E","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}