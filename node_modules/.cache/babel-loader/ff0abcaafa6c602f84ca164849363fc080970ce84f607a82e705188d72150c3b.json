{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.serializeSignature = serializeSignature;\nconst secp256k1_1 = require(\"@noble/curves/secp256k1\");\nconst fromHex_js_1 = require(\"../encoding/fromHex.js\");\nconst toBytes_js_1 = require(\"../encoding/toBytes.js\");\nfunction serializeSignature({\n  r,\n  s,\n  to = 'hex',\n  v,\n  yParity\n}) {\n  const yParity_ = (() => {\n    if (yParity === 0 || yParity === 1) return yParity;\n    if (v && (v === 27n || v === 28n || v >= 35n)) return v % 2n === 0n ? 1 : 0;\n    throw new Error('Invalid `v` or `yParity` value');\n  })();\n  const signature = `0x${new secp256k1_1.secp256k1.Signature((0, fromHex_js_1.hexToBigInt)(r), (0, fromHex_js_1.hexToBigInt)(s)).toCompactHex()}${yParity_ === 0 ? '1b' : '1c'}`;\n  if (to === 'hex') return signature;\n  return (0, toBytes_js_1.hexToBytes)(signature);\n}","map":{"version":3,"names":["exports","serializeSignature","secp256k1_1","require","fromHex_js_1","toBytes_js_1","r","s","to","v","yParity","yParity_","Error","signature","secp256k1","Signature","hexToBigInt","toCompactHex","hexToBytes"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/viem/utils/signature/serializeSignature.ts"],"sourcesContent":["import { secp256k1 } from '@noble/curves/secp256k1'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex, Signature } from '../../types/misc.js'\nimport { type HexToBigIntErrorType, hexToBigInt } from '../encoding/fromHex.js'\nimport { hexToBytes } from '../encoding/toBytes.js'\nimport type { ToHexErrorType } from '../encoding/toHex.js'\n\ntype To = 'bytes' | 'hex'\n\nexport type SerializeSignatureParameters<to extends To = 'hex'> = Signature & {\n  to?: to | To | undefined\n}\n\nexport type SerializeSignatureReturnType<to extends To = 'hex'> =\n  | (to extends 'hex' ? Hex : never)\n  | (to extends 'bytes' ? ByteArray : never)\n\nexport type SerializeSignatureErrorType =\n  | HexToBigIntErrorType\n  | ToHexErrorType\n  | ErrorType\n\n/**\n * @description Converts a signature into hex format.\n *\n * @param signature The signature to convert.\n * @returns The signature in hex format.\n *\n * @example\n * serializeSignature({\n *   r: '0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf',\n *   s: '0x4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db8',\n *   yParity: 1\n * })\n * // \"0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db81c\"\n */\nexport function serializeSignature<to extends To = 'hex'>({\n  r,\n  s,\n  to = 'hex',\n  v,\n  yParity,\n}: SerializeSignatureParameters<to>): SerializeSignatureReturnType<to> {\n  const yParity_ = (() => {\n    if (yParity === 0 || yParity === 1) return yParity\n    if (v && (v === 27n || v === 28n || v >= 35n)) return v % 2n === 0n ? 1 : 0\n    throw new Error('Invalid `v` or `yParity` value')\n  })()\n  const signature = `0x${new secp256k1.Signature(\n    hexToBigInt(r),\n    hexToBigInt(s),\n  ).toCompactHex()}${yParity_ === 0 ? '1b' : '1c'}` as const\n\n  if (to === 'hex') return signature as SerializeSignatureReturnType<to>\n  return hexToBytes(signature) as SerializeSignatureReturnType<to>\n}\n"],"mappings":";;;;;AAqCAA,OAAA,CAAAC,kBAAA,GAAAA,kBAAA;AArCA,MAAAC,WAAA,GAAAC,OAAA;AAIA,MAAAC,YAAA,GAAAD,OAAA;AACA,MAAAE,YAAA,GAAAF,OAAA;AAgCA,SAAgBF,kBAAkBA,CAAwB;EACxDK,CAAC;EACDC,CAAC;EACDC,EAAE,GAAG,KAAK;EACVC,CAAC;EACDC;AAAO,CAC0B;EACjC,MAAMC,QAAQ,GAAG,CAAC,MAAK;IACrB,IAAID,OAAO,KAAK,CAAC,IAAIA,OAAO,KAAK,CAAC,EAAE,OAAOA,OAAO;IAClD,IAAID,CAAC,KAAKA,CAAC,KAAK,GAAG,IAAIA,CAAC,KAAK,GAAG,IAAIA,CAAC,IAAI,GAAG,CAAC,EAAE,OAAOA,CAAC,GAAG,EAAE,KAAK,EAAE,GAAG,CAAC,GAAG,CAAC;IAC3E,MAAM,IAAIG,KAAK,CAAC,gCAAgC,CAAC;EACnD,CAAC,EAAC,CAAE;EACJ,MAAMC,SAAS,GAAG,KAAK,IAAIX,WAAA,CAAAY,SAAS,CAACC,SAAS,CAC5C,IAAAX,YAAA,CAAAY,WAAW,EAACV,CAAC,CAAC,EACd,IAAAF,YAAA,CAAAY,WAAW,EAACT,CAAC,CAAC,CACf,CAACU,YAAY,EAAE,GAAGN,QAAQ,KAAK,CAAC,GAAG,IAAI,GAAG,IAAI,EAAW;EAE1D,IAAIH,EAAE,KAAK,KAAK,EAAE,OAAOK,SAA6C;EACtE,OAAO,IAAAR,YAAA,CAAAa,UAAU,EAACL,SAAS,CAAqC;AAClE","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}