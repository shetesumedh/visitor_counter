{"ast":null,"code":"import { getBlock } from '../actions/getBlock.js';\nimport { filterQueryOptions } from './utils.js';\nexport function getBlockQueryOptions(config, options = {}) {\n  return {\n    async queryFn({\n      queryKey\n    }) {\n      const {\n        scopeKey: _,\n        ...parameters\n      } = queryKey[1];\n      const block = await getBlock(config, parameters);\n      return block ?? null;\n    },\n    queryKey: getBlockQueryKey(options)\n  };\n}\nexport function getBlockQueryKey(options = {}) {\n  return ['block', filterQueryOptions(options)];\n}","map":{"version":3,"names":["getBlock","filterQueryOptions","getBlockQueryOptions","config","options","queryFn","queryKey","scopeKey","_","parameters","block","getBlockQueryKey"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/@wagmi/core/src/query/getBlock.ts"],"sourcesContent":["import type { QueryOptions } from '@tanstack/query-core'\nimport type { BlockTag } from 'viem'\n\nimport {\n  type GetBlockErrorType,\n  type GetBlockParameters,\n  type GetBlockReturnType,\n  getBlock,\n} from '../actions/getBlock.js'\nimport type { Config } from '../createConfig.js'\nimport type { ScopeKeyParameter } from '../types/properties.js'\nimport type { Compute, ExactPartial } from '../types/utils.js'\nimport { filterQueryOptions } from './utils.js'\n\nexport type GetBlockOptions<\n  includeTransactions extends boolean,\n  blockTag extends BlockTag,\n  config extends Config,\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n> = Compute<\n  ExactPartial<\n    GetBlockParameters<includeTransactions, blockTag, config, chainId>\n  > &\n    ScopeKeyParameter\n>\n\nexport function getBlockQueryOptions<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n  includeTransactions extends boolean,\n  blockTag extends BlockTag,\n>(\n  config: config,\n  options: GetBlockOptions<includeTransactions, blockTag, config, chainId> = {},\n) {\n  return {\n    async queryFn({ queryKey }) {\n      const { scopeKey: _, ...parameters } = queryKey[1]\n      const block = await getBlock(config, parameters)\n      return (block ?? null) as any\n    },\n    queryKey: getBlockQueryKey(options),\n  } as const satisfies QueryOptions<\n    GetBlockQueryFnData<includeTransactions, blockTag, config, chainId>,\n    GetBlockErrorType,\n    GetBlockData<includeTransactions, blockTag, config, chainId>,\n    GetBlockQueryKey<includeTransactions, blockTag, config, chainId>\n  >\n}\n\nexport type GetBlockQueryFnData<\n  includeTransactions extends boolean,\n  blockTag extends BlockTag,\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n> = GetBlockReturnType<includeTransactions, blockTag, config, chainId>\n\nexport type GetBlockData<\n  includeTransactions extends boolean,\n  blockTag extends BlockTag,\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n> = GetBlockQueryFnData<includeTransactions, blockTag, config, chainId>\n\nexport function getBlockQueryKey<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n  includeTransactions extends boolean = false,\n  blockTag extends BlockTag = 'latest',\n>(\n  options: GetBlockOptions<includeTransactions, blockTag, config, chainId> = {},\n) {\n  return ['block', filterQueryOptions(options)] as const\n}\n\nexport type GetBlockQueryKey<\n  includeTransactions extends boolean,\n  blockTag extends BlockTag,\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n> = ReturnType<\n  typeof getBlockQueryKey<config, chainId, includeTransactions, blockTag>\n>\n"],"mappings":"AAGA,SAIEA,QAAQ,QACH,wBAAwB;AAI/B,SAASC,kBAAkB,QAAQ,YAAY;AAe/C,OAAM,SAAUC,oBAAoBA,CAMlCC,MAAc,EACdC,OAAA,GAA2E,EAAE;EAE7E,OAAO;IACL,MAAMC,OAAOA,CAAC;MAAEC;IAAQ,CAAE;MACxB,MAAM;QAAEC,QAAQ,EAAEC,CAAC;QAAE,GAAGC;MAAU,CAAE,GAAGH,QAAQ,CAAC,CAAC,CAAC;MAClD,MAAMI,KAAK,GAAG,MAAMV,QAAQ,CAACG,MAAM,EAAEM,UAAU,CAAC;MAChD,OAAQC,KAAK,IAAI,IAAI;IACvB,CAAC;IACDJ,QAAQ,EAAEK,gBAAgB,CAACP,OAAO;GAMnC;AACH;AAgBA,OAAM,SAAUO,gBAAgBA,CAM9BP,OAAA,GAA2E,EAAE;EAE7E,OAAO,CAAC,OAAO,EAAEH,kBAAkB,CAACG,OAAO,CAAC,CAAU;AACxD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}