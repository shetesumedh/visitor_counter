{"ast":null,"code":"import { decodeAbiParameters, encodeFunctionData, toHex } from 'viem';\nimport { loadTelemetryScript } from './core/telemetry/initCCA.js';\nimport { abi } from './sign/scw/utils/constants.js';\nimport { assertPresence } from './util/assertPresence.js';\nimport { checkCrossOriginOpenerPolicy } from './util/checkCrossOriginOpenerPolicy.js';\nimport { validatePreferences, validateSubAccount } from './util/validatePreferences.js';\nimport { createCoinbaseWalletProvider } from './createCoinbaseWalletProvider.js';\nimport { store } from './store/store.js';\nconst DEFAULT_PREFERENCE = {\n  options: 'all'\n};\n/**\n * Create a Coinbase Wallet SDK instance.\n * @param params - Options to create a Coinbase Wallet SDK instance.\n * @returns A Coinbase Wallet SDK object.\n */\nexport function createCoinbaseWalletSDK(params) {\n  var _a, _b, _c, _d;\n  const options = {\n    metadata: {\n      appName: params.appName || 'Dapp',\n      appLogoUrl: params.appLogoUrl || '',\n      appChainIds: params.appChainIds || []\n    },\n    preference: Object.assign(DEFAULT_PREFERENCE, (_a = params.preference) !== null && _a !== void 0 ? _a : {}),\n    paymasterUrls: params.paymasterUrls\n  };\n  // If we have a toOwnerAccount function, set it in the non-persisted config\n  if ((_b = params.subAccounts) === null || _b === void 0 ? void 0 : _b.toOwnerAccount) {\n    validateSubAccount(params.subAccounts.toOwnerAccount);\n  }\n  store.subAccountsConfig.set({\n    toOwnerAccount: (_c = params.subAccounts) === null || _c === void 0 ? void 0 : _c.toOwnerAccount,\n    // @ts-expect-error - enableSubAccounts is not officially supported yet\n    enableAutoSubAccounts: (_d = params.subAccounts) === null || _d === void 0 ? void 0 : _d.enableAutoSubAccounts\n  });\n  // set the options in the store\n  store.config.set(options);\n  // rehydrate the store from storage\n  void store.persist.rehydrate();\n  // check the cross origin opener policy\n  void checkCrossOriginOpenerPolicy();\n  // load the telemetry script\n  if (options.preference.telemetry !== false) {\n    void loadTelemetryScript();\n  }\n  // Validate user supplied preferences. Throws if key/values are not valid.\n  validatePreferences(options.preference);\n  let provider = null;\n  const sdk = {\n    getProvider() {\n      if (!provider) {\n        provider = createCoinbaseWalletProvider(options);\n      }\n      // @ts-expect-error - store reference to the sdk on the provider\n      provider.sdk = sdk;\n      return provider;\n    },\n    subAccount: {\n      async create(account) {\n        var _a, _b;\n        const state = store.getState();\n        assertPresence((_a = state.subAccount) === null || _a === void 0 ? void 0 : _a.address, new Error('subaccount already exists'));\n        return await ((_b = sdk.getProvider()) === null || _b === void 0 ? void 0 : _b.request({\n          method: 'wallet_addSubAccount',\n          params: [{\n            version: '1',\n            account\n          }]\n        }));\n      },\n      async get() {\n        var _a, _b;\n        const subAccount = store.subAccounts.get();\n        if (subAccount === null || subAccount === void 0 ? void 0 : subAccount.address) {\n          return subAccount;\n        }\n        const response = await ((_a = sdk.getProvider()) === null || _a === void 0 ? void 0 : _a.request({\n          method: 'wallet_connect',\n          params: [{\n            version: '1',\n            capabilities: {}\n          }]\n        }));\n        const subAccounts = (_b = response.accounts[0].capabilities) === null || _b === void 0 ? void 0 : _b.subAccounts;\n        if (!Array.isArray(subAccounts)) {\n          return null;\n        }\n        return subAccounts[0];\n      },\n      async addOwner({\n        address,\n        publicKey,\n        chainId\n      }) {\n        var _a, _b;\n        const subAccount = store.subAccounts.get();\n        const account = store.account.get();\n        assertPresence(account, new Error('account does not exist'));\n        assertPresence(subAccount === null || subAccount === void 0 ? void 0 : subAccount.address, new Error('subaccount does not exist'));\n        const calls = [];\n        if (publicKey) {\n          const [x, y] = decodeAbiParameters([{\n            type: 'bytes32'\n          }, {\n            type: 'bytes32'\n          }], publicKey);\n          calls.push({\n            to: subAccount.address,\n            data: encodeFunctionData({\n              abi,\n              functionName: 'addOwnerPublicKey',\n              args: [x, y]\n            }),\n            value: toHex(0)\n          });\n        }\n        if (address) {\n          calls.push({\n            to: subAccount.address,\n            data: encodeFunctionData({\n              abi,\n              functionName: 'addOwnerAddress',\n              args: [address]\n            }),\n            value: toHex(0)\n          });\n        }\n        return await ((_a = sdk.getProvider()) === null || _a === void 0 ? void 0 : _a.request({\n          method: 'wallet_sendCalls',\n          params: [{\n            calls,\n            chainId: toHex(chainId),\n            from: (_b = account.accounts) === null || _b === void 0 ? void 0 : _b[0],\n            version: '1'\n          }]\n        }));\n      },\n      setToOwnerAccount(toSubAccountOwner) {\n        validateSubAccount(toSubAccountOwner);\n        store.subAccountsConfig.set({\n          toOwnerAccount: toSubAccountOwner\n        });\n      }\n    }\n  };\n  return sdk;\n}","map":{"version":3,"names":["decodeAbiParameters","encodeFunctionData","toHex","loadTelemetryScript","abi","assertPresence","checkCrossOriginOpenerPolicy","validatePreferences","validateSubAccount","createCoinbaseWalletProvider","store","DEFAULT_PREFERENCE","options","createCoinbaseWalletSDK","params","metadata","appName","appLogoUrl","appChainIds","preference","Object","assign","_a","paymasterUrls","_b","subAccounts","toOwnerAccount","subAccountsConfig","set","_c","enableAutoSubAccounts","_d","config","persist","rehydrate","telemetry","provider","sdk","getProvider","subAccount","create","account","state","getState","address","Error","request","method","version","get","response","capabilities","accounts","Array","isArray","addOwner","publicKey","chainId","calls","x","y","type","push","to","data","functionName","args","value","from","setToOwnerAccount","toSubAccountOwner"],"sources":["../src/createCoinbaseWalletSDK.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}