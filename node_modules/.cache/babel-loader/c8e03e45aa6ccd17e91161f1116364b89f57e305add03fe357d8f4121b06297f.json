{"ast":null,"code":"'use client';\n\nimport { getBalanceQueryOptions } from '@wagmi/core/query';\nimport { useQuery } from '../utils/query.js';\nimport { useChainId } from './useChainId.js';\nimport { useConfig } from './useConfig.js';\n/** https://wagmi.sh/react/api/hooks/useBalance */\nexport function useBalance(parameters = {}) {\n  const {\n    address,\n    query = {}\n  } = parameters;\n  const config = useConfig(parameters);\n  const chainId = useChainId({\n    config\n  });\n  const options = getBalanceQueryOptions(config, {\n    ...parameters,\n    chainId: parameters.chainId ?? chainId\n  });\n  const enabled = Boolean(address && (query.enabled ?? true));\n  return useQuery({\n    ...query,\n    ...options,\n    enabled\n  });\n}","map":{"version":3,"names":["getBalanceQueryOptions","useQuery","useChainId","useConfig","useBalance","parameters","address","query","config","chainId","options","enabled","Boolean"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/wagmi/src/hooks/useBalance.ts"],"sourcesContent":["'use client'\n\nimport type { Config, GetBalanceErrorType, ResolvedRegister } from '@wagmi/core'\nimport type { Compute } from '@wagmi/core/internal'\nimport {\n  type GetBalanceData,\n  type GetBalanceOptions,\n  type GetBalanceQueryKey,\n  getBalanceQueryOptions,\n} from '@wagmi/core/query'\nimport type { GetBalanceQueryFnData } from '@wagmi/core/query'\n\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseBalanceParameters<\n  config extends Config = Config,\n  selectData = GetBalanceData,\n> = Compute<\n  GetBalanceOptions<config> &\n    ConfigParameter<config> &\n    QueryParameter<\n      GetBalanceQueryFnData,\n      GetBalanceErrorType,\n      selectData,\n      GetBalanceQueryKey<config>\n    >\n>\n\nexport type UseBalanceReturnType<selectData = GetBalanceData> =\n  UseQueryReturnType<selectData, GetBalanceErrorType>\n\n/** https://wagmi.sh/react/api/hooks/useBalance */\nexport function useBalance<\n  config extends Config = ResolvedRegister['config'],\n  selectData = GetBalanceData,\n>(\n  parameters: UseBalanceParameters<config, selectData> = {},\n): UseBalanceReturnType<selectData> {\n  const { address, query = {} } = parameters\n\n  const config = useConfig(parameters)\n  const chainId = useChainId({ config })\n\n  const options = getBalanceQueryOptions(config, {\n    ...parameters,\n    chainId: parameters.chainId ?? chainId,\n  })\n  const enabled = Boolean(address && (query.enabled ?? true))\n\n  return useQuery({ ...query, ...options, enabled })\n}\n"],"mappings":"AAAA,YAAY;;AAIZ,SAIEA,sBAAsB,QACjB,mBAAmB;AAI1B,SAAkCC,QAAQ,QAAQ,mBAAmB;AACrE,SAASC,UAAU,QAAQ,iBAAiB;AAC5C,SAASC,SAAS,QAAQ,gBAAgB;AAmB1C;AACA,OAAM,SAAUC,UAAUA,CAIxBC,UAAA,GAAuD,EAAE;EAEzD,MAAM;IAAEC,OAAO;IAAEC,KAAK,GAAG;EAAE,CAAE,GAAGF,UAAU;EAE1C,MAAMG,MAAM,GAAGL,SAAS,CAACE,UAAU,CAAC;EACpC,MAAMI,OAAO,GAAGP,UAAU,CAAC;IAAEM;EAAM,CAAE,CAAC;EAEtC,MAAME,OAAO,GAAGV,sBAAsB,CAACQ,MAAM,EAAE;IAC7C,GAAGH,UAAU;IACbI,OAAO,EAAEJ,UAAU,CAACI,OAAO,IAAIA;GAChC,CAAC;EACF,MAAME,OAAO,GAAGC,OAAO,CAACN,OAAO,KAAKC,KAAK,CAACI,OAAO,IAAI,IAAI,CAAC,CAAC;EAE3D,OAAOV,QAAQ,CAAC;IAAE,GAAGM,KAAK;IAAE,GAAGG,OAAO;IAAEC;EAAO,CAAE,CAAC;AACpD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}