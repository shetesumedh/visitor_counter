{"ast":null,"code":"// Copyright (c) 2018-2023 Coinbase, Inc. <https://www.coinbase.com/>\nimport { hexStringToUint8Array, uint8ArrayToHex } from '../../../../core/type/util.js';\nexport class WalletLinkCipher {\n  // @param secret hex representation of 32-byte secret\n  constructor(secret) {\n    this.secret = secret;\n  }\n  /**\n   *\n   * @param plainText string to be encrypted\n   * returns hex string representation of bytes in the order: initialization vector (iv),\n   * auth tag, encrypted plaintext. IV is 12 bytes. Auth tag is 16 bytes. Remaining bytes are the\n   * encrypted plainText.\n   */\n  async encrypt(plainText) {\n    const secret = this.secret;\n    if (secret.length !== 64) throw new Error(`secret must be 256 bits`);\n    const ivBytes = crypto.getRandomValues(new Uint8Array(12));\n    const secretKey = await crypto.subtle.importKey('raw', hexStringToUint8Array(secret), {\n      name: 'aes-gcm'\n    }, false, ['encrypt', 'decrypt']);\n    const enc = new TextEncoder();\n    // Will return encrypted plainText with auth tag (ie MAC or checksum) appended at the end\n    const encryptedResult = await window.crypto.subtle.encrypt({\n      name: 'AES-GCM',\n      iv: ivBytes\n    }, secretKey, enc.encode(plainText));\n    const tagLength = 16;\n    const authTag = encryptedResult.slice(encryptedResult.byteLength - tagLength);\n    const encryptedPlaintext = encryptedResult.slice(0, encryptedResult.byteLength - tagLength);\n    const authTagBytes = new Uint8Array(authTag);\n    const encryptedPlaintextBytes = new Uint8Array(encryptedPlaintext);\n    const concatenated = new Uint8Array([...ivBytes, ...authTagBytes, ...encryptedPlaintextBytes]);\n    return uint8ArrayToHex(concatenated);\n  }\n  /**\n   *\n   * @param cipherText hex string representation of bytes in the order: initialization vector (iv),\n   * auth tag, encrypted plaintext. IV is 12 bytes. Auth tag is 16 bytes.\n   */\n  async decrypt(cipherText) {\n    const secret = this.secret;\n    if (secret.length !== 64) throw new Error(`secret must be 256 bits`);\n    return new Promise((resolve, reject) => {\n      void (async () => {\n        const secretKey = await crypto.subtle.importKey('raw', hexStringToUint8Array(secret), {\n          name: 'aes-gcm'\n        }, false, ['encrypt', 'decrypt']);\n        const encrypted = hexStringToUint8Array(cipherText);\n        const ivBytes = encrypted.slice(0, 12);\n        const authTagBytes = encrypted.slice(12, 28);\n        const encryptedPlaintextBytes = encrypted.slice(28);\n        const concatenatedBytes = new Uint8Array([...encryptedPlaintextBytes, ...authTagBytes]);\n        const algo = {\n          name: 'AES-GCM',\n          iv: new Uint8Array(ivBytes)\n        };\n        try {\n          const decrypted = await window.crypto.subtle.decrypt(algo, secretKey, concatenatedBytes);\n          const decoder = new TextDecoder();\n          resolve(decoder.decode(decrypted));\n        } catch (err) {\n          reject(err);\n        }\n      })();\n    });\n  }\n}","map":{"version":3,"names":["hexStringToUint8Array","uint8ArrayToHex","WalletLinkCipher","constructor","secret","encrypt","plainText","length","Error","ivBytes","crypto","getRandomValues","Uint8Array","secretKey","subtle","importKey","name","enc","TextEncoder","encryptedResult","window","iv","encode","tagLength","authTag","slice","byteLength","encryptedPlaintext","authTagBytes","encryptedPlaintextBytes","concatenated","decrypt","cipherText","Promise","resolve","reject","encrypted","concatenatedBytes","algo","decrypted","decoder","TextDecoder","decode","err"],"sources":["../../../../../src/sign/walletlink/relay/connection/WalletLinkCipher.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}