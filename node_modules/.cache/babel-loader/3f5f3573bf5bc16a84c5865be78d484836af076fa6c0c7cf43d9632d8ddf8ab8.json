{"ast":null,"code":"import * as AccessList from './AccessList.js';\nimport * as Address from './Address.js';\nimport * as Hash from './Hash.js';\nimport * as Hex from './Hex.js';\nimport * as Rlp from './Rlp.js';\nimport * as Signature from './Signature.js';\nimport * as TransactionEnvelope from './TransactionEnvelope.js';\nexport const serializedType = '0x02';\nexport const type = 'eip1559';\n/**\n * Asserts a {@link ox#TransactionEnvelopeEip1559.TransactionEnvelopeEip1559} is valid.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip1559, Value } from 'ox'\n *\n * TransactionEnvelopeEip1559.assert({\n *   maxFeePerGas: 2n ** 256n - 1n + 1n,\n *   chainId: 1,\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n * // @error: FeeCapTooHighError:\n * // @error: The fee cap (`masFeePerGas` = 115792089237316195423570985008687907853269984665640564039457584007913 gwei) cannot be\n * // @error: higher than the maximum allowed value (2^256-1).\n * ```\n *\n * @param envelope - The transaction envelope to assert.\n */\nexport function assert(envelope) {\n  const {\n    chainId,\n    maxPriorityFeePerGas,\n    maxFeePerGas,\n    to\n  } = envelope;\n  if (chainId <= 0) throw new TransactionEnvelope.InvalidChainIdError({\n    chainId\n  });\n  if (to) Address.assert(to, {\n    strict: false\n  });\n  if (maxFeePerGas && BigInt(maxFeePerGas) > 2n ** 256n - 1n) throw new TransactionEnvelope.FeeCapTooHighError({\n    feeCap: maxFeePerGas\n  });\n  if (maxPriorityFeePerGas && maxFeePerGas && maxPriorityFeePerGas > maxFeePerGas) throw new TransactionEnvelope.TipAboveFeeCapError({\n    maxFeePerGas,\n    maxPriorityFeePerGas\n  });\n}\n/**\n * Deserializes a {@link ox#TransactionEnvelopeEip1559.TransactionEnvelopeEip1559} from its serialized form.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip1559 } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip1559.deserialize('0x02ef0182031184773594008477359400809470997970c51812dc3a010c7d01b50e0d17dc79c8880de0b6b3a764000080c0')\n * // @log: {\n * // @log:   type: 'eip1559',\n * // @log:   nonce: 785n,\n * // @log:   maxFeePerGas: 2000000000n,\n * // @log:   gas: 1000000n,\n * // @log:   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n * // @log:   value: 1000000000000000000n,\n * // @log: }\n * ```\n *\n * @param serialized - The serialized transaction.\n * @returns Deserialized Transaction Envelope.\n */\nexport function deserialize(serialized) {\n  const transactionArray = Rlp.toHex(Hex.slice(serialized, 1));\n  const [chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gas, to, value, data, accessList, yParity, r, s] = transactionArray;\n  if (!(transactionArray.length === 9 || transactionArray.length === 12)) throw new TransactionEnvelope.InvalidSerializedError({\n    attributes: {\n      chainId,\n      nonce,\n      maxPriorityFeePerGas,\n      maxFeePerGas,\n      gas,\n      to,\n      value,\n      data,\n      accessList,\n      ...(transactionArray.length > 9 ? {\n        yParity,\n        r,\n        s\n      } : {})\n    },\n    serialized,\n    type\n  });\n  let transaction = {\n    chainId: Number(chainId),\n    type\n  };\n  if (Hex.validate(to) && to !== '0x') transaction.to = to;\n  if (Hex.validate(gas) && gas !== '0x') transaction.gas = BigInt(gas);\n  if (Hex.validate(data) && data !== '0x') transaction.data = data;\n  if (Hex.validate(nonce) && nonce !== '0x') transaction.nonce = BigInt(nonce);\n  if (Hex.validate(value) && value !== '0x') transaction.value = BigInt(value);\n  if (Hex.validate(maxFeePerGas) && maxFeePerGas !== '0x') transaction.maxFeePerGas = BigInt(maxFeePerGas);\n  if (Hex.validate(maxPriorityFeePerGas) && maxPriorityFeePerGas !== '0x') transaction.maxPriorityFeePerGas = BigInt(maxPriorityFeePerGas);\n  if (accessList.length !== 0 && accessList !== '0x') transaction.accessList = AccessList.fromTupleList(accessList);\n  const signature = r && s && yParity ? Signature.fromTuple([yParity, r, s]) : undefined;\n  if (signature) transaction = {\n    ...transaction,\n    ...signature\n  };\n  assert(transaction);\n  return transaction;\n}\n/**\n * Converts an arbitrary transaction object into an EIP-1559 Transaction Envelope.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip1559, Value } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip1559.from({\n *   chainId: 1,\n *   maxFeePerGas: Value.fromGwei('10'),\n *   maxPriorityFeePerGas: Value.fromGwei('1'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n * ```\n *\n * @example\n * ### Attaching Signatures\n *\n * It is possible to attach a `signature` to the transaction envelope.\n *\n * ```ts twoslash\n * import { Secp256k1, TransactionEnvelopeEip1559, Value } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip1559.from({\n *   chainId: 1,\n *   maxFeePerGas: Value.fromGwei('10'),\n *   maxPriorityFeePerGas: Value.fromGwei('1'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n *\n * const signature = Secp256k1.sign({\n *   payload: TransactionEnvelopeEip1559.getSignPayload(envelope),\n *   privateKey: '0x...',\n * })\n *\n * const envelope_signed = TransactionEnvelopeEip1559.from(envelope, { // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n * // @log: {\n * // @log:   chainId: 1,\n * // @log:   maxFeePerGas: 10000000000n,\n * // @log:   maxPriorityFeePerGas: 1000000000n,\n * // @log:   to: '0x0000000000000000000000000000000000000000',\n * // @log:   type: 'eip1559',\n * // @log:   value: 1000000000000000000n,\n * // @log:   r: 125...n,\n * // @log:   s: 642...n,\n * // @log:   yParity: 0,\n * // @log: }\n * ```\n *\n * @example\n * ### From Serialized\n *\n * It is possible to instantiate an EIP-1559 Transaction Envelope from a {@link ox#TransactionEnvelopeEip1559.Serialized} value.\n *\n * ```ts twoslash\n * import { TransactionEnvelopeEip1559 } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip1559.from('0x02f858018203118502540be4008504a817c800809470997970c51812dc3a010c7d01b50e0d17dc79c8880de0b6b3a764000080c08477359400e1a001627c687261b0e7f8638af1112efa8a77e23656f6e7945275b19e9deed80261')\n * // @log: {\n * // @log:   chainId: 1,\n * // @log:   maxFeePerGas: 10000000000n,\n * // @log:   maxPriorityFeePerGas: 1000000000n,\n * // @log:   to: '0x0000000000000000000000000000000000000000',\n * // @log:   type: 'eip1559',\n * // @log:   value: 1000000000000000000n,\n * // @log: }\n * ```\n *\n * @param envelope - The transaction object to convert.\n * @param options - Options.\n * @returns An EIP-1559 Transaction Envelope.\n */\nexport function from(envelope, options = {}) {\n  const {\n    signature\n  } = options;\n  const envelope_ = typeof envelope === 'string' ? deserialize(envelope) : envelope;\n  assert(envelope_);\n  return {\n    ...envelope_,\n    ...(signature ? Signature.from(signature) : {}),\n    type: 'eip1559'\n  };\n}\n/**\n * Returns the payload to sign for a {@link ox#TransactionEnvelopeEip1559.TransactionEnvelopeEip1559}.\n *\n * @example\n * The example below demonstrates how to compute the sign payload which can be used\n * with ECDSA signing utilities like {@link ox#Secp256k1.(sign:function)}.\n *\n * ```ts twoslash\n * import { Secp256k1, TransactionEnvelopeEip1559 } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip1559.from({\n *   chainId: 1,\n *   nonce: 0n,\n *   maxFeePerGas: 1000000000n,\n *   gas: 21000n,\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n *\n * const payload = TransactionEnvelopeEip1559.getSignPayload(envelope) // [!code focus]\n * // @log: '0x...'\n *\n * const signature = Secp256k1.sign({ payload, privateKey: '0x...' })\n * ```\n *\n * @param envelope - The transaction envelope to get the sign payload for.\n * @returns The sign payload.\n */\nexport function getSignPayload(envelope) {\n  return hash(envelope, {\n    presign: true\n  });\n}\n/**\n * Hashes a {@link ox#TransactionEnvelopeEip1559.TransactionEnvelopeEip1559}. This is the \"transaction hash\".\n *\n * @example\n * ```ts twoslash\n * import { Secp256k1, TransactionEnvelopeEip1559 } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip1559.from({\n *   chainId: 1,\n *   nonce: 0n,\n *   maxFeePerGas: 1000000000n,\n *   gas: 21000n,\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n *\n * const signature = Secp256k1.sign({\n *   payload: TransactionEnvelopeEip1559.getSignPayload(envelope),\n *   privateKey: '0x...'\n * })\n *\n * const envelope_signed = TransactionEnvelopeEip1559.from(envelope, { signature })\n *\n * const hash = TransactionEnvelopeEip1559.hash(envelope_signed) // [!code focus]\n * ```\n *\n * @param envelope - The EIP-1559 Transaction Envelope to hash.\n * @param options - Options.\n * @returns The hash of the transaction envelope.\n */\nexport function hash(envelope, options = {}) {\n  const {\n    presign\n  } = options;\n  return Hash.keccak256(serialize({\n    ...envelope,\n    ...(presign ? {\n      r: undefined,\n      s: undefined,\n      yParity: undefined,\n      v: undefined\n    } : {})\n  }));\n}\n/**\n * Serializes a {@link ox#TransactionEnvelopeEip1559.TransactionEnvelopeEip1559}.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip1559, Value } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip1559.from({\n *   chainId: 1,\n *   maxFeePerGas: Value.fromGwei('10'),\n *   maxPriorityFeePerGas: Value.fromGwei('1'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n *\n * const serialized = TransactionEnvelopeEip1559.serialize(envelope) // [!code focus]\n * ```\n *\n * @example\n * ### Attaching Signatures\n *\n * It is possible to attach a `signature` to the serialized Transaction Envelope.\n *\n * ```ts twoslash\n * import { Secp256k1, TransactionEnvelopeEip1559, Value } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip1559.from({\n *   chainId: 1,\n *   maxFeePerGas: Value.fromGwei('10'),\n *   maxPriorityFeePerGas: Value.fromGwei('1'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n *\n * const signature = Secp256k1.sign({\n *   payload: TransactionEnvelopeEip1559.getSignPayload(envelope),\n *   privateKey: '0x...',\n * })\n *\n * const serialized = TransactionEnvelopeEip1559.serialize(envelope, { // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n *\n * // ... send `serialized` transaction to JSON-RPC `eth_sendRawTransaction`\n * ```\n *\n * @param envelope - The Transaction Envelope to serialize.\n * @param options - Options.\n * @returns The serialized Transaction Envelope.\n */\nexport function serialize(envelope, options = {}) {\n  const {\n    chainId,\n    gas,\n    nonce,\n    to,\n    value,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    accessList,\n    data,\n    input\n  } = envelope;\n  assert(envelope);\n  const accessTupleList = AccessList.toTupleList(accessList);\n  const signature = Signature.extract(options.signature || envelope);\n  const serialized = [Hex.fromNumber(chainId), nonce ? Hex.fromNumber(nonce) : '0x', maxPriorityFeePerGas ? Hex.fromNumber(maxPriorityFeePerGas) : '0x', maxFeePerGas ? Hex.fromNumber(maxFeePerGas) : '0x', gas ? Hex.fromNumber(gas) : '0x', to ?? '0x', value ? Hex.fromNumber(value) : '0x', data ?? input ?? '0x', accessTupleList, ...(signature ? Signature.toTuple(signature) : [])];\n  return Hex.concat(serializedType, Rlp.fromHex(serialized));\n}\n/**\n * Converts an {@link ox#TransactionEnvelopeEip1559.TransactionEnvelopeEip1559} to an {@link ox#TransactionEnvelopeEip1559.Rpc}.\n *\n * @example\n * ```ts twoslash\n * import { RpcRequest, TransactionEnvelopeEip1559, Value } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip1559.from({\n *   chainId: 1,\n *   nonce: 0n,\n *   gas: 21000n,\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: Value.fromEther('1'),\n * })\n *\n * const envelope_rpc = TransactionEnvelopeEip1559.toRpc(envelope) // [!code focus]\n *\n * const request = RpcRequest.from({\n *   id: 0,\n *   method: 'eth_sendTransaction',\n *   params: [envelope_rpc],\n * })\n * ```\n *\n * @param envelope - The EIP-1559 transaction envelope to convert.\n * @returns An RPC-formatted EIP-1559 transaction envelope.\n */\nexport function toRpc(envelope) {\n  const signature = Signature.extract(envelope);\n  return {\n    ...envelope,\n    chainId: Hex.fromNumber(envelope.chainId),\n    data: envelope.data ?? envelope.input,\n    type: '0x2',\n    ...(typeof envelope.gas === 'bigint' ? {\n      gas: Hex.fromNumber(envelope.gas)\n    } : {}),\n    ...(typeof envelope.nonce === 'bigint' ? {\n      nonce: Hex.fromNumber(envelope.nonce)\n    } : {}),\n    ...(typeof envelope.value === 'bigint' ? {\n      value: Hex.fromNumber(envelope.value)\n    } : {}),\n    ...(typeof envelope.maxFeePerGas === 'bigint' ? {\n      maxFeePerGas: Hex.fromNumber(envelope.maxFeePerGas)\n    } : {}),\n    ...(typeof envelope.maxPriorityFeePerGas === 'bigint' ? {\n      maxPriorityFeePerGas: Hex.fromNumber(envelope.maxPriorityFeePerGas)\n    } : {}),\n    ...(signature ? Signature.toRpc(signature) : {})\n  };\n}\n/**\n * Validates a {@link ox#TransactionEnvelopeEip1559.TransactionEnvelopeEip1559}. Returns `true` if the envelope is valid, `false` otherwise.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip1559, Value } from 'ox'\n *\n * const valid = TransactionEnvelopeEip1559.assert({\n *   maxFeePerGas: 2n ** 256n - 1n + 1n,\n *   chainId: 1,\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n * // @log: false\n * ```\n *\n * @param envelope - The transaction envelope to validate.\n */\nexport function validate(envelope) {\n  try {\n    assert(envelope);\n    return true;\n  } catch {\n    return false;\n  }\n}","map":{"version":3,"names":["AccessList","Address","Hash","Hex","Rlp","Signature","TransactionEnvelope","serializedType","type","assert","envelope","chainId","maxPriorityFeePerGas","maxFeePerGas","to","InvalidChainIdError","strict","BigInt","FeeCapTooHighError","feeCap","TipAboveFeeCapError","deserialize","serialized","transactionArray","toHex","slice","nonce","gas","value","data","accessList","yParity","r","s","length","InvalidSerializedError","attributes","transaction","Number","validate","fromTupleList","signature","fromTuple","undefined","from","options","envelope_","getSignPayload","hash","presign","keccak256","serialize","v","input","accessTupleList","toTupleList","extract","fromNumber","toTuple","concat","fromHex","toRpc"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/ox/core/TransactionEnvelopeEip1559.ts"],"sourcesContent":["import * as AccessList from './AccessList.js'\nimport * as Address from './Address.js'\nimport type * as Errors from './Errors.js'\nimport * as Hash from './Hash.js'\nimport * as Hex from './Hex.js'\nimport * as Rlp from './Rlp.js'\nimport * as Signature from './Signature.js'\nimport * as TransactionEnvelope from './TransactionEnvelope.js'\nimport type {\n  Assign,\n  Compute,\n  PartialBy,\n  UnionPartialBy,\n} from './internal/types.js'\n\nexport type TransactionEnvelopeEip1559<\n  signed extends boolean = boolean,\n  bigintType = bigint,\n  numberType = number,\n  type extends string = Type,\n> = Compute<\n  TransactionEnvelope.Base<type, signed, bigintType, numberType> & {\n    /** EIP-2930 Access List. */\n    accessList?: AccessList.AccessList | undefined\n    /** Total fee per gas in wei (gasPrice/baseFeePerGas + maxPriorityFeePerGas). */\n    maxFeePerGas?: bigintType | undefined\n    /** Max priority fee per gas (in wei). */\n    maxPriorityFeePerGas?: bigintType | undefined\n  }\n>\n\nexport type Rpc<signed extends boolean = boolean> = TransactionEnvelopeEip1559<\n  signed,\n  Hex.Hex,\n  Hex.Hex,\n  '0x2'\n>\n\nexport type Serialized = `${SerializedType}${string}`\n\nexport const serializedType = '0x02' as const\nexport type SerializedType = typeof serializedType\n\nexport type Signed = TransactionEnvelopeEip1559<true>\n\nexport const type = 'eip1559' as const\nexport type Type = typeof type\n\n/**\n * Asserts a {@link ox#TransactionEnvelopeEip1559.TransactionEnvelopeEip1559} is valid.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip1559, Value } from 'ox'\n *\n * TransactionEnvelopeEip1559.assert({\n *   maxFeePerGas: 2n ** 256n - 1n + 1n,\n *   chainId: 1,\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n * // @error: FeeCapTooHighError:\n * // @error: The fee cap (`masFeePerGas` = 115792089237316195423570985008687907853269984665640564039457584007913 gwei) cannot be\n * // @error: higher than the maximum allowed value (2^256-1).\n * ```\n *\n * @param envelope - The transaction envelope to assert.\n */\nexport function assert(\n  envelope: PartialBy<TransactionEnvelopeEip1559, 'type'>,\n) {\n  const { chainId, maxPriorityFeePerGas, maxFeePerGas, to } = envelope\n  if (chainId <= 0)\n    throw new TransactionEnvelope.InvalidChainIdError({ chainId })\n  if (to) Address.assert(to, { strict: false })\n  if (maxFeePerGas && BigInt(maxFeePerGas) > 2n ** 256n - 1n)\n    throw new TransactionEnvelope.FeeCapTooHighError({ feeCap: maxFeePerGas })\n  if (\n    maxPriorityFeePerGas &&\n    maxFeePerGas &&\n    maxPriorityFeePerGas > maxFeePerGas\n  )\n    throw new TransactionEnvelope.TipAboveFeeCapError({\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n    })\n}\n\nexport declare namespace assert {\n  type ErrorType =\n    | Address.assert.ErrorType\n    | TransactionEnvelope.InvalidChainIdError\n    | TransactionEnvelope.FeeCapTooHighError\n    | TransactionEnvelope.TipAboveFeeCapError\n    | Errors.GlobalErrorType\n}\n\n/**\n * Deserializes a {@link ox#TransactionEnvelopeEip1559.TransactionEnvelopeEip1559} from its serialized form.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip1559 } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip1559.deserialize('0x02ef0182031184773594008477359400809470997970c51812dc3a010c7d01b50e0d17dc79c8880de0b6b3a764000080c0')\n * // @log: {\n * // @log:   type: 'eip1559',\n * // @log:   nonce: 785n,\n * // @log:   maxFeePerGas: 2000000000n,\n * // @log:   gas: 1000000n,\n * // @log:   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n * // @log:   value: 1000000000000000000n,\n * // @log: }\n * ```\n *\n * @param serialized - The serialized transaction.\n * @returns Deserialized Transaction Envelope.\n */\nexport function deserialize(\n  serialized: Serialized,\n): Compute<TransactionEnvelopeEip1559> {\n  const transactionArray = Rlp.toHex(Hex.slice(serialized, 1))\n\n  const [\n    chainId,\n    nonce,\n    maxPriorityFeePerGas,\n    maxFeePerGas,\n    gas,\n    to,\n    value,\n    data,\n    accessList,\n    yParity,\n    r,\n    s,\n  ] = transactionArray as readonly Hex.Hex[]\n\n  if (!(transactionArray.length === 9 || transactionArray.length === 12))\n    throw new TransactionEnvelope.InvalidSerializedError({\n      attributes: {\n        chainId,\n        nonce,\n        maxPriorityFeePerGas,\n        maxFeePerGas,\n        gas,\n        to,\n        value,\n        data,\n        accessList,\n        ...(transactionArray.length > 9\n          ? {\n              yParity,\n              r,\n              s,\n            }\n          : {}),\n      },\n      serialized,\n      type,\n    })\n\n  let transaction = {\n    chainId: Number(chainId),\n    type,\n  } as TransactionEnvelopeEip1559\n  if (Hex.validate(to) && to !== '0x') transaction.to = to\n  if (Hex.validate(gas) && gas !== '0x') transaction.gas = BigInt(gas)\n  if (Hex.validate(data) && data !== '0x') transaction.data = data\n  if (Hex.validate(nonce) && nonce !== '0x') transaction.nonce = BigInt(nonce)\n  if (Hex.validate(value) && value !== '0x') transaction.value = BigInt(value)\n  if (Hex.validate(maxFeePerGas) && maxFeePerGas !== '0x')\n    transaction.maxFeePerGas = BigInt(maxFeePerGas)\n  if (Hex.validate(maxPriorityFeePerGas) && maxPriorityFeePerGas !== '0x')\n    transaction.maxPriorityFeePerGas = BigInt(maxPriorityFeePerGas)\n  if (accessList!.length !== 0 && accessList !== '0x')\n    transaction.accessList = AccessList.fromTupleList(accessList as any)\n\n  const signature =\n    r && s && yParity ? Signature.fromTuple([yParity, r, s]) : undefined\n  if (signature)\n    transaction = {\n      ...transaction,\n      ...signature,\n    } as TransactionEnvelopeEip1559\n\n  assert(transaction)\n\n  return transaction\n}\n\nexport declare namespace deserialize {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Converts an arbitrary transaction object into an EIP-1559 Transaction Envelope.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip1559, Value } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip1559.from({\n *   chainId: 1,\n *   maxFeePerGas: Value.fromGwei('10'),\n *   maxPriorityFeePerGas: Value.fromGwei('1'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n * ```\n *\n * @example\n * ### Attaching Signatures\n *\n * It is possible to attach a `signature` to the transaction envelope.\n *\n * ```ts twoslash\n * import { Secp256k1, TransactionEnvelopeEip1559, Value } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip1559.from({\n *   chainId: 1,\n *   maxFeePerGas: Value.fromGwei('10'),\n *   maxPriorityFeePerGas: Value.fromGwei('1'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n *\n * const signature = Secp256k1.sign({\n *   payload: TransactionEnvelopeEip1559.getSignPayload(envelope),\n *   privateKey: '0x...',\n * })\n *\n * const envelope_signed = TransactionEnvelopeEip1559.from(envelope, { // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n * // @log: {\n * // @log:   chainId: 1,\n * // @log:   maxFeePerGas: 10000000000n,\n * // @log:   maxPriorityFeePerGas: 1000000000n,\n * // @log:   to: '0x0000000000000000000000000000000000000000',\n * // @log:   type: 'eip1559',\n * // @log:   value: 1000000000000000000n,\n * // @log:   r: 125...n,\n * // @log:   s: 642...n,\n * // @log:   yParity: 0,\n * // @log: }\n * ```\n *\n * @example\n * ### From Serialized\n *\n * It is possible to instantiate an EIP-1559 Transaction Envelope from a {@link ox#TransactionEnvelopeEip1559.Serialized} value.\n *\n * ```ts twoslash\n * import { TransactionEnvelopeEip1559 } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip1559.from('0x02f858018203118502540be4008504a817c800809470997970c51812dc3a010c7d01b50e0d17dc79c8880de0b6b3a764000080c08477359400e1a001627c687261b0e7f8638af1112efa8a77e23656f6e7945275b19e9deed80261')\n * // @log: {\n * // @log:   chainId: 1,\n * // @log:   maxFeePerGas: 10000000000n,\n * // @log:   maxPriorityFeePerGas: 1000000000n,\n * // @log:   to: '0x0000000000000000000000000000000000000000',\n * // @log:   type: 'eip1559',\n * // @log:   value: 1000000000000000000n,\n * // @log: }\n * ```\n *\n * @param envelope - The transaction object to convert.\n * @param options - Options.\n * @returns An EIP-1559 Transaction Envelope.\n */\nexport function from<\n  const envelope extends\n    | UnionPartialBy<TransactionEnvelopeEip1559, 'type'>\n    | Serialized,\n  const signature extends Signature.Signature | undefined = undefined,\n>(\n  envelope:\n    | envelope\n    | UnionPartialBy<TransactionEnvelopeEip1559, 'type'>\n    | Serialized,\n  options: from.Options<signature> = {},\n): from.ReturnType<envelope, signature> {\n  const { signature } = options\n\n  const envelope_ = (\n    typeof envelope === 'string' ? deserialize(envelope) : envelope\n  ) as TransactionEnvelopeEip1559\n\n  assert(envelope_)\n\n  return {\n    ...envelope_,\n    ...(signature ? Signature.from(signature) : {}),\n    type: 'eip1559',\n  } as never\n}\n\nexport declare namespace from {\n  type Options<signature extends Signature.Signature | undefined = undefined> =\n    {\n      signature?: signature | Signature.Signature | undefined\n    }\n\n  type ReturnType<\n    envelope extends\n      | UnionPartialBy<TransactionEnvelopeEip1559, 'type'>\n      | Hex.Hex = TransactionEnvelopeEip1559 | Hex.Hex,\n    signature extends Signature.Signature | undefined = undefined,\n  > = Compute<\n    envelope extends Hex.Hex\n      ? TransactionEnvelopeEip1559\n      : Assign<\n          envelope,\n          (signature extends Signature.Signature ? Readonly<signature> : {}) & {\n            readonly type: 'eip1559'\n          }\n        >\n  >\n\n  type ErrorType =\n    | deserialize.ErrorType\n    | assert.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Returns the payload to sign for a {@link ox#TransactionEnvelopeEip1559.TransactionEnvelopeEip1559}.\n *\n * @example\n * The example below demonstrates how to compute the sign payload which can be used\n * with ECDSA signing utilities like {@link ox#Secp256k1.(sign:function)}.\n *\n * ```ts twoslash\n * import { Secp256k1, TransactionEnvelopeEip1559 } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip1559.from({\n *   chainId: 1,\n *   nonce: 0n,\n *   maxFeePerGas: 1000000000n,\n *   gas: 21000n,\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n *\n * const payload = TransactionEnvelopeEip1559.getSignPayload(envelope) // [!code focus]\n * // @log: '0x...'\n *\n * const signature = Secp256k1.sign({ payload, privateKey: '0x...' })\n * ```\n *\n * @param envelope - The transaction envelope to get the sign payload for.\n * @returns The sign payload.\n */\nexport function getSignPayload(\n  envelope: TransactionEnvelopeEip1559,\n): getSignPayload.ReturnType {\n  return hash(envelope, { presign: true })\n}\n\nexport declare namespace getSignPayload {\n  type ReturnType = Hex.Hex\n\n  type ErrorType = hash.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Hashes a {@link ox#TransactionEnvelopeEip1559.TransactionEnvelopeEip1559}. This is the \"transaction hash\".\n *\n * @example\n * ```ts twoslash\n * import { Secp256k1, TransactionEnvelopeEip1559 } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip1559.from({\n *   chainId: 1,\n *   nonce: 0n,\n *   maxFeePerGas: 1000000000n,\n *   gas: 21000n,\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n *\n * const signature = Secp256k1.sign({\n *   payload: TransactionEnvelopeEip1559.getSignPayload(envelope),\n *   privateKey: '0x...'\n * })\n *\n * const envelope_signed = TransactionEnvelopeEip1559.from(envelope, { signature })\n *\n * const hash = TransactionEnvelopeEip1559.hash(envelope_signed) // [!code focus]\n * ```\n *\n * @param envelope - The EIP-1559 Transaction Envelope to hash.\n * @param options - Options.\n * @returns The hash of the transaction envelope.\n */\nexport function hash<presign extends boolean = false>(\n  envelope: TransactionEnvelopeEip1559<presign extends true ? false : true>,\n  options: hash.Options<presign> = {},\n): hash.ReturnType {\n  const { presign } = options\n  return Hash.keccak256(\n    serialize({\n      ...envelope,\n      ...(presign\n        ? {\n            r: undefined,\n            s: undefined,\n            yParity: undefined,\n            v: undefined,\n          }\n        : {}),\n    }),\n  )\n}\n\nexport declare namespace hash {\n  type Options<presign extends boolean = false> = {\n    /** Whether to hash this transaction for signing. @default false */\n    presign?: presign | boolean | undefined\n  }\n\n  type ReturnType = Hex.Hex\n\n  type ErrorType =\n    | Hash.keccak256.ErrorType\n    | serialize.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Serializes a {@link ox#TransactionEnvelopeEip1559.TransactionEnvelopeEip1559}.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip1559, Value } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip1559.from({\n *   chainId: 1,\n *   maxFeePerGas: Value.fromGwei('10'),\n *   maxPriorityFeePerGas: Value.fromGwei('1'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n *\n * const serialized = TransactionEnvelopeEip1559.serialize(envelope) // [!code focus]\n * ```\n *\n * @example\n * ### Attaching Signatures\n *\n * It is possible to attach a `signature` to the serialized Transaction Envelope.\n *\n * ```ts twoslash\n * import { Secp256k1, TransactionEnvelopeEip1559, Value } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip1559.from({\n *   chainId: 1,\n *   maxFeePerGas: Value.fromGwei('10'),\n *   maxPriorityFeePerGas: Value.fromGwei('1'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n *\n * const signature = Secp256k1.sign({\n *   payload: TransactionEnvelopeEip1559.getSignPayload(envelope),\n *   privateKey: '0x...',\n * })\n *\n * const serialized = TransactionEnvelopeEip1559.serialize(envelope, { // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n *\n * // ... send `serialized` transaction to JSON-RPC `eth_sendRawTransaction`\n * ```\n *\n * @param envelope - The Transaction Envelope to serialize.\n * @param options - Options.\n * @returns The serialized Transaction Envelope.\n */\nexport function serialize(\n  envelope: PartialBy<TransactionEnvelopeEip1559, 'type'>,\n  options: serialize.Options = {},\n): Serialized {\n  const {\n    chainId,\n    gas,\n    nonce,\n    to,\n    value,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    accessList,\n    data,\n    input,\n  } = envelope\n\n  assert(envelope)\n\n  const accessTupleList = AccessList.toTupleList(accessList)\n\n  const signature = Signature.extract(options.signature || envelope)\n\n  const serialized = [\n    Hex.fromNumber(chainId),\n    nonce ? Hex.fromNumber(nonce) : '0x',\n    maxPriorityFeePerGas ? Hex.fromNumber(maxPriorityFeePerGas) : '0x',\n    maxFeePerGas ? Hex.fromNumber(maxFeePerGas) : '0x',\n    gas ? Hex.fromNumber(gas) : '0x',\n    to ?? '0x',\n    value ? Hex.fromNumber(value) : '0x',\n    data ?? input ?? '0x',\n    accessTupleList,\n    ...(signature ? Signature.toTuple(signature) : []),\n  ]\n\n  return Hex.concat(serializedType, Rlp.fromHex(serialized)) as Serialized\n}\n\nexport declare namespace serialize {\n  type Options = {\n    /** Signature to append to the serialized Transaction Envelope. */\n    signature?: Signature.Signature | undefined\n  }\n\n  type ErrorType =\n    | assert.ErrorType\n    | Hex.fromNumber.ErrorType\n    | Signature.toTuple.ErrorType\n    | Hex.concat.ErrorType\n    | Rlp.fromHex.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Converts an {@link ox#TransactionEnvelopeEip1559.TransactionEnvelopeEip1559} to an {@link ox#TransactionEnvelopeEip1559.Rpc}.\n *\n * @example\n * ```ts twoslash\n * import { RpcRequest, TransactionEnvelopeEip1559, Value } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip1559.from({\n *   chainId: 1,\n *   nonce: 0n,\n *   gas: 21000n,\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: Value.fromEther('1'),\n * })\n *\n * const envelope_rpc = TransactionEnvelopeEip1559.toRpc(envelope) // [!code focus]\n *\n * const request = RpcRequest.from({\n *   id: 0,\n *   method: 'eth_sendTransaction',\n *   params: [envelope_rpc],\n * })\n * ```\n *\n * @param envelope - The EIP-1559 transaction envelope to convert.\n * @returns An RPC-formatted EIP-1559 transaction envelope.\n */\nexport function toRpc(envelope: Omit<TransactionEnvelopeEip1559, 'type'>): Rpc {\n  const signature = Signature.extract(envelope)\n\n  return {\n    ...envelope,\n    chainId: Hex.fromNumber(envelope.chainId),\n    data: envelope.data ?? envelope.input,\n    type: '0x2',\n    ...(typeof envelope.gas === 'bigint'\n      ? { gas: Hex.fromNumber(envelope.gas) }\n      : {}),\n    ...(typeof envelope.nonce === 'bigint'\n      ? { nonce: Hex.fromNumber(envelope.nonce) }\n      : {}),\n    ...(typeof envelope.value === 'bigint'\n      ? { value: Hex.fromNumber(envelope.value) }\n      : {}),\n    ...(typeof envelope.maxFeePerGas === 'bigint'\n      ? { maxFeePerGas: Hex.fromNumber(envelope.maxFeePerGas) }\n      : {}),\n    ...(typeof envelope.maxPriorityFeePerGas === 'bigint'\n      ? {\n          maxPriorityFeePerGas: Hex.fromNumber(envelope.maxPriorityFeePerGas),\n        }\n      : {}),\n    ...(signature ? Signature.toRpc(signature) : {}),\n  } as never\n}\n\nexport declare namespace toRpc {\n  export type ErrorType = Signature.extract.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Validates a {@link ox#TransactionEnvelopeEip1559.TransactionEnvelopeEip1559}. Returns `true` if the envelope is valid, `false` otherwise.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip1559, Value } from 'ox'\n *\n * const valid = TransactionEnvelopeEip1559.assert({\n *   maxFeePerGas: 2n ** 256n - 1n + 1n,\n *   chainId: 1,\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n * // @log: false\n * ```\n *\n * @param envelope - The transaction envelope to validate.\n */\nexport function validate(\n  envelope: PartialBy<TransactionEnvelopeEip1559, 'type'>,\n) {\n  try {\n    assert(envelope)\n    return true\n  } catch {\n    return false\n  }\n}\n\nexport declare namespace validate {\n  type ErrorType = Errors.GlobalErrorType\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}