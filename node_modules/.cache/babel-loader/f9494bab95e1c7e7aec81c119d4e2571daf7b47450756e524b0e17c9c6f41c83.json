{"ast":null,"code":"import { waitForTransactionReceipt } from '../actions/waitForTransactionReceipt.js';\nimport { filterQueryOptions } from './utils.js';\nexport function waitForTransactionReceiptQueryOptions(config, options = {}) {\n  return {\n    async queryFn({\n      queryKey\n    }) {\n      const {\n        hash,\n        ...parameters\n      } = queryKey[1];\n      if (!hash) throw new Error('hash is required');\n      return waitForTransactionReceipt(config, {\n        ...parameters,\n        onReplaced: options.onReplaced,\n        hash\n      });\n    },\n    queryKey: waitForTransactionReceiptQueryKey(options)\n  };\n}\nexport function waitForTransactionReceiptQueryKey(options = {}) {\n  const {\n    onReplaced: _,\n    ...rest\n  } = options;\n  return ['waitForTransactionReceipt', filterQueryOptions(rest)];\n}","map":{"version":3,"names":["waitForTransactionReceipt","filterQueryOptions","waitForTransactionReceiptQueryOptions","config","options","queryFn","queryKey","hash","parameters","Error","onReplaced","waitForTransactionReceiptQueryKey","_","rest"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/@wagmi/core/src/query/waitForTransactionReceipt.ts"],"sourcesContent":["import type { QueryOptions } from '@tanstack/query-core'\n\nimport {\n  type WaitForTransactionReceiptErrorType,\n  type WaitForTransactionReceiptParameters,\n  type WaitForTransactionReceiptReturnType,\n  waitForTransactionReceipt,\n} from '../actions/waitForTransactionReceipt.js'\nimport type { Config } from '../createConfig.js'\nimport type { ScopeKeyParameter } from '../types/properties.js'\nimport type { Compute, ExactPartial } from '../types/utils.js'\nimport { filterQueryOptions } from './utils.js'\n\nexport type WaitForTransactionReceiptOptions<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n> = Compute<\n  ExactPartial<WaitForTransactionReceiptParameters<config, chainId>> &\n    ScopeKeyParameter\n>\n\nexport function waitForTransactionReceiptQueryOptions<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n>(\n  config: config,\n  options: WaitForTransactionReceiptOptions<config, chainId> = {},\n) {\n  return {\n    async queryFn({ queryKey }) {\n      const { hash, ...parameters } = queryKey[1]\n      if (!hash) throw new Error('hash is required')\n      return waitForTransactionReceipt(config, {\n        ...parameters,\n        onReplaced: options.onReplaced,\n        hash,\n      }) as unknown as Promise<\n        WaitForTransactionReceiptReturnType<config, chainId>\n      >\n    },\n    queryKey: waitForTransactionReceiptQueryKey(options),\n  } as const satisfies QueryOptions<\n    WaitForTransactionReceiptQueryFnData<config, chainId>,\n    WaitForTransactionReceiptErrorType,\n    WaitForTransactionReceiptData<config, chainId>,\n    WaitForTransactionReceiptQueryKey<config, chainId>\n  >\n}\n\nexport type WaitForTransactionReceiptQueryFnData<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n> = WaitForTransactionReceiptReturnType<config, chainId>\n\nexport type WaitForTransactionReceiptData<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n> = WaitForTransactionReceiptQueryFnData<config, chainId>\n\nexport function waitForTransactionReceiptQueryKey<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n>(options: WaitForTransactionReceiptOptions<config, chainId> = {}) {\n  const { onReplaced: _, ...rest } = options\n  return ['waitForTransactionReceipt', filterQueryOptions(rest)] as const\n}\n\nexport type WaitForTransactionReceiptQueryKey<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n> = ReturnType<typeof waitForTransactionReceiptQueryKey<config, chainId>>\n"],"mappings":"AAEA,SAIEA,yBAAyB,QACpB,yCAAyC;AAIhD,SAASC,kBAAkB,QAAQ,YAAY;AAU/C,OAAM,SAAUC,qCAAqCA,CAInDC,MAAc,EACdC,OAAA,GAA6D,EAAE;EAE/D,OAAO;IACL,MAAMC,OAAOA,CAAC;MAAEC;IAAQ,CAAE;MACxB,MAAM;QAAEC,IAAI;QAAE,GAAGC;MAAU,CAAE,GAAGF,QAAQ,CAAC,CAAC,CAAC;MAC3C,IAAI,CAACC,IAAI,EAAE,MAAM,IAAIE,KAAK,CAAC,kBAAkB,CAAC;MAC9C,OAAOT,yBAAyB,CAACG,MAAM,EAAE;QACvC,GAAGK,UAAU;QACbE,UAAU,EAAEN,OAAO,CAACM,UAAU;QAC9BH;OACD,CAEA;IACH,CAAC;IACDD,QAAQ,EAAEK,iCAAiC,CAACP,OAAO;GAMpD;AACH;AAYA,OAAM,SAAUO,iCAAiCA,CAG/CP,OAAA,GAA6D,EAAE;EAC/D,MAAM;IAAEM,UAAU,EAAEE,CAAC;IAAE,GAAGC;EAAI,CAAE,GAAGT,OAAO;EAC1C,OAAO,CAAC,2BAA2B,EAAEH,kBAAkB,CAACY,IAAI,CAAC,CAAU;AACzE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}