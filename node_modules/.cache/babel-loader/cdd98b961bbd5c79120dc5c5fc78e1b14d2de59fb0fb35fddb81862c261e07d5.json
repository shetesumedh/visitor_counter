{"ast":null,"code":"import { hashAuthorization } from '../../utils/authorization/hashAuthorization.js';\nimport { sign } from './sign.js';\n/**\n * Signs an Authorization hash in [EIP-7702 format](https://eips.ethereum.org/EIPS/eip-7702): `keccak256('0x05' || rlp([chain_id, address, nonce]))`.\n */\nexport async function signAuthorization(parameters) {\n  const {\n    chainId,\n    nonce,\n    privateKey,\n    to = 'object'\n  } = parameters;\n  const address = parameters.contractAddress ?? parameters.address;\n  const signature = await sign({\n    hash: hashAuthorization({\n      address,\n      chainId,\n      nonce\n    }),\n    privateKey,\n    to\n  });\n  if (to === 'object') return {\n    address,\n    chainId,\n    nonce,\n    ...signature\n  };\n  return signature;\n}","map":{"version":3,"names":["hashAuthorization","sign","signAuthorization","parameters","chainId","nonce","privateKey","to","address","contractAddress","signature","hash"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/viem/accounts/utils/signAuthorization.ts"],"sourcesContent":["import type { ErrorType } from '../../errors/utils.js'\nimport type {\n  AuthorizationRequest,\n  SignedAuthorization,\n} from '../../types/authorization.js'\nimport type { Hex, Signature } from '../../types/misc.js'\nimport type { Prettify } from '../../types/utils.js'\nimport {\n  type HashAuthorizationErrorType,\n  hashAuthorization,\n} from '../../utils/authorization/hashAuthorization.js'\nimport {\n  type SignErrorType,\n  type SignParameters,\n  type SignReturnType,\n  sign,\n} from './sign.js'\n\ntype To = 'object' | 'bytes' | 'hex'\n\nexport type SignAuthorizationParameters<to extends To = 'object'> =\n  AuthorizationRequest & {\n    /** The private key to sign with. */\n    privateKey: Hex\n    to?: SignParameters<to>['to'] | undefined\n  }\n\nexport type SignAuthorizationReturnType<to extends To = 'object'> = Prettify<\n  to extends 'object' ? SignedAuthorization : SignReturnType<to>\n>\n\nexport type SignAuthorizationErrorType =\n  | SignErrorType\n  | HashAuthorizationErrorType\n  | ErrorType\n\n/**\n * Signs an Authorization hash in [EIP-7702 format](https://eips.ethereum.org/EIPS/eip-7702): `keccak256('0x05' || rlp([chain_id, address, nonce]))`.\n */\nexport async function signAuthorization<to extends To = 'object'>(\n  parameters: SignAuthorizationParameters<to>,\n): Promise<SignAuthorizationReturnType<to>> {\n  const { chainId, nonce, privateKey, to = 'object' } = parameters\n  const address = parameters.contractAddress ?? parameters.address\n  const signature = await sign({\n    hash: hashAuthorization({ address, chainId, nonce }),\n    privateKey,\n    to,\n  })\n  if (to === 'object')\n    return {\n      address,\n      chainId,\n      nonce,\n      ...(signature as Signature),\n    } as any\n  return signature as any\n}\n"],"mappings":"AAOA,SAEEA,iBAAiB,QACZ,gDAAgD;AACvD,SAIEC,IAAI,QACC,WAAW;AAoBlB;;;AAGA,OAAO,eAAeC,iBAAiBA,CACrCC,UAA2C;EAE3C,MAAM;IAAEC,OAAO;IAAEC,KAAK;IAAEC,UAAU;IAAEC,EAAE,GAAG;EAAQ,CAAE,GAAGJ,UAAU;EAChE,MAAMK,OAAO,GAAGL,UAAU,CAACM,eAAe,IAAIN,UAAU,CAACK,OAAO;EAChE,MAAME,SAAS,GAAG,MAAMT,IAAI,CAAC;IAC3BU,IAAI,EAAEX,iBAAiB,CAAC;MAAEQ,OAAO;MAAEJ,OAAO;MAAEC;IAAK,CAAE,CAAC;IACpDC,UAAU;IACVC;GACD,CAAC;EACF,IAAIA,EAAE,KAAK,QAAQ,EACjB,OAAO;IACLC,OAAO;IACPJ,OAAO;IACPC,KAAK;IACL,GAAIK;GACE;EACV,OAAOA,SAAgB;AACzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}