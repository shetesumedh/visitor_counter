{"ast":null,"code":"'use client';\n\nimport { callQueryOptions } from '@wagmi/core/query';\nimport { useQuery } from '../utils/query.js';\nimport { useChainId } from './useChainId.js';\nimport { useConfig } from './useConfig.js';\n/** https://wagmi.sh/react/api/hooks/useCall */\nexport function useCall(parameters = {}) {\n  const {\n    query = {}\n  } = parameters;\n  const config = useConfig(parameters);\n  const chainId = useChainId({\n    config\n  });\n  const options = callQueryOptions(config, {\n    ...parameters,\n    chainId: parameters.chainId ?? chainId\n  });\n  return useQuery({\n    ...query,\n    ...options\n  });\n}","map":{"version":3,"names":["callQueryOptions","useQuery","useChainId","useConfig","useCall","parameters","query","config","chainId","options"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/wagmi/src/hooks/useCall.ts"],"sourcesContent":["'use client'\n\nimport type { CallErrorType, Config, ResolvedRegister } from '@wagmi/core'\nimport type { Compute } from '@wagmi/core/internal'\nimport {\n  type CallData,\n  type CallOptions,\n  type CallQueryKey,\n  callQueryOptions,\n} from '@wagmi/core/query'\nimport type { CallQueryFnData } from '@wagmi/core/query'\n\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseCallParameters<\n  config extends Config = Config,\n  selectData = CallData,\n> = Compute<\n  CallOptions<config> &\n    ConfigParameter<config> &\n    QueryParameter<\n      CallQueryFnData,\n      CallErrorType,\n      selectData,\n      CallQueryKey<config>\n    >\n>\n\nexport type UseCallReturnType<selectData = CallData> = UseQueryReturnType<\n  selectData,\n  CallErrorType\n>\n\n/** https://wagmi.sh/react/api/hooks/useCall */\nexport function useCall<\n  config extends Config = ResolvedRegister['config'],\n  selectData = CallData,\n>(\n  parameters: UseCallParameters<config, selectData> = {},\n): UseCallReturnType<selectData> {\n  const { query = {} } = parameters\n\n  const config = useConfig(parameters)\n  const chainId = useChainId({ config })\n\n  const options = callQueryOptions(config, {\n    ...parameters,\n    chainId: parameters.chainId ?? chainId,\n  })\n\n  return useQuery({ ...query, ...options })\n}\n"],"mappings":"AAAA,YAAY;;AAIZ,SAIEA,gBAAgB,QACX,mBAAmB;AAI1B,SAAkCC,QAAQ,QAAQ,mBAAmB;AACrE,SAASC,UAAU,QAAQ,iBAAiB;AAC5C,SAASC,SAAS,QAAQ,gBAAgB;AAqB1C;AACA,OAAM,SAAUC,OAAOA,CAIrBC,UAAA,GAAoD,EAAE;EAEtD,MAAM;IAAEC,KAAK,GAAG;EAAE,CAAE,GAAGD,UAAU;EAEjC,MAAME,MAAM,GAAGJ,SAAS,CAACE,UAAU,CAAC;EACpC,MAAMG,OAAO,GAAGN,UAAU,CAAC;IAAEK;EAAM,CAAE,CAAC;EAEtC,MAAME,OAAO,GAAGT,gBAAgB,CAACO,MAAM,EAAE;IACvC,GAAGF,UAAU;IACbG,OAAO,EAAEH,UAAU,CAACG,OAAO,IAAIA;GAChC,CAAC;EAEF,OAAOP,QAAQ,CAAC;IAAE,GAAGK,KAAK;IAAE,GAAGG;EAAO,CAAE,CAAC;AAC3C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}