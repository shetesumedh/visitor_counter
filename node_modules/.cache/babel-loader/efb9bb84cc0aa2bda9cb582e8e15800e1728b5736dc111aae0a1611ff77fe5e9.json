{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SafeAppProvider = void 0;\nconst safe_apps_sdk_1 = require(\"@safe-global/safe-apps-sdk\");\nconst events_1 = require(\"events\");\nconst utils_1 = require(\"./utils\");\n// The API is based on Ethereum JavaScript API Provider Standard. Link: https://eips.ethereum.org/EIPS/eip-1193\nclass SafeAppProvider extends events_1.EventEmitter {\n  constructor(safe, sdk) {\n    super();\n    this.submittedTxs = new Map();\n    this.safe = safe;\n    this.sdk = sdk;\n  }\n  async connect() {\n    this.emit('connect', {\n      chainId: this.chainId\n    });\n    return;\n  }\n  async disconnect() {\n    return;\n  }\n  get chainId() {\n    return this.safe.chainId;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  async request(request) {\n    const {\n      method,\n      params = []\n    } = request;\n    switch (method) {\n      case 'eth_accounts':\n        return [this.safe.safeAddress];\n      case 'net_version':\n      case 'eth_chainId':\n        return (0, utils_1.numberToHex)(this.chainId);\n      case 'personal_sign':\n        {\n          const [message, address] = params;\n          if (this.safe.safeAddress.toLowerCase() !== address.toLowerCase()) {\n            throw new Error('The address or message hash is invalid');\n          }\n          const response = await this.sdk.txs.signMessage(message);\n          const signature = 'signature' in response ? response.signature : undefined;\n          return signature || '0x';\n        }\n      case 'eth_sign':\n        {\n          const [address, messageHash] = params;\n          if (this.safe.safeAddress.toLowerCase() !== address.toLowerCase() || !messageHash.startsWith('0x')) {\n            throw new Error('The address or message hash is invalid');\n          }\n          const response = await this.sdk.txs.signMessage(messageHash);\n          const signature = 'signature' in response ? response.signature : undefined;\n          return signature || '0x';\n        }\n      case 'eth_signTypedData':\n      case 'eth_signTypedData_v4':\n        {\n          const [address, typedData] = params;\n          const parsedTypedData = typeof typedData === 'string' ? JSON.parse(typedData) : typedData;\n          if (this.safe.safeAddress.toLowerCase() !== address.toLowerCase()) {\n            throw new Error('The address is invalid');\n          }\n          const response = await this.sdk.txs.signTypedMessage(parsedTypedData);\n          const signature = 'signature' in response ? response.signature : undefined;\n          return signature || '0x';\n        }\n      case 'eth_sendTransaction':\n        // `value` or `data` can be explicitly set as `undefined` for example in Viem. The spread will overwrite the fallback value.\n        const tx = {\n          ...params[0],\n          value: params[0].value || '0',\n          data: params[0].data || '0x'\n        };\n        // Some ethereum libraries might pass the gas as a hex-encoded string\n        // We need to convert it to a number because the SDK expects a number and our backend only supports\n        // Decimal numbers\n        if (typeof tx.gas === 'string' && tx.gas.startsWith('0x')) {\n          tx.gas = parseInt(tx.gas, 16);\n        }\n        const resp = await this.sdk.txs.send({\n          txs: [tx],\n          params: {\n            safeTxGas: tx.gas\n          }\n        });\n        // Store fake transaction\n        this.submittedTxs.set(resp.safeTxHash, {\n          from: this.safe.safeAddress,\n          hash: resp.safeTxHash,\n          gas: 0,\n          gasPrice: '0x00',\n          nonce: 0,\n          input: tx.data,\n          value: tx.value,\n          to: tx.to,\n          blockHash: null,\n          blockNumber: null,\n          transactionIndex: null\n        });\n        return resp.safeTxHash;\n      case 'eth_blockNumber':\n        const block = await this.sdk.eth.getBlockByNumber(['latest']);\n        return block.number;\n      case 'eth_getBalance':\n        return this.sdk.eth.getBalance([(0, utils_1.getLowerCase)(params[0]), params[1]]);\n      case 'eth_getCode':\n        return this.sdk.eth.getCode([(0, utils_1.getLowerCase)(params[0]), params[1]]);\n      case 'eth_getTransactionCount':\n        return this.sdk.eth.getTransactionCount([(0, utils_1.getLowerCase)(params[0]), params[1]]);\n      case 'eth_getStorageAt':\n        return this.sdk.eth.getStorageAt([(0, utils_1.getLowerCase)(params[0]), params[1], params[2]]);\n      case 'eth_getBlockByNumber':\n        return this.sdk.eth.getBlockByNumber([params[0], params[1]]);\n      case 'eth_getBlockByHash':\n        return this.sdk.eth.getBlockByHash([params[0], params[1]]);\n      case 'eth_getTransactionByHash':\n        let txHash = params[0];\n        try {\n          const resp = await this.sdk.txs.getBySafeTxHash(txHash);\n          txHash = resp.txHash || txHash;\n        } catch (e) {}\n        // Use fake transaction if we don't have a real tx hash\n        if (this.submittedTxs.has(txHash)) {\n          return this.submittedTxs.get(txHash);\n        }\n        return this.sdk.eth.getTransactionByHash([txHash]).then(tx => {\n          // We set the tx hash to the one requested, as some provider assert this\n          if (tx) {\n            tx.hash = params[0];\n          }\n          return tx;\n        });\n      case 'eth_getTransactionReceipt':\n        {\n          let txHash = params[0];\n          try {\n            const resp = await this.sdk.txs.getBySafeTxHash(txHash);\n            txHash = resp.txHash || txHash;\n          } catch (e) {}\n          return this.sdk.eth.getTransactionReceipt([txHash]).then(tx => {\n            // We set the tx hash to the one requested, as some provider assert this\n            if (tx) {\n              tx.transactionHash = params[0];\n            }\n            return tx;\n          });\n        }\n      case 'eth_estimateGas':\n        {\n          return this.sdk.eth.getEstimateGas(params[0]);\n        }\n      case 'eth_call':\n        {\n          return this.sdk.eth.call([params[0], params[1]]);\n        }\n      case 'eth_getLogs':\n        return this.sdk.eth.getPastLogs([params[0]]);\n      case 'eth_gasPrice':\n        return this.sdk.eth.getGasPrice();\n      case 'wallet_getPermissions':\n        return this.sdk.wallet.getPermissions();\n      case 'wallet_requestPermissions':\n        return this.sdk.wallet.requestPermissions(params[0]);\n      case 'safe_setSettings':\n        return this.sdk.eth.setSafeSettings([params[0]]);\n      case 'wallet_sendCalls':\n        {\n          const {\n            from,\n            calls,\n            chainId\n          } = params[0];\n          if (chainId !== (0, utils_1.numberToHex)(this.chainId)) {\n            throw new Error(`Safe is not on chain ${chainId}`);\n          }\n          if (from !== this.safe.safeAddress) {\n            throw Error('Invalid from address');\n          }\n          const txs = calls.map((call, i) => {\n            if (!call.to) {\n              throw new Error(`Invalid call #${i}: missing \"to\" field`);\n            }\n            return {\n              to: call.to,\n              data: call.data ?? '0x',\n              value: call.value ?? (0, utils_1.numberToHex)(0)\n            };\n          });\n          const {\n            safeTxHash\n          } = await this.sdk.txs.send({\n            txs\n          });\n          const result = {\n            id: safeTxHash\n          };\n          return result;\n        }\n      case 'wallet_getCallsStatus':\n        {\n          const safeTxHash = params[0];\n          const CallStatus = {\n            [safe_apps_sdk_1.TransactionStatus.AWAITING_CONFIRMATIONS]: 100,\n            [safe_apps_sdk_1.TransactionStatus.AWAITING_EXECUTION]: 100,\n            [safe_apps_sdk_1.TransactionStatus.SUCCESS]: 200,\n            [safe_apps_sdk_1.TransactionStatus.CANCELLED]: 400,\n            [safe_apps_sdk_1.TransactionStatus.FAILED]: 500\n          };\n          const tx = await this.sdk.txs.getBySafeTxHash(safeTxHash);\n          const result = {\n            version: '1.0',\n            id: safeTxHash,\n            chainId: (0, utils_1.numberToHex)(this.chainId),\n            status: CallStatus[tx.txStatus]\n          };\n          // Transaction is queued\n          if (!tx.txHash) {\n            return result;\n          }\n          // If transaction is executing, receipt is null\n          const receipt = await this.sdk.eth.getTransactionReceipt([tx.txHash]);\n          if (!receipt) {\n            return result;\n          }\n          const calls = tx.txData?.dataDecoded?.method !== 'multiSend' ? 1 :\n          // Number of batched transactions\n          tx.txData.dataDecoded.parameters?.[0].valueDecoded?.length ?? 1;\n          // Typed as number; is hex\n          const blockNumber = Number(receipt.blockNumber);\n          const gasUsed = Number(receipt.gasUsed);\n          result.receipts = Array(calls).fill({\n            logs: receipt.logs,\n            status: (0, utils_1.numberToHex)(tx.txStatus === safe_apps_sdk_1.TransactionStatus.SUCCESS ? 1 : 0),\n            blockHash: receipt.blockHash,\n            blockNumber: (0, utils_1.numberToHex)(blockNumber),\n            gasUsed: (0, utils_1.numberToHex)(gasUsed),\n            transactionHash: tx.txHash\n          });\n          return result;\n        }\n      case 'wallet_showCallsStatus':\n        {\n          // Cannot open transaction details page via SDK\n          throw new Error(`\"${request.method}\" not supported`);\n        }\n      case 'wallet_getCapabilities':\n        {\n          return {\n            [(0, utils_1.numberToHex)(this.chainId)]: {\n              atomicBatch: {\n                supported: true\n              }\n            }\n          };\n        }\n      default:\n        throw Error(`\"${request.method}\" not implemented`);\n    }\n  }\n  // this method is needed for ethers v4\n  // https://github.com/ethers-io/ethers.js/blob/427e16826eb15d52d25c4f01027f8db22b74b76c/src.ts/providers/web3-provider.ts#L41-L55\n  send(request, callback) {\n    if (!request) callback('Undefined request');\n    this.request(request).then(result => callback(null, {\n      jsonrpc: '2.0',\n      id: request.id,\n      result\n    })).catch(error => callback(error, null));\n  }\n}\nexports.SafeAppProvider = SafeAppProvider;","map":{"version":3,"names":["safe_apps_sdk_1","require","events_1","utils_1","SafeAppProvider","EventEmitter","constructor","safe","sdk","submittedTxs","Map","connect","emit","chainId","disconnect","request","method","params","safeAddress","numberToHex","message","address","toLowerCase","Error","response","txs","signMessage","signature","undefined","messageHash","startsWith","typedData","parsedTypedData","JSON","parse","signTypedMessage","tx","value","data","gas","parseInt","resp","send","safeTxGas","set","safeTxHash","from","hash","gasPrice","nonce","input","to","blockHash","blockNumber","transactionIndex","block","eth","getBlockByNumber","number","getBalance","getLowerCase","getCode","getTransactionCount","getStorageAt","getBlockByHash","txHash","getBySafeTxHash","e","has","get","getTransactionByHash","then","getTransactionReceipt","transactionHash","getEstimateGas","call","getPastLogs","getGasPrice","wallet","getPermissions","requestPermissions","setSafeSettings","calls","map","i","result","id","CallStatus","TransactionStatus","AWAITING_CONFIRMATIONS","AWAITING_EXECUTION","SUCCESS","CANCELLED","FAILED","version","status","txStatus","receipt","txData","dataDecoded","parameters","valueDecoded","length","Number","gasUsed","receipts","Array","fill","logs","atomicBatch","supported","callback","jsonrpc","catch","error","exports"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/@safe-global/safe-apps-provider/src/provider.ts"],"sourcesContent":["import SafeAppsSDK, { SafeInfo, TransactionStatus, Web3TransactionObject } from '@safe-global/safe-apps-sdk';\nimport { EventEmitter } from 'events';\nimport { EIP1193Provider, GetCallsParams, GetCallsResult, SendCallsParams, SendCallsResult } from './types';\nimport { getLowerCase, numberToHex } from './utils';\n\n// The API is based on Ethereum JavaScript API Provider Standard. Link: https://eips.ethereum.org/EIPS/eip-1193\nexport class SafeAppProvider extends EventEmitter implements EIP1193Provider {\n  private readonly safe: SafeInfo;\n  private readonly sdk: SafeAppsSDK;\n  private submittedTxs = new Map<string, Web3TransactionObject>();\n\n  constructor(safe: SafeInfo, sdk: SafeAppsSDK) {\n    super();\n    this.safe = safe;\n    this.sdk = sdk;\n  }\n\n  async connect(): Promise<void> {\n    this.emit('connect', { chainId: this.chainId });\n    return;\n  }\n\n  async disconnect(): Promise<void> {\n    return;\n  }\n\n  public get chainId(): number {\n    return this.safe.chainId;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  async request(request: { method: string; params?: any[] }): Promise<any> {\n    const { method, params = [] } = request;\n\n    switch (method) {\n      case 'eth_accounts':\n        return [this.safe.safeAddress];\n\n      case 'net_version':\n      case 'eth_chainId':\n        return numberToHex(this.chainId);\n\n      case 'personal_sign': {\n        const [message, address] = params;\n\n        if (this.safe.safeAddress.toLowerCase() !== address.toLowerCase()) {\n          throw new Error('The address or message hash is invalid');\n        }\n\n        const response = await this.sdk.txs.signMessage(message);\n        const signature = 'signature' in response ? response.signature : undefined;\n\n        return signature || '0x';\n      }\n\n      case 'eth_sign': {\n        const [address, messageHash] = params;\n\n        if (this.safe.safeAddress.toLowerCase() !== address.toLowerCase() || !messageHash.startsWith('0x')) {\n          throw new Error('The address or message hash is invalid');\n        }\n\n        const response = await this.sdk.txs.signMessage(messageHash);\n        const signature = 'signature' in response ? response.signature : undefined;\n\n        return signature || '0x';\n      }\n\n      case 'eth_signTypedData':\n      case 'eth_signTypedData_v4': {\n        const [address, typedData] = params;\n        const parsedTypedData = typeof typedData === 'string' ? JSON.parse(typedData) : typedData;\n\n        if (this.safe.safeAddress.toLowerCase() !== address.toLowerCase()) {\n          throw new Error('The address is invalid');\n        }\n\n        const response = await this.sdk.txs.signTypedMessage(parsedTypedData);\n        const signature = 'signature' in response ? response.signature : undefined;\n        return signature || '0x';\n      }\n\n      case 'eth_sendTransaction':\n        // `value` or `data` can be explicitly set as `undefined` for example in Viem. The spread will overwrite the fallback value.\n        const tx = {\n          ...params[0],\n          value: params[0].value || '0',\n          data: params[0].data || '0x',\n        };\n\n        // Some ethereum libraries might pass the gas as a hex-encoded string\n        // We need to convert it to a number because the SDK expects a number and our backend only supports\n        // Decimal numbers\n        if (typeof tx.gas === 'string' && tx.gas.startsWith('0x')) {\n          tx.gas = parseInt(tx.gas, 16);\n        }\n\n        const resp = await this.sdk.txs.send({\n          txs: [tx],\n          params: { safeTxGas: tx.gas },\n        });\n\n        // Store fake transaction\n        this.submittedTxs.set(resp.safeTxHash, {\n          from: this.safe.safeAddress,\n          hash: resp.safeTxHash,\n          gas: 0,\n          gasPrice: '0x00',\n          nonce: 0,\n          input: tx.data,\n          value: tx.value,\n          to: tx.to,\n          blockHash: null,\n          blockNumber: null,\n          transactionIndex: null,\n        });\n        return resp.safeTxHash;\n\n      case 'eth_blockNumber':\n        const block = await this.sdk.eth.getBlockByNumber(['latest']);\n\n        return block.number;\n\n      case 'eth_getBalance':\n        return this.sdk.eth.getBalance([getLowerCase(params[0]), params[1]]);\n\n      case 'eth_getCode':\n        return this.sdk.eth.getCode([getLowerCase(params[0]), params[1]]);\n\n      case 'eth_getTransactionCount':\n        return this.sdk.eth.getTransactionCount([getLowerCase(params[0]), params[1]]);\n\n      case 'eth_getStorageAt':\n        return this.sdk.eth.getStorageAt([getLowerCase(params[0]), params[1], params[2]]);\n\n      case 'eth_getBlockByNumber':\n        return this.sdk.eth.getBlockByNumber([params[0], params[1]]);\n\n      case 'eth_getBlockByHash':\n        return this.sdk.eth.getBlockByHash([params[0], params[1]]);\n\n      case 'eth_getTransactionByHash':\n        let txHash = params[0];\n        try {\n          const resp = await this.sdk.txs.getBySafeTxHash(txHash);\n          txHash = resp.txHash || txHash;\n        } catch (e) {}\n        // Use fake transaction if we don't have a real tx hash\n        if (this.submittedTxs.has(txHash)) {\n          return this.submittedTxs.get(txHash);\n        }\n        return this.sdk.eth.getTransactionByHash([txHash]).then((tx) => {\n          // We set the tx hash to the one requested, as some provider assert this\n          if (tx) {\n            tx.hash = params[0];\n          }\n          return tx;\n        });\n\n      case 'eth_getTransactionReceipt': {\n        let txHash = params[0];\n        try {\n          const resp = await this.sdk.txs.getBySafeTxHash(txHash);\n          txHash = resp.txHash || txHash;\n        } catch (e) {}\n        return this.sdk.eth.getTransactionReceipt([txHash]).then((tx) => {\n          // We set the tx hash to the one requested, as some provider assert this\n          if (tx) {\n            tx.transactionHash = params[0];\n          }\n          return tx;\n        });\n      }\n\n      case 'eth_estimateGas': {\n        return this.sdk.eth.getEstimateGas(params[0]);\n      }\n\n      case 'eth_call': {\n        return this.sdk.eth.call([params[0], params[1]]);\n      }\n\n      case 'eth_getLogs':\n        return this.sdk.eth.getPastLogs([params[0]]);\n\n      case 'eth_gasPrice':\n        return this.sdk.eth.getGasPrice();\n\n      case 'wallet_getPermissions':\n        return this.sdk.wallet.getPermissions();\n\n      case 'wallet_requestPermissions':\n        return this.sdk.wallet.requestPermissions(params[0]);\n\n      case 'safe_setSettings':\n        return this.sdk.eth.setSafeSettings([params[0]]);\n\n      case 'wallet_sendCalls': {\n        const { from, calls, chainId }: SendCallsParams = params[0];\n\n        if (chainId !== numberToHex(this.chainId)) {\n          throw new Error(`Safe is not on chain ${chainId}`);\n        }\n\n        if (from !== this.safe.safeAddress) {\n          throw Error('Invalid from address');\n        }\n\n        const txs = calls.map((call, i) => {\n          if (!call.to) {\n            throw new Error(`Invalid call #${i}: missing \"to\" field`);\n          }\n          return {\n            to: call.to,\n            data: call.data ?? '0x',\n            value: call.value ?? numberToHex(0),\n          };\n        });\n\n        const { safeTxHash } = await this.sdk.txs.send({ txs });\n\n        const result: SendCallsResult = {\n          id: safeTxHash,\n        };\n\n        return result;\n      }\n\n      case 'wallet_getCallsStatus': {\n        const safeTxHash: GetCallsParams = params[0];\n\n        const CallStatus: {\n          [key in TransactionStatus]: GetCallsResult['status'];\n        } = {\n          [TransactionStatus.AWAITING_CONFIRMATIONS]: 100,\n          [TransactionStatus.AWAITING_EXECUTION]: 100,\n          [TransactionStatus.SUCCESS]: 200,\n          [TransactionStatus.CANCELLED]: 400,\n          [TransactionStatus.FAILED]: 500,\n        };\n\n        const tx = await this.sdk.txs.getBySafeTxHash(safeTxHash);\n\n        const result: GetCallsResult = {\n          version: '1.0',\n          id: safeTxHash,\n          chainId: numberToHex(this.chainId),\n          status: CallStatus[tx.txStatus],\n        };\n\n        // Transaction is queued\n        if (!tx.txHash) {\n          return result;\n        }\n\n        // If transaction is executing, receipt is null\n        const receipt = await this.sdk.eth.getTransactionReceipt([tx.txHash]);\n        if (!receipt) {\n          return result;\n        }\n\n        const calls =\n          tx.txData?.dataDecoded?.method !== 'multiSend'\n            ? 1\n            : // Number of batched transactions\n              tx.txData.dataDecoded.parameters?.[0].valueDecoded?.length ?? 1;\n\n        // Typed as number; is hex\n        const blockNumber = Number(receipt.blockNumber);\n        const gasUsed = Number(receipt.gasUsed);\n\n        result.receipts = Array(calls).fill({\n          logs: receipt.logs,\n          status: numberToHex(tx.txStatus === TransactionStatus.SUCCESS ? 1 : 0),\n          blockHash: receipt.blockHash,\n          blockNumber: numberToHex(blockNumber),\n          gasUsed: numberToHex(gasUsed),\n          transactionHash: tx.txHash,\n        });\n\n        return result;\n      }\n\n      case 'wallet_showCallsStatus': {\n        // Cannot open transaction details page via SDK\n        throw new Error(`\"${request.method}\" not supported`);\n      }\n\n      case 'wallet_getCapabilities': {\n        return {\n          [numberToHex(this.chainId)]: {\n            atomicBatch: {\n              supported: true,\n            },\n          },\n        };\n      }\n\n      default:\n        throw Error(`\"${request.method}\" not implemented`);\n    }\n  }\n\n  // this method is needed for ethers v4\n  // https://github.com/ethers-io/ethers.js/blob/427e16826eb15d52d25c4f01027f8db22b74b76c/src.ts/providers/web3-provider.ts#L41-L55\n  send(request: any, callback: (error: any, response?: any) => void): void {\n    if (!request) callback('Undefined request');\n    this.request(request)\n      .then((result) => callback(null, { jsonrpc: '2.0', id: request.id, result }))\n      .catch((error) => callback(error, null));\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}