{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DER = exports.DERErr = void 0;\nexports._legacyHelperEquat = _legacyHelperEquat;\nexports._legacyHelperNormPriv = _legacyHelperNormPriv;\nexports.weierstrassN = weierstrassN;\nexports.weierstrassPoints = weierstrassPoints;\nexports.ecdsa = ecdsa;\nexports.weierstrass = weierstrass;\nexports.SWUFpSqrtRatio = SWUFpSqrtRatio;\nexports.mapToCurveSimpleSWU = mapToCurveSimpleSWU;\n/**\n * Short Weierstrass curve methods. The formula is: y² = x³ + ax + b.\n *\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance\n * of nominative types in TypeScript and interfaces only check for shape, so it's hard to create\n * unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * @todo https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nconst hmac_js_1 = require(\"@noble/hashes/hmac.js\");\nconst utils_ts_1 = require(\"../utils.js\");\nconst curve_ts_1 = require(\"./curve.js\");\nconst modular_ts_1 = require(\"./modular.js\");\nfunction validateSigVerOpts(opts) {\n  if (opts.lowS !== undefined) (0, utils_ts_1.abool)('lowS', opts.lowS);\n  if (opts.prehash !== undefined) (0, utils_ts_1.abool)('prehash', opts.prehash);\n}\nclass DERErr extends Error {\n  constructor(m = '') {\n    super(m);\n  }\n}\nexports.DERErr = DERErr;\n/**\n * ASN.1 DER encoding utilities. ASN is very complex & fragile. Format:\n *\n *     [0x30 (SEQUENCE), bytelength, 0x02 (INTEGER), intLength, R, 0x02 (INTEGER), intLength, S]\n *\n * Docs: https://letsencrypt.org/docs/a-warm-welcome-to-asn1-and-der/, https://luca.ntop.org/Teaching/Appunti/asn1.html\n */\nexports.DER = {\n  // asn.1 DER encoding utils\n  Err: DERErr,\n  // Basic building block is TLV (Tag-Length-Value)\n  _tlv: {\n    encode: (tag, data) => {\n      const {\n        Err: E\n      } = exports.DER;\n      if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');\n      if (data.length & 1) throw new E('tlv.encode: unpadded data');\n      const dataLen = data.length / 2;\n      const len = (0, utils_ts_1.numberToHexUnpadded)(dataLen);\n      if (len.length / 2 & 128) throw new E('tlv.encode: long form length too big');\n      // length of length with long form flag\n      const lenLen = dataLen > 127 ? (0, utils_ts_1.numberToHexUnpadded)(len.length / 2 | 128) : '';\n      const t = (0, utils_ts_1.numberToHexUnpadded)(tag);\n      return t + lenLen + len + data;\n    },\n    // v - value, l - left bytes (unparsed)\n    decode(tag, data) {\n      const {\n        Err: E\n      } = exports.DER;\n      let pos = 0;\n      if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');\n      if (data.length < 2 || data[pos++] !== tag) throw new E('tlv.decode: wrong tlv');\n      const first = data[pos++];\n      const isLong = !!(first & 128); // First bit of first length byte is flag for short/long form\n      let length = 0;\n      if (!isLong) length = first;else {\n        // Long form: [longFlag(1bit), lengthLength(7bit), length (BE)]\n        const lenLen = first & 127;\n        if (!lenLen) throw new E('tlv.decode(long): indefinite length not supported');\n        if (lenLen > 4) throw new E('tlv.decode(long): byte length is too big'); // this will overflow u32 in js\n        const lengthBytes = data.subarray(pos, pos + lenLen);\n        if (lengthBytes.length !== lenLen) throw new E('tlv.decode: length bytes not complete');\n        if (lengthBytes[0] === 0) throw new E('tlv.decode(long): zero leftmost byte');\n        for (const b of lengthBytes) length = length << 8 | b;\n        pos += lenLen;\n        if (length < 128) throw new E('tlv.decode(long): not minimal encoding');\n      }\n      const v = data.subarray(pos, pos + length);\n      if (v.length !== length) throw new E('tlv.decode: wrong value length');\n      return {\n        v,\n        l: data.subarray(pos + length)\n      };\n    }\n  },\n  // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n  // since we always use positive integers here. It must always be empty:\n  // - add zero byte if exists\n  // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n  _int: {\n    encode(num) {\n      const {\n        Err: E\n      } = exports.DER;\n      if (num < _0n) throw new E('integer: negative integers are not allowed');\n      let hex = (0, utils_ts_1.numberToHexUnpadded)(num);\n      // Pad with zero byte if negative flag is present\n      if (Number.parseInt(hex[0], 16) & 0b1000) hex = '00' + hex;\n      if (hex.length & 1) throw new E('unexpected DER parsing assertion: unpadded hex');\n      return hex;\n    },\n    decode(data) {\n      const {\n        Err: E\n      } = exports.DER;\n      if (data[0] & 128) throw new E('invalid signature integer: negative');\n      if (data[0] === 0x00 && !(data[1] & 128)) throw new E('invalid signature integer: unnecessary leading zero');\n      return (0, utils_ts_1.bytesToNumberBE)(data);\n    }\n  },\n  toSig(hex) {\n    // parse DER signature\n    const {\n      Err: E,\n      _int: int,\n      _tlv: tlv\n    } = exports.DER;\n    const data = (0, utils_ts_1.ensureBytes)('signature', hex);\n    const {\n      v: seqBytes,\n      l: seqLeftBytes\n    } = tlv.decode(0x30, data);\n    if (seqLeftBytes.length) throw new E('invalid signature: left bytes after parsing');\n    const {\n      v: rBytes,\n      l: rLeftBytes\n    } = tlv.decode(0x02, seqBytes);\n    const {\n      v: sBytes,\n      l: sLeftBytes\n    } = tlv.decode(0x02, rLeftBytes);\n    if (sLeftBytes.length) throw new E('invalid signature: left bytes after parsing');\n    return {\n      r: int.decode(rBytes),\n      s: int.decode(sBytes)\n    };\n  },\n  hexFromSig(sig) {\n    const {\n      _tlv: tlv,\n      _int: int\n    } = exports.DER;\n    const rs = tlv.encode(0x02, int.encode(sig.r));\n    const ss = tlv.encode(0x02, int.encode(sig.s));\n    const seq = rs + ss;\n    return tlv.encode(0x30, seq);\n  }\n};\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0),\n  _1n = BigInt(1),\n  _2n = BigInt(2),\n  _3n = BigInt(3),\n  _4n = BigInt(4);\n// TODO: remove\nfunction _legacyHelperEquat(Fp, a, b) {\n  /**\n   * y² = x³ + ax + b: Short weierstrass curve formula. Takes x, returns y².\n   * @returns y²\n   */\n  function weierstrassEquation(x) {\n    const x2 = Fp.sqr(x); // x * x\n    const x3 = Fp.mul(x2, x); // x² * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x³ + a * x + b\n  }\n  return weierstrassEquation;\n}\nfunction _legacyHelperNormPriv(Fn, allowedPrivateKeyLengths, wrapPrivateKey) {\n  const {\n    BYTES: expected\n  } = Fn;\n  // Validates if priv key is valid and converts it to bigint.\n  function normPrivateKeyToScalar(key) {\n    let num;\n    if (typeof key === 'bigint') {\n      num = key;\n    } else {\n      let bytes = (0, utils_ts_1.ensureBytes)('private key', key);\n      if (allowedPrivateKeyLengths) {\n        if (!allowedPrivateKeyLengths.includes(bytes.length * 2)) throw new Error('invalid private key');\n        const padded = new Uint8Array(expected);\n        padded.set(bytes, padded.length - bytes.length);\n        bytes = padded;\n      }\n      try {\n        num = Fn.fromBytes(bytes);\n      } catch (error) {\n        throw new Error(`invalid private key: expected ui8a of size ${expected}, got ${typeof key}`);\n      }\n    }\n    if (wrapPrivateKey) num = Fn.create(num); // disabled by default, enabled for BLS\n    if (!Fn.isValidNot0(num)) throw new Error('invalid private key: out of range [1..N-1]');\n    return num;\n  }\n  return normPrivateKeyToScalar;\n}\nfunction weierstrassN(CURVE, curveOpts = {}) {\n  const {\n    Fp,\n    Fn\n  } = (0, curve_ts_1._createCurveFields)('weierstrass', CURVE, curveOpts);\n  const {\n    h: cofactor,\n    n: CURVE_ORDER\n  } = CURVE;\n  (0, utils_ts_1._validateObject)(curveOpts, {}, {\n    allowInfinityPoint: 'boolean',\n    clearCofactor: 'function',\n    isTorsionFree: 'function',\n    fromBytes: 'function',\n    toBytes: 'function',\n    endo: 'object',\n    wrapPrivateKey: 'boolean'\n  });\n  const {\n    endo\n  } = curveOpts;\n  if (endo) {\n    // validateObject(endo, { beta: 'bigint', splitScalar: 'function' });\n    if (!Fp.is0(CURVE.a) || typeof endo.beta !== 'bigint' || typeof endo.splitScalar !== 'function') {\n      throw new Error('invalid endo: expected \"beta\": bigint and \"splitScalar\": function');\n    }\n  }\n  function assertCompressionIsSupported() {\n    if (!Fp.isOdd) throw new Error('compression is not supported: Field does not have .isOdd()');\n  }\n  // Implements IEEE P1363 point encoding\n  function pointToBytes(_c, point, isCompressed) {\n    const {\n      x,\n      y\n    } = point.toAffine();\n    const bx = Fp.toBytes(x);\n    (0, utils_ts_1.abool)('isCompressed', isCompressed);\n    if (isCompressed) {\n      assertCompressionIsSupported();\n      const hasEvenY = !Fp.isOdd(y);\n      return (0, utils_ts_1.concatBytes)(pprefix(hasEvenY), bx);\n    } else {\n      return (0, utils_ts_1.concatBytes)(Uint8Array.of(0x04), bx, Fp.toBytes(y));\n    }\n  }\n  function pointFromBytes(bytes) {\n    (0, utils_ts_1.abytes)(bytes);\n    const L = Fp.BYTES;\n    const LC = L + 1; // length compressed, e.g. 33 for 32-byte field\n    const LU = 2 * L + 1; // length uncompressed, e.g. 65 for 32-byte field\n    const length = bytes.length;\n    const head = bytes[0];\n    const tail = bytes.subarray(1);\n    // No actual validation is done here: use .assertValidity()\n    if (length === LC && (head === 0x02 || head === 0x03)) {\n      const x = Fp.fromBytes(tail);\n      if (!Fp.isValid(x)) throw new Error('bad point: is not on curve, wrong x');\n      const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n      let y;\n      try {\n        y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n      } catch (sqrtError) {\n        const err = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n        throw new Error('bad point: is not on curve, sqrt error' + err);\n      }\n      assertCompressionIsSupported();\n      const isYOdd = Fp.isOdd(y); // (y & _1n) === _1n;\n      const isHeadOdd = (head & 1) === 1; // ECDSA-specific\n      if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n      return {\n        x,\n        y\n      };\n    } else if (length === LU && head === 0x04) {\n      // TODO: more checks\n      const x = Fp.fromBytes(tail.subarray(L * 0, L * 1));\n      const y = Fp.fromBytes(tail.subarray(L * 1, L * 2));\n      if (!isValidXY(x, y)) throw new Error('bad point: is not on curve');\n      return {\n        x,\n        y\n      };\n    } else {\n      throw new Error(`bad point: got length ${length}, expected compressed=${LC} or uncompressed=${LU}`);\n    }\n  }\n  const toBytes = curveOpts.toBytes || pointToBytes;\n  const fromBytes = curveOpts.fromBytes || pointFromBytes;\n  const weierstrassEquation = _legacyHelperEquat(Fp, CURVE.a, CURVE.b);\n  // TODO: move top-level\n  /** Checks whether equation holds for given x, y: y² == x³ + ax + b */\n  function isValidXY(x, y) {\n    const left = Fp.sqr(y); // y²\n    const right = weierstrassEquation(x); // x³ + ax + b\n    return Fp.eql(left, right);\n  }\n  // Validate whether the passed curve params are valid.\n  // Test 1: equation y² = x³ + ax + b should work for generator point.\n  if (!isValidXY(CURVE.Gx, CURVE.Gy)) throw new Error('bad curve params: generator point');\n  // Test 2: discriminant Δ part should be non-zero: 4a³ + 27b² != 0.\n  // Guarantees curve is genus-1, smooth (non-singular).\n  const _4a3 = Fp.mul(Fp.pow(CURVE.a, _3n), _4n);\n  const _27b2 = Fp.mul(Fp.sqr(CURVE.b), BigInt(27));\n  if (Fp.is0(Fp.add(_4a3, _27b2))) throw new Error('bad curve params: a or b');\n  /** Asserts coordinate is valid: 0 <= n < Fp.ORDER. */\n  function acoord(title, n, banZero = false) {\n    if (!Fp.isValid(n) || banZero && Fp.is0(n)) throw new Error(`bad point coordinate ${title}`);\n    return n;\n  }\n  function aprjpoint(other) {\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n  }\n  // Memoized toAffine / validity check. They are heavy. Points are immutable.\n  // Converts Projective point to affine (x, y) coordinates.\n  // Can accept precomputed Z^-1 - for example, from invertBatch.\n  // (X, Y, Z) ∋ (x=X/Z, y=Y/Z)\n  const toAffineMemo = (0, utils_ts_1.memoized)((p, iz) => {\n    const {\n      px: x,\n      py: y,\n      pz: z\n    } = p;\n    // Fast-path for normalized points\n    if (Fp.eql(z, Fp.ONE)) return {\n      x,\n      y\n    };\n    const is0 = p.is0();\n    // If invZ was 0, we return zero point. However we still want to execute\n    // all operations, so we replace invZ with a random number, 1.\n    if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\n    const ax = Fp.mul(x, iz);\n    const ay = Fp.mul(y, iz);\n    const zz = Fp.mul(z, iz);\n    if (is0) return {\n      x: Fp.ZERO,\n      y: Fp.ZERO\n    };\n    if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n    return {\n      x: ax,\n      y: ay\n    };\n  });\n  // NOTE: on exception this will crash 'cached' and no value will be set.\n  // Otherwise true will be return\n  const assertValidMemo = (0, utils_ts_1.memoized)(p => {\n    if (p.is0()) {\n      // (0, 1, 0) aka ZERO is invalid in most contexts.\n      // In BLS, ZERO can be serialized, so we allow it.\n      // (0, 0, 0) is invalid representation of ZERO.\n      if (curveOpts.allowInfinityPoint && !Fp.is0(p.py)) return;\n      throw new Error('bad point: ZERO');\n    }\n    // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n    const {\n      x,\n      y\n    } = p.toAffine();\n    if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not field elements');\n    if (!isValidXY(x, y)) throw new Error('bad point: equation left != right');\n    if (!p.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n    return true;\n  });\n  function finishEndo(endoBeta, k1p, k2p, k1neg, k2neg) {\n    k2p = new Point(Fp.mul(k2p.px, endoBeta), k2p.py, k2p.pz);\n    k1p = (0, curve_ts_1.negateCt)(k1neg, k1p);\n    k2p = (0, curve_ts_1.negateCt)(k2neg, k2p);\n    return k1p.add(k2p);\n  }\n  /**\n   * Projective Point works in 3d / projective (homogeneous) coordinates:(X, Y, Z) ∋ (x=X/Z, y=Y/Z).\n   * Default Point works in 2d / affine coordinates: (x, y).\n   * We're doing calculations in projective, because its operations don't require costly inversion.\n   */\n  class Point {\n    /** Does NOT validate if the point is valid. Use `.assertValidity()`. */\n    constructor(px, py, pz) {\n      this.px = acoord('x', px);\n      this.py = acoord('y', py, true);\n      this.pz = acoord('z', pz);\n      Object.freeze(this);\n    }\n    /** Does NOT validate if the point is valid. Use `.assertValidity()`. */\n    static fromAffine(p) {\n      const {\n        x,\n        y\n      } = p || {};\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n      if (p instanceof Point) throw new Error('projective point not allowed');\n      // (0, 0) would've produced (0, 0, 1) - instead, we need (0, 1, 0)\n      if (Fp.is0(x) && Fp.is0(y)) return Point.ZERO;\n      return new Point(x, y, Fp.ONE);\n    }\n    get x() {\n      return this.toAffine().x;\n    }\n    get y() {\n      return this.toAffine().y;\n    }\n    static normalizeZ(points) {\n      return (0, curve_ts_1.normalizeZ)(Point, 'pz', points);\n    }\n    static fromBytes(bytes) {\n      (0, utils_ts_1.abytes)(bytes);\n      return Point.fromHex(bytes);\n    }\n    /** Converts hash string or Uint8Array to Point. */\n    static fromHex(hex) {\n      const P = Point.fromAffine(fromBytes((0, utils_ts_1.ensureBytes)('pointHex', hex)));\n      P.assertValidity();\n      return P;\n    }\n    /** Multiplies generator point by privateKey. */\n    static fromPrivateKey(privateKey) {\n      const normPrivateKeyToScalar = _legacyHelperNormPriv(Fn, curveOpts.allowedPrivateKeyLengths, curveOpts.wrapPrivateKey);\n      return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n    }\n    /** Multiscalar Multiplication */\n    static msm(points, scalars) {\n      return (0, curve_ts_1.pippenger)(Point, Fn, points, scalars);\n    }\n    /**\n     *\n     * @param windowSize\n     * @param isLazy true will defer table computation until the first multiplication\n     * @returns\n     */\n    precompute(windowSize = 8, isLazy = true) {\n      wnaf.setWindowSize(this, windowSize);\n      if (!isLazy) this.multiply(_3n); // random number\n      return this;\n    }\n    /** \"Private method\", don't use it directly */\n    _setWindowSize(windowSize) {\n      this.precompute(windowSize);\n    }\n    // TODO: return `this`\n    /** A point on curve is valid if it conforms to equation. */\n    assertValidity() {\n      assertValidMemo(this);\n    }\n    hasEvenY() {\n      const {\n        y\n      } = this.toAffine();\n      if (!Fp.isOdd) throw new Error(\"Field doesn't support isOdd\");\n      return !Fp.isOdd(y);\n    }\n    /** Compare one point to another. */\n    equals(other) {\n      aprjpoint(other);\n      const {\n        px: X1,\n        py: Y1,\n        pz: Z1\n      } = this;\n      const {\n        px: X2,\n        py: Y2,\n        pz: Z2\n      } = other;\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n      return U1 && U2;\n    }\n    /** Flips point to one corresponding to (x, -y) in Affine coordinates. */\n    negate() {\n      return new Point(this.px, Fp.neg(this.py), this.pz);\n    }\n    // Renes-Costello-Batina exception-free doubling formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 3\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    double() {\n      const {\n        a,\n        b\n      } = CURVE;\n      const b3 = Fp.mul(b, _3n);\n      const {\n        px: X1,\n        py: Y1,\n        pz: Z1\n      } = this;\n      let X3 = Fp.ZERO,\n        Y3 = Fp.ZERO,\n        Z3 = Fp.ZERO; // prettier-ignore\n      let t0 = Fp.mul(X1, X1); // step 1\n      let t1 = Fp.mul(Y1, Y1);\n      let t2 = Fp.mul(Z1, Z1);\n      let t3 = Fp.mul(X1, Y1);\n      t3 = Fp.add(t3, t3); // step 5\n      Z3 = Fp.mul(X1, Z1);\n      Z3 = Fp.add(Z3, Z3);\n      X3 = Fp.mul(a, Z3);\n      Y3 = Fp.mul(b3, t2);\n      Y3 = Fp.add(X3, Y3); // step 10\n      X3 = Fp.sub(t1, Y3);\n      Y3 = Fp.add(t1, Y3);\n      Y3 = Fp.mul(X3, Y3);\n      X3 = Fp.mul(t3, X3);\n      Z3 = Fp.mul(b3, Z3); // step 15\n      t2 = Fp.mul(a, t2);\n      t3 = Fp.sub(t0, t2);\n      t3 = Fp.mul(a, t3);\n      t3 = Fp.add(t3, Z3);\n      Z3 = Fp.add(t0, t0); // step 20\n      t0 = Fp.add(Z3, t0);\n      t0 = Fp.add(t0, t2);\n      t0 = Fp.mul(t0, t3);\n      Y3 = Fp.add(Y3, t0);\n      t2 = Fp.mul(Y1, Z1); // step 25\n      t2 = Fp.add(t2, t2);\n      t0 = Fp.mul(t2, t3);\n      X3 = Fp.sub(X3, t0);\n      Z3 = Fp.mul(t2, t1);\n      Z3 = Fp.add(Z3, Z3); // step 30\n      Z3 = Fp.add(Z3, Z3);\n      return new Point(X3, Y3, Z3);\n    }\n    // Renes-Costello-Batina exception-free addition formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 1\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    add(other) {\n      aprjpoint(other);\n      const {\n        px: X1,\n        py: Y1,\n        pz: Z1\n      } = this;\n      const {\n        px: X2,\n        py: Y2,\n        pz: Z2\n      } = other;\n      let X3 = Fp.ZERO,\n        Y3 = Fp.ZERO,\n        Z3 = Fp.ZERO; // prettier-ignore\n      const a = CURVE.a;\n      const b3 = Fp.mul(CURVE.b, _3n);\n      let t0 = Fp.mul(X1, X2); // step 1\n      let t1 = Fp.mul(Y1, Y2);\n      let t2 = Fp.mul(Z1, Z2);\n      let t3 = Fp.add(X1, Y1);\n      let t4 = Fp.add(X2, Y2); // step 5\n      t3 = Fp.mul(t3, t4);\n      t4 = Fp.add(t0, t1);\n      t3 = Fp.sub(t3, t4);\n      t4 = Fp.add(X1, Z1);\n      let t5 = Fp.add(X2, Z2); // step 10\n      t4 = Fp.mul(t4, t5);\n      t5 = Fp.add(t0, t2);\n      t4 = Fp.sub(t4, t5);\n      t5 = Fp.add(Y1, Z1);\n      X3 = Fp.add(Y2, Z2); // step 15\n      t5 = Fp.mul(t5, X3);\n      X3 = Fp.add(t1, t2);\n      t5 = Fp.sub(t5, X3);\n      Z3 = Fp.mul(a, t4);\n      X3 = Fp.mul(b3, t2); // step 20\n      Z3 = Fp.add(X3, Z3);\n      X3 = Fp.sub(t1, Z3);\n      Z3 = Fp.add(t1, Z3);\n      Y3 = Fp.mul(X3, Z3);\n      t1 = Fp.add(t0, t0); // step 25\n      t1 = Fp.add(t1, t0);\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.mul(b3, t4);\n      t1 = Fp.add(t1, t2);\n      t2 = Fp.sub(t0, t2); // step 30\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.add(t4, t2);\n      t0 = Fp.mul(t1, t4);\n      Y3 = Fp.add(Y3, t0);\n      t0 = Fp.mul(t5, t4); // step 35\n      X3 = Fp.mul(t3, X3);\n      X3 = Fp.sub(X3, t0);\n      t0 = Fp.mul(t3, t1);\n      Z3 = Fp.mul(t5, Z3);\n      Z3 = Fp.add(Z3, t0); // step 40\n      return new Point(X3, Y3, Z3);\n    }\n    subtract(other) {\n      return this.add(other.negate());\n    }\n    is0() {\n      return this.equals(Point.ZERO);\n    }\n    /**\n     * Constant time multiplication.\n     * Uses wNAF method. Windowed method may be 10% faster,\n     * but takes 2x longer to generate and consumes 2x memory.\n     * Uses precomputes when available.\n     * Uses endomorphism for Koblitz curves.\n     * @param scalar by which the point would be multiplied\n     * @returns New point\n     */\n    multiply(scalar) {\n      const {\n        endo\n      } = curveOpts;\n      if (!Fn.isValidNot0(scalar)) throw new Error('invalid scalar: out of range'); // 0 is invalid\n      let point, fake; // Fake point is used to const-time mult\n      const mul = n => wnaf.wNAFCached(this, n, Point.normalizeZ);\n      /** See docs for {@link EndomorphismOpts} */\n      if (endo) {\n        const {\n          k1neg,\n          k1,\n          k2neg,\n          k2\n        } = endo.splitScalar(scalar);\n        const {\n          p: k1p,\n          f: k1f\n        } = mul(k1);\n        const {\n          p: k2p,\n          f: k2f\n        } = mul(k2);\n        fake = k1f.add(k2f);\n        point = finishEndo(endo.beta, k1p, k2p, k1neg, k2neg);\n      } else {\n        const {\n          p,\n          f\n        } = mul(scalar);\n        point = p;\n        fake = f;\n      }\n      // Normalize `z` for both points, but return only real one\n      return Point.normalizeZ([point, fake])[0];\n    }\n    /**\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\n     * It's faster, but should only be used when you don't care about\n     * an exposed private key e.g. sig verification, which works over *public* keys.\n     */\n    multiplyUnsafe(sc) {\n      const {\n        endo\n      } = curveOpts;\n      const p = this;\n      if (!Fn.isValid(sc)) throw new Error('invalid scalar: out of range'); // 0 is valid\n      if (sc === _0n || p.is0()) return Point.ZERO;\n      if (sc === _1n) return p; // fast-path\n      if (wnaf.hasPrecomputes(this)) return this.multiply(sc);\n      if (endo) {\n        const {\n          k1neg,\n          k1,\n          k2neg,\n          k2\n        } = endo.splitScalar(sc);\n        // `wNAFCachedUnsafe` is 30% slower\n        const {\n          p1,\n          p2\n        } = (0, curve_ts_1.mulEndoUnsafe)(Point, p, k1, k2);\n        return finishEndo(endo.beta, p1, p2, k1neg, k2neg);\n      } else {\n        return wnaf.wNAFCachedUnsafe(p, sc);\n      }\n    }\n    multiplyAndAddUnsafe(Q, a, b) {\n      const sum = this.multiplyUnsafe(a).add(Q.multiplyUnsafe(b));\n      return sum.is0() ? undefined : sum;\n    }\n    /**\n     * Converts Projective point to affine (x, y) coordinates.\n     * @param invertedZ Z^-1 (inverted zero) - optional, precomputation is useful for invertBatch\n     */\n    toAffine(invertedZ) {\n      return toAffineMemo(this, invertedZ);\n    }\n    /**\n     * Checks whether Point is free of torsion elements (is in prime subgroup).\n     * Always torsion-free for cofactor=1 curves.\n     */\n    isTorsionFree() {\n      const {\n        isTorsionFree\n      } = curveOpts;\n      if (cofactor === _1n) return true;\n      if (isTorsionFree) return isTorsionFree(Point, this);\n      return wnaf.wNAFCachedUnsafe(this, CURVE_ORDER).is0();\n    }\n    clearCofactor() {\n      const {\n        clearCofactor\n      } = curveOpts;\n      if (cofactor === _1n) return this; // Fast-path\n      if (clearCofactor) return clearCofactor(Point, this);\n      return this.multiplyUnsafe(cofactor);\n    }\n    toBytes(isCompressed = true) {\n      (0, utils_ts_1.abool)('isCompressed', isCompressed);\n      this.assertValidity();\n      return toBytes(Point, this, isCompressed);\n    }\n    /** @deprecated use `toBytes` */\n    toRawBytes(isCompressed = true) {\n      return this.toBytes(isCompressed);\n    }\n    toHex(isCompressed = true) {\n      return (0, utils_ts_1.bytesToHex)(this.toBytes(isCompressed));\n    }\n    toString() {\n      return `<Point ${this.is0() ? 'ZERO' : this.toHex()}>`;\n    }\n  }\n  // base / generator point\n  Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n  // zero / infinity / identity point\n  Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO); // 0, 1, 0\n  // fields\n  Point.Fp = Fp;\n  Point.Fn = Fn;\n  const bits = Fn.BITS;\n  const wnaf = (0, curve_ts_1.wNAF)(Point, curveOpts.endo ? Math.ceil(bits / 2) : bits);\n  return Point;\n}\n// _legacyWeierstrass\n/** @deprecated use `weierstrassN` */\nfunction weierstrassPoints(c) {\n  const {\n    CURVE,\n    curveOpts\n  } = _weierstrass_legacy_opts_to_new(c);\n  const Point = weierstrassN(CURVE, curveOpts);\n  return _weierstrass_new_output_to_legacy(c, Point);\n}\n// Points start with byte 0x02 when y is even; otherwise 0x03\nfunction pprefix(hasEvenY) {\n  return Uint8Array.of(hasEvenY ? 0x02 : 0x03);\n}\nfunction ecdsa(Point, ecdsaOpts, curveOpts = {}) {\n  (0, utils_ts_1._validateObject)(ecdsaOpts, {\n    hash: 'function'\n  }, {\n    hmac: 'function',\n    lowS: 'boolean',\n    randomBytes: 'function',\n    bits2int: 'function',\n    bits2int_modN: 'function'\n  });\n  const randomBytes_ = ecdsaOpts.randomBytes || utils_ts_1.randomBytes;\n  const hmac_ = ecdsaOpts.hmac || ((key, ...msgs) => (0, hmac_js_1.hmac)(ecdsaOpts.hash, key, (0, utils_ts_1.concatBytes)(...msgs)));\n  const {\n    Fp,\n    Fn\n  } = Point;\n  const {\n    ORDER: CURVE_ORDER,\n    BITS: fnBits\n  } = Fn;\n  function isBiggerThanHalfOrder(number) {\n    const HALF = CURVE_ORDER >> _1n;\n    return number > HALF;\n  }\n  function normalizeS(s) {\n    return isBiggerThanHalfOrder(s) ? Fn.neg(s) : s;\n  }\n  function aValidRS(title, num) {\n    if (!Fn.isValidNot0(num)) throw new Error(`invalid signature ${title}: out of range 1..CURVE.n`);\n  }\n  /**\n   * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n   */\n  class Signature {\n    constructor(r, s, recovery) {\n      aValidRS('r', r); // r in [1..N-1]\n      aValidRS('s', s); // s in [1..N-1]\n      this.r = r;\n      this.s = s;\n      if (recovery != null) this.recovery = recovery;\n      Object.freeze(this);\n    }\n    // pair (bytes of r, bytes of s)\n    static fromCompact(hex) {\n      const L = Fn.BYTES;\n      const b = (0, utils_ts_1.ensureBytes)('compactSignature', hex, L * 2);\n      return new Signature(Fn.fromBytes(b.subarray(0, L)), Fn.fromBytes(b.subarray(L, L * 2)));\n    }\n    // DER encoded ECDSA signature\n    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n    static fromDER(hex) {\n      const {\n        r,\n        s\n      } = exports.DER.toSig((0, utils_ts_1.ensureBytes)('DER', hex));\n      return new Signature(r, s);\n    }\n    /**\n     * @todo remove\n     * @deprecated\n     */\n    assertValidity() {}\n    addRecoveryBit(recovery) {\n      return new Signature(this.r, this.s, recovery);\n    }\n    // ProjPointType<bigint>\n    recoverPublicKey(msgHash) {\n      const FIELD_ORDER = Fp.ORDER;\n      const {\n        r,\n        s,\n        recovery: rec\n      } = this;\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n      // ECDSA recovery is hard for cofactor > 1 curves.\n      // In sign, `r = q.x mod n`, and here we recover q.x from r.\n      // While recovering q.x >= n, we need to add r+n for cofactor=1 curves.\n      // However, for cofactor>1, r+n may not get q.x:\n      // r+n*i would need to be done instead where i is unknown.\n      // To easily get i, we either need to:\n      // a. increase amount of valid recid values (4, 5...); OR\n      // b. prohibit non-prime-order signatures (recid > 1).\n      const hasCofactor = CURVE_ORDER * _2n < FIELD_ORDER;\n      if (hasCofactor && rec > 1) throw new Error('recovery id is ambiguous for h>1 curve');\n      const radj = rec === 2 || rec === 3 ? r + CURVE_ORDER : r;\n      if (!Fp.isValid(radj)) throw new Error('recovery id 2 or 3 invalid');\n      const x = Fp.toBytes(radj);\n      const R = Point.fromHex((0, utils_ts_1.concatBytes)(pprefix((rec & 1) === 0), x));\n      const ir = Fn.inv(radj); // r^-1\n      const h = bits2int_modN((0, utils_ts_1.ensureBytes)('msgHash', msgHash)); // Truncate hash\n      const u1 = Fn.create(-h * ir); // -hr^-1\n      const u2 = Fn.create(s * ir); // sr^-1\n      // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1). unsafe is fine: there is no private data.\n      const Q = Point.BASE.multiplyUnsafe(u1).add(R.multiplyUnsafe(u2));\n      if (Q.is0()) throw new Error('point at infinify');\n      Q.assertValidity();\n      return Q;\n    }\n    // Signatures should be low-s, to prevent malleability.\n    hasHighS() {\n      return isBiggerThanHalfOrder(this.s);\n    }\n    normalizeS() {\n      return this.hasHighS() ? new Signature(this.r, Fn.neg(this.s), this.recovery) : this;\n    }\n    toBytes(format) {\n      if (format === 'compact') return (0, utils_ts_1.concatBytes)(Fn.toBytes(this.r), Fn.toBytes(this.s));\n      if (format === 'der') return (0, utils_ts_1.hexToBytes)(exports.DER.hexFromSig(this));\n      throw new Error('invalid format');\n    }\n    // DER-encoded\n    toDERRawBytes() {\n      return this.toBytes('der');\n    }\n    toDERHex() {\n      return (0, utils_ts_1.bytesToHex)(this.toBytes('der'));\n    }\n    // padded bytes of r, then padded bytes of s\n    toCompactRawBytes() {\n      return this.toBytes('compact');\n    }\n    toCompactHex() {\n      return (0, utils_ts_1.bytesToHex)(this.toBytes('compact'));\n    }\n  }\n  const normPrivateKeyToScalar = _legacyHelperNormPriv(Fn, curveOpts.allowedPrivateKeyLengths, curveOpts.wrapPrivateKey);\n  const utils = {\n    isValidPrivateKey(privateKey) {\n      try {\n        normPrivateKeyToScalar(privateKey);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    },\n    normPrivateKeyToScalar: normPrivateKeyToScalar,\n    /**\n     * Produces cryptographically secure private key from random of size\n     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n     */\n    randomPrivateKey: () => {\n      const n = CURVE_ORDER;\n      return (0, modular_ts_1.mapHashToField)(randomBytes_((0, modular_ts_1.getMinHashLength)(n)), n);\n    },\n    precompute(windowSize = 8, point = Point.BASE) {\n      return point.precompute(windowSize, false);\n    }\n  };\n  /**\n   * Computes public key for a private key. Checks for validity of the private key.\n   * @param privateKey private key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\n   */\n  function getPublicKey(privateKey, isCompressed = true) {\n    return Point.fromPrivateKey(privateKey).toBytes(isCompressed);\n  }\n  /**\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n   */\n  function isProbPub(item) {\n    if (typeof item === 'bigint') return false;\n    if (item instanceof Point) return true;\n    const arr = (0, utils_ts_1.ensureBytes)('key', item);\n    const length = arr.length;\n    const L = Fp.BYTES;\n    const LC = L + 1; // e.g. 33 for 32\n    const LU = 2 * L + 1; // e.g. 65 for 32\n    if (curveOpts.allowedPrivateKeyLengths || Fn.BYTES === LC) {\n      return undefined;\n    } else {\n      return length === LC || length === LU;\n    }\n  }\n  /**\n   * ECDH (Elliptic Curve Diffie Hellman).\n   * Computes shared public key from private key and public key.\n   * Checks: 1) private key validity 2) shared key is on-curve.\n   * Does NOT hash the result.\n   * @param privateA private key\n   * @param publicB different public key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns shared public key\n   */\n  function getSharedSecret(privateA, publicB, isCompressed = true) {\n    if (isProbPub(privateA) === true) throw new Error('first arg must be private key');\n    if (isProbPub(publicB) === false) throw new Error('second arg must be public key');\n    const b = Point.fromHex(publicB); // check for being on-curve\n    return b.multiply(normPrivateKeyToScalar(privateA)).toBytes(isCompressed);\n  }\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n  const bits2int = ecdsaOpts.bits2int || function (bytes) {\n    // Our custom check \"just in case\", for protection against DoS\n    if (bytes.length > 8192) throw new Error('input is too large');\n    // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n    // for some cases, since bytes.length * 8 is not actual bitLength.\n    const num = (0, utils_ts_1.bytesToNumberBE)(bytes); // check for == u8 done here\n    const delta = bytes.length * 8 - fnBits; // truncate to nBitLength leftmost bits\n    return delta > 0 ? num >> BigInt(delta) : num;\n  };\n  const bits2int_modN = ecdsaOpts.bits2int_modN || function (bytes) {\n    return Fn.create(bits2int(bytes)); // can't use bytesToNumberBE here\n  };\n  // NOTE: pads output with zero as per spec\n  const ORDER_MASK = (0, utils_ts_1.bitMask)(fnBits);\n  /**\n   * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n   */\n  function int2octets(num) {\n    // IMPORTANT: the check ensures working for case `Fn.BYTES != Fn.BITS * 8`\n    (0, utils_ts_1.aInRange)('num < 2^' + fnBits, num, _0n, ORDER_MASK);\n    return Fn.toBytes(num);\n  }\n  // Steps A, D of RFC6979 3.2\n  // Creates RFC6979 seed; converts msg/privKey to numbers.\n  // Used only in sign, not in verify.\n  // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order,\n  // this will be invalid at least for P521. Also it can be bigger for P224 + SHA256\n  function prepSig(msgHash, privateKey, opts = defaultSigOpts) {\n    if (['recovered', 'canonical'].some(k => k in opts)) throw new Error('sign() legacy options not supported');\n    const {\n      hash\n    } = ecdsaOpts;\n    let {\n      lowS,\n      prehash,\n      extraEntropy: ent\n    } = opts; // generates low-s sigs by default\n    if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n    msgHash = (0, utils_ts_1.ensureBytes)('msgHash', msgHash);\n    validateSigVerOpts(opts);\n    if (prehash) msgHash = (0, utils_ts_1.ensureBytes)('prehashed msgHash', hash(msgHash));\n    // We can't later call bits2octets, since nested bits2int is broken for curves\n    // with fnBits % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n    const h1int = bits2int_modN(msgHash);\n    const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n    const seedArgs = [int2octets(d), int2octets(h1int)];\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\n    if (ent != null && ent !== false) {\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n      const e = ent === true ? randomBytes_(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n      seedArgs.push((0, utils_ts_1.ensureBytes)('extraEntropy', e)); // check for being bytes\n    }\n    const seed = (0, utils_ts_1.concatBytes)(...seedArgs); // Step D of RFC6979 3.2\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n    // Converts signature params into point w r/s, checks result for validity.\n    // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n    // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n    // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n    function k2sig(kBytes) {\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n      // Important: all mod() calls here must be done over N\n      const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n      if (!Fn.isValidNot0(k)) return; // Valid scalars (including k) must be in 1..N-1\n      const ik = Fn.inv(k); // k^-1 mod n\n      const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n      const r = Fn.create(q.x); // r = q.x mod n\n      if (r === _0n) return;\n      const s = Fn.create(ik * Fn.create(m + r * d)); // Not using blinding here, see comment above\n      if (s === _0n) return;\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n      let normS = s;\n      if (lowS && isBiggerThanHalfOrder(s)) {\n        normS = normalizeS(s); // if lowS was passed, ensure s is always\n        recovery ^= 1; // // in the bottom half of N\n      }\n      return new Signature(r, normS, recovery); // use normS, not s\n    }\n    return {\n      seed,\n      k2sig\n    };\n  }\n  const defaultSigOpts = {\n    lowS: ecdsaOpts.lowS,\n    prehash: false\n  };\n  const defaultVerOpts = {\n    lowS: ecdsaOpts.lowS,\n    prehash: false\n  };\n  /**\n   * Signs message hash with a private key.\n   * ```\n   * sign(m, d, k) where\n   *   (x, y) = G × k\n   *   r = x mod n\n   *   s = (m + dr)/k mod n\n   * ```\n   * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n   * @param privKey private key\n   * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n   * @returns signature with recovery param\n   */\n  function sign(msgHash, privKey, opts = defaultSigOpts) {\n    const {\n      seed,\n      k2sig\n    } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n    const drbg = (0, utils_ts_1.createHmacDrbg)(ecdsaOpts.hash.outputLen, Fn.BYTES, hmac_);\n    return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n  }\n  // Enable precomputes. Slows down first publicKey computation by 20ms.\n  Point.BASE.precompute(8);\n  /**\n   * Verifies a signature against message hash and public key.\n   * Rejects lowS signatures by default: to override,\n   * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n   *\n   * ```\n   * verify(r, s, h, P) where\n   *   U1 = hs^-1 mod n\n   *   U2 = rs^-1 mod n\n   *   R = U1⋅G - U2⋅P\n   *   mod(R.x, n) == r\n   * ```\n   */\n  function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {\n    const sg = signature;\n    msgHash = (0, utils_ts_1.ensureBytes)('msgHash', msgHash);\n    publicKey = (0, utils_ts_1.ensureBytes)('publicKey', publicKey);\n    // Verify opts\n    validateSigVerOpts(opts);\n    const {\n      lowS,\n      prehash,\n      format\n    } = opts;\n    // TODO: remove\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n    if (format !== undefined && !['compact', 'der', 'js'].includes(format)) throw new Error('format must be \"compact\", \"der\" or \"js\"');\n    const isHex = typeof sg === 'string' || (0, utils_ts_1.isBytes)(sg);\n    const isObj = !isHex && !format && typeof sg === 'object' && sg !== null && typeof sg.r === 'bigint' && typeof sg.s === 'bigint';\n    if (!isHex && !isObj) throw new Error('invalid signature, expected Uint8Array, hex string or Signature instance');\n    let _sig = undefined;\n    let P;\n    // deduce signature format\n    try {\n      // if (format === 'js') {\n      //   if (sg != null && !isBytes(sg)) _sig = new Signature(sg.r, sg.s);\n      // } else if (format === 'compact') {\n      //   _sig = Signature.fromCompact(sg);\n      // } else if (format === 'der') {\n      //   _sig = Signature.fromDER(sg);\n      // } else {\n      //   throw new Error('invalid format');\n      // }\n      if (isObj) {\n        if (format === undefined || format === 'js') {\n          _sig = new Signature(sg.r, sg.s);\n        } else {\n          throw new Error('invalid format');\n        }\n      }\n      if (isHex) {\n        // TODO: remove this malleable check\n        // Signature can be represented in 2 ways: compact (2*Fn.BYTES) & DER (variable-length).\n        // Since DER can also be 2*Fn.BYTES bytes, we check for it first.\n        try {\n          if (format !== 'compact') _sig = Signature.fromDER(sg);\n        } catch (derError) {\n          if (!(derError instanceof exports.DER.Err)) throw derError;\n        }\n        if (!_sig && format !== 'der') _sig = Signature.fromCompact(sg);\n      }\n      P = Point.fromHex(publicKey);\n    } catch (error) {\n      return false;\n    }\n    if (!_sig) return false;\n    if (lowS && _sig.hasHighS()) return false;\n    // todo: optional.hash => hash\n    if (prehash) msgHash = ecdsaOpts.hash(msgHash);\n    const {\n      r,\n      s\n    } = _sig;\n    const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n    const is = Fn.inv(s); // s^-1\n    const u1 = Fn.create(h * is); // u1 = hs^-1 mod n\n    const u2 = Fn.create(r * is); // u2 = rs^-1 mod n\n    const R = Point.BASE.multiplyUnsafe(u1).add(P.multiplyUnsafe(u2));\n    if (R.is0()) return false;\n    const v = Fn.create(R.x); // v = r.x mod n\n    return v === r;\n  }\n  // TODO: clarify API for cloning .clone({hash: sha512}) ? .createWith({hash: sha512})?\n  // const clone = (hash: CHash): ECDSA => ecdsa(Point, { ...ecdsaOpts, ...getHash(hash) }, curveOpts);\n  return Object.freeze({\n    getPublicKey,\n    getSharedSecret,\n    sign,\n    verify,\n    utils,\n    Point,\n    Signature\n  });\n}\nfunction _weierstrass_legacy_opts_to_new(c) {\n  const CURVE = {\n    a: c.a,\n    b: c.b,\n    p: c.Fp.ORDER,\n    n: c.n,\n    h: c.h,\n    Gx: c.Gx,\n    Gy: c.Gy\n  };\n  const Fp = c.Fp;\n  const Fn = (0, modular_ts_1.Field)(CURVE.n, c.nBitLength);\n  const curveOpts = {\n    Fp,\n    Fn,\n    allowedPrivateKeyLengths: c.allowedPrivateKeyLengths,\n    allowInfinityPoint: c.allowInfinityPoint,\n    endo: c.endo,\n    wrapPrivateKey: c.wrapPrivateKey,\n    isTorsionFree: c.isTorsionFree,\n    clearCofactor: c.clearCofactor,\n    fromBytes: c.fromBytes,\n    toBytes: c.toBytes\n  };\n  return {\n    CURVE,\n    curveOpts\n  };\n}\nfunction _ecdsa_legacy_opts_to_new(c) {\n  const {\n    CURVE,\n    curveOpts\n  } = _weierstrass_legacy_opts_to_new(c);\n  const ecdsaOpts = {\n    hash: c.hash,\n    hmac: c.hmac,\n    randomBytes: c.randomBytes,\n    lowS: c.lowS,\n    bits2int: c.bits2int,\n    bits2int_modN: c.bits2int_modN\n  };\n  return {\n    CURVE,\n    curveOpts,\n    ecdsaOpts\n  };\n}\nfunction _weierstrass_new_output_to_legacy(c, Point) {\n  const {\n    Fp,\n    Fn\n  } = Point;\n  // TODO: remove\n  function isWithinCurveOrder(num) {\n    return (0, utils_ts_1.inRange)(num, _1n, Fn.ORDER);\n  }\n  const weierstrassEquation = _legacyHelperEquat(Fp, c.a, c.b);\n  const normPrivateKeyToScalar = _legacyHelperNormPriv(Fn, c.allowedPrivateKeyLengths, c.wrapPrivateKey);\n  return Object.assign({}, {\n    CURVE: c,\n    Point: Point,\n    ProjectivePoint: Point,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder\n  });\n}\nfunction _ecdsa_new_output_to_legacy(c, ecdsa) {\n  return Object.assign({}, ecdsa, {\n    ProjectivePoint: ecdsa.Point,\n    CURVE: c\n  });\n}\n// _ecdsa_legacy\nfunction weierstrass(c) {\n  const {\n    CURVE,\n    curveOpts,\n    ecdsaOpts\n  } = _ecdsa_legacy_opts_to_new(c);\n  const Point = weierstrassN(CURVE, curveOpts);\n  const signs = ecdsa(Point, ecdsaOpts, curveOpts);\n  return _ecdsa_new_output_to_legacy(c, signs);\n}\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nfunction SWUFpSqrtRatio(Fp, Z) {\n  // Generic implementation\n  const q = Fp.ORDER;\n  let l = _0n;\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n  // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n  // 2n ** c1 == 2n << (c1-1)\n  const _2n_pow_c1_1 = _2n << c1 - _1n - _1n;\n  const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n  const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n  const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n  const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n  let sqrtRatio = (u, v) => {\n    let tv1 = c6; // 1. tv1 = c6\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n    // 17. for i in (c1, c1 - 1, ..., 2):\n    for (let i = c1; i > _1n; i--) {\n      let tv5 = i - _2n; // 18.    tv5 = i - 2\n      tv5 = _2n << tv5 - _1n; // 19.    tv5 = 2^tv5\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n    }\n    return {\n      isValid: isQR,\n      value: tv3\n    };\n  };\n  if (Fp.ORDER % _4n === _3n) {\n    // sqrt_ratio_3mod4(u, v)\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n    sqrtRatio = (u, v) => {\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n      return {\n        isValid: isQR,\n        value: y\n      }; // 11. return (isQR, y) isQR ? y : y*c2\n    };\n  }\n  // No curves uses that\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n  return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nfunction mapToCurveSimpleSWU(Fp, opts) {\n  (0, modular_ts_1.validateField)(Fp);\n  const {\n    A,\n    B,\n    Z\n  } = opts;\n  if (!Fp.isValid(A) || !Fp.isValid(B) || !Fp.isValid(Z)) throw new Error('mapToCurveSimpleSWU: invalid opts');\n  const sqrtRatio = SWUFpSqrtRatio(Fp, Z);\n  if (!Fp.isOdd) throw new Error('Field does not have .isOdd()');\n  // Input: u, an element of F.\n  // Output: (x, y), a point on E.\n  return u => {\n    // prettier-ignore\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, Z); // 2.  tv1 = Z * tv1\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n    tv3 = Fp.mul(tv3, B); // 6.  tv3 = B * tv3\n    tv4 = Fp.cmov(Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n    tv4 = Fp.mul(tv4, A); // 8.  tv4 = A * tv4\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n    tv5 = Fp.mul(tv6, A); // 11. tv5 = A * tv6\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n    tv5 = Fp.mul(tv6, B); // 15. tv5 = B * tv6\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n    const {\n      isValid,\n      value\n    } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n    y = Fp.mul(y, value); // 20.   y = y * y1\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n    const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n    const tv4_inv = (0, modular_ts_1.FpInvertBatch)(Fp, [tv4], true)[0];\n    x = Fp.mul(x, tv4_inv); // 25.   x = x / tv4\n    return {\n      x,\n      y\n    };\n  };\n}","map":{"version":3,"names":["exports","_legacyHelperEquat","_legacyHelperNormPriv","weierstrassN","weierstrassPoints","ecdsa","weierstrass","SWUFpSqrtRatio","mapToCurveSimpleSWU","hmac_js_1","require","utils_ts_1","curve_ts_1","modular_ts_1","validateSigVerOpts","opts","lowS","undefined","abool","prehash","DERErr","Error","constructor","m","DER","Err","_tlv","encode","tag","data","E","length","dataLen","len","numberToHexUnpadded","lenLen","t","decode","pos","first","isLong","lengthBytes","subarray","b","v","l","_int","num","_0n","hex","Number","parseInt","bytesToNumberBE","toSig","int","tlv","ensureBytes","seqBytes","seqLeftBytes","rBytes","rLeftBytes","sBytes","sLeftBytes","r","s","hexFromSig","sig","rs","ss","seq","BigInt","_1n","_2n","_3n","_4n","Fp","a","weierstrassEquation","x","x2","sqr","x3","mul","add","Fn","allowedPrivateKeyLengths","wrapPrivateKey","BYTES","expected","normPrivateKeyToScalar","key","bytes","includes","padded","Uint8Array","set","fromBytes","error","create","isValidNot0","CURVE","curveOpts","_createCurveFields","h","cofactor","n","CURVE_ORDER","_validateObject","allowInfinityPoint","clearCofactor","isTorsionFree","toBytes","endo","is0","beta","splitScalar","assertCompressionIsSupported","isOdd","pointToBytes","_c","point","isCompressed","y","toAffine","bx","hasEvenY","concatBytes","pprefix","of","pointFromBytes","abytes","L","LC","LU","head","tail","isValid","y2","sqrt","sqrtError","err","message","isYOdd","isHeadOdd","neg","isValidXY","left","right","eql","Gx","Gy","_4a3","pow","_27b2","acoord","title","banZero","aprjpoint","other","Point","toAffineMemo","memoized","p","iz","px","py","pz","z","ONE","inv","ax","ay","zz","ZERO","assertValidMemo","finishEndo","endoBeta","k1p","k2p","k1neg","k2neg","negateCt","Object","freeze","fromAffine","normalizeZ","points","fromHex","P","assertValidity","fromPrivateKey","privateKey","BASE","multiply","msm","scalars","pippenger","precompute","windowSize","isLazy","wnaf","setWindowSize","_setWindowSize","equals","X1","Y1","Z1","X2","Y2","Z2","U1","U2","negate","double","b3","X3","Y3","Z3","t0","t1","t2","t3","sub","t4","t5","subtract","scalar","fake","wNAFCached","k1","k2","f","k1f","k2f","multiplyUnsafe","sc","hasPrecomputes","p1","p2","mulEndoUnsafe","wNAFCachedUnsafe","multiplyAndAddUnsafe","Q","sum","invertedZ","toRawBytes","toHex","bytesToHex","toString","bits","BITS","wNAF","Math","ceil","c","_weierstrass_legacy_opts_to_new","_weierstrass_new_output_to_legacy","ecdsaOpts","hash","hmac","randomBytes","bits2int","bits2int_modN","randomBytes_","hmac_","msgs","ORDER","fnBits","isBiggerThanHalfOrder","number","HALF","normalizeS","aValidRS","Signature","recovery","fromCompact","fromDER","addRecoveryBit","recoverPublicKey","msgHash","FIELD_ORDER","rec","hasCofactor","radj","R","ir","u1","u2","hasHighS","format","hexToBytes","toDERRawBytes","toDERHex","toCompactRawBytes","toCompactHex","utils","isValidPrivateKey","randomPrivateKey","mapHashToField","getMinHashLength","getPublicKey","isProbPub","item","arr","getSharedSecret","privateA","publicB","delta","ORDER_MASK","bitMask","int2octets","aInRange","prepSig","defaultSigOpts","some","k","extraEntropy","ent","h1int","d","seedArgs","e","push","seed","k2sig","kBytes","ik","q","normS","defaultVerOpts","sign","privKey","drbg","createHmacDrbg","outputLen","verify","signature","publicKey","sg","isHex","isBytes","isObj","_sig","derError","is","Field","nBitLength","_ecdsa_legacy_opts_to_new","isWithinCurveOrder","inRange","assign","ProjectivePoint","_ecdsa_new_output_to_legacy","signs","Z","o","c1","_2n_pow_c1_1","_2n_pow_c1","c2","c3","c4","c5","c6","c7","sqrtRatio","u","tv1","tv2","tv3","tv5","tv4","isQR","cmov","i","tvv5","e1","value","y1","validateField","A","B","tv6","tv4_inv","FpInvertBatch"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/viem/node_modules/@noble/curves/src/abstract/weierstrass.ts"],"sourcesContent":["/**\n * Short Weierstrass curve methods. The formula is: y² = x³ + ax + b.\n *\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance\n * of nominative types in TypeScript and interfaces only check for shape, so it's hard to create\n * unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * @todo https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac.js';\nimport {\n  _validateObject,\n  abool,\n  abytes,\n  aInRange,\n  bitMask,\n  bytesToHex,\n  bytesToNumberBE,\n  concatBytes,\n  createHmacDrbg,\n  ensureBytes,\n  hexToBytes,\n  inRange,\n  isBytes,\n  memoized,\n  numberToHexUnpadded,\n  randomBytes,\n  type CHash,\n  type Hex,\n  type PrivKey,\n} from '../utils.ts';\nimport {\n  _createCurveFields,\n  mulEndoUnsafe,\n  negateCt,\n  normalizeZ,\n  pippenger,\n  wNAF,\n  type AffinePoint,\n  type BasicCurve,\n  type Group,\n  type GroupConstructor,\n} from './curve.ts';\nimport {\n  Field,\n  FpInvertBatch,\n  getMinHashLength,\n  mapHashToField,\n  validateField,\n  type IField,\n  type NLength,\n} from './modular.ts';\n\nexport type { AffinePoint };\nexport type HmacFnSync = (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;\n/**\n * When Weierstrass curve has `a=0`, it becomes Koblitz curve.\n * Koblitz curves allow using **efficiently-computable GLV endomorphism ψ**.\n * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n *\n * Endomorphism consists of beta, lambda and splitScalar:\n *\n * 1. GLV endomorphism ψ transforms a point: `P = (x, y) ↦ ψ(P) = (β·x mod p, y)`\n * 2. GLV scalar decomposition transforms a scalar: `k ≡ k₁ + k₂·λ (mod n)`\n * 3. Then these are combined: `k·P = k₁·P + k₂·ψ(P)`\n * 4. Two 128-bit point-by-scalar multiplications + one point addition is faster than\n *    one 256-bit multiplication.\n *\n * where\n * * beta: β ∈ Fₚ with β³ = 1, β ≠ 1\n * * lambda: λ ∈ Fₙ with λ³ = 1, λ ≠ 1\n * * splitScalar decomposes k ↦ k₁, k₂, by using reduced basis vectors.\n *   Gauss lattice reduction calculates them from initial basis vectors `(n, 0), (-λ, 0)`\n *\n * Check out `test/misc/endomorphism.js` and\n * [gist](https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066).\n */\nexport type EndomorphismOpts = {\n  beta: bigint;\n  splitScalar: (k: bigint) => { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\n};\nexport type BasicWCurve<T> = BasicCurve<T> & {\n  // Params: a, b\n  a: T;\n  b: T;\n\n  // Optional params\n  allowedPrivateKeyLengths?: readonly number[]; // for P521\n  wrapPrivateKey?: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\n  endo?: EndomorphismOpts;\n  // When a cofactor != 1, there can be an effective methods to:\n  // 1. Determine whether a point is torsion-free\n  isTorsionFree?: (c: ProjConstructor<T>, point: ProjPointType<T>) => boolean;\n  // 2. Clear torsion component\n  clearCofactor?: (c: ProjConstructor<T>, point: ProjPointType<T>) => ProjPointType<T>;\n};\n\nexport type Entropy = Hex | boolean;\nexport type SignOpts = { lowS?: boolean; extraEntropy?: Entropy; prehash?: boolean };\nexport type VerOpts = {\n  lowS?: boolean;\n  prehash?: boolean;\n  format?: 'compact' | 'der' | 'js' | undefined;\n};\n\nfunction validateSigVerOpts(opts: SignOpts | VerOpts) {\n  if (opts.lowS !== undefined) abool('lowS', opts.lowS);\n  if (opts.prehash !== undefined) abool('prehash', opts.prehash);\n}\n\n/** Instance methods for 3D XYZ points. */\nexport interface ProjPointType<T> extends Group<ProjPointType<T>> {\n  /** projective x coordinate. Note: different from .x */\n  readonly px: T;\n  /** projective y coordinate. Note: different from .y */\n  readonly py: T;\n  /** projective z coordinate */\n  readonly pz: T;\n  /** affine x coordinate */\n  get x(): T;\n  /** affine y coordinate */\n  get y(): T;\n  assertValidity(): void;\n  clearCofactor(): ProjPointType<T>;\n  is0(): boolean;\n  isTorsionFree(): boolean;\n  multiplyUnsafe(scalar: bigint): ProjPointType<T>;\n  /**\n   * Massively speeds up `p.multiply(n)` by using wnaf precompute tables (caching).\n   * Table generation takes 30MB of ram and 10ms on high-end CPU, but may take\n   * much longer on slow devices.\n   * Actual generation will happen on first call of `.multiply()`.\n   * By default, BASE point is precomputed.\n   * @param windowSize - table window size\n   * @param isLazy - (default true) allows to defer generation\n   */\n  precompute(windowSize?: number, isLazy?: boolean): ProjPointType<T>;\n\n  /** Converts 3D XYZ projective point to 2D xy affine coordinates */\n  toAffine(invertedZ?: T): AffinePoint<T>;\n  /** Encodes point using IEEE P1363 (DER) encoding. First byte is 2/3/4. Default = isCompressed. */\n  toBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n\n  /** @deprecated use `toBytes` */\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  /** @deprecated use `multiplyUnsafe` */\n  multiplyAndAddUnsafe(Q: ProjPointType<T>, a: bigint, b: bigint): ProjPointType<T> | undefined;\n  /** @deprecated use `p.y % 2n === 0n` */\n  hasEvenY(): boolean;\n  /** @deprecated use `p.precompute(windowSize)` */\n  _setWindowSize(windowSize: number): void;\n}\n\n/** Static methods for 3D XYZ points. */\nexport interface ProjConstructor<T> extends GroupConstructor<ProjPointType<T>> {\n  Fp: IField<T>;\n  Fn: IField<bigint>;\n  /** Does NOT validate if the point is valid. Use `.assertValidity()`. */\n  new (x: T, y: T, z: T): ProjPointType<T>;\n  /** Does NOT validate if the point is valid. Use `.assertValidity()`. */\n  fromAffine(p: AffinePoint<T>): ProjPointType<T>;\n  fromBytes(encodedPoint: Uint8Array): ProjPointType<T>;\n  fromHex(hex: Hex): ProjPointType<T>;\n  fromPrivateKey(privateKey: PrivKey): ProjPointType<T>;\n  normalizeZ(points: ProjPointType<T>[]): ProjPointType<T>[];\n  msm(points: ProjPointType<T>[], scalars: bigint[]): ProjPointType<T>;\n}\n\nexport type CurvePointsType<T> = BasicWCurve<T> & {\n  fromBytes?: (bytes: Uint8Array) => AffinePoint<T>;\n  toBytes?: (c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => Uint8Array;\n};\n\n// LegacyWeierstrassOpts\nexport type CurvePointsTypeWithLength<T> = Readonly<CurvePointsType<T> & Partial<NLength>>;\n\n// LegacyWeierstrass\nexport type CurvePointsRes<T> = {\n  /** @deprecated import individual CURVE params */\n  CURVE: CurvePointsType<T>;\n  Point: ProjConstructor<T>;\n  /** @deprecated use `Point` */\n  ProjectivePoint: ProjConstructor<T>;\n  /** @deprecated */\n  normPrivateKeyToScalar: (key: PrivKey) => bigint;\n  /** @deprecated */\n  weierstrassEquation: (x: T) => T;\n  /** @deprecated use `Point.Fn.isValidNot0(num)` */\n  isWithinCurveOrder: (num: bigint) => boolean;\n};\n\n// Aliases to legacy types\n// export type CurveType = LegacyECDSAOpts;\n// export type CurveFn = LegacyECDSA;\n// export type CurvePointsRes<T> = LegacyWeierstrass<T>;\n// export type CurvePointsType<T> = LegacyWeierstrassOpts<T>;\n// export type CurvePointsTypeWithLength<T> = LegacyWeierstrassOpts<T>;\n// export type BasicWCurve<T> = LegacyWeierstrassOpts<T>;\n\n/**\n * Weierstrass curve options.\n *\n * * p: prime characteristic (order) of finite field, in which arithmetics is done\n * * n: order of prime subgroup a.k.a total amount of valid curve points\n * * h: cofactor, usually 1. h*n is group order; n is subgroup order\n * * a: formula param, must be in field of p\n * * b: formula param, must be in field of p\n * * Gx: x coordinate of generator point a.k.a. base point\n * * Gy: y coordinate of generator point\n */\nexport type WeierstrassOpts<T> = Readonly<{\n  p: bigint;\n  n: bigint;\n  h: bigint;\n  a: T;\n  b: T;\n  Gx: T;\n  Gy: T;\n}>;\n\n// When a cofactor != 1, there can be an effective methods to:\n// 1. Determine whether a point is torsion-free\n// 2. Clear torsion component\n// wrapPrivateKey: bls12-381 requires mod(n) instead of rejecting keys >= n\nexport type WeierstrassExtraOpts<T> = Partial<{\n  Fp: IField<T>;\n  Fn: IField<bigint>;\n  // TODO: remove\n  allowedPrivateKeyLengths: readonly number[]; // for P521\n  allowInfinityPoint: boolean;\n  endo: EndomorphismOpts;\n  wrapPrivateKey: boolean;\n  isTorsionFree: (c: ProjConstructor<T>, point: ProjPointType<T>) => boolean;\n  clearCofactor: (c: ProjConstructor<T>, point: ProjPointType<T>) => ProjPointType<T>;\n  fromBytes: (bytes: Uint8Array) => AffinePoint<T>;\n  toBytes: (c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => Uint8Array;\n}>;\n\n/**\n * Options for ECDSA signatures over a Weierstrass curve.\n */\nexport type ECDSAOpts = {\n  hash: CHash;\n  hmac?: HmacFnSync;\n  randomBytes?: (bytesLength?: number) => Uint8Array;\n  lowS?: boolean;\n  bits2int?: (bytes: Uint8Array) => bigint;\n  bits2int_modN?: (bytes: Uint8Array) => bigint;\n};\n\n/** ECDSA is only supported for prime fields, not Fp2 (extension fields). */\nexport interface ECDSA {\n  getPublicKey: (privateKey: PrivKey, isCompressed?: boolean) => Uint8Array;\n  getSharedSecret: (privateA: PrivKey, publicB: Hex, isCompressed?: boolean) => Uint8Array;\n  sign: (msgHash: Hex, privKey: PrivKey, opts?: SignOpts) => RecoveredSignatureType;\n  verify: (signature: Hex | SignatureLike, msgHash: Hex, publicKey: Hex, opts?: VerOpts) => boolean;\n  Point: ProjConstructor<bigint>;\n  Signature: SignatureConstructor;\n  utils: {\n    isValidPrivateKey(privateKey: PrivKey): boolean;\n    randomPrivateKey: () => Uint8Array;\n    // TODO: deprecate those two\n    normPrivateKeyToScalar: (key: PrivKey) => bigint;\n    /** @deprecated */\n    precompute: (windowSize?: number, point?: ProjPointType<bigint>) => ProjPointType<bigint>;\n  };\n}\nexport class DERErr extends Error {\n  constructor(m = '') {\n    super(m);\n  }\n}\nexport type IDER = {\n  // asn.1 DER encoding utils\n  Err: typeof DERErr;\n  // Basic building block is TLV (Tag-Length-Value)\n  _tlv: {\n    encode: (tag: number, data: string) => string;\n    // v - value, l - left bytes (unparsed)\n    decode(tag: number, data: Uint8Array): { v: Uint8Array; l: Uint8Array };\n  };\n  // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n  // since we always use positive integers here. It must always be empty:\n  // - add zero byte if exists\n  // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n  _int: {\n    encode(num: bigint): string;\n    decode(data: Uint8Array): bigint;\n  };\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint };\n  hexFromSig(sig: { r: bigint; s: bigint }): string;\n};\n/**\n * ASN.1 DER encoding utilities. ASN is very complex & fragile. Format:\n *\n *     [0x30 (SEQUENCE), bytelength, 0x02 (INTEGER), intLength, R, 0x02 (INTEGER), intLength, S]\n *\n * Docs: https://letsencrypt.org/docs/a-warm-welcome-to-asn1-and-der/, https://luca.ntop.org/Teaching/Appunti/asn1.html\n */\nexport const DER: IDER = {\n  // asn.1 DER encoding utils\n  Err: DERErr,\n  // Basic building block is TLV (Tag-Length-Value)\n  _tlv: {\n    encode: (tag: number, data: string): string => {\n      const { Err: E } = DER;\n      if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');\n      if (data.length & 1) throw new E('tlv.encode: unpadded data');\n      const dataLen = data.length / 2;\n      const len = numberToHexUnpadded(dataLen);\n      if ((len.length / 2) & 0b1000_0000) throw new E('tlv.encode: long form length too big');\n      // length of length with long form flag\n      const lenLen = dataLen > 127 ? numberToHexUnpadded((len.length / 2) | 0b1000_0000) : '';\n      const t = numberToHexUnpadded(tag);\n      return t + lenLen + len + data;\n    },\n    // v - value, l - left bytes (unparsed)\n    decode(tag: number, data: Uint8Array): { v: Uint8Array; l: Uint8Array } {\n      const { Err: E } = DER;\n      let pos = 0;\n      if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');\n      if (data.length < 2 || data[pos++] !== tag) throw new E('tlv.decode: wrong tlv');\n      const first = data[pos++];\n      const isLong = !!(first & 0b1000_0000); // First bit of first length byte is flag for short/long form\n      let length = 0;\n      if (!isLong) length = first;\n      else {\n        // Long form: [longFlag(1bit), lengthLength(7bit), length (BE)]\n        const lenLen = first & 0b0111_1111;\n        if (!lenLen) throw new E('tlv.decode(long): indefinite length not supported');\n        if (lenLen > 4) throw new E('tlv.decode(long): byte length is too big'); // this will overflow u32 in js\n        const lengthBytes = data.subarray(pos, pos + lenLen);\n        if (lengthBytes.length !== lenLen) throw new E('tlv.decode: length bytes not complete');\n        if (lengthBytes[0] === 0) throw new E('tlv.decode(long): zero leftmost byte');\n        for (const b of lengthBytes) length = (length << 8) | b;\n        pos += lenLen;\n        if (length < 128) throw new E('tlv.decode(long): not minimal encoding');\n      }\n      const v = data.subarray(pos, pos + length);\n      if (v.length !== length) throw new E('tlv.decode: wrong value length');\n      return { v, l: data.subarray(pos + length) };\n    },\n  },\n  // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n  // since we always use positive integers here. It must always be empty:\n  // - add zero byte if exists\n  // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n  _int: {\n    encode(num: bigint): string {\n      const { Err: E } = DER;\n      if (num < _0n) throw new E('integer: negative integers are not allowed');\n      let hex = numberToHexUnpadded(num);\n      // Pad with zero byte if negative flag is present\n      if (Number.parseInt(hex[0], 16) & 0b1000) hex = '00' + hex;\n      if (hex.length & 1) throw new E('unexpected DER parsing assertion: unpadded hex');\n      return hex;\n    },\n    decode(data: Uint8Array): bigint {\n      const { Err: E } = DER;\n      if (data[0] & 0b1000_0000) throw new E('invalid signature integer: negative');\n      if (data[0] === 0x00 && !(data[1] & 0b1000_0000))\n        throw new E('invalid signature integer: unnecessary leading zero');\n      return bytesToNumberBE(data);\n    },\n  },\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint } {\n    // parse DER signature\n    const { Err: E, _int: int, _tlv: tlv } = DER;\n    const data = ensureBytes('signature', hex);\n    const { v: seqBytes, l: seqLeftBytes } = tlv.decode(0x30, data);\n    if (seqLeftBytes.length) throw new E('invalid signature: left bytes after parsing');\n    const { v: rBytes, l: rLeftBytes } = tlv.decode(0x02, seqBytes);\n    const { v: sBytes, l: sLeftBytes } = tlv.decode(0x02, rLeftBytes);\n    if (sLeftBytes.length) throw new E('invalid signature: left bytes after parsing');\n    return { r: int.decode(rBytes), s: int.decode(sBytes) };\n  },\n  hexFromSig(sig: { r: bigint; s: bigint }): string {\n    const { _tlv: tlv, _int: int } = DER;\n    const rs = tlv.encode(0x02, int.encode(sig.r));\n    const ss = tlv.encode(0x02, int.encode(sig.s));\n    const seq = rs + ss;\n    return tlv.encode(0x30, seq);\n  },\n};\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n\n// TODO: remove\nexport function _legacyHelperEquat<T>(Fp: IField<T>, a: T, b: T): (x: T) => T {\n  /**\n   * y² = x³ + ax + b: Short weierstrass curve formula. Takes x, returns y².\n   * @returns y²\n   */\n  function weierstrassEquation(x: T): T {\n    const x2 = Fp.sqr(x); // x * x\n    const x3 = Fp.mul(x2, x); // x² * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x³ + a * x + b\n  }\n  return weierstrassEquation;\n}\nexport function _legacyHelperNormPriv(\n  Fn: IField<bigint>,\n  allowedPrivateKeyLengths?: readonly number[],\n  wrapPrivateKey?: boolean\n): (key: PrivKey) => bigint {\n  const { BYTES: expected } = Fn;\n  // Validates if priv key is valid and converts it to bigint.\n  function normPrivateKeyToScalar(key: PrivKey): bigint {\n    let num: bigint;\n    if (typeof key === 'bigint') {\n      num = key;\n    } else {\n      let bytes = ensureBytes('private key', key);\n      if (allowedPrivateKeyLengths) {\n        if (!allowedPrivateKeyLengths.includes(bytes.length * 2))\n          throw new Error('invalid private key');\n        const padded = new Uint8Array(expected);\n        padded.set(bytes, padded.length - bytes.length);\n        bytes = padded;\n      }\n      try {\n        num = Fn.fromBytes(bytes);\n      } catch (error) {\n        throw new Error(\n          `invalid private key: expected ui8a of size ${expected}, got ${typeof key}`\n        );\n      }\n    }\n    if (wrapPrivateKey) num = Fn.create(num); // disabled by default, enabled for BLS\n    if (!Fn.isValidNot0(num)) throw new Error('invalid private key: out of range [1..N-1]');\n    return num;\n  }\n  return normPrivateKeyToScalar;\n}\n\nexport function weierstrassN<T>(\n  CURVE: WeierstrassOpts<T>,\n  curveOpts: WeierstrassExtraOpts<T> = {}\n): ProjConstructor<T> {\n  const { Fp, Fn } = _createCurveFields('weierstrass', CURVE, curveOpts);\n  const { h: cofactor, n: CURVE_ORDER } = CURVE;\n  _validateObject(\n    curveOpts,\n    {},\n    {\n      allowInfinityPoint: 'boolean',\n      clearCofactor: 'function',\n      isTorsionFree: 'function',\n      fromBytes: 'function',\n      toBytes: 'function',\n      endo: 'object',\n      wrapPrivateKey: 'boolean',\n    }\n  );\n\n  const { endo } = curveOpts;\n  if (endo) {\n    // validateObject(endo, { beta: 'bigint', splitScalar: 'function' });\n    if (\n      !Fp.is0(CURVE.a) ||\n      typeof endo.beta !== 'bigint' ||\n      typeof endo.splitScalar !== 'function'\n    ) {\n      throw new Error('invalid endo: expected \"beta\": bigint and \"splitScalar\": function');\n    }\n  }\n\n  function assertCompressionIsSupported() {\n    if (!Fp.isOdd) throw new Error('compression is not supported: Field does not have .isOdd()');\n  }\n\n  // Implements IEEE P1363 point encoding\n  function pointToBytes(\n    _c: ProjConstructor<T>,\n    point: ProjPointType<T>,\n    isCompressed: boolean\n  ): Uint8Array {\n    const { x, y } = point.toAffine();\n    const bx = Fp.toBytes(x);\n    abool('isCompressed', isCompressed);\n    if (isCompressed) {\n      assertCompressionIsSupported();\n      const hasEvenY = !Fp.isOdd!(y);\n      return concatBytes(pprefix(hasEvenY), bx);\n    } else {\n      return concatBytes(Uint8Array.of(0x04), bx, Fp.toBytes(y));\n    }\n  }\n  function pointFromBytes(bytes: Uint8Array) {\n    abytes(bytes);\n    const L = Fp.BYTES;\n    const LC = L + 1; // length compressed, e.g. 33 for 32-byte field\n    const LU = 2 * L + 1; // length uncompressed, e.g. 65 for 32-byte field\n    const length = bytes.length;\n    const head = bytes[0];\n    const tail = bytes.subarray(1);\n    // No actual validation is done here: use .assertValidity()\n    if (length === LC && (head === 0x02 || head === 0x03)) {\n      const x = Fp.fromBytes(tail);\n      if (!Fp.isValid(x)) throw new Error('bad point: is not on curve, wrong x');\n      const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n      let y: T;\n      try {\n        y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n      } catch (sqrtError) {\n        const err = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n        throw new Error('bad point: is not on curve, sqrt error' + err);\n      }\n      assertCompressionIsSupported();\n      const isYOdd = Fp.isOdd!(y); // (y & _1n) === _1n;\n      const isHeadOdd = (head & 1) === 1; // ECDSA-specific\n      if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n      return { x, y };\n    } else if (length === LU && head === 0x04) {\n      // TODO: more checks\n      const x = Fp.fromBytes(tail.subarray(L * 0, L * 1));\n      const y = Fp.fromBytes(tail.subarray(L * 1, L * 2));\n      if (!isValidXY(x, y)) throw new Error('bad point: is not on curve');\n      return { x, y };\n    } else {\n      throw new Error(\n        `bad point: got length ${length}, expected compressed=${LC} or uncompressed=${LU}`\n      );\n    }\n  }\n\n  const toBytes = curveOpts.toBytes || pointToBytes;\n  const fromBytes = curveOpts.fromBytes || pointFromBytes;\n  const weierstrassEquation = _legacyHelperEquat(Fp, CURVE.a, CURVE.b);\n\n  // TODO: move top-level\n  /** Checks whether equation holds for given x, y: y² == x³ + ax + b */\n  function isValidXY(x: T, y: T): boolean {\n    const left = Fp.sqr(y); // y²\n    const right = weierstrassEquation(x); // x³ + ax + b\n    return Fp.eql(left, right);\n  }\n\n  // Validate whether the passed curve params are valid.\n  // Test 1: equation y² = x³ + ax + b should work for generator point.\n  if (!isValidXY(CURVE.Gx, CURVE.Gy)) throw new Error('bad curve params: generator point');\n\n  // Test 2: discriminant Δ part should be non-zero: 4a³ + 27b² != 0.\n  // Guarantees curve is genus-1, smooth (non-singular).\n  const _4a3 = Fp.mul(Fp.pow(CURVE.a, _3n), _4n);\n  const _27b2 = Fp.mul(Fp.sqr(CURVE.b), BigInt(27));\n  if (Fp.is0(Fp.add(_4a3, _27b2))) throw new Error('bad curve params: a or b');\n\n  /** Asserts coordinate is valid: 0 <= n < Fp.ORDER. */\n  function acoord(title: string, n: T, banZero = false) {\n    if (!Fp.isValid(n) || (banZero && Fp.is0(n))) throw new Error(`bad point coordinate ${title}`);\n    return n;\n  }\n\n  function aprjpoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n  }\n\n  // Memoized toAffine / validity check. They are heavy. Points are immutable.\n\n  // Converts Projective point to affine (x, y) coordinates.\n  // Can accept precomputed Z^-1 - for example, from invertBatch.\n  // (X, Y, Z) ∋ (x=X/Z, y=Y/Z)\n  const toAffineMemo = memoized((p: Point, iz?: T): AffinePoint<T> => {\n    const { px: x, py: y, pz: z } = p;\n    // Fast-path for normalized points\n    if (Fp.eql(z, Fp.ONE)) return { x, y };\n    const is0 = p.is0();\n    // If invZ was 0, we return zero point. However we still want to execute\n    // all operations, so we replace invZ with a random number, 1.\n    if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\n    const ax = Fp.mul(x, iz);\n    const ay = Fp.mul(y, iz);\n    const zz = Fp.mul(z, iz);\n    if (is0) return { x: Fp.ZERO, y: Fp.ZERO };\n    if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n    return { x: ax, y: ay };\n  });\n  // NOTE: on exception this will crash 'cached' and no value will be set.\n  // Otherwise true will be return\n  const assertValidMemo = memoized((p: Point) => {\n    if (p.is0()) {\n      // (0, 1, 0) aka ZERO is invalid in most contexts.\n      // In BLS, ZERO can be serialized, so we allow it.\n      // (0, 0, 0) is invalid representation of ZERO.\n      if (curveOpts.allowInfinityPoint && !Fp.is0(p.py)) return;\n      throw new Error('bad point: ZERO');\n    }\n    // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n    const { x, y } = p.toAffine();\n    if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not field elements');\n    if (!isValidXY(x, y)) throw new Error('bad point: equation left != right');\n    if (!p.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n    return true;\n  });\n\n  function finishEndo(\n    endoBeta: EndomorphismOpts['beta'],\n    k1p: Point,\n    k2p: Point,\n    k1neg: boolean,\n    k2neg: boolean\n  ) {\n    k2p = new Point(Fp.mul(k2p.px, endoBeta), k2p.py, k2p.pz);\n    k1p = negateCt(k1neg, k1p);\n    k2p = negateCt(k2neg, k2p);\n    return k1p.add(k2p);\n  }\n\n  /**\n   * Projective Point works in 3d / projective (homogeneous) coordinates:(X, Y, Z) ∋ (x=X/Z, y=Y/Z).\n   * Default Point works in 2d / affine coordinates: (x, y).\n   * We're doing calculations in projective, because its operations don't require costly inversion.\n   */\n  class Point implements ProjPointType<T> {\n    // base / generator point\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    // zero / infinity / identity point\n    static readonly ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO); // 0, 1, 0\n    // fields\n    static readonly Fp = Fp;\n    static readonly Fn = Fn;\n\n    readonly px: T;\n    readonly py: T;\n    readonly pz: T;\n\n    /** Does NOT validate if the point is valid. Use `.assertValidity()`. */\n    constructor(px: T, py: T, pz: T) {\n      this.px = acoord('x', px);\n      this.py = acoord('y', py, true);\n      this.pz = acoord('z', pz);\n      Object.freeze(this);\n    }\n\n    /** Does NOT validate if the point is valid. Use `.assertValidity()`. */\n    static fromAffine(p: AffinePoint<T>): Point {\n      const { x, y } = p || {};\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n      if (p instanceof Point) throw new Error('projective point not allowed');\n      // (0, 0) would've produced (0, 0, 1) - instead, we need (0, 1, 0)\n      if (Fp.is0(x) && Fp.is0(y)) return Point.ZERO;\n      return new Point(x, y, Fp.ONE);\n    }\n\n    get x(): T {\n      return this.toAffine().x;\n    }\n    get y(): T {\n      return this.toAffine().y;\n    }\n\n    static normalizeZ(points: Point[]): Point[] {\n      return normalizeZ(Point, 'pz', points);\n    }\n\n    static fromBytes(bytes: Uint8Array): Point {\n      abytes(bytes);\n      return Point.fromHex(bytes);\n    }\n\n    /** Converts hash string or Uint8Array to Point. */\n    static fromHex(hex: Hex): Point {\n      const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n      P.assertValidity();\n      return P;\n    }\n\n    /** Multiplies generator point by privateKey. */\n    static fromPrivateKey(privateKey: PrivKey) {\n      const normPrivateKeyToScalar = _legacyHelperNormPriv(\n        Fn,\n        curveOpts.allowedPrivateKeyLengths,\n        curveOpts.wrapPrivateKey\n      );\n      return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n    }\n\n    /** Multiscalar Multiplication */\n    static msm(points: Point[], scalars: bigint[]): Point {\n      return pippenger(Point, Fn, points, scalars);\n    }\n\n    /**\n     *\n     * @param windowSize\n     * @param isLazy true will defer table computation until the first multiplication\n     * @returns\n     */\n    precompute(windowSize: number = 8, isLazy = true): Point {\n      wnaf.setWindowSize(this, windowSize);\n      if (!isLazy) this.multiply(_3n); // random number\n      return this;\n    }\n\n    /** \"Private method\", don't use it directly */\n    _setWindowSize(windowSize: number) {\n      this.precompute(windowSize);\n    }\n\n    // TODO: return `this`\n    /** A point on curve is valid if it conforms to equation. */\n    assertValidity(): void {\n      assertValidMemo(this);\n    }\n\n    hasEvenY(): boolean {\n      const { y } = this.toAffine();\n      if (!Fp.isOdd) throw new Error(\"Field doesn't support isOdd\");\n      return !Fp.isOdd(y);\n    }\n\n    /** Compare one point to another. */\n    equals(other: Point): boolean {\n      aprjpoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n      return U1 && U2;\n    }\n\n    /** Flips point to one corresponding to (x, -y) in Affine coordinates. */\n    negate(): Point {\n      return new Point(this.px, Fp.neg(this.py), this.pz);\n    }\n\n    // Renes-Costello-Batina exception-free doubling formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 3\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    double() {\n      const { a, b } = CURVE;\n      const b3 = Fp.mul(b, _3n);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      let t0 = Fp.mul(X1, X1); // step 1\n      let t1 = Fp.mul(Y1, Y1);\n      let t2 = Fp.mul(Z1, Z1);\n      let t3 = Fp.mul(X1, Y1);\n      t3 = Fp.add(t3, t3); // step 5\n      Z3 = Fp.mul(X1, Z1);\n      Z3 = Fp.add(Z3, Z3);\n      X3 = Fp.mul(a, Z3);\n      Y3 = Fp.mul(b3, t2);\n      Y3 = Fp.add(X3, Y3); // step 10\n      X3 = Fp.sub(t1, Y3);\n      Y3 = Fp.add(t1, Y3);\n      Y3 = Fp.mul(X3, Y3);\n      X3 = Fp.mul(t3, X3);\n      Z3 = Fp.mul(b3, Z3); // step 15\n      t2 = Fp.mul(a, t2);\n      t3 = Fp.sub(t0, t2);\n      t3 = Fp.mul(a, t3);\n      t3 = Fp.add(t3, Z3);\n      Z3 = Fp.add(t0, t0); // step 20\n      t0 = Fp.add(Z3, t0);\n      t0 = Fp.add(t0, t2);\n      t0 = Fp.mul(t0, t3);\n      Y3 = Fp.add(Y3, t0);\n      t2 = Fp.mul(Y1, Z1); // step 25\n      t2 = Fp.add(t2, t2);\n      t0 = Fp.mul(t2, t3);\n      X3 = Fp.sub(X3, t0);\n      Z3 = Fp.mul(t2, t1);\n      Z3 = Fp.add(Z3, Z3); // step 30\n      Z3 = Fp.add(Z3, Z3);\n      return new Point(X3, Y3, Z3);\n    }\n\n    // Renes-Costello-Batina exception-free addition formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 1\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    add(other: Point): Point {\n      aprjpoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      const a = CURVE.a;\n      const b3 = Fp.mul(CURVE.b, _3n);\n      let t0 = Fp.mul(X1, X2); // step 1\n      let t1 = Fp.mul(Y1, Y2);\n      let t2 = Fp.mul(Z1, Z2);\n      let t3 = Fp.add(X1, Y1);\n      let t4 = Fp.add(X2, Y2); // step 5\n      t3 = Fp.mul(t3, t4);\n      t4 = Fp.add(t0, t1);\n      t3 = Fp.sub(t3, t4);\n      t4 = Fp.add(X1, Z1);\n      let t5 = Fp.add(X2, Z2); // step 10\n      t4 = Fp.mul(t4, t5);\n      t5 = Fp.add(t0, t2);\n      t4 = Fp.sub(t4, t5);\n      t5 = Fp.add(Y1, Z1);\n      X3 = Fp.add(Y2, Z2); // step 15\n      t5 = Fp.mul(t5, X3);\n      X3 = Fp.add(t1, t2);\n      t5 = Fp.sub(t5, X3);\n      Z3 = Fp.mul(a, t4);\n      X3 = Fp.mul(b3, t2); // step 20\n      Z3 = Fp.add(X3, Z3);\n      X3 = Fp.sub(t1, Z3);\n      Z3 = Fp.add(t1, Z3);\n      Y3 = Fp.mul(X3, Z3);\n      t1 = Fp.add(t0, t0); // step 25\n      t1 = Fp.add(t1, t0);\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.mul(b3, t4);\n      t1 = Fp.add(t1, t2);\n      t2 = Fp.sub(t0, t2); // step 30\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.add(t4, t2);\n      t0 = Fp.mul(t1, t4);\n      Y3 = Fp.add(Y3, t0);\n      t0 = Fp.mul(t5, t4); // step 35\n      X3 = Fp.mul(t3, X3);\n      X3 = Fp.sub(X3, t0);\n      t0 = Fp.mul(t3, t1);\n      Z3 = Fp.mul(t5, Z3);\n      Z3 = Fp.add(Z3, t0); // step 40\n      return new Point(X3, Y3, Z3);\n    }\n\n    subtract(other: Point) {\n      return this.add(other.negate());\n    }\n\n    is0(): boolean {\n      return this.equals(Point.ZERO);\n    }\n\n    /**\n     * Constant time multiplication.\n     * Uses wNAF method. Windowed method may be 10% faster,\n     * but takes 2x longer to generate and consumes 2x memory.\n     * Uses precomputes when available.\n     * Uses endomorphism for Koblitz curves.\n     * @param scalar by which the point would be multiplied\n     * @returns New point\n     */\n    multiply(scalar: bigint): Point {\n      const { endo } = curveOpts;\n      if (!Fn.isValidNot0(scalar)) throw new Error('invalid scalar: out of range'); // 0 is invalid\n      let point: Point, fake: Point; // Fake point is used to const-time mult\n      const mul = (n: bigint) => wnaf.wNAFCached(this, n, Point.normalizeZ);\n      /** See docs for {@link EndomorphismOpts} */\n      if (endo) {\n        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(scalar);\n        const { p: k1p, f: k1f } = mul(k1);\n        const { p: k2p, f: k2f } = mul(k2);\n        fake = k1f.add(k2f);\n        point = finishEndo(endo.beta, k1p, k2p, k1neg, k2neg);\n      } else {\n        const { p, f } = mul(scalar);\n        point = p;\n        fake = f;\n      }\n      // Normalize `z` for both points, but return only real one\n      return Point.normalizeZ([point, fake])[0];\n    }\n\n    /**\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\n     * It's faster, but should only be used when you don't care about\n     * an exposed private key e.g. sig verification, which works over *public* keys.\n     */\n    multiplyUnsafe(sc: bigint): Point {\n      const { endo } = curveOpts;\n      const p = this;\n      if (!Fn.isValid(sc)) throw new Error('invalid scalar: out of range'); // 0 is valid\n      if (sc === _0n || p.is0()) return Point.ZERO;\n      if (sc === _1n) return p; // fast-path\n      if (wnaf.hasPrecomputes(this)) return this.multiply(sc);\n      if (endo) {\n        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(sc);\n        // `wNAFCachedUnsafe` is 30% slower\n        const { p1, p2 } = mulEndoUnsafe(Point, p, k1, k2);\n        return finishEndo(endo.beta, p1, p2, k1neg, k2neg);\n      } else {\n        return wnaf.wNAFCachedUnsafe(p, sc);\n      }\n    }\n\n    multiplyAndAddUnsafe(Q: Point, a: bigint, b: bigint): Point | undefined {\n      const sum = this.multiplyUnsafe(a).add(Q.multiplyUnsafe(b));\n      return sum.is0() ? undefined : sum;\n    }\n\n    /**\n     * Converts Projective point to affine (x, y) coordinates.\n     * @param invertedZ Z^-1 (inverted zero) - optional, precomputation is useful for invertBatch\n     */\n    toAffine(invertedZ?: T): AffinePoint<T> {\n      return toAffineMemo(this, invertedZ);\n    }\n\n    /**\n     * Checks whether Point is free of torsion elements (is in prime subgroup).\n     * Always torsion-free for cofactor=1 curves.\n     */\n    isTorsionFree(): boolean {\n      const { isTorsionFree } = curveOpts;\n      if (cofactor === _1n) return true;\n      if (isTorsionFree) return isTorsionFree(Point, this);\n      return wnaf.wNAFCachedUnsafe(this, CURVE_ORDER).is0();\n    }\n\n    clearCofactor(): Point {\n      const { clearCofactor } = curveOpts;\n      if (cofactor === _1n) return this; // Fast-path\n      if (clearCofactor) return clearCofactor(Point, this) as Point;\n      return this.multiplyUnsafe(cofactor);\n    }\n\n    toBytes(isCompressed = true): Uint8Array {\n      abool('isCompressed', isCompressed);\n      this.assertValidity();\n      return toBytes(Point, this, isCompressed);\n    }\n\n    /** @deprecated use `toBytes` */\n    toRawBytes(isCompressed = true): Uint8Array {\n      return this.toBytes(isCompressed);\n    }\n\n    toHex(isCompressed = true): string {\n      return bytesToHex(this.toBytes(isCompressed));\n    }\n\n    toString() {\n      return `<Point ${this.is0() ? 'ZERO' : this.toHex()}>`;\n    }\n  }\n  const bits = Fn.BITS;\n  const wnaf = wNAF(Point, curveOpts.endo ? Math.ceil(bits / 2) : bits);\n  return Point;\n}\n\n// _legacyWeierstrass\n/** @deprecated use `weierstrassN` */\nexport function weierstrassPoints<T>(c: CurvePointsTypeWithLength<T>): CurvePointsRes<T> {\n  const { CURVE, curveOpts } = _weierstrass_legacy_opts_to_new(c);\n  const Point = weierstrassN(CURVE, curveOpts);\n  return _weierstrass_new_output_to_legacy(c, Point);\n}\n\n// Instance\nexport interface SignatureType {\n  readonly r: bigint;\n  readonly s: bigint;\n  readonly recovery?: number;\n  assertValidity(): void;\n  addRecoveryBit(recovery: number): RecoveredSignatureType;\n  hasHighS(): boolean;\n  normalizeS(): SignatureType;\n  recoverPublicKey(msgHash: Hex): ProjPointType<bigint>;\n  toCompactRawBytes(): Uint8Array;\n  toCompactHex(): string;\n  toDERRawBytes(): Uint8Array;\n  toDERHex(): string;\n  // toBytes(format?: string): Uint8Array;\n}\nexport type RecoveredSignatureType = SignatureType & {\n  readonly recovery: number;\n};\n// Static methods\nexport type SignatureConstructor = {\n  new (r: bigint, s: bigint, recovery?: number): SignatureType;\n  fromCompact(hex: Hex): SignatureType;\n  fromDER(hex: Hex): SignatureType;\n};\nexport type SignatureLike = { r: bigint; s: bigint };\nexport type PubKey = Hex | ProjPointType<bigint>;\n\nexport type CurveType = BasicWCurve<bigint> & {\n  hash: CHash; // CHash not FHash because we need outputLen for DRBG\n  hmac?: HmacFnSync;\n  randomBytes?: (bytesLength?: number) => Uint8Array;\n  lowS?: boolean;\n  bits2int?: (bytes: Uint8Array) => bigint;\n  bits2int_modN?: (bytes: Uint8Array) => bigint;\n};\n\n// Points start with byte 0x02 when y is even; otherwise 0x03\nfunction pprefix(hasEvenY: boolean): Uint8Array {\n  return Uint8Array.of(hasEvenY ? 0x02 : 0x03);\n}\n\nexport type CurveFn = {\n  CURVE: CurvePointsType<bigint>;\n  getPublicKey: (privateKey: PrivKey, isCompressed?: boolean) => Uint8Array;\n  getSharedSecret: (privateA: PrivKey, publicB: Hex, isCompressed?: boolean) => Uint8Array;\n  sign: (msgHash: Hex, privKey: PrivKey, opts?: SignOpts) => RecoveredSignatureType;\n  verify: (signature: Hex | SignatureLike, msgHash: Hex, publicKey: Hex, opts?: VerOpts) => boolean;\n  Point: ProjConstructor<bigint>;\n  /** @deprecated use `Point` */\n  ProjectivePoint: ProjConstructor<bigint>;\n  Signature: SignatureConstructor;\n  utils: {\n    normPrivateKeyToScalar: (key: PrivKey) => bigint;\n    isValidPrivateKey(privateKey: PrivKey): boolean;\n    randomPrivateKey: () => Uint8Array;\n    precompute: (windowSize?: number, point?: ProjPointType<bigint>) => ProjPointType<bigint>;\n  };\n};\n\nexport function ecdsa(\n  Point: ProjConstructor<bigint>,\n  ecdsaOpts: ECDSAOpts,\n  curveOpts: WeierstrassExtraOpts<bigint> = {}\n): ECDSA {\n  _validateObject(\n    ecdsaOpts,\n    { hash: 'function' },\n    {\n      hmac: 'function',\n      lowS: 'boolean',\n      randomBytes: 'function',\n      bits2int: 'function',\n      bits2int_modN: 'function',\n    }\n  );\n\n  const randomBytes_ = ecdsaOpts.randomBytes || randomBytes;\n  const hmac_: HmacFnSync =\n    ecdsaOpts.hmac ||\n    (((key, ...msgs) => hmac(ecdsaOpts.hash, key, concatBytes(...msgs))) satisfies HmacFnSync);\n\n  const { Fp, Fn } = Point;\n  const { ORDER: CURVE_ORDER, BITS: fnBits } = Fn;\n\n  function isBiggerThanHalfOrder(number: bigint) {\n    const HALF = CURVE_ORDER >> _1n;\n    return number > HALF;\n  }\n\n  function normalizeS(s: bigint) {\n    return isBiggerThanHalfOrder(s) ? Fn.neg(s) : s;\n  }\n  function aValidRS(title: string, num: bigint) {\n    if (!Fn.isValidNot0(num))\n      throw new Error(`invalid signature ${title}: out of range 1..CURVE.n`);\n  }\n\n  /**\n   * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n   */\n  class Signature implements SignatureType {\n    readonly r: bigint;\n    readonly s: bigint;\n    readonly recovery?: number;\n    constructor(r: bigint, s: bigint, recovery?: number) {\n      aValidRS('r', r); // r in [1..N-1]\n      aValidRS('s', s); // s in [1..N-1]\n      this.r = r;\n      this.s = s;\n      if (recovery != null) this.recovery = recovery;\n      Object.freeze(this);\n    }\n\n    // pair (bytes of r, bytes of s)\n    static fromCompact(hex: Hex) {\n      const L = Fn.BYTES;\n      const b = ensureBytes('compactSignature', hex, L * 2);\n      return new Signature(Fn.fromBytes(b.subarray(0, L)), Fn.fromBytes(b.subarray(L, L * 2)));\n    }\n\n    // DER encoded ECDSA signature\n    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n    static fromDER(hex: Hex) {\n      const { r, s } = DER.toSig(ensureBytes('DER', hex));\n      return new Signature(r, s);\n    }\n\n    /**\n     * @todo remove\n     * @deprecated\n     */\n    assertValidity(): void {}\n\n    addRecoveryBit(recovery: number): RecoveredSignature {\n      return new Signature(this.r, this.s, recovery) as RecoveredSignature;\n    }\n\n    // ProjPointType<bigint>\n    recoverPublicKey(msgHash: Hex): typeof Point.BASE {\n      const FIELD_ORDER = Fp.ORDER;\n      const { r, s, recovery: rec } = this;\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n\n      // ECDSA recovery is hard for cofactor > 1 curves.\n      // In sign, `r = q.x mod n`, and here we recover q.x from r.\n      // While recovering q.x >= n, we need to add r+n for cofactor=1 curves.\n      // However, for cofactor>1, r+n may not get q.x:\n      // r+n*i would need to be done instead where i is unknown.\n      // To easily get i, we either need to:\n      // a. increase amount of valid recid values (4, 5...); OR\n      // b. prohibit non-prime-order signatures (recid > 1).\n      const hasCofactor = CURVE_ORDER * _2n < FIELD_ORDER;\n      if (hasCofactor && rec > 1) throw new Error('recovery id is ambiguous for h>1 curve');\n\n      const radj = rec === 2 || rec === 3 ? r + CURVE_ORDER : r;\n      if (!Fp.isValid(radj)) throw new Error('recovery id 2 or 3 invalid');\n      const x = Fp.toBytes(radj);\n      const R = Point.fromHex(concatBytes(pprefix((rec & 1) === 0), x));\n      const ir = Fn.inv(radj); // r^-1\n      const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n      const u1 = Fn.create(-h * ir); // -hr^-1\n      const u2 = Fn.create(s * ir); // sr^-1\n      // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1). unsafe is fine: there is no private data.\n      const Q = Point.BASE.multiplyUnsafe(u1).add(R.multiplyUnsafe(u2));\n      if (Q.is0()) throw new Error('point at infinify');\n      Q.assertValidity();\n      return Q;\n    }\n\n    // Signatures should be low-s, to prevent malleability.\n    hasHighS(): boolean {\n      return isBiggerThanHalfOrder(this.s);\n    }\n\n    normalizeS() {\n      return this.hasHighS() ? new Signature(this.r, Fn.neg(this.s), this.recovery) : this;\n    }\n\n    toBytes(format: 'compact' | 'der') {\n      if (format === 'compact') return concatBytes(Fn.toBytes(this.r), Fn.toBytes(this.s));\n      if (format === 'der') return hexToBytes(DER.hexFromSig(this));\n      throw new Error('invalid format');\n    }\n\n    // DER-encoded\n    toDERRawBytes() {\n      return this.toBytes('der');\n    }\n    toDERHex() {\n      return bytesToHex(this.toBytes('der'));\n    }\n\n    // padded bytes of r, then padded bytes of s\n    toCompactRawBytes() {\n      return this.toBytes('compact');\n    }\n    toCompactHex() {\n      return bytesToHex(this.toBytes('compact'));\n    }\n  }\n  type RecoveredSignature = Signature & { recovery: number };\n\n  const normPrivateKeyToScalar = _legacyHelperNormPriv(\n    Fn,\n    curveOpts.allowedPrivateKeyLengths,\n    curveOpts.wrapPrivateKey\n  );\n\n  const utils = {\n    isValidPrivateKey(privateKey: PrivKey) {\n      try {\n        normPrivateKeyToScalar(privateKey);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    },\n    normPrivateKeyToScalar: normPrivateKeyToScalar,\n\n    /**\n     * Produces cryptographically secure private key from random of size\n     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n     */\n    randomPrivateKey: (): Uint8Array => {\n      const n = CURVE_ORDER;\n      return mapHashToField(randomBytes_(getMinHashLength(n)), n);\n    },\n\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\n      return point.precompute(windowSize, false);\n    },\n  };\n\n  /**\n   * Computes public key for a private key. Checks for validity of the private key.\n   * @param privateKey private key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\n   */\n  function getPublicKey(privateKey: PrivKey, isCompressed = true): Uint8Array {\n    return Point.fromPrivateKey(privateKey).toBytes(isCompressed);\n  }\n\n  /**\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n   */\n  function isProbPub(item: PrivKey | PubKey): boolean | undefined {\n    if (typeof item === 'bigint') return false;\n    if (item instanceof Point) return true;\n    const arr = ensureBytes('key', item);\n    const length = arr.length;\n    const L = Fp.BYTES;\n    const LC = L + 1; // e.g. 33 for 32\n    const LU = 2 * L + 1; // e.g. 65 for 32\n    if (curveOpts.allowedPrivateKeyLengths || Fn.BYTES === LC) {\n      return undefined;\n    } else {\n      return length === LC || length === LU;\n    }\n  }\n\n  /**\n   * ECDH (Elliptic Curve Diffie Hellman).\n   * Computes shared public key from private key and public key.\n   * Checks: 1) private key validity 2) shared key is on-curve.\n   * Does NOT hash the result.\n   * @param privateA private key\n   * @param publicB different public key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns shared public key\n   */\n  function getSharedSecret(privateA: PrivKey, publicB: Hex, isCompressed = true): Uint8Array {\n    if (isProbPub(privateA) === true) throw new Error('first arg must be private key');\n    if (isProbPub(publicB) === false) throw new Error('second arg must be public key');\n    const b = Point.fromHex(publicB); // check for being on-curve\n    return b.multiply(normPrivateKeyToScalar(privateA)).toBytes(isCompressed);\n  }\n\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n  const bits2int =\n    ecdsaOpts.bits2int ||\n    function (bytes: Uint8Array): bigint {\n      // Our custom check \"just in case\", for protection against DoS\n      if (bytes.length > 8192) throw new Error('input is too large');\n      // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n      // for some cases, since bytes.length * 8 is not actual bitLength.\n      const num = bytesToNumberBE(bytes); // check for == u8 done here\n      const delta = bytes.length * 8 - fnBits; // truncate to nBitLength leftmost bits\n      return delta > 0 ? num >> BigInt(delta) : num;\n    };\n  const bits2int_modN =\n    ecdsaOpts.bits2int_modN ||\n    function (bytes: Uint8Array): bigint {\n      return Fn.create(bits2int(bytes)); // can't use bytesToNumberBE here\n    };\n  // NOTE: pads output with zero as per spec\n  const ORDER_MASK = bitMask(fnBits);\n  /**\n   * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n   */\n  function int2octets(num: bigint): Uint8Array {\n    // IMPORTANT: the check ensures working for case `Fn.BYTES != Fn.BITS * 8`\n    aInRange('num < 2^' + fnBits, num, _0n, ORDER_MASK);\n    return Fn.toBytes(num);\n  }\n\n  // Steps A, D of RFC6979 3.2\n  // Creates RFC6979 seed; converts msg/privKey to numbers.\n  // Used only in sign, not in verify.\n  // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order,\n  // this will be invalid at least for P521. Also it can be bigger for P224 + SHA256\n  function prepSig(msgHash: Hex, privateKey: PrivKey, opts = defaultSigOpts) {\n    if (['recovered', 'canonical'].some((k) => k in opts))\n      throw new Error('sign() legacy options not supported');\n    const { hash } = ecdsaOpts;\n    let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n    if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n    msgHash = ensureBytes('msgHash', msgHash);\n    validateSigVerOpts(opts);\n    if (prehash) msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n\n    // We can't later call bits2octets, since nested bits2int is broken for curves\n    // with fnBits % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n    const h1int = bits2int_modN(msgHash);\n    const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n    const seedArgs = [int2octets(d), int2octets(h1int)];\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\n    if (ent != null && ent !== false) {\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n      const e = ent === true ? randomBytes_(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n      seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n    }\n    const seed = concatBytes(...seedArgs); // Step D of RFC6979 3.2\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n    // Converts signature params into point w r/s, checks result for validity.\n    // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n    // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n    // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n    function k2sig(kBytes: Uint8Array): RecoveredSignature | undefined {\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n      // Important: all mod() calls here must be done over N\n      const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n      if (!Fn.isValidNot0(k)) return; // Valid scalars (including k) must be in 1..N-1\n      const ik = Fn.inv(k); // k^-1 mod n\n      const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n      const r = Fn.create(q.x); // r = q.x mod n\n      if (r === _0n) return;\n      const s = Fn.create(ik * Fn.create(m + r * d)); // Not using blinding here, see comment above\n      if (s === _0n) return;\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n      let normS = s;\n      if (lowS && isBiggerThanHalfOrder(s)) {\n        normS = normalizeS(s); // if lowS was passed, ensure s is always\n        recovery ^= 1; // // in the bottom half of N\n      }\n      return new Signature(r, normS, recovery) as RecoveredSignature; // use normS, not s\n    }\n    return { seed, k2sig };\n  }\n  const defaultSigOpts: SignOpts = { lowS: ecdsaOpts.lowS, prehash: false };\n  const defaultVerOpts: VerOpts = { lowS: ecdsaOpts.lowS, prehash: false };\n\n  /**\n   * Signs message hash with a private key.\n   * ```\n   * sign(m, d, k) where\n   *   (x, y) = G × k\n   *   r = x mod n\n   *   s = (m + dr)/k mod n\n   * ```\n   * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n   * @param privKey private key\n   * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n   * @returns signature with recovery param\n   */\n  function sign(msgHash: Hex, privKey: PrivKey, opts = defaultSigOpts): RecoveredSignature {\n    const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n    const drbg = createHmacDrbg<RecoveredSignature>(ecdsaOpts.hash.outputLen, Fn.BYTES, hmac_);\n    return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n  }\n\n  // Enable precomputes. Slows down first publicKey computation by 20ms.\n  Point.BASE.precompute(8);\n\n  /**\n   * Verifies a signature against message hash and public key.\n   * Rejects lowS signatures by default: to override,\n   * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n   *\n   * ```\n   * verify(r, s, h, P) where\n   *   U1 = hs^-1 mod n\n   *   U2 = rs^-1 mod n\n   *   R = U1⋅G - U2⋅P\n   *   mod(R.x, n) == r\n   * ```\n   */\n  function verify(\n    signature: Hex | SignatureLike,\n    msgHash: Hex,\n    publicKey: Hex,\n    opts = defaultVerOpts\n  ): boolean {\n    const sg = signature;\n    msgHash = ensureBytes('msgHash', msgHash);\n    publicKey = ensureBytes('publicKey', publicKey);\n\n    // Verify opts\n    validateSigVerOpts(opts);\n    const { lowS, prehash, format } = opts;\n\n    // TODO: remove\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n\n    if (format !== undefined && !['compact', 'der', 'js'].includes(format))\n      throw new Error('format must be \"compact\", \"der\" or \"js\"');\n    const isHex = typeof sg === 'string' || isBytes(sg);\n    const isObj =\n      !isHex &&\n      !format &&\n      typeof sg === 'object' &&\n      sg !== null &&\n      typeof sg.r === 'bigint' &&\n      typeof sg.s === 'bigint';\n    if (!isHex && !isObj)\n      throw new Error('invalid signature, expected Uint8Array, hex string or Signature instance');\n    let _sig: Signature | undefined = undefined;\n    let P: ProjPointType<bigint>;\n\n    // deduce signature format\n    try {\n      // if (format === 'js') {\n      //   if (sg != null && !isBytes(sg)) _sig = new Signature(sg.r, sg.s);\n      // } else if (format === 'compact') {\n      //   _sig = Signature.fromCompact(sg);\n      // } else if (format === 'der') {\n      //   _sig = Signature.fromDER(sg);\n      // } else {\n      //   throw new Error('invalid format');\n      // }\n      if (isObj) {\n        if (format === undefined || format === 'js') {\n          _sig = new Signature(sg.r, sg.s);\n        } else {\n          throw new Error('invalid format');\n        }\n      }\n      if (isHex) {\n        // TODO: remove this malleable check\n        // Signature can be represented in 2 ways: compact (2*Fn.BYTES) & DER (variable-length).\n        // Since DER can also be 2*Fn.BYTES bytes, we check for it first.\n        try {\n          if (format !== 'compact') _sig = Signature.fromDER(sg);\n        } catch (derError) {\n          if (!(derError instanceof DER.Err)) throw derError;\n        }\n        if (!_sig && format !== 'der') _sig = Signature.fromCompact(sg);\n      }\n      P = Point.fromHex(publicKey);\n    } catch (error) {\n      return false;\n    }\n    if (!_sig) return false;\n    if (lowS && _sig.hasHighS()) return false;\n    // todo: optional.hash => hash\n    if (prehash) msgHash = ecdsaOpts.hash(msgHash);\n    const { r, s } = _sig;\n    const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n    const is = Fn.inv(s); // s^-1\n    const u1 = Fn.create(h * is); // u1 = hs^-1 mod n\n    const u2 = Fn.create(r * is); // u2 = rs^-1 mod n\n    const R = Point.BASE.multiplyUnsafe(u1).add(P.multiplyUnsafe(u2));\n    if (R.is0()) return false;\n    const v = Fn.create(R.x); // v = r.x mod n\n    return v === r;\n  }\n  // TODO: clarify API for cloning .clone({hash: sha512}) ? .createWith({hash: sha512})?\n  // const clone = (hash: CHash): ECDSA => ecdsa(Point, { ...ecdsaOpts, ...getHash(hash) }, curveOpts);\n  return Object.freeze({\n    getPublicKey,\n    getSharedSecret,\n    sign,\n    verify,\n    utils,\n    Point,\n    Signature,\n  });\n}\n\nexport type WsPointComposed<T> = {\n  CURVE: WeierstrassOpts<T>;\n  curveOpts: WeierstrassExtraOpts<T>;\n};\nexport type WsComposed = {\n  CURVE: WeierstrassOpts<bigint>;\n  curveOpts: WeierstrassExtraOpts<bigint>;\n  ecdsaOpts: ECDSAOpts;\n};\nfunction _weierstrass_legacy_opts_to_new<T>(c: CurvePointsType<T>): WsPointComposed<T> {\n  const CURVE: WeierstrassOpts<T> = {\n    a: c.a,\n    b: c.b,\n    p: c.Fp.ORDER,\n    n: c.n,\n    h: c.h,\n    Gx: c.Gx,\n    Gy: c.Gy,\n  };\n  const Fp = c.Fp;\n  const Fn = Field(CURVE.n, c.nBitLength);\n  const curveOpts: WeierstrassExtraOpts<T> = {\n    Fp,\n    Fn,\n    allowedPrivateKeyLengths: c.allowedPrivateKeyLengths,\n    allowInfinityPoint: c.allowInfinityPoint,\n    endo: c.endo,\n    wrapPrivateKey: c.wrapPrivateKey,\n    isTorsionFree: c.isTorsionFree,\n    clearCofactor: c.clearCofactor,\n    fromBytes: c.fromBytes,\n    toBytes: c.toBytes,\n  };\n  return { CURVE, curveOpts };\n}\nfunction _ecdsa_legacy_opts_to_new(c: CurveType): WsComposed {\n  const { CURVE, curveOpts } = _weierstrass_legacy_opts_to_new(c);\n  const ecdsaOpts: ECDSAOpts = {\n    hash: c.hash,\n    hmac: c.hmac,\n    randomBytes: c.randomBytes,\n    lowS: c.lowS,\n    bits2int: c.bits2int,\n    bits2int_modN: c.bits2int_modN,\n  };\n  return { CURVE, curveOpts, ecdsaOpts };\n}\nfunction _weierstrass_new_output_to_legacy<T>(\n  c: CurvePointsType<T>,\n  Point: ProjConstructor<T>\n): CurvePointsRes<T> {\n  const { Fp, Fn } = Point;\n  // TODO: remove\n  function isWithinCurveOrder(num: bigint): boolean {\n    return inRange(num, _1n, Fn.ORDER);\n  }\n  const weierstrassEquation = _legacyHelperEquat(Fp, c.a, c.b);\n  const normPrivateKeyToScalar = _legacyHelperNormPriv(\n    Fn,\n    c.allowedPrivateKeyLengths,\n    c.wrapPrivateKey\n  );\n  return Object.assign(\n    {},\n    {\n      CURVE: c,\n      Point: Point,\n      ProjectivePoint: Point,\n      normPrivateKeyToScalar,\n      weierstrassEquation,\n      isWithinCurveOrder,\n    }\n  );\n}\nfunction _ecdsa_new_output_to_legacy(c: CurveType, ecdsa: ECDSA): CurveFn {\n  return Object.assign({}, ecdsa, {\n    ProjectivePoint: ecdsa.Point,\n    CURVE: c,\n  });\n}\n\n// _ecdsa_legacy\nexport function weierstrass(c: CurveType): CurveFn {\n  const { CURVE, curveOpts, ecdsaOpts } = _ecdsa_legacy_opts_to_new(c);\n  const Point = weierstrassN(CURVE, curveOpts);\n  const signs = ecdsa(Point, ecdsaOpts, curveOpts);\n  return _ecdsa_new_output_to_legacy(c, signs);\n}\n\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio<T>(\n  Fp: IField<T>,\n  Z: T\n): (u: T, v: T) => { isValid: boolean; value: T } {\n  // Generic implementation\n  const q = Fp.ORDER;\n  let l = _0n;\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n  // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n  // 2n ** c1 == 2n << (c1-1)\n  const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n  const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n  const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n  const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n  const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n  let sqrtRatio = (u: T, v: T): { isValid: boolean; value: T } => {\n    let tv1 = c6; // 1. tv1 = c6\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n    // 17. for i in (c1, c1 - 1, ..., 2):\n    for (let i = c1; i > _1n; i--) {\n      let tv5 = i - _2n; // 18.    tv5 = i - 2\n      tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n    }\n    return { isValid: isQR, value: tv3 };\n  };\n  if (Fp.ORDER % _4n === _3n) {\n    // sqrt_ratio_3mod4(u, v)\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n    sqrtRatio = (u: T, v: T) => {\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n      return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n    };\n  }\n  // No curves uses that\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n  return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU<T>(\n  Fp: IField<T>,\n  opts: {\n    A: T;\n    B: T;\n    Z: T;\n  }\n): (u: T) => { x: T; y: T } {\n  validateField(Fp);\n  const { A, B, Z } = opts;\n  if (!Fp.isValid(A) || !Fp.isValid(B) || !Fp.isValid(Z))\n    throw new Error('mapToCurveSimpleSWU: invalid opts');\n  const sqrtRatio = SWUFpSqrtRatio(Fp, Z);\n  if (!Fp.isOdd) throw new Error('Field does not have .isOdd()');\n  // Input: u, an element of F.\n  // Output: (x, y), a point on E.\n  return (u: T): { x: T; y: T } => {\n    // prettier-ignore\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, Z); // 2.  tv1 = Z * tv1\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n    tv3 = Fp.mul(tv3, B); // 6.  tv3 = B * tv3\n    tv4 = Fp.cmov(Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n    tv4 = Fp.mul(tv4, A); // 8.  tv4 = A * tv4\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n    tv5 = Fp.mul(tv6, A); // 11. tv5 = A * tv6\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n    tv5 = Fp.mul(tv6, B); // 15. tv5 = B * tv6\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n    const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n    y = Fp.mul(y, value); // 20.   y = y * y1\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n    const e1 = Fp.isOdd!(u) === Fp.isOdd!(y); // 23.  e1 = sgn0(u) == sgn0(y)\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n    const tv4_inv = FpInvertBatch(Fp, [tv4], true)[0];\n    x = Fp.mul(x, tv4_inv); // 25.   x = x / tv4\n    return { x, y };\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}