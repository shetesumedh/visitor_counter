{"ast":null,"code":"import { parseAccount } from '../../../accounts/utils/parseAccount.js';\nimport { getEip712Domain } from '../../../actions/public/getEip712Domain.js';\nimport { signTypedData as signTypedData_ } from '../../../actions/wallet/signTypedData.js';\nimport { AccountNotFoundError } from '../../../errors/account.js';\nimport { getAction } from '../../../utils/getAction.js';\nimport { wrapTypedDataSignature } from '../utils/wrapTypedDataSignature.js';\n/**\n * Signs an [EIP-712](https://eips.ethereum.org/EIPS/eip-712) typed data message via [ERC-7739 `TypedDataSign` format](https://eips.ethereum.org/EIPS/eip-7702).\n *\n * This Action is suitable to sign messages for Smart Accounts that implement (or conform to) [ERC-7739](https://eips.ethereum.org/EIPS/eip-7702) (e.g. Solady's [ERC1271.sol](https://github.com/Vectorized/solady/blob/main/src/accounts/ERC1271.sol)).\n *\n * - Docs: https://viem.sh/experimental/erc7739/signTypedData\n *\n * @param client - Client to use\n * @param parameters - {@link SignTypedDataParameters}\n * @returns The signed data. {@link SignTypedDataReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { signTypedData } from 'viem/experimental/erc7739'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const signature = await signTypedData(client, {\n *   account: '0xE8Df82fA4E10e6A12a9Dab552bceA2acd26De9bb',\n *   domain: {\n *     name: 'Ether Mail',\n *     version: '1',\n *     chainId: 1,\n *     verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n *   },\n *   types: {\n *     Person: [\n *       { name: 'name', type: 'string' },\n *       { name: 'wallet', type: 'address' },\n *     ],\n *     Mail: [\n *       { name: 'from', type: 'Person' },\n *       { name: 'to', type: 'Person' },\n *       { name: 'contents', type: 'string' },\n *     ],\n *   },\n *   primaryType: 'Mail',\n *   message: {\n *     from: {\n *       name: 'Cow',\n *       wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n *     },\n *     to: {\n *       name: 'Bob',\n *       wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n *     },\n *     contents: 'Hello, Bob!',\n *   },\n *   verifier: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n * })\n *\n * @example\n * // Account Hoisting\n * import { createWalletClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { signTypedData } from 'viem/experimental/erc7739'\n *\n * const client = createWalletClient({\n *   account: '0xE8Df82fA4E10e6A12a9Dab552bceA2acd26De9bb'\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const signature = await signTypedData(client, {\n *   domain: {\n *     name: 'Ether Mail',\n *     version: '1',\n *     chainId: 1,\n *     verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n *   },\n *   types: {\n *     Person: [\n *       { name: 'name', type: 'string' },\n *       { name: 'wallet', type: 'address' },\n *     ],\n *     Mail: [\n *       { name: 'from', type: 'Person' },\n *       { name: 'to', type: 'Person' },\n *       { name: 'contents', type: 'string' },\n *     ],\n *   },\n *   primaryType: 'Mail',\n *   message: {\n *     from: {\n *       name: 'Cow',\n *       wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n *     },\n *     to: {\n *       name: 'Bob',\n *       wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n *     },\n *     contents: 'Hello, Bob!',\n *   },\n *   verifier: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n * })\n */\nexport async function signTypedData(client, parameters) {\n  const {\n    account: account_ = client.account,\n    domain,\n    factory,\n    factoryData,\n    message,\n    primaryType,\n    types,\n    verifier\n  } = parameters;\n  if (!account_) throw new AccountNotFoundError({\n    docsPath: '/experimental/erc7739/signTypedData'\n  });\n  const account = parseAccount(account_);\n  // Retrieve account EIP712 domain.\n  const {\n    domain: verifierDomain\n  } = await (async () => {\n    if (parameters.verifierDomain) return {\n      domain: parameters.verifierDomain\n    };\n    return getAction(client, getEip712Domain, 'getEip712Domain')({\n      address: verifier,\n      factory,\n      factoryData\n    });\n  })();\n  // Sign with typed data wrapper.\n  const signature = await getAction(client, signTypedData_, 'signTypedData')({\n    account,\n    domain,\n    types: {\n      ...types,\n      TypedDataSign: [{\n        name: 'contents',\n        type: primaryType\n      }, {\n        name: 'name',\n        type: 'string'\n      }, {\n        name: 'version',\n        type: 'string'\n      }, {\n        name: 'chainId',\n        type: 'uint256'\n      }, {\n        name: 'verifyingContract',\n        type: 'address'\n      }, {\n        name: 'salt',\n        type: 'bytes32'\n      }]\n    },\n    primaryType: 'TypedDataSign',\n    message: {\n      contents: message,\n      ...verifierDomain\n    }\n  });\n  return wrapTypedDataSignature({\n    domain,\n    message,\n    primaryType,\n    signature,\n    types\n  });\n}","map":{"version":3,"names":["parseAccount","getEip712Domain","signTypedData","signTypedData_","AccountNotFoundError","getAction","wrapTypedDataSignature","client","parameters","account","account_","domain","factory","factoryData","message","primaryType","types","verifier","docsPath","verifierDomain","address","signature","TypedDataSign","name","type","contents"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/viem/experimental/erc7739/actions/signTypedData.ts"],"sourcesContent":["import type { Address, TypedData, TypedDataDomain } from 'abitype'\n\nimport type { Account } from '../../../accounts/types.js'\nimport { parseAccount } from '../../../accounts/utils/parseAccount.js'\nimport {\n  type GetEip712DomainParameters,\n  getEip712Domain,\n} from '../../../actions/public/getEip712Domain.js'\nimport { signTypedData as signTypedData_ } from '../../../actions/wallet/signTypedData.js'\nimport type { Client } from '../../../clients/createClient.js'\nimport type { Transport } from '../../../clients/transports/createTransport.js'\nimport { AccountNotFoundError } from '../../../errors/account.js'\nimport type { ErrorType } from '../../../errors/utils.js'\nimport type { GetAccountParameter } from '../../../types/account.js'\nimport type { Chain } from '../../../types/chain.js'\nimport type { Hex } from '../../../types/misc.js'\nimport type { TypedDataDefinition } from '../../../types/typedData.js'\nimport type { OneOf, RequiredBy } from '../../../types/utils.js'\nimport { getAction } from '../../../utils/getAction.js'\nimport type { GetVerifierParameter } from '../types.js'\nimport { wrapTypedDataSignature } from '../utils/wrapTypedDataSignature.js'\n\nexport type SignTypedDataParameters<\n  typedData extends TypedData | Record<string, unknown> = TypedData,\n  primaryType extends keyof typedData | 'EIP712Domain' = keyof typedData,\n  account extends Account | undefined = undefined,\n  accountOverride extends Account | undefined = undefined,\n  verifier extends Address | undefined = Address | undefined,\n  ///\n  primaryTypes = typedData extends TypedData ? keyof typedData : string,\n> = TypedDataDefinition<typedData, primaryType, primaryTypes> &\n  Pick<GetEip712DomainParameters, 'factory' | 'factoryData'> &\n  GetAccountParameter<account, accountOverride> &\n  OneOf<\n    | {\n        verifierDomain: RequiredBy<\n          TypedDataDomain,\n          'chainId' | 'name' | 'verifyingContract' | 'salt' | 'version'\n        >\n        verifier?: undefined\n      }\n    | (GetVerifierParameter<verifier> & {\n        verifierDomain?:\n          | RequiredBy<\n              TypedDataDomain,\n              'chainId' | 'name' | 'verifyingContract' | 'salt' | 'version'\n            >\n          | undefined\n      })\n  >\n\nexport type SignTypedDataReturnType = Hex\n\nexport type SignTypedDataErrorType = ErrorType\n\n/**\n * Signs an [EIP-712](https://eips.ethereum.org/EIPS/eip-712) typed data message via [ERC-7739 `TypedDataSign` format](https://eips.ethereum.org/EIPS/eip-7702).\n *\n * This Action is suitable to sign messages for Smart Accounts that implement (or conform to) [ERC-7739](https://eips.ethereum.org/EIPS/eip-7702) (e.g. Solady's [ERC1271.sol](https://github.com/Vectorized/solady/blob/main/src/accounts/ERC1271.sol)).\n *\n * - Docs: https://viem.sh/experimental/erc7739/signTypedData\n *\n * @param client - Client to use\n * @param parameters - {@link SignTypedDataParameters}\n * @returns The signed data. {@link SignTypedDataReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { signTypedData } from 'viem/experimental/erc7739'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const signature = await signTypedData(client, {\n *   account: '0xE8Df82fA4E10e6A12a9Dab552bceA2acd26De9bb',\n *   domain: {\n *     name: 'Ether Mail',\n *     version: '1',\n *     chainId: 1,\n *     verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n *   },\n *   types: {\n *     Person: [\n *       { name: 'name', type: 'string' },\n *       { name: 'wallet', type: 'address' },\n *     ],\n *     Mail: [\n *       { name: 'from', type: 'Person' },\n *       { name: 'to', type: 'Person' },\n *       { name: 'contents', type: 'string' },\n *     ],\n *   },\n *   primaryType: 'Mail',\n *   message: {\n *     from: {\n *       name: 'Cow',\n *       wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n *     },\n *     to: {\n *       name: 'Bob',\n *       wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n *     },\n *     contents: 'Hello, Bob!',\n *   },\n *   verifier: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n * })\n *\n * @example\n * // Account Hoisting\n * import { createWalletClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { signTypedData } from 'viem/experimental/erc7739'\n *\n * const client = createWalletClient({\n *   account: '0xE8Df82fA4E10e6A12a9Dab552bceA2acd26De9bb'\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const signature = await signTypedData(client, {\n *   domain: {\n *     name: 'Ether Mail',\n *     version: '1',\n *     chainId: 1,\n *     verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n *   },\n *   types: {\n *     Person: [\n *       { name: 'name', type: 'string' },\n *       { name: 'wallet', type: 'address' },\n *     ],\n *     Mail: [\n *       { name: 'from', type: 'Person' },\n *       { name: 'to', type: 'Person' },\n *       { name: 'contents', type: 'string' },\n *     ],\n *   },\n *   primaryType: 'Mail',\n *   message: {\n *     from: {\n *       name: 'Cow',\n *       wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n *     },\n *     to: {\n *       name: 'Bob',\n *       wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n *     },\n *     contents: 'Hello, Bob!',\n *   },\n *   verifier: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n * })\n */\nexport async function signTypedData<\n  const typedData extends TypedData | Record<string, unknown>,\n  primaryType extends keyof typedData | 'EIP712Domain',\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n  accountOverride extends Account | undefined = undefined,\n>(\n  client: Client<Transport, chain, account>,\n  parameters: SignTypedDataParameters<\n    typedData,\n    primaryType,\n    account,\n    accountOverride\n  >,\n): Promise<SignTypedDataReturnType> {\n  const {\n    account: account_ = client.account,\n    domain,\n    factory,\n    factoryData,\n    message,\n    primaryType,\n    types,\n    verifier,\n  } = parameters as unknown as SignTypedDataParameters\n\n  if (!account_)\n    throw new AccountNotFoundError({\n      docsPath: '/experimental/erc7739/signTypedData',\n    })\n  const account = parseAccount(account_!)\n\n  // Retrieve account EIP712 domain.\n  const { domain: verifierDomain } = await (async () => {\n    if (parameters.verifierDomain)\n      return {\n        domain: parameters.verifierDomain,\n      }\n    return getAction(\n      client,\n      getEip712Domain,\n      'getEip712Domain',\n    )({\n      address: verifier!,\n      factory,\n      factoryData,\n    })\n  })()\n\n  // Sign with typed data wrapper.\n  const signature = await getAction(\n    client,\n    signTypedData_,\n    'signTypedData',\n  )({\n    account,\n    domain,\n    types: {\n      ...types,\n      TypedDataSign: [\n        { name: 'contents', type: primaryType },\n        { name: 'name', type: 'string' },\n        { name: 'version', type: 'string' },\n        { name: 'chainId', type: 'uint256' },\n        { name: 'verifyingContract', type: 'address' },\n        { name: 'salt', type: 'bytes32' },\n      ],\n    },\n    primaryType: 'TypedDataSign',\n    message: {\n      contents: message as any,\n      ...(verifierDomain as any),\n    },\n  })\n\n  return wrapTypedDataSignature({\n    domain,\n    message,\n    primaryType,\n    signature,\n    types,\n  })\n}\n"],"mappings":"AAGA,SAASA,YAAY,QAAQ,yCAAyC;AACtE,SAEEC,eAAe,QACV,4CAA4C;AACnD,SAASC,aAAa,IAAIC,cAAc,QAAQ,0CAA0C;AAG1F,SAASC,oBAAoB,QAAQ,4BAA4B;AAOjE,SAASC,SAAS,QAAQ,6BAA6B;AAEvD,SAASC,sBAAsB,QAAQ,oCAAoC;AAmC3E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmGA,OAAO,eAAeJ,aAAaA,CAOjCK,MAAyC,EACzCC,UAKC;EAED,MAAM;IACJC,OAAO,EAAEC,QAAQ,GAAGH,MAAM,CAACE,OAAO;IAClCE,MAAM;IACNC,OAAO;IACPC,WAAW;IACXC,OAAO;IACPC,WAAW;IACXC,KAAK;IACLC;EAAQ,CACT,GAAGT,UAAgD;EAEpD,IAAI,CAACE,QAAQ,EACX,MAAM,IAAIN,oBAAoB,CAAC;IAC7Bc,QAAQ,EAAE;GACX,CAAC;EACJ,MAAMT,OAAO,GAAGT,YAAY,CAACU,QAAS,CAAC;EAEvC;EACA,MAAM;IAAEC,MAAM,EAAEQ;EAAc,CAAE,GAAG,MAAM,CAAC,YAAW;IACnD,IAAIX,UAAU,CAACW,cAAc,EAC3B,OAAO;MACLR,MAAM,EAAEH,UAAU,CAACW;KACpB;IACH,OAAOd,SAAS,CACdE,MAAM,EACNN,eAAe,EACf,iBAAiB,CAClB,CAAC;MACAmB,OAAO,EAAEH,QAAS;MAClBL,OAAO;MACPC;KACD,CAAC;EACJ,CAAC,EAAC,CAAE;EAEJ;EACA,MAAMQ,SAAS,GAAG,MAAMhB,SAAS,CAC/BE,MAAM,EACNJ,cAAc,EACd,eAAe,CAChB,CAAC;IACAM,OAAO;IACPE,MAAM;IACNK,KAAK,EAAE;MACL,GAAGA,KAAK;MACRM,aAAa,EAAE,CACb;QAAEC,IAAI,EAAE,UAAU;QAAEC,IAAI,EAAET;MAAW,CAAE,EACvC;QAAEQ,IAAI,EAAE,MAAM;QAAEC,IAAI,EAAE;MAAQ,CAAE,EAChC;QAAED,IAAI,EAAE,SAAS;QAAEC,IAAI,EAAE;MAAQ,CAAE,EACnC;QAAED,IAAI,EAAE,SAAS;QAAEC,IAAI,EAAE;MAAS,CAAE,EACpC;QAAED,IAAI,EAAE,mBAAmB;QAAEC,IAAI,EAAE;MAAS,CAAE,EAC9C;QAAED,IAAI,EAAE,MAAM;QAAEC,IAAI,EAAE;MAAS,CAAE;KAEpC;IACDT,WAAW,EAAE,eAAe;IAC5BD,OAAO,EAAE;MACPW,QAAQ,EAAEX,OAAc;MACxB,GAAIK;;GAEP,CAAC;EAEF,OAAOb,sBAAsB,CAAC;IAC5BK,MAAM;IACNG,OAAO;IACPC,WAAW;IACXM,SAAS;IACTL;GACD,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}