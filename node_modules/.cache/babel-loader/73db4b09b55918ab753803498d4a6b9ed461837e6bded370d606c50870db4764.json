{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fromRpc = fromRpc;\nexports.toRpc = toRpc;\nconst Hex = require(\"./Hex.js\");\nfunction fromRpc(withdrawal) {\n  return {\n    ...withdrawal,\n    amount: BigInt(withdrawal.amount),\n    index: Number(withdrawal.index),\n    validatorIndex: Number(withdrawal.validatorIndex)\n  };\n}\nfunction toRpc(withdrawal) {\n  return {\n    address: withdrawal.address,\n    amount: Hex.fromNumber(withdrawal.amount),\n    index: Hex.fromNumber(withdrawal.index),\n    validatorIndex: Hex.fromNumber(withdrawal.validatorIndex)\n  };\n}","map":{"version":3,"names":["exports","fromRpc","toRpc","Hex","require","withdrawal","amount","BigInt","index","Number","validatorIndex","address","fromNumber"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/viem/node_modules/ox/core/Withdrawal.ts"],"sourcesContent":["import type * as Errors from './Errors.js'\nimport * as Hex from './Hex.js'\n\n/** A Withdrawal as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/main/src/schemas/withdrawal.yaml). */\nexport type Withdrawal<bigintType = bigint, numberType = number> = {\n  address: Hex.Hex\n  amount: bigintType\n  index: numberType\n  validatorIndex: numberType\n}\n\n/** An RPC Withdrawal as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/main/src/schemas/withdrawal.yaml). */\nexport type Rpc = Withdrawal<Hex.Hex, Hex.Hex>\n\n/**\n * Converts a {@link ox#Withdrawal.Rpc} to an {@link ox#Withdrawal.Withdrawal}.\n *\n * @example\n * ```ts twoslash\n * import { Withdrawal } from 'ox'\n *\n * const withdrawal = Withdrawal.fromRpc({\n *   address: '0x00000000219ab540356cBB839Cbe05303d7705Fa',\n *   amount: '0x620323',\n *   index: '0x0',\n *   validatorIndex: '0x1',\n * })\n * // @log: {\n * // @log:   address: '0x00000000219ab540356cBB839Cbe05303d7705Fa',\n * // @log:   amount: 6423331n,\n * // @log:   index: 0,\n * // @log:   validatorIndex: 1\n * // @log: }\n * ```\n *\n * @param withdrawal - The RPC withdrawal to convert.\n * @returns An instantiated {@link ox#Withdrawal.Withdrawal}.\n */\nexport function fromRpc(withdrawal: Rpc): Withdrawal {\n  return {\n    ...withdrawal,\n    amount: BigInt(withdrawal.amount),\n    index: Number(withdrawal.index),\n    validatorIndex: Number(withdrawal.validatorIndex),\n  }\n}\n\nexport declare namespace fromRpc {\n  export type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Converts a {@link ox#Withdrawal.Withdrawal} to an {@link ox#Withdrawal.Rpc}.\n *\n * @example\n * ```ts twoslash\n * import { Withdrawal } from 'ox'\n *\n * const withdrawal = Withdrawal.toRpc({\n *   address: '0x00000000219ab540356cBB839Cbe05303d7705Fa',\n *   amount: 6423331n,\n *   index: 0,\n *   validatorIndex: 1,\n * })\n * // @log: {\n * // @log:   address: '0x00000000219ab540356cBB839Cbe05303d7705Fa',\n * // @log:   amount: '0x620323',\n * // @log:   index: '0x0',\n * // @log:   validatorIndex: '0x1',\n * // @log: }\n * ```\n *\n * @param withdrawal - The Withdrawal to convert.\n * @returns An RPC Withdrawal.\n */\nexport function toRpc(withdrawal: Withdrawal): Rpc {\n  return {\n    address: withdrawal.address,\n    amount: Hex.fromNumber(withdrawal.amount),\n    index: Hex.fromNumber(withdrawal.index),\n    validatorIndex: Hex.fromNumber(withdrawal.validatorIndex),\n  }\n}\n\nexport declare namespace toRpc {\n  export type ErrorType = Errors.GlobalErrorType\n}\n"],"mappings":";;;;;AAsCAA,OAAA,CAAAC,OAAA,GAAAA,OAAA;AAqCAD,OAAA,CAAAE,KAAA,GAAAA,KAAA;AA1EA,MAAAC,GAAA,GAAAC,OAAA;AAqCA,SAAgBH,OAAOA,CAACI,UAAe;EACrC,OAAO;IACL,GAAGA,UAAU;IACbC,MAAM,EAAEC,MAAM,CAACF,UAAU,CAACC,MAAM,CAAC;IACjCE,KAAK,EAAEC,MAAM,CAACJ,UAAU,CAACG,KAAK,CAAC;IAC/BE,cAAc,EAAED,MAAM,CAACJ,UAAU,CAACK,cAAc;GACjD;AACH;AA8BA,SAAgBR,KAAKA,CAACG,UAAsB;EAC1C,OAAO;IACLM,OAAO,EAAEN,UAAU,CAACM,OAAO;IAC3BL,MAAM,EAAEH,GAAG,CAACS,UAAU,CAACP,UAAU,CAACC,MAAM,CAAC;IACzCE,KAAK,EAAEL,GAAG,CAACS,UAAU,CAACP,UAAU,CAACG,KAAK,CAAC;IACvCE,cAAc,EAAEP,GAAG,CAACS,UAAU,CAACP,UAAU,CAACK,cAAc;GACzD;AACH","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}