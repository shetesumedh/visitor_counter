{"ast":null,"code":"import * as Hex from './Hex.js';\n/**\n * Converts a {@link ox#Filter.Rpc} to an {@link ox#Filter.Filter}.\n *\n * @example\n * ```ts twoslash\n * import { Filter } from 'ox'\n *\n * const filter = Filter.fromRpc({\n *   address: '0xd3cda913deb6f67967b99d671a681250403edf27',\n *   fromBlock: 'latest',\n *   toBlock: '0x010f2c',\n *   topics: [\n *     '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n *     null,\n *     '0x0000000000000000000000000c04d9e9278ec5e4d424476d3ebec70cb5d648d1',\n *   ],\n * })\n * // @log: {\n * // @log:   address: '0xd3cda913deb6f67967b99d671a681250403edf27',\n * // @log:   fromBlock: 'latest',\n * // @log:   toBlock: 69420n,\n * // @log:   topics: [\n * // @log:     '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n * // @log:     null,\n * // @log:     '0x0000000000000000000000000c04d9e9278ec5e4d424476d3ebec70cb5d648d1',\n * // @log:   ],\n * // @log: }\n * ```\n *\n * @param filter - The RPC filter to convert.\n * @returns An instantiated {@link ox#Filter.Filter}.\n */\nexport function fromRpc(filter) {\n  const {\n    fromBlock,\n    toBlock\n  } = filter;\n  return {\n    ...filter,\n    ...(fromBlock && {\n      fromBlock: Hex.validate(fromBlock, {\n        strict: false\n      }) ? BigInt(fromBlock) : fromBlock\n    }),\n    ...(toBlock && {\n      toBlock: Hex.validate(toBlock, {\n        strict: false\n      }) ? BigInt(toBlock) : toBlock\n    })\n  };\n}\n/**\n * Converts a {@link ox#Filter.Filter} to a {@link ox#Filter.Rpc}.\n *\n * @example\n * ```ts twoslash\n * import { AbiEvent, Filter } from 'ox'\n *\n * const transfer = AbiEvent.from('event Transfer(address indexed, address indexed, uint256)')\n * const { topics } = AbiEvent.encode(transfer)\n *\n * const filter = Filter.toRpc({\n *   address: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',\n *   topics,\n * })\n * // @log: {\n * // @log:   address: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',\n * // @log:   topics: [\n * // @log:     '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n * // @log:   ],\n * // @log: }\n * ```\n *\n * @param filter - The filter to convert.\n * @returns An RPC filter.\n */\nexport function toRpc(filter) {\n  const {\n    address,\n    topics,\n    fromBlock,\n    toBlock\n  } = filter;\n  return {\n    ...(address && {\n      address\n    }),\n    ...(topics && {\n      topics\n    }),\n    ...(typeof fromBlock !== 'undefined' ? {\n      fromBlock: typeof fromBlock === 'bigint' ? Hex.fromNumber(fromBlock) : fromBlock\n    } : {}),\n    ...(typeof toBlock !== 'undefined' ? {\n      toBlock: typeof toBlock === 'bigint' ? Hex.fromNumber(toBlock) : toBlock\n    } : {})\n  };\n}","map":{"version":3,"names":["Hex","fromRpc","filter","fromBlock","toBlock","validate","strict","BigInt","toRpc","address","topics","fromNumber"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/ox/core/Filter.ts"],"sourcesContent":["import type * as Address from './Address.js'\nimport type * as Block from './Block.js'\nimport type * as Errors from './Errors.js'\nimport * as Hex from './Hex.js'\nimport type { Compute } from './internal/types.js'\n\n/** A Filter as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/main/src/schemas/filter.yaml). */\nexport type Filter<bigintType = bigint> = Compute<{\n  /** Address to filter for logs. */\n  address?: Address.Address | readonly Address.Address[] | null | undefined\n  /** Block number or tag to filter logs from. */\n  fromBlock?: Block.Number<bigintType> | Block.Tag | undefined\n  /** Block number or tag to filter logs to. */\n  toBlock?: Block.Number<bigintType> | Block.Tag | undefined\n  /** Topics to filter for logs. */\n  topics?: Topics | undefined\n}>\n\n/** RPC representation of a {@link ox#Filter.Filter}. */\nexport type Rpc = Filter<Hex.Hex>\n\n/** Set of Filter topics. */\nexport type Topics = readonly Topic[]\n\n/**\n * A filter topic.\n *\n * - `null`: Matches any topic.\n * - `Hex`: Matches if the topic is equal.\n * - `Hex[]`: Matches if the topic is in the array.\n */\nexport type Topic = Hex.Hex | readonly Hex.Hex[] | null\n\n/**\n * Converts a {@link ox#Filter.Rpc} to an {@link ox#Filter.Filter}.\n *\n * @example\n * ```ts twoslash\n * import { Filter } from 'ox'\n *\n * const filter = Filter.fromRpc({\n *   address: '0xd3cda913deb6f67967b99d671a681250403edf27',\n *   fromBlock: 'latest',\n *   toBlock: '0x010f2c',\n *   topics: [\n *     '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n *     null,\n *     '0x0000000000000000000000000c04d9e9278ec5e4d424476d3ebec70cb5d648d1',\n *   ],\n * })\n * // @log: {\n * // @log:   address: '0xd3cda913deb6f67967b99d671a681250403edf27',\n * // @log:   fromBlock: 'latest',\n * // @log:   toBlock: 69420n,\n * // @log:   topics: [\n * // @log:     '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n * // @log:     null,\n * // @log:     '0x0000000000000000000000000c04d9e9278ec5e4d424476d3ebec70cb5d648d1',\n * // @log:   ],\n * // @log: }\n * ```\n *\n * @param filter - The RPC filter to convert.\n * @returns An instantiated {@link ox#Filter.Filter}.\n */\nexport function fromRpc(filter: Rpc): Filter {\n  const { fromBlock, toBlock } = filter\n  return {\n    ...filter,\n    ...(fromBlock && {\n      fromBlock: Hex.validate(fromBlock, { strict: false })\n        ? BigInt(fromBlock)\n        : fromBlock,\n    }),\n    ...(toBlock && {\n      toBlock: Hex.validate(toBlock, { strict: false })\n        ? BigInt(toBlock)\n        : toBlock,\n    }),\n  } as Filter\n}\n\nexport declare namespace fromRpc {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Converts a {@link ox#Filter.Filter} to a {@link ox#Filter.Rpc}.\n *\n * @example\n * ```ts twoslash\n * import { AbiEvent, Filter } from 'ox'\n *\n * const transfer = AbiEvent.from('event Transfer(address indexed, address indexed, uint256)')\n * const { topics } = AbiEvent.encode(transfer)\n *\n * const filter = Filter.toRpc({\n *   address: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',\n *   topics,\n * })\n * // @log: {\n * // @log:   address: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',\n * // @log:   topics: [\n * // @log:     '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n * // @log:   ],\n * // @log: }\n * ```\n *\n * @param filter - The filter to convert.\n * @returns An RPC filter.\n */\nexport function toRpc(filter: Filter): Rpc {\n  const { address, topics, fromBlock, toBlock } = filter\n  return {\n    ...(address && { address }),\n    ...(topics && { topics }),\n    ...(typeof fromBlock !== 'undefined'\n      ? {\n          fromBlock:\n            typeof fromBlock === 'bigint'\n              ? Hex.fromNumber(fromBlock)\n              : fromBlock,\n        }\n      : {}),\n    ...(typeof toBlock !== 'undefined'\n      ? {\n          toBlock:\n            typeof toBlock === 'bigint' ? Hex.fromNumber(toBlock) : toBlock,\n        }\n      : {}),\n  }\n}\n\nexport declare namespace toRpc {\n  type ErrorType = Errors.GlobalErrorType\n}\n"],"mappings":"AAGA,OAAO,KAAKA,GAAG,MAAM,UAAU;AA8B/B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA,OAAM,SAAUC,OAAOA,CAACC,MAAW;EACjC,MAAM;IAAEC,SAAS;IAAEC;EAAO,CAAE,GAAGF,MAAM;EACrC,OAAO;IACL,GAAGA,MAAM;IACT,IAAIC,SAAS,IAAI;MACfA,SAAS,EAAEH,GAAG,CAACK,QAAQ,CAACF,SAAS,EAAE;QAAEG,MAAM,EAAE;MAAK,CAAE,CAAC,GACjDC,MAAM,CAACJ,SAAS,CAAC,GACjBA;KACL,CAAC;IACF,IAAIC,OAAO,IAAI;MACbA,OAAO,EAAEJ,GAAG,CAACK,QAAQ,CAACD,OAAO,EAAE;QAAEE,MAAM,EAAE;MAAK,CAAE,CAAC,GAC7CC,MAAM,CAACH,OAAO,CAAC,GACfA;KACL;GACQ;AACb;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,OAAM,SAAUI,KAAKA,CAACN,MAAc;EAClC,MAAM;IAAEO,OAAO;IAAEC,MAAM;IAAEP,SAAS;IAAEC;EAAO,CAAE,GAAGF,MAAM;EACtD,OAAO;IACL,IAAIO,OAAO,IAAI;MAAEA;IAAO,CAAE,CAAC;IAC3B,IAAIC,MAAM,IAAI;MAAEA;IAAM,CAAE,CAAC;IACzB,IAAI,OAAOP,SAAS,KAAK,WAAW,GAChC;MACEA,SAAS,EACP,OAAOA,SAAS,KAAK,QAAQ,GACzBH,GAAG,CAACW,UAAU,CAACR,SAAS,CAAC,GACzBA;KACP,GACD,EAAE,CAAC;IACP,IAAI,OAAOC,OAAO,KAAK,WAAW,GAC9B;MACEA,OAAO,EACL,OAAOA,OAAO,KAAK,QAAQ,GAAGJ,GAAG,CAACW,UAAU,CAACP,OAAO,CAAC,GAAGA;KAC3D,GACD,EAAE;GACP;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}