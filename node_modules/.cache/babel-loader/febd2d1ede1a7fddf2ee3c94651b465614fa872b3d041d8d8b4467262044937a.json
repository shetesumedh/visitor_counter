{"ast":null,"code":"import { encodeAbiParameters } from '../../../utils/abi/encodeAbiParameters.js';\nimport { keccak256 } from '../../../utils/hash/keccak256.js';\nimport { hashTypedData } from '../../../utils/signature/hashTypedData.js';\nimport { getInitCode } from './getInitCode.js';\nimport { getUserOperationTypedData } from './getUserOperationTypedData.js';\nimport { toPackedUserOperation } from './toPackedUserOperation.js';\nexport function getUserOperationHash(parameters) {\n  const {\n    chainId,\n    entryPointAddress,\n    entryPointVersion\n  } = parameters;\n  const userOperation = parameters.userOperation;\n  const {\n    authorization,\n    callData = '0x',\n    callGasLimit,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n    paymasterAndData = '0x',\n    preVerificationGas,\n    sender,\n    verificationGasLimit\n  } = userOperation;\n  if (entryPointVersion === '0.8') return hashTypedData(getUserOperationTypedData({\n    chainId,\n    entryPointAddress,\n    userOperation\n  }));\n  const packedUserOp = (() => {\n    if (entryPointVersion === '0.6') {\n      const factory = userOperation.initCode?.slice(0, 42);\n      const factoryData = userOperation.initCode?.slice(42);\n      const initCode = getInitCode({\n        authorization,\n        factory,\n        factoryData\n      });\n      return encodeAbiParameters([{\n        type: 'address'\n      }, {\n        type: 'uint256'\n      }, {\n        type: 'bytes32'\n      }, {\n        type: 'bytes32'\n      }, {\n        type: 'uint256'\n      }, {\n        type: 'uint256'\n      }, {\n        type: 'uint256'\n      }, {\n        type: 'uint256'\n      }, {\n        type: 'uint256'\n      }, {\n        type: 'bytes32'\n      }], [sender, nonce, keccak256(initCode), keccak256(callData), callGasLimit, verificationGasLimit, preVerificationGas, maxFeePerGas, maxPriorityFeePerGas, keccak256(paymasterAndData)]);\n    }\n    if (entryPointVersion === '0.7') {\n      const packedUserOp = toPackedUserOperation(userOperation);\n      return encodeAbiParameters([{\n        type: 'address'\n      }, {\n        type: 'uint256'\n      }, {\n        type: 'bytes32'\n      }, {\n        type: 'bytes32'\n      }, {\n        type: 'bytes32'\n      }, {\n        type: 'uint256'\n      }, {\n        type: 'bytes32'\n      }, {\n        type: 'bytes32'\n      }], [packedUserOp.sender, packedUserOp.nonce, keccak256(packedUserOp.initCode), keccak256(packedUserOp.callData), packedUserOp.accountGasLimits, packedUserOp.preVerificationGas, packedUserOp.gasFees, keccak256(packedUserOp.paymasterAndData)]);\n    }\n    throw new Error(`entryPointVersion \"${entryPointVersion}\" not supported.`);\n  })();\n  return keccak256(encodeAbiParameters([{\n    type: 'bytes32'\n  }, {\n    type: 'address'\n  }, {\n    type: 'uint256'\n  }], [keccak256(packedUserOp), entryPointAddress, BigInt(chainId)]));\n}","map":{"version":3,"names":["encodeAbiParameters","keccak256","hashTypedData","getInitCode","getUserOperationTypedData","toPackedUserOperation","getUserOperationHash","parameters","chainId","entryPointAddress","entryPointVersion","userOperation","authorization","callData","callGasLimit","maxFeePerGas","maxPriorityFeePerGas","nonce","paymasterAndData","preVerificationGas","sender","verificationGasLimit","packedUserOp","factory","initCode","slice","factoryData","type","accountGasLimits","gasFees","Error","BigInt"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/viem/account-abstraction/utils/userOperation/getUserOperationHash.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport type { Hash, Hex } from '../../../types/misc.js'\nimport { encodeAbiParameters } from '../../../utils/abi/encodeAbiParameters.js'\nimport { keccak256 } from '../../../utils/hash/keccak256.js'\nimport { hashTypedData } from '../../../utils/signature/hashTypedData.js'\nimport type { EntryPointVersion } from '../../types/entryPointVersion.js'\nimport type { UserOperation } from '../../types/userOperation.js'\nimport { getInitCode } from './getInitCode.js'\nimport { getUserOperationTypedData } from './getUserOperationTypedData.js'\nimport { toPackedUserOperation } from './toPackedUserOperation.js'\n\nexport type GetUserOperationHashParameters<\n  entryPointVersion extends EntryPointVersion = EntryPointVersion,\n> = {\n  chainId: number\n  entryPointAddress: Address\n  entryPointVersion: entryPointVersion | EntryPointVersion\n  userOperation: UserOperation<entryPointVersion>\n}\n\nexport type GetUserOperationHashReturnType = Hash\n\nexport function getUserOperationHash<\n  entryPointVersion extends EntryPointVersion,\n>(\n  parameters: GetUserOperationHashParameters<entryPointVersion>,\n): GetUserOperationHashReturnType {\n  const { chainId, entryPointAddress, entryPointVersion } = parameters\n  const userOperation = parameters.userOperation as UserOperation\n  const {\n    authorization,\n    callData = '0x',\n    callGasLimit,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n    paymasterAndData = '0x',\n    preVerificationGas,\n    sender,\n    verificationGasLimit,\n  } = userOperation\n\n  if (entryPointVersion === '0.8')\n    return hashTypedData(\n      getUserOperationTypedData({\n        chainId,\n        entryPointAddress,\n        userOperation,\n      }),\n    )\n\n  const packedUserOp = (() => {\n    if (entryPointVersion === '0.6') {\n      const factory = userOperation.initCode?.slice(0, 42) as Hex\n      const factoryData = userOperation.initCode?.slice(42) as Hex | undefined\n      const initCode = getInitCode({\n        authorization,\n        factory,\n        factoryData,\n      })\n      return encodeAbiParameters(\n        [\n          { type: 'address' },\n          { type: 'uint256' },\n          { type: 'bytes32' },\n          { type: 'bytes32' },\n          { type: 'uint256' },\n          { type: 'uint256' },\n          { type: 'uint256' },\n          { type: 'uint256' },\n          { type: 'uint256' },\n          { type: 'bytes32' },\n        ],\n        [\n          sender,\n          nonce,\n          keccak256(initCode),\n          keccak256(callData),\n          callGasLimit,\n          verificationGasLimit,\n          preVerificationGas,\n          maxFeePerGas,\n          maxPriorityFeePerGas,\n          keccak256(paymasterAndData),\n        ],\n      )\n    }\n\n    if (entryPointVersion === '0.7') {\n      const packedUserOp = toPackedUserOperation(userOperation)\n      return encodeAbiParameters(\n        [\n          { type: 'address' },\n          { type: 'uint256' },\n          { type: 'bytes32' },\n          { type: 'bytes32' },\n          { type: 'bytes32' },\n          { type: 'uint256' },\n          { type: 'bytes32' },\n          { type: 'bytes32' },\n        ],\n        [\n          packedUserOp.sender,\n          packedUserOp.nonce,\n          keccak256(packedUserOp.initCode),\n          keccak256(packedUserOp.callData),\n          packedUserOp.accountGasLimits,\n          packedUserOp.preVerificationGas,\n          packedUserOp.gasFees,\n          keccak256(packedUserOp.paymasterAndData),\n        ],\n      )\n    }\n\n    throw new Error(`entryPointVersion \"${entryPointVersion}\" not supported.`)\n  })()\n\n  return keccak256(\n    encodeAbiParameters(\n      [{ type: 'bytes32' }, { type: 'address' }, { type: 'uint256' }],\n      [keccak256(packedUserOp), entryPointAddress, BigInt(chainId)],\n    ),\n  )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}