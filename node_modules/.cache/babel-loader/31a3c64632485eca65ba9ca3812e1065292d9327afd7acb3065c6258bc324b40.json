{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getSerializedTransactionType = getSerializedTransactionType;\nconst transaction_js_1 = require(\"../../errors/transaction.js\");\nconst slice_js_1 = require(\"../data/slice.js\");\nconst fromHex_js_1 = require(\"../encoding/fromHex.js\");\nfunction getSerializedTransactionType(serializedTransaction) {\n  const serializedType = (0, slice_js_1.sliceHex)(serializedTransaction, 0, 1);\n  if (serializedType === '0x04') return 'eip7702';\n  if (serializedType === '0x03') return 'eip4844';\n  if (serializedType === '0x02') return 'eip1559';\n  if (serializedType === '0x01') return 'eip2930';\n  if (serializedType !== '0x' && (0, fromHex_js_1.hexToNumber)(serializedType) >= 0xc0) return 'legacy';\n  throw new transaction_js_1.InvalidSerializedTransactionTypeError({\n    serializedType\n  });\n}","map":{"version":3,"names":["exports","getSerializedTransactionType","transaction_js_1","require","slice_js_1","fromHex_js_1","serializedTransaction","serializedType","sliceHex","hexToNumber","InvalidSerializedTransactionTypeError"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/viem/utils/transaction/getSerializedTransactionType.ts"],"sourcesContent":["import {\n  InvalidSerializedTransactionTypeError,\n  type InvalidSerializedTransactionTypeErrorType,\n} from '../../errors/transaction.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hex } from '../../index.js'\nimport type {\n  TransactionSerialized,\n  TransactionSerializedEIP1559,\n  TransactionSerializedEIP2930,\n  TransactionSerializedEIP4844,\n  TransactionSerializedEIP7702,\n  TransactionSerializedGeneric,\n  TransactionSerializedLegacy,\n  TransactionType,\n} from '../../types/transaction.js'\nimport type { IsNarrowable, IsNever } from '../../types/utils.js'\nimport { type SliceHexErrorType, sliceHex } from '../data/slice.js'\nimport { type HexToNumberErrorType, hexToNumber } from '../encoding/fromHex.js'\n\nexport type GetSerializedTransactionType<\n  serializedTransaction extends\n    TransactionSerializedGeneric = TransactionSerialized,\n  result =\n    | (serializedTransaction extends TransactionSerializedEIP1559\n        ? 'eip1559'\n        : never)\n    | (serializedTransaction extends TransactionSerializedEIP2930\n        ? 'eip2930'\n        : never)\n    | (serializedTransaction extends TransactionSerializedEIP4844\n        ? 'eip4844'\n        : never)\n    | (serializedTransaction extends TransactionSerializedEIP7702\n        ? 'eip7702'\n        : never)\n    | (serializedTransaction extends TransactionSerializedLegacy\n        ? 'legacy'\n        : never),\n> = IsNarrowable<serializedTransaction, Hex> extends true\n  ? IsNever<result> extends false\n    ? result\n    : 'legacy'\n  : TransactionType\n\nexport type GetSerializedTransactionTypeErrorType =\n  | HexToNumberErrorType\n  | InvalidSerializedTransactionTypeErrorType\n  | SliceHexErrorType\n  | ErrorType\n\nexport function getSerializedTransactionType<\n  const serializedTransaction extends TransactionSerializedGeneric,\n>(\n  serializedTransaction: serializedTransaction,\n): GetSerializedTransactionType<serializedTransaction> {\n  const serializedType = sliceHex(serializedTransaction, 0, 1)\n\n  if (serializedType === '0x04')\n    return 'eip7702' as GetSerializedTransactionType<serializedTransaction>\n\n  if (serializedType === '0x03')\n    return 'eip4844' as GetSerializedTransactionType<serializedTransaction>\n\n  if (serializedType === '0x02')\n    return 'eip1559' as GetSerializedTransactionType<serializedTransaction>\n\n  if (serializedType === '0x01')\n    return 'eip2930' as GetSerializedTransactionType<serializedTransaction>\n\n  if (serializedType !== '0x' && hexToNumber(serializedType) >= 0xc0)\n    return 'legacy' as GetSerializedTransactionType<serializedTransaction>\n\n  throw new InvalidSerializedTransactionTypeError({ serializedType })\n}\n"],"mappings":";;;;;AAmDAA,OAAA,CAAAC,4BAAA,GAAAA,4BAAA;AAnDA,MAAAC,gBAAA,GAAAC,OAAA;AAiBA,MAAAC,UAAA,GAAAD,OAAA;AACA,MAAAE,YAAA,GAAAF,OAAA;AAiCA,SAAgBF,4BAA4BA,CAG1CK,qBAA4C;EAE5C,MAAMC,cAAc,GAAG,IAAAH,UAAA,CAAAI,QAAQ,EAACF,qBAAqB,EAAE,CAAC,EAAE,CAAC,CAAC;EAE5D,IAAIC,cAAc,KAAK,MAAM,EAC3B,OAAO,SAAgE;EAEzE,IAAIA,cAAc,KAAK,MAAM,EAC3B,OAAO,SAAgE;EAEzE,IAAIA,cAAc,KAAK,MAAM,EAC3B,OAAO,SAAgE;EAEzE,IAAIA,cAAc,KAAK,MAAM,EAC3B,OAAO,SAAgE;EAEzE,IAAIA,cAAc,KAAK,IAAI,IAAI,IAAAF,YAAA,CAAAI,WAAW,EAACF,cAAc,CAAC,IAAI,IAAI,EAChE,OAAO,QAA+D;EAExE,MAAM,IAAIL,gBAAA,CAAAQ,qCAAqC,CAAC;IAAEH;EAAc,CAAE,CAAC;AACrE","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}