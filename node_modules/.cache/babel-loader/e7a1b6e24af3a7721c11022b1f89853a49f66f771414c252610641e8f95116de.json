{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.packetToBytes = packetToBytes;\nconst toBytes_js_1 = require(\"../encoding/toBytes.js\");\nconst encodeLabelhash_js_1 = require(\"./encodeLabelhash.js\");\nconst labelhash_js_1 = require(\"./labelhash.js\");\nfunction packetToBytes(packet) {\n  const value = packet.replace(/^\\.|\\.$/gm, '');\n  if (value.length === 0) return new Uint8Array(1);\n  const bytes = new Uint8Array((0, toBytes_js_1.stringToBytes)(value).byteLength + 2);\n  let offset = 0;\n  const list = value.split('.');\n  for (let i = 0; i < list.length; i++) {\n    let encoded = (0, toBytes_js_1.stringToBytes)(list[i]);\n    if (encoded.byteLength > 255) encoded = (0, toBytes_js_1.stringToBytes)((0, encodeLabelhash_js_1.encodeLabelhash)((0, labelhash_js_1.labelhash)(list[i])));\n    bytes[offset] = encoded.length;\n    bytes.set(encoded, offset + 1);\n    offset += encoded.length + 1;\n  }\n  if (bytes.byteLength !== offset + 1) return bytes.slice(0, offset + 1);\n  return bytes;\n}","map":{"version":3,"names":["exports","packetToBytes","toBytes_js_1","require","encodeLabelhash_js_1","labelhash_js_1","packet","value","replace","length","Uint8Array","bytes","stringToBytes","byteLength","offset","list","split","i","encoded","encodeLabelhash","labelhash","set","slice"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/viem/utils/ens/packetToBytes.ts"],"sourcesContent":["// Adapted from https://github.com/mafintosh/dns-packet\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray } from '../../types/misc.js'\nimport {\n  type StringToBytesErrorType,\n  stringToBytes,\n} from '../encoding/toBytes.js'\nimport {\n  type EncodeLabelhashErrorType,\n  encodeLabelhash,\n} from './encodeLabelhash.js'\nimport { type LabelhashErrorType, labelhash } from './labelhash.js'\n\nexport type PacketToBytesErrorType =\n  | EncodeLabelhashErrorType\n  | LabelhashErrorType\n  | StringToBytesErrorType\n  | ErrorType\n\n/*\n * @description Encodes a DNS packet into a ByteArray containing a UDP payload.\n *\n * @example\n * packetToBytes('awkweb.eth')\n * '0x0661776b7765620365746800'\n *\n * @see https://docs.ens.domains/resolution/names#dns\n *\n */\nexport function packetToBytes(packet: string): ByteArray {\n  // strip leading and trailing `.`\n  const value = packet.replace(/^\\.|\\.$/gm, '')\n  if (value.length === 0) return new Uint8Array(1)\n\n  const bytes = new Uint8Array(stringToBytes(value).byteLength + 2)\n\n  let offset = 0\n  const list = value.split('.')\n  for (let i = 0; i < list.length; i++) {\n    let encoded = stringToBytes(list[i])\n    // if the length is > 255, make the encoded label value a labelhash\n    // this is compatible with the universal resolver\n    if (encoded.byteLength > 255)\n      encoded = stringToBytes(encodeLabelhash(labelhash(list[i])))\n    bytes[offset] = encoded.length\n    bytes.set(encoded, offset + 1)\n    offset += encoded.length + 1\n  }\n\n  if (bytes.byteLength !== offset + 1) return bytes.slice(0, offset + 1)\n\n  return bytes\n}\n"],"mappings":";;;;;AA6BAA,OAAA,CAAAC,aAAA,GAAAA,aAAA;AA1BA,MAAAC,YAAA,GAAAC,OAAA;AAIA,MAAAC,oBAAA,GAAAD,OAAA;AAIA,MAAAE,cAAA,GAAAF,OAAA;AAkBA,SAAgBF,aAAaA,CAACK,MAAc;EAE1C,MAAMC,KAAK,GAAGD,MAAM,CAACE,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC;EAC7C,IAAID,KAAK,CAACE,MAAM,KAAK,CAAC,EAAE,OAAO,IAAIC,UAAU,CAAC,CAAC,CAAC;EAEhD,MAAMC,KAAK,GAAG,IAAID,UAAU,CAAC,IAAAR,YAAA,CAAAU,aAAa,EAACL,KAAK,CAAC,CAACM,UAAU,GAAG,CAAC,CAAC;EAEjE,IAAIC,MAAM,GAAG,CAAC;EACd,MAAMC,IAAI,GAAGR,KAAK,CAACS,KAAK,CAAC,GAAG,CAAC;EAC7B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACN,MAAM,EAAEQ,CAAC,EAAE,EAAE;IACpC,IAAIC,OAAO,GAAG,IAAAhB,YAAA,CAAAU,aAAa,EAACG,IAAI,CAACE,CAAC,CAAC,CAAC;IAGpC,IAAIC,OAAO,CAACL,UAAU,GAAG,GAAG,EAC1BK,OAAO,GAAG,IAAAhB,YAAA,CAAAU,aAAa,EAAC,IAAAR,oBAAA,CAAAe,eAAe,EAAC,IAAAd,cAAA,CAAAe,SAAS,EAACL,IAAI,CAACE,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9DN,KAAK,CAACG,MAAM,CAAC,GAAGI,OAAO,CAACT,MAAM;IAC9BE,KAAK,CAACU,GAAG,CAACH,OAAO,EAAEJ,MAAM,GAAG,CAAC,CAAC;IAC9BA,MAAM,IAAII,OAAO,CAACT,MAAM,GAAG,CAAC;EAC9B;EAEA,IAAIE,KAAK,CAACE,UAAU,KAAKC,MAAM,GAAG,CAAC,EAAE,OAAOH,KAAK,CAACW,KAAK,CAAC,CAAC,EAAER,MAAM,GAAG,CAAC,CAAC;EAEtE,OAAOH,KAAK;AACd","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}