{"ast":null,"code":"// TODO(v3): Convert to sync.\nimport { secp256k1 } from '@noble/curves/secp256k1';\nimport { numberToHex } from '../../utils/encoding/toHex.js';\nimport { serializeSignature } from '../../utils/signature/serializeSignature.js';\nlet extraEntropy = false;\n/**\n * Sets extra entropy for signing functions.\n */\nexport function setSignEntropy(entropy) {\n  if (!entropy) throw new Error('must be a `true` or a hex value.');\n  extraEntropy = entropy;\n}\n/**\n * @description Signs a hash with a given private key.\n *\n * @param hash The hash to sign.\n * @param privateKey The private key to sign with.\n *\n * @returns The signature.\n */\nexport async function sign({\n  hash,\n  privateKey,\n  to = 'object'\n}) {\n  const {\n    r,\n    s,\n    recovery\n  } = secp256k1.sign(hash.slice(2), privateKey.slice(2), {\n    lowS: true,\n    extraEntropy\n  });\n  const signature = {\n    r: numberToHex(r, {\n      size: 32\n    }),\n    s: numberToHex(s, {\n      size: 32\n    }),\n    v: recovery ? 28n : 27n,\n    yParity: recovery\n  };\n  return (() => {\n    if (to === 'bytes' || to === 'hex') return serializeSignature({\n      ...signature,\n      to\n    });\n    return signature;\n  })();\n}","map":{"version":3,"names":["secp256k1","numberToHex","serializeSignature","extraEntropy","setSignEntropy","entropy","Error","sign","hash","privateKey","to","r","s","recovery","slice","lowS","signature","size","v","yParity"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/viem/accounts/utils/sign.ts"],"sourcesContent":["// TODO(v3): Convert to sync.\n\nimport { secp256k1 } from '@noble/curves/secp256k1'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex, Signature } from '../../types/misc.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\nimport { serializeSignature } from '../../utils/signature/serializeSignature.js'\n\ntype To = 'object' | 'bytes' | 'hex'\n\nexport type SignParameters<to extends To = 'object'> = {\n  hash: Hex\n  privateKey: Hex\n  to?: to | To | undefined\n}\n\nexport type SignReturnType<to extends To = 'object'> =\n  | (to extends 'object' ? Signature : never)\n  | (to extends 'bytes' ? ByteArray : never)\n  | (to extends 'hex' ? Hex : never)\n\nexport type SignErrorType = NumberToHexErrorType | ErrorType\n\nlet extraEntropy: Hex | boolean = false\n\n/**\n * Sets extra entropy for signing functions.\n */\nexport function setSignEntropy(entropy: true | Hex) {\n  if (!entropy) throw new Error('must be a `true` or a hex value.')\n  extraEntropy = entropy\n}\n\n/**\n * @description Signs a hash with a given private key.\n *\n * @param hash The hash to sign.\n * @param privateKey The private key to sign with.\n *\n * @returns The signature.\n */\nexport async function sign<to extends To = 'object'>({\n  hash,\n  privateKey,\n  to = 'object',\n}: SignParameters<to>): Promise<SignReturnType<to>> {\n  const { r, s, recovery } = secp256k1.sign(\n    hash.slice(2),\n    privateKey.slice(2),\n    { lowS: true, extraEntropy },\n  )\n  const signature = {\n    r: numberToHex(r, { size: 32 }),\n    s: numberToHex(s, { size: 32 }),\n    v: recovery ? 28n : 27n,\n    yParity: recovery,\n  }\n  return (() => {\n    if (to === 'bytes' || to === 'hex')\n      return serializeSignature({ ...signature, to })\n    return signature\n  })() as SignReturnType<to>\n}\n"],"mappings":"AAAA;AAEA,SAASA,SAAS,QAAQ,yBAAyB;AAInD,SAEEC,WAAW,QACN,+BAA+B;AACtC,SAASC,kBAAkB,QAAQ,6CAA6C;AAiBhF,IAAIC,YAAY,GAAkB,KAAK;AAEvC;;;AAGA,OAAM,SAAUC,cAAcA,CAACC,OAAmB;EAChD,IAAI,CAACA,OAAO,EAAE,MAAM,IAAIC,KAAK,CAAC,kCAAkC,CAAC;EACjEH,YAAY,GAAGE,OAAO;AACxB;AAEA;;;;;;;;AAQA,OAAO,eAAeE,IAAIA,CAA2B;EACnDC,IAAI;EACJC,UAAU;EACVC,EAAE,GAAG;AAAQ,CACM;EACnB,MAAM;IAAEC,CAAC;IAAEC,CAAC;IAAEC;EAAQ,CAAE,GAAGb,SAAS,CAACO,IAAI,CACvCC,IAAI,CAACM,KAAK,CAAC,CAAC,CAAC,EACbL,UAAU,CAACK,KAAK,CAAC,CAAC,CAAC,EACnB;IAAEC,IAAI,EAAE,IAAI;IAAEZ;EAAY,CAAE,CAC7B;EACD,MAAMa,SAAS,GAAG;IAChBL,CAAC,EAAEV,WAAW,CAACU,CAAC,EAAE;MAAEM,IAAI,EAAE;IAAE,CAAE,CAAC;IAC/BL,CAAC,EAAEX,WAAW,CAACW,CAAC,EAAE;MAAEK,IAAI,EAAE;IAAE,CAAE,CAAC;IAC/BC,CAAC,EAAEL,QAAQ,GAAG,GAAG,GAAG,GAAG;IACvBM,OAAO,EAAEN;GACV;EACD,OAAO,CAAC,MAAK;IACX,IAAIH,EAAE,KAAK,OAAO,IAAIA,EAAE,KAAK,KAAK,EAChC,OAAOR,kBAAkB,CAAC;MAAE,GAAGc,SAAS;MAAEN;IAAE,CAAE,CAAC;IACjD,OAAOM,SAAS;EAClB,CAAC,EAAC,CAAwB;AAC5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}