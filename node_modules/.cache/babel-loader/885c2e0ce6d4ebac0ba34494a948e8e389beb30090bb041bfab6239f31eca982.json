{"ast":null,"code":"import * as Errors from './Errors.js';\nimport { getUrl } from './internal/errors.js';\nimport * as promise from './internal/promise.js';\nimport * as internal from './internal/rpcTransport.js';\n/**\n * Creates a HTTP JSON-RPC Transport from a URL.\n *\n * @example\n * ```ts twoslash\n * import { RpcTransport } from 'ox'\n *\n * const transport = RpcTransport.fromHttp('https://1.rpc.thirdweb.com')\n *\n * const blockNumber = await transport.request({ method: 'eth_blockNumber' })\n * // @log: '0x1a2b3c'\n * ```\n *\n * @param url - URL to perform the JSON-RPC requests to.\n * @param options - Transport options.\n * @returns HTTP JSON-RPC Transport.\n */\nexport function fromHttp(url, options = {}) {\n  return internal.create({\n    async request(body_, options_) {\n      const {\n        fetchFn = options.fetchFn ?? fetch,\n        fetchOptions: fetchOptions_ = options.fetchOptions,\n        timeout = options.timeout ?? 10_000\n      } = options_;\n      const body = JSON.stringify(body_);\n      const fetchOptions = typeof fetchOptions_ === 'function' ? await fetchOptions_(body_) : fetchOptions_;\n      const response = await promise.withTimeout(({\n        signal\n      }) => {\n        const init = {\n          ...fetchOptions,\n          body,\n          headers: {\n            'Content-Type': 'application/json',\n            ...fetchOptions?.headers\n          },\n          method: fetchOptions?.method ?? 'POST',\n          signal: fetchOptions?.signal ?? (timeout > 0 ? signal : null)\n        };\n        const request = new Request(url, init);\n        return fetchFn(request);\n      }, {\n        timeout,\n        signal: true\n      });\n      const data = await (async () => {\n        if (response.headers.get('Content-Type')?.startsWith('application/json')) return response.json();\n        return response.text().then(data => {\n          try {\n            return JSON.parse(data || '{}');\n          } catch (err) {\n            if (response.ok) throw new MalformedResponseError({\n              response: data\n            });\n            return {\n              error: data\n            };\n          }\n        });\n      })();\n      if (!response.ok) throw new HttpError({\n        body,\n        details: JSON.stringify(data.error) ?? response.statusText,\n        response,\n        url\n      });\n      return data;\n    }\n  }, {\n    raw: options.raw\n  });\n}\n/** Thrown when a HTTP request fails. */\nexport class HttpError extends Errors.BaseError {\n  constructor({\n    body,\n    details,\n    response,\n    url\n  }) {\n    super('HTTP request failed.', {\n      details,\n      metaMessages: [`Status: ${response.status}`, `URL: ${getUrl(url)}`, body ? `Body: ${JSON.stringify(body)}` : undefined]\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'RpcTransport.HttpError'\n    });\n  }\n}\n/** Thrown when a HTTP response is malformed. */\nexport class MalformedResponseError extends Errors.BaseError {\n  constructor({\n    response\n  }) {\n    super('HTTP Response could not be parsed as JSON.', {\n      metaMessages: [`Response: ${response}`]\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'RpcTransport.MalformedResponseError'\n    });\n  }\n}","map":{"version":3,"names":["Errors","getUrl","promise","internal","fromHttp","url","options","create","request","body_","options_","fetchFn","fetch","fetchOptions","fetchOptions_","timeout","body","JSON","stringify","response","withTimeout","signal","init","headers","method","Request","data","get","startsWith","json","text","then","parse","err","ok","MalformedResponseError","error","HttpError","details","statusText","raw","BaseError","constructor","metaMessages","status","undefined","Object","defineProperty"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/ox/core/RpcTransport.ts"],"sourcesContent":["import * as Errors from './Errors.js'\nimport type * as RpcResponse from './RpcResponse.js'\nimport type * as RpcSchema from './RpcSchema.js'\nimport { getUrl } from './internal/errors.js'\nimport * as promise from './internal/promise.js'\nimport type * as RpcSchema_internal from './internal/rpcSchema.js'\nimport * as internal from './internal/rpcTransport.js'\nimport type { Compute } from './internal/types.js'\n\n/** Root type for an RPC Transport. */\nexport type RpcTransport<\n  raw extends boolean = false,\n  options extends Record<string, unknown> = {},\n  schema extends RpcSchema.Generic = RpcSchema.Default,\n> = Compute<{\n  request: RequestFn<raw, options, schema>\n}>\n\n/** HTTP-based RPC Transport. */\nexport type Http<\n  raw extends boolean = false,\n  schema extends RpcSchema.Generic = RpcSchema.Default,\n> = RpcTransport<raw, HttpOptions, schema>\n\nexport type HttpOptions = {\n  /** Request configuration to pass to `fetch`. */\n  fetchOptions?:\n    | Omit<RequestInit, 'body'>\n    | ((\n        method: RpcSchema.Generic['Request'],\n      ) => Omit<RequestInit, 'body'> | Promise<Omit<RequestInit, 'body'>>)\n    | undefined\n  /** Function to use to make the request. @default fetch */\n  fetchFn?: typeof fetch | undefined\n  /** Timeout for the request in milliseconds. @default 10_000 */\n  timeout?: number | undefined\n}\n\nexport type RequestFn<\n  raw extends boolean = false,\n  options extends Record<string, unknown> = {},\n  schema extends RpcSchema.Generic = RpcSchema.Default,\n> = <\n  methodName extends RpcSchema.MethodNameGeneric,\n  raw_override extends boolean | undefined = undefined,\n>(\n  parameters: Compute<\n    RpcSchema_internal.ExtractRequestOpaque<schema, methodName>\n  >,\n  options?: internal.Options<raw_override, options, schema> | undefined,\n) => Promise<\n  raw_override extends boolean\n    ? raw_override extends true\n      ? RpcResponse.RpcResponse<RpcSchema.ExtractReturnType<schema, methodName>>\n      : RpcSchema.ExtractReturnType<schema, methodName>\n    : raw extends true\n      ? RpcResponse.RpcResponse<RpcSchema.ExtractReturnType<schema, methodName>>\n      : RpcSchema.ExtractReturnType<schema, methodName>\n>\n\n/**\n * Creates a HTTP JSON-RPC Transport from a URL.\n *\n * @example\n * ```ts twoslash\n * import { RpcTransport } from 'ox'\n *\n * const transport = RpcTransport.fromHttp('https://1.rpc.thirdweb.com')\n *\n * const blockNumber = await transport.request({ method: 'eth_blockNumber' })\n * // @log: '0x1a2b3c'\n * ```\n *\n * @param url - URL to perform the JSON-RPC requests to.\n * @param options - Transport options.\n * @returns HTTP JSON-RPC Transport.\n */\nexport function fromHttp<\n  raw extends boolean = false,\n  schema extends RpcSchema.Generic = RpcSchema.Default,\n>(url: string, options: fromHttp.Options<raw, schema> = {}): Http<raw, schema> {\n  return internal.create<HttpOptions, schema, raw>(\n    {\n      async request(body_, options_) {\n        const {\n          fetchFn = options.fetchFn ?? fetch,\n          fetchOptions: fetchOptions_ = options.fetchOptions,\n          timeout = options.timeout ?? 10_000,\n        } = options_\n\n        const body = JSON.stringify(body_)\n\n        const fetchOptions =\n          typeof fetchOptions_ === 'function'\n            ? await fetchOptions_(body_)\n            : fetchOptions_\n\n        const response = await promise.withTimeout(\n          ({ signal }) => {\n            const init: RequestInit = {\n              ...fetchOptions,\n              body,\n              headers: {\n                'Content-Type': 'application/json',\n                ...fetchOptions?.headers,\n              },\n              method: fetchOptions?.method ?? 'POST',\n              signal: fetchOptions?.signal ?? (timeout > 0 ? signal : null),\n            }\n            const request = new Request(url, init)\n            return fetchFn(request)\n          },\n          {\n            timeout,\n            signal: true,\n          },\n        )\n\n        const data = await (async () => {\n          if (\n            response.headers.get('Content-Type')?.startsWith('application/json')\n          )\n            return response.json()\n          return response.text().then((data) => {\n            try {\n              return JSON.parse(data || '{}')\n            } catch (err) {\n              if (response.ok)\n                throw new MalformedResponseError({\n                  response: data,\n                })\n              return { error: data }\n            }\n          })\n        })()\n\n        if (!response.ok)\n          throw new HttpError({\n            body,\n            details: JSON.stringify(data.error) ?? response.statusText,\n            response,\n            url,\n          })\n\n        return data as never\n      },\n    },\n    { raw: options.raw },\n  )\n}\n\nexport declare namespace fromHttp {\n  type Options<\n    raw extends boolean = false,\n    schema extends RpcSchema.Generic = RpcSchema.Default,\n  > = internal.Options<raw, HttpOptions, schema>\n\n  type ErrorType =\n    | promise.withTimeout.ErrorType\n    | HttpError\n    | Errors.GlobalErrorType\n}\n\n/** Thrown when a HTTP request fails. */\nexport class HttpError extends Errors.BaseError {\n  override readonly name = 'RpcTransport.HttpError'\n\n  constructor({\n    body,\n    details,\n    response,\n    url,\n  }: { body: unknown; details: string; response: Response; url: string }) {\n    super('HTTP request failed.', {\n      details,\n      metaMessages: [\n        `Status: ${response.status}`,\n        `URL: ${getUrl(url)}`,\n        body ? `Body: ${JSON.stringify(body)}` : undefined,\n      ],\n    })\n  }\n}\n\n/** Thrown when a HTTP response is malformed. */\nexport class MalformedResponseError extends Errors.BaseError {\n  override readonly name = 'RpcTransport.MalformedResponseError'\n\n  constructor({ response }: { response: string }) {\n    super('HTTP Response could not be parsed as JSON.', {\n      metaMessages: [`Response: ${response}`],\n    })\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}