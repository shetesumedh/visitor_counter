{"ast":null,"code":"import { readContract } from '../actions/readContract.js';\nimport { filterQueryOptions } from './utils.js';\nexport function readContractQueryOptions(config, options = {}) {\n  return {\n    // TODO: Support `signal` once Viem actions allow passthrough\n    // https://tkdodo.eu/blog/why-you-want-react-query#bonus-cancellation\n    async queryFn({\n      queryKey\n    }) {\n      const abi = options.abi;\n      if (!abi) throw new Error('abi is required');\n      const {\n        functionName,\n        scopeKey: _,\n        ...parameters\n      } = queryKey[1];\n      const addressOrCodeParams = (() => {\n        const params = queryKey[1];\n        if (params.address) return {\n          address: params.address\n        };\n        if (params.code) return {\n          code: params.code\n        };\n        throw new Error('address or code is required');\n      })();\n      if (!functionName) throw new Error('functionName is required');\n      return readContract(config, {\n        abi,\n        functionName,\n        args: parameters.args,\n        ...addressOrCodeParams,\n        ...parameters\n      });\n    },\n    queryKey: readContractQueryKey(options)\n  };\n}\nexport function readContractQueryKey(options = {}) {\n  const {\n    abi: _,\n    ...rest\n  } = options;\n  return ['readContract', filterQueryOptions(rest)];\n}","map":{"version":3,"names":["readContract","filterQueryOptions","readContractQueryOptions","config","options","queryFn","queryKey","abi","Error","functionName","scopeKey","_","parameters","addressOrCodeParams","params","address","code","args","readContractQueryKey","rest"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/@wagmi/core/src/query/readContract.ts"],"sourcesContent":["import type { QueryOptions } from '@tanstack/query-core'\nimport type { Abi, ContractFunctionArgs, ContractFunctionName } from 'viem'\n\nimport {\n  type ReadContractErrorType,\n  type ReadContractParameters,\n  type ReadContractReturnType,\n  readContract,\n} from '../actions/readContract.js'\nimport type { Config } from '../createConfig.js'\nimport type { ScopeKeyParameter } from '../types/properties.js'\nimport type { UnionExactPartial } from '../types/utils.js'\nimport { filterQueryOptions } from './utils.js'\n\nexport type ReadContractOptions<\n  abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'pure' | 'view'>,\n  args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\n  config extends Config,\n> = UnionExactPartial<ReadContractParameters<abi, functionName, args, config>> &\n  ScopeKeyParameter\n\nexport function readContractQueryOptions<\n  config extends Config,\n  const abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'pure' | 'view'>,\n  args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\n>(\n  config: config,\n  options: ReadContractOptions<abi, functionName, args, config> = {} as any,\n) {\n  return {\n    // TODO: Support `signal` once Viem actions allow passthrough\n    // https://tkdodo.eu/blog/why-you-want-react-query#bonus-cancellation\n    async queryFn({ queryKey }) {\n      const abi = options.abi as Abi\n      if (!abi) throw new Error('abi is required')\n\n      const { functionName, scopeKey: _, ...parameters } = queryKey[1]\n      const addressOrCodeParams = (() => {\n        const params = queryKey[1] as unknown as ReadContractParameters\n        if (params.address) return { address: params.address }\n        if (params.code) return { code: params.code }\n        throw new Error('address or code is required')\n      })()\n\n      if (!functionName) throw new Error('functionName is required')\n\n      return readContract(config, {\n        abi,\n        functionName,\n        args: parameters.args as readonly unknown[],\n        ...addressOrCodeParams,\n        ...parameters,\n      }) as Promise<ReadContractData<abi, functionName, args>>\n    },\n    queryKey: readContractQueryKey(options as any) as any,\n  } as const satisfies QueryOptions<\n    ReadContractQueryFnData<abi, functionName, args>,\n    ReadContractErrorType,\n    ReadContractData<abi, functionName, args>,\n    ReadContractQueryKey<abi, functionName, args, config>\n  >\n}\n\nexport type ReadContractQueryFnData<\n  abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'pure' | 'view'>,\n  args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\n> = ReadContractReturnType<abi, functionName, args>\n\nexport type ReadContractData<\n  abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'pure' | 'view'>,\n  args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\n> = ReadContractQueryFnData<abi, functionName, args>\n\nexport function readContractQueryKey<\n  config extends Config,\n  const abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'pure' | 'view'>,\n  args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\n>(options: ReadContractOptions<abi, functionName, args, config> = {} as any) {\n  const { abi: _, ...rest } = options\n  return ['readContract', filterQueryOptions(rest)] as const\n}\n\nexport type ReadContractQueryKey<\n  abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'pure' | 'view'>,\n  args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\n  config extends Config,\n> = ReturnType<typeof readContractQueryKey<config, abi, functionName, args>>\n"],"mappings":"AAGA,SAIEA,YAAY,QACP,4BAA4B;AAInC,SAASC,kBAAkB,QAAQ,YAAY;AAU/C,OAAM,SAAUC,wBAAwBA,CAMtCC,MAAc,EACdC,OAAA,GAAgE,EAAS;EAEzE,OAAO;IACL;IACA;IACA,MAAMC,OAAOA,CAAC;MAAEC;IAAQ,CAAE;MACxB,MAAMC,GAAG,GAAGH,OAAO,CAACG,GAAU;MAC9B,IAAI,CAACA,GAAG,EAAE,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;MAE5C,MAAM;QAAEC,YAAY;QAAEC,QAAQ,EAAEC,CAAC;QAAE,GAAGC;MAAU,CAAE,GAAGN,QAAQ,CAAC,CAAC,CAAC;MAChE,MAAMO,mBAAmB,GAAG,CAAC,MAAK;QAChC,MAAMC,MAAM,GAAGR,QAAQ,CAAC,CAAC,CAAsC;QAC/D,IAAIQ,MAAM,CAACC,OAAO,EAAE,OAAO;UAAEA,OAAO,EAAED,MAAM,CAACC;QAAO,CAAE;QACtD,IAAID,MAAM,CAACE,IAAI,EAAE,OAAO;UAAEA,IAAI,EAAEF,MAAM,CAACE;QAAI,CAAE;QAC7C,MAAM,IAAIR,KAAK,CAAC,6BAA6B,CAAC;MAChD,CAAC,EAAC,CAAE;MAEJ,IAAI,CAACC,YAAY,EAAE,MAAM,IAAID,KAAK,CAAC,0BAA0B,CAAC;MAE9D,OAAOR,YAAY,CAACG,MAAM,EAAE;QAC1BI,GAAG;QACHE,YAAY;QACZQ,IAAI,EAAEL,UAAU,CAACK,IAA0B;QAC3C,GAAGJ,mBAAmB;QACtB,GAAGD;OACJ,CAAuD;IAC1D,CAAC;IACDN,QAAQ,EAAEY,oBAAoB,CAACd,OAAc;GAM9C;AACH;AAcA,OAAM,SAAUc,oBAAoBA,CAKlCd,OAAA,GAAgE,EAAS;EACzE,MAAM;IAAEG,GAAG,EAAEI,CAAC;IAAE,GAAGQ;EAAI,CAAE,GAAGf,OAAO;EACnC,OAAO,CAAC,cAAc,EAAEH,kBAAkB,CAACkB,IAAI,CAAC,CAAU;AAC5D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}