{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.estimateFeesPerGas = estimateFeesPerGas;\nexports.internal_estimateFeesPerGas = internal_estimateFeesPerGas;\nconst fee_js_1 = require(\"../../errors/fee.js\");\nconst getAction_js_1 = require(\"../../utils/getAction.js\");\nconst estimateMaxPriorityFeePerGas_js_1 = require(\"./estimateMaxPriorityFeePerGas.js\");\nconst getBlock_js_1 = require(\"./getBlock.js\");\nconst getGasPrice_js_1 = require(\"./getGasPrice.js\");\nasync function estimateFeesPerGas(client, args) {\n  return internal_estimateFeesPerGas(client, args);\n}\nasync function internal_estimateFeesPerGas(client, args) {\n  const {\n    block: block_,\n    chain = client.chain,\n    request,\n    type = 'eip1559'\n  } = args || {};\n  const baseFeeMultiplier = await (async () => {\n    if (typeof chain?.fees?.baseFeeMultiplier === 'function') return chain.fees.baseFeeMultiplier({\n      block: block_,\n      client,\n      request\n    });\n    return chain?.fees?.baseFeeMultiplier ?? 1.2;\n  })();\n  if (baseFeeMultiplier < 1) throw new fee_js_1.BaseFeeScalarError();\n  const decimals = baseFeeMultiplier.toString().split('.')[1]?.length ?? 0;\n  const denominator = 10 ** decimals;\n  const multiply = base => base * BigInt(Math.ceil(baseFeeMultiplier * denominator)) / BigInt(denominator);\n  const block = block_ ? block_ : await (0, getAction_js_1.getAction)(client, getBlock_js_1.getBlock, 'getBlock')({});\n  if (typeof chain?.fees?.estimateFeesPerGas === 'function') {\n    const fees = await chain.fees.estimateFeesPerGas({\n      block: block_,\n      client,\n      multiply,\n      request,\n      type\n    });\n    if (fees !== null) return fees;\n  }\n  if (type === 'eip1559') {\n    if (typeof block.baseFeePerGas !== 'bigint') throw new fee_js_1.Eip1559FeesNotSupportedError();\n    const maxPriorityFeePerGas = typeof request?.maxPriorityFeePerGas === 'bigint' ? request.maxPriorityFeePerGas : await (0, estimateMaxPriorityFeePerGas_js_1.internal_estimateMaxPriorityFeePerGas)(client, {\n      block: block,\n      chain,\n      request\n    });\n    const baseFeePerGas = multiply(block.baseFeePerGas);\n    const maxFeePerGas = request?.maxFeePerGas ?? baseFeePerGas + maxPriorityFeePerGas;\n    return {\n      maxFeePerGas,\n      maxPriorityFeePerGas\n    };\n  }\n  const gasPrice = request?.gasPrice ?? multiply(await (0, getAction_js_1.getAction)(client, getGasPrice_js_1.getGasPrice, 'getGasPrice')({}));\n  return {\n    gasPrice\n  };\n}","map":{"version":3,"names":["exports","estimateFeesPerGas","internal_estimateFeesPerGas","fee_js_1","require","getAction_js_1","estimateMaxPriorityFeePerGas_js_1","getBlock_js_1","getGasPrice_js_1","client","args","block","block_","chain","request","type","baseFeeMultiplier","fees","BaseFeeScalarError","decimals","toString","split","length","denominator","multiply","base","BigInt","Math","ceil","getAction","getBlock","baseFeePerGas","Eip1559FeesNotSupportedError","maxPriorityFeePerGas","internal_estimateMaxPriorityFeePerGas","maxFeePerGas","gasPrice","getGasPrice"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/viem/actions/public/estimateFeesPerGas.ts"],"sourcesContent":["import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport {\n  BaseFeeScalarError,\n  type BaseFeeScalarErrorType,\n  Eip1559FeesNotSupportedError,\n  type Eip1559FeesNotSupportedErrorType,\n} from '../../errors/fee.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../../types/account.js'\nimport type { Block } from '../../types/block.js'\nimport type {\n  Chain,\n  ChainEstimateFeesPerGasFnParameters,\n  ChainFeesFnParameters,\n  GetChainParameter,\n} from '../../types/chain.js'\nimport type {\n  FeeValuesEIP1559,\n  FeeValuesLegacy,\n  FeeValuesType,\n} from '../../types/fee.js'\nimport { getAction } from '../../utils/getAction.js'\nimport type { PrepareTransactionRequestParameters } from '../wallet/prepareTransactionRequest.js'\nimport {\n  type EstimateMaxPriorityFeePerGasErrorType,\n  internal_estimateMaxPriorityFeePerGas,\n} from './estimateMaxPriorityFeePerGas.js'\nimport { getBlock } from './getBlock.js'\nimport { type GetGasPriceErrorType, getGasPrice } from './getGasPrice.js'\n\nexport type EstimateFeesPerGasParameters<\n  chain extends Chain | undefined = Chain | undefined,\n  chainOverride extends Chain | undefined = Chain | undefined,\n  type extends FeeValuesType = FeeValuesType,\n> = {\n  /**\n   * The type of fee values to return.\n   *\n   * - `legacy`: Returns the legacy gas price.\n   * - `eip1559`: Returns the max fee per gas and max priority fee per gas.\n   *\n   * @default 'eip1559'\n   */\n  type?: type | FeeValuesType | undefined\n} & GetChainParameter<chain, chainOverride>\n\nexport type EstimateFeesPerGasReturnType<\n  type extends FeeValuesType = FeeValuesType,\n> =\n  | (type extends 'legacy' ? FeeValuesLegacy : never)\n  | (type extends 'eip1559' ? FeeValuesEIP1559 : never)\n\nexport type EstimateFeesPerGasErrorType =\n  | BaseFeeScalarErrorType\n  | EstimateMaxPriorityFeePerGasErrorType\n  | GetGasPriceErrorType\n  | Eip1559FeesNotSupportedErrorType\n  | ErrorType\n\n/**\n * Returns an estimate for the fees per gas (in wei) for a\n * transaction to be likely included in the next block.\n * Defaults to [`chain.fees.estimateFeesPerGas`](/docs/clients/chains#fees-estimatefeespergas) if set.\n *\n * - Docs: https://viem.sh/docs/actions/public/estimateFeesPerGas\n *\n * @param client - Client to use\n * @param parameters - {@link EstimateFeesPerGasParameters}\n * @returns An estimate (in wei) for the fees per gas. {@link EstimateFeesPerGasReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { estimateFeesPerGas } from 'viem/actions'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const maxPriorityFeePerGas = await estimateFeesPerGas(client)\n * // { maxFeePerGas: ..., maxPriorityFeePerGas: ... }\n */\nexport async function estimateFeesPerGas<\n  chain extends Chain | undefined,\n  chainOverride extends Chain | undefined,\n  type extends FeeValuesType = 'eip1559',\n>(\n  client: Client<Transport, chain>,\n  args?: EstimateFeesPerGasParameters<chain, chainOverride, type> | undefined,\n): Promise<EstimateFeesPerGasReturnType<type>> {\n  return internal_estimateFeesPerGas(client, args as any)\n}\n\nexport async function internal_estimateFeesPerGas<\n  chain extends Chain | undefined,\n  chainOverride extends Chain | undefined,\n  type extends FeeValuesType = 'eip1559',\n>(\n  client: Client<Transport, chain>,\n  args: EstimateFeesPerGasParameters<chain, chainOverride, type> & {\n    block?: Block | undefined\n    request?: PrepareTransactionRequestParameters<Chain, Account> | undefined\n  },\n): Promise<EstimateFeesPerGasReturnType<type>> {\n  const {\n    block: block_,\n    chain = client.chain,\n    request,\n    type = 'eip1559',\n  } = args || {}\n\n  const baseFeeMultiplier = await (async () => {\n    if (typeof chain?.fees?.baseFeeMultiplier === 'function')\n      return chain.fees.baseFeeMultiplier({\n        block: block_ as Block,\n        client,\n        request,\n      } as ChainFeesFnParameters)\n    return chain?.fees?.baseFeeMultiplier ?? 1.2\n  })()\n  if (baseFeeMultiplier < 1) throw new BaseFeeScalarError()\n\n  const decimals = baseFeeMultiplier.toString().split('.')[1]?.length ?? 0\n  const denominator = 10 ** decimals\n  const multiply = (base: bigint) =>\n    (base * BigInt(Math.ceil(baseFeeMultiplier * denominator))) /\n    BigInt(denominator)\n\n  const block = block_\n    ? block_\n    : await getAction(client, getBlock, 'getBlock')({})\n\n  if (typeof chain?.fees?.estimateFeesPerGas === 'function') {\n    const fees = (await chain.fees.estimateFeesPerGas({\n      block: block_ as Block,\n      client,\n      multiply,\n      request,\n      type,\n    } as ChainEstimateFeesPerGasFnParameters)) as unknown as EstimateFeesPerGasReturnType<type>\n\n    if (fees !== null) return fees\n  }\n\n  if (type === 'eip1559') {\n    if (typeof block.baseFeePerGas !== 'bigint')\n      throw new Eip1559FeesNotSupportedError()\n\n    const maxPriorityFeePerGas =\n      typeof request?.maxPriorityFeePerGas === 'bigint'\n        ? request.maxPriorityFeePerGas\n        : await internal_estimateMaxPriorityFeePerGas(\n            client as Client<Transport, Chain>,\n            {\n              block: block as Block,\n              chain,\n              request,\n            },\n          )\n\n    const baseFeePerGas = multiply(block.baseFeePerGas)\n    const maxFeePerGas =\n      request?.maxFeePerGas ?? baseFeePerGas + maxPriorityFeePerGas\n\n    return {\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n    } as EstimateFeesPerGasReturnType<type>\n  }\n\n  const gasPrice =\n    request?.gasPrice ??\n    multiply(await getAction(client, getGasPrice, 'getGasPrice')({}))\n  return {\n    gasPrice,\n  } as EstimateFeesPerGasReturnType<type>\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}