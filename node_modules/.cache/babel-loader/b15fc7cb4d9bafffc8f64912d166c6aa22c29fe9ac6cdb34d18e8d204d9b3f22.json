{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertTransactionEIP7702 = assertTransactionEIP7702;\nexports.assertTransactionEIP4844 = assertTransactionEIP4844;\nexports.assertTransactionEIP1559 = assertTransactionEIP1559;\nexports.assertTransactionEIP2930 = assertTransactionEIP2930;\nexports.assertTransactionLegacy = assertTransactionLegacy;\nconst kzg_js_1 = require(\"../../constants/kzg.js\");\nconst number_js_1 = require(\"../../constants/number.js\");\nconst address_js_1 = require(\"../../errors/address.js\");\nconst base_js_1 = require(\"../../errors/base.js\");\nconst blob_js_1 = require(\"../../errors/blob.js\");\nconst chain_js_1 = require(\"../../errors/chain.js\");\nconst node_js_1 = require(\"../../errors/node.js\");\nconst isAddress_js_1 = require(\"../address/isAddress.js\");\nconst size_js_1 = require(\"../data/size.js\");\nconst slice_js_1 = require(\"../data/slice.js\");\nconst fromHex_js_1 = require(\"../encoding/fromHex.js\");\nfunction assertTransactionEIP7702(transaction) {\n  const {\n    authorizationList\n  } = transaction;\n  if (authorizationList) {\n    for (const authorization of authorizationList) {\n      const {\n        chainId\n      } = authorization;\n      const address = authorization.address;\n      if (!(0, isAddress_js_1.isAddress)(address)) throw new address_js_1.InvalidAddressError({\n        address\n      });\n      if (chainId < 0) throw new chain_js_1.InvalidChainIdError({\n        chainId\n      });\n    }\n  }\n  assertTransactionEIP1559(transaction);\n}\nfunction assertTransactionEIP4844(transaction) {\n  const {\n    blobVersionedHashes\n  } = transaction;\n  if (blobVersionedHashes) {\n    if (blobVersionedHashes.length === 0) throw new blob_js_1.EmptyBlobError();\n    for (const hash of blobVersionedHashes) {\n      const size_ = (0, size_js_1.size)(hash);\n      const version = (0, fromHex_js_1.hexToNumber)((0, slice_js_1.slice)(hash, 0, 1));\n      if (size_ !== 32) throw new blob_js_1.InvalidVersionedHashSizeError({\n        hash,\n        size: size_\n      });\n      if (version !== kzg_js_1.versionedHashVersionKzg) throw new blob_js_1.InvalidVersionedHashVersionError({\n        hash,\n        version\n      });\n    }\n  }\n  assertTransactionEIP1559(transaction);\n}\nfunction assertTransactionEIP1559(transaction) {\n  const {\n    chainId,\n    maxPriorityFeePerGas,\n    maxFeePerGas,\n    to\n  } = transaction;\n  if (chainId <= 0) throw new chain_js_1.InvalidChainIdError({\n    chainId\n  });\n  if (to && !(0, isAddress_js_1.isAddress)(to)) throw new address_js_1.InvalidAddressError({\n    address: to\n  });\n  if (maxFeePerGas && maxFeePerGas > number_js_1.maxUint256) throw new node_js_1.FeeCapTooHighError({\n    maxFeePerGas\n  });\n  if (maxPriorityFeePerGas && maxFeePerGas && maxPriorityFeePerGas > maxFeePerGas) throw new node_js_1.TipAboveFeeCapError({\n    maxFeePerGas,\n    maxPriorityFeePerGas\n  });\n}\nfunction assertTransactionEIP2930(transaction) {\n  const {\n    chainId,\n    maxPriorityFeePerGas,\n    gasPrice,\n    maxFeePerGas,\n    to\n  } = transaction;\n  if (chainId <= 0) throw new chain_js_1.InvalidChainIdError({\n    chainId\n  });\n  if (to && !(0, isAddress_js_1.isAddress)(to)) throw new address_js_1.InvalidAddressError({\n    address: to\n  });\n  if (maxPriorityFeePerGas || maxFeePerGas) throw new base_js_1.BaseError('`maxFeePerGas`/`maxPriorityFeePerGas` is not a valid EIP-2930 Transaction attribute.');\n  if (gasPrice && gasPrice > number_js_1.maxUint256) throw new node_js_1.FeeCapTooHighError({\n    maxFeePerGas: gasPrice\n  });\n}\nfunction assertTransactionLegacy(transaction) {\n  const {\n    chainId,\n    maxPriorityFeePerGas,\n    gasPrice,\n    maxFeePerGas,\n    to\n  } = transaction;\n  if (to && !(0, isAddress_js_1.isAddress)(to)) throw new address_js_1.InvalidAddressError({\n    address: to\n  });\n  if (typeof chainId !== 'undefined' && chainId <= 0) throw new chain_js_1.InvalidChainIdError({\n    chainId\n  });\n  if (maxPriorityFeePerGas || maxFeePerGas) throw new base_js_1.BaseError('`maxFeePerGas`/`maxPriorityFeePerGas` is not a valid Legacy Transaction attribute.');\n  if (gasPrice && gasPrice > number_js_1.maxUint256) throw new node_js_1.FeeCapTooHighError({\n    maxFeePerGas: gasPrice\n  });\n}","map":{"version":3,"names":["exports","assertTransactionEIP7702","assertTransactionEIP4844","assertTransactionEIP1559","assertTransactionEIP2930","assertTransactionLegacy","kzg_js_1","require","number_js_1","address_js_1","base_js_1","blob_js_1","chain_js_1","node_js_1","isAddress_js_1","size_js_1","slice_js_1","fromHex_js_1","transaction","authorizationList","authorization","chainId","address","isAddress","InvalidAddressError","InvalidChainIdError","blobVersionedHashes","length","EmptyBlobError","hash","size_","size","version","hexToNumber","slice","InvalidVersionedHashSizeError","versionedHashVersionKzg","InvalidVersionedHashVersionError","maxPriorityFeePerGas","maxFeePerGas","to","maxUint256","FeeCapTooHighError","TipAboveFeeCapError","gasPrice","BaseError"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/viem/utils/transaction/assertTransaction.ts"],"sourcesContent":["import { versionedHashVersionKzg } from '../../constants/kzg.js'\nimport { maxUint256 } from '../../constants/number.js'\nimport {\n  InvalidAddressError,\n  type InvalidAddressErrorType,\n} from '../../errors/address.js'\nimport { BaseError, type BaseErrorType } from '../../errors/base.js'\nimport {\n  EmptyBlobError,\n  type EmptyBlobErrorType,\n  InvalidVersionedHashSizeError,\n  type InvalidVersionedHashSizeErrorType,\n  InvalidVersionedHashVersionError,\n  type InvalidVersionedHashVersionErrorType,\n} from '../../errors/blob.js'\nimport {\n  InvalidChainIdError,\n  type InvalidChainIdErrorType,\n} from '../../errors/chain.js'\nimport {\n  FeeCapTooHighError,\n  type FeeCapTooHighErrorType,\n  TipAboveFeeCapError,\n  type TipAboveFeeCapErrorType,\n} from '../../errors/node.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type {\n  TransactionSerializableEIP1559,\n  TransactionSerializableEIP2930,\n  TransactionSerializableEIP4844,\n  TransactionSerializableEIP7702,\n  TransactionSerializableLegacy,\n} from '../../types/transaction.js'\nimport { type IsAddressErrorType, isAddress } from '../address/isAddress.js'\nimport { size } from '../data/size.js'\nimport { slice } from '../data/slice.js'\nimport { hexToNumber } from '../encoding/fromHex.js'\n\nexport type AssertTransactionEIP7702ErrorType =\n  | AssertTransactionEIP1559ErrorType\n  | InvalidAddressErrorType\n  | InvalidChainIdErrorType\n  | ErrorType\n\nexport function assertTransactionEIP7702(\n  transaction: TransactionSerializableEIP7702,\n) {\n  const { authorizationList } = transaction\n  if (authorizationList) {\n    for (const authorization of authorizationList) {\n      const { chainId } = authorization\n      const address = authorization.address\n      if (!isAddress(address)) throw new InvalidAddressError({ address })\n      if (chainId < 0) throw new InvalidChainIdError({ chainId })\n    }\n  }\n  assertTransactionEIP1559(transaction as {} as TransactionSerializableEIP1559)\n}\n\nexport type AssertTransactionEIP4844ErrorType =\n  | AssertTransactionEIP1559ErrorType\n  | EmptyBlobErrorType\n  | InvalidVersionedHashSizeErrorType\n  | InvalidVersionedHashVersionErrorType\n  | ErrorType\n\nexport function assertTransactionEIP4844(\n  transaction: TransactionSerializableEIP4844,\n) {\n  const { blobVersionedHashes } = transaction\n  if (blobVersionedHashes) {\n    if (blobVersionedHashes.length === 0) throw new EmptyBlobError()\n    for (const hash of blobVersionedHashes) {\n      const size_ = size(hash)\n      const version = hexToNumber(slice(hash, 0, 1))\n      if (size_ !== 32)\n        throw new InvalidVersionedHashSizeError({ hash, size: size_ })\n      if (version !== versionedHashVersionKzg)\n        throw new InvalidVersionedHashVersionError({\n          hash,\n          version,\n        })\n    }\n  }\n  assertTransactionEIP1559(transaction as {} as TransactionSerializableEIP1559)\n}\n\nexport type AssertTransactionEIP1559ErrorType =\n  | BaseErrorType\n  | IsAddressErrorType\n  | InvalidAddressErrorType\n  | InvalidChainIdErrorType\n  | FeeCapTooHighErrorType\n  | TipAboveFeeCapErrorType\n  | ErrorType\n\nexport function assertTransactionEIP1559(\n  transaction: TransactionSerializableEIP1559,\n) {\n  const { chainId, maxPriorityFeePerGas, maxFeePerGas, to } = transaction\n  if (chainId <= 0) throw new InvalidChainIdError({ chainId })\n  if (to && !isAddress(to)) throw new InvalidAddressError({ address: to })\n  if (maxFeePerGas && maxFeePerGas > maxUint256)\n    throw new FeeCapTooHighError({ maxFeePerGas })\n  if (\n    maxPriorityFeePerGas &&\n    maxFeePerGas &&\n    maxPriorityFeePerGas > maxFeePerGas\n  )\n    throw new TipAboveFeeCapError({ maxFeePerGas, maxPriorityFeePerGas })\n}\n\nexport type AssertTransactionEIP2930ErrorType =\n  | BaseErrorType\n  | IsAddressErrorType\n  | InvalidAddressErrorType\n  | InvalidChainIdErrorType\n  | FeeCapTooHighErrorType\n  | ErrorType\n\nexport function assertTransactionEIP2930(\n  transaction: TransactionSerializableEIP2930,\n) {\n  const { chainId, maxPriorityFeePerGas, gasPrice, maxFeePerGas, to } =\n    transaction\n  if (chainId <= 0) throw new InvalidChainIdError({ chainId })\n  if (to && !isAddress(to)) throw new InvalidAddressError({ address: to })\n  if (maxPriorityFeePerGas || maxFeePerGas)\n    throw new BaseError(\n      '`maxFeePerGas`/`maxPriorityFeePerGas` is not a valid EIP-2930 Transaction attribute.',\n    )\n  if (gasPrice && gasPrice > maxUint256)\n    throw new FeeCapTooHighError({ maxFeePerGas: gasPrice })\n}\n\nexport type AssertTransactionLegacyErrorType =\n  | BaseErrorType\n  | IsAddressErrorType\n  | InvalidAddressErrorType\n  | InvalidChainIdErrorType\n  | FeeCapTooHighErrorType\n  | ErrorType\n\nexport function assertTransactionLegacy(\n  transaction: TransactionSerializableLegacy,\n) {\n  const { chainId, maxPriorityFeePerGas, gasPrice, maxFeePerGas, to } =\n    transaction\n  if (to && !isAddress(to)) throw new InvalidAddressError({ address: to })\n  if (typeof chainId !== 'undefined' && chainId <= 0)\n    throw new InvalidChainIdError({ chainId })\n  if (maxPriorityFeePerGas || maxFeePerGas)\n    throw new BaseError(\n      '`maxFeePerGas`/`maxPriorityFeePerGas` is not a valid Legacy Transaction attribute.',\n    )\n  if (gasPrice && gasPrice > maxUint256)\n    throw new FeeCapTooHighError({ maxFeePerGas: gasPrice })\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}