{"ast":null,"code":"import { replaceEqualDeep } from '@tanstack/query-core';\nexport function structuralSharing(oldData, newData) {\n  return replaceEqualDeep(oldData, newData);\n}\nexport function hashFn(queryKey) {\n  return JSON.stringify(queryKey, (_, value) => {\n    if (isPlainObject(value)) return Object.keys(value).sort().reduce((result, key) => {\n      result[key] = value[key];\n      return result;\n    }, {});\n    if (typeof value === 'bigint') return value.toString();\n    return value;\n  });\n}\n// biome-ignore lint/complexity/noBannedTypes:\nfunction isPlainObject(value) {\n  if (!hasObjectPrototype(value)) {\n    return false;\n  }\n  // If has modified constructor\n  const ctor = value.constructor;\n  if (typeof ctor === 'undefined') return true;\n  // If has modified prototype\n  const prot = ctor.prototype;\n  if (!hasObjectPrototype(prot)) return false;\n  // If constructor does not have an Object-specific method\n  // biome-ignore lint/suspicious/noPrototypeBuiltins: <explanation>\n  if (!prot.hasOwnProperty('isPrototypeOf')) return false;\n  // Most likely a plain Object\n  return true;\n}\nfunction hasObjectPrototype(o) {\n  return Object.prototype.toString.call(o) === '[object Object]';\n}\nexport function filterQueryOptions(options) {\n  // destructuring is super fast\n  // biome-ignore format: no formatting\n  const {\n    // import('@tanstack/query-core').QueryOptions\n    _defaulted,\n    behavior,\n    gcTime,\n    initialData,\n    initialDataUpdatedAt,\n    maxPages,\n    meta,\n    networkMode,\n    queryFn,\n    queryHash,\n    queryKey,\n    queryKeyHashFn,\n    retry,\n    retryDelay,\n    structuralSharing,\n    // import('@tanstack/query-core').InfiniteQueryObserverOptions\n    getPreviousPageParam,\n    getNextPageParam,\n    initialPageParam,\n    // import('@tanstack/react-query').UseQueryOptions\n    _optimisticResults,\n    enabled,\n    notifyOnChangeProps,\n    placeholderData,\n    refetchInterval,\n    refetchIntervalInBackground,\n    refetchOnMount,\n    refetchOnReconnect,\n    refetchOnWindowFocus,\n    retryOnMount,\n    select,\n    staleTime,\n    suspense,\n    throwOnError,\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    // wagmi\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    config,\n    connector,\n    query,\n    ...rest\n  } = options;\n  return rest;\n}","map":{"version":3,"names":["replaceEqualDeep","structuralSharing","oldData","newData","hashFn","queryKey","JSON","stringify","_","value","isPlainObject","Object","keys","sort","reduce","result","key","toString","hasObjectPrototype","ctor","constructor","prot","prototype","hasOwnProperty","o","call","filterQueryOptions","options","_defaulted","behavior","gcTime","initialData","initialDataUpdatedAt","maxPages","meta","networkMode","queryFn","queryHash","queryKeyHashFn","retry","retryDelay","getPreviousPageParam","getNextPageParam","initialPageParam","_optimisticResults","enabled","notifyOnChangeProps","placeholderData","refetchInterval","refetchIntervalInBackground","refetchOnMount","refetchOnReconnect","refetchOnWindowFocus","retryOnMount","select","staleTime","suspense","throwOnError","config","connector","query","rest"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/@wagmi/core/src/query/utils.ts"],"sourcesContent":["import { type QueryKey, replaceEqualDeep } from '@tanstack/query-core'\n\nexport function structuralSharing<data>(\n  oldData: data | undefined,\n  newData: data,\n): data {\n  return replaceEqualDeep(oldData, newData)\n}\n\nexport function hashFn(queryKey: QueryKey): string {\n  return JSON.stringify(queryKey, (_, value) => {\n    if (isPlainObject(value))\n      return Object.keys(value)\n        .sort()\n        .reduce((result, key) => {\n          result[key] = value[key]\n          return result\n        }, {} as any)\n    if (typeof value === 'bigint') return value.toString()\n    return value\n  })\n}\n\n// biome-ignore lint/complexity/noBannedTypes:\nfunction isPlainObject(value: any): value is Object {\n  if (!hasObjectPrototype(value)) {\n    return false\n  }\n\n  // If has modified constructor\n  const ctor = value.constructor\n  if (typeof ctor === 'undefined') return true\n\n  // If has modified prototype\n  const prot = ctor.prototype\n  if (!hasObjectPrototype(prot)) return false\n\n  // If constructor does not have an Object-specific method\n  // biome-ignore lint/suspicious/noPrototypeBuiltins: <explanation>\n  if (!prot.hasOwnProperty('isPrototypeOf')) return false\n\n  // Most likely a plain Object\n  return true\n}\n\nfunction hasObjectPrototype(o: any): boolean {\n  return Object.prototype.toString.call(o) === '[object Object]'\n}\n\nexport function filterQueryOptions<type extends Record<string, unknown>>(\n  options: type,\n): type {\n  // destructuring is super fast\n  // biome-ignore format: no formatting\n  const {\n    // import('@tanstack/query-core').QueryOptions\n    _defaulted, behavior, gcTime, initialData, initialDataUpdatedAt, maxPages, meta, networkMode, queryFn, queryHash, queryKey, queryKeyHashFn, retry, retryDelay, structuralSharing,\n\n    // import('@tanstack/query-core').InfiniteQueryObserverOptions\n    getPreviousPageParam, getNextPageParam, initialPageParam,\n\n    // import('@tanstack/react-query').UseQueryOptions\n    _optimisticResults, enabled, notifyOnChangeProps, placeholderData, refetchInterval, refetchIntervalInBackground, refetchOnMount, refetchOnReconnect, refetchOnWindowFocus, retryOnMount, select, staleTime, suspense, throwOnError,\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    // wagmi\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    config, connector, query,\n    ...rest\n  } = options\n\n  return rest as type\n}\n"],"mappings":"AAAA,SAAwBA,gBAAgB,QAAQ,sBAAsB;AAEtE,OAAM,SAAUC,iBAAiBA,CAC/BC,OAAyB,EACzBC,OAAa;EAEb,OAAOH,gBAAgB,CAACE,OAAO,EAAEC,OAAO,CAAC;AAC3C;AAEA,OAAM,SAAUC,MAAMA,CAACC,QAAkB;EACvC,OAAOC,IAAI,CAACC,SAAS,CAACF,QAAQ,EAAE,CAACG,CAAC,EAAEC,KAAK,KAAI;IAC3C,IAAIC,aAAa,CAACD,KAAK,CAAC,EACtB,OAAOE,MAAM,CAACC,IAAI,CAACH,KAAK,CAAC,CACtBI,IAAI,EAAE,CACNC,MAAM,CAAC,CAACC,MAAM,EAAEC,GAAG,KAAI;MACtBD,MAAM,CAACC,GAAG,CAAC,GAAGP,KAAK,CAACO,GAAG,CAAC;MACxB,OAAOD,MAAM;IACf,CAAC,EAAE,EAAS,CAAC;IACjB,IAAI,OAAON,KAAK,KAAK,QAAQ,EAAE,OAAOA,KAAK,CAACQ,QAAQ,EAAE;IACtD,OAAOR,KAAK;EACd,CAAC,CAAC;AACJ;AAEA;AACA,SAASC,aAAaA,CAACD,KAAU;EAC/B,IAAI,CAACS,kBAAkB,CAACT,KAAK,CAAC,EAAE;IAC9B,OAAO,KAAK;EACd;EAEA;EACA,MAAMU,IAAI,GAAGV,KAAK,CAACW,WAAW;EAC9B,IAAI,OAAOD,IAAI,KAAK,WAAW,EAAE,OAAO,IAAI;EAE5C;EACA,MAAME,IAAI,GAAGF,IAAI,CAACG,SAAS;EAC3B,IAAI,CAACJ,kBAAkB,CAACG,IAAI,CAAC,EAAE,OAAO,KAAK;EAE3C;EACA;EACA,IAAI,CAACA,IAAI,CAACE,cAAc,CAAC,eAAe,CAAC,EAAE,OAAO,KAAK;EAEvD;EACA,OAAO,IAAI;AACb;AAEA,SAASL,kBAAkBA,CAACM,CAAM;EAChC,OAAOb,MAAM,CAACW,SAAS,CAACL,QAAQ,CAACQ,IAAI,CAACD,CAAC,CAAC,KAAK,iBAAiB;AAChE;AAEA,OAAM,SAAUE,kBAAkBA,CAChCC,OAAa;EAEb;EACA;EACA,MAAM;IACJ;IACAC,UAAU;IAAEC,QAAQ;IAAEC,MAAM;IAAEC,WAAW;IAAEC,oBAAoB;IAAEC,QAAQ;IAAEC,IAAI;IAAEC,WAAW;IAAEC,OAAO;IAAEC,SAAS;IAAEhC,QAAQ;IAAEiC,cAAc;IAAEC,KAAK;IAAEC,UAAU;IAAEvC,iBAAiB;IAEhL;IACAwC,oBAAoB;IAAEC,gBAAgB;IAAEC,gBAAgB;IAExD;IACAC,kBAAkB;IAAEC,OAAO;IAAEC,mBAAmB;IAAEC,eAAe;IAAEC,eAAe;IAAEC,2BAA2B;IAAEC,cAAc;IAAEC,kBAAkB;IAAEC,oBAAoB;IAAEC,YAAY;IAAEC,MAAM;IAAEC,SAAS;IAAEC,QAAQ;IAAEC,YAAY;IAElO;IACA;IACA;IACAC,MAAM;IAAEC,SAAS;IAAEC,KAAK;IACxB,GAAGC;EAAI,CACR,GAAGlC,OAAO;EAEX,OAAOkC,IAAY;AACrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}