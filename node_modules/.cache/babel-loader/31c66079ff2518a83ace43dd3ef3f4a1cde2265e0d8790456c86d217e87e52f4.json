{"ast":null,"code":"import { getCapabilities } from '../actions/getCapabilities.js';\nimport { ConnectorNotConnectedError } from '../errors/config.js';\nimport { filterQueryOptions } from '../query/utils.js';\nexport function getCapabilitiesQueryOptions(config, options = {}) {\n  return {\n    async queryFn({\n      queryKey\n    }) {\n      const {\n        scopeKey: _,\n        ...parameters\n      } = queryKey[1];\n      const capabilities = await getCapabilities(config, parameters);\n      return capabilities;\n    },\n    queryKey: getCapabilitiesQueryKey(options),\n    retry(failureCount, error) {\n      if (error instanceof ConnectorNotConnectedError) return false;\n      return failureCount < 3;\n    }\n  };\n}\nexport function getCapabilitiesQueryKey(options = {}) {\n  return ['capabilities', filterQueryOptions(options)];\n}","map":{"version":3,"names":["getCapabilities","ConnectorNotConnectedError","filterQueryOptions","getCapabilitiesQueryOptions","config","options","queryFn","queryKey","scopeKey","_","parameters","capabilities","getCapabilitiesQueryKey","retry","failureCount","error"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/@wagmi/core/src/query/getCapabilities.ts"],"sourcesContent":["import type { QueryOptions } from '@tanstack/query-core'\n\nimport {\n  type GetCapabilitiesErrorType,\n  type GetCapabilitiesParameters,\n  type GetCapabilitiesReturnType,\n  getCapabilities,\n} from '../actions/getCapabilities.js'\nimport type { Config } from '../createConfig.js'\nimport { ConnectorNotConnectedError } from '../errors/config.js'\nimport { filterQueryOptions } from '../query/utils.js'\nimport type { ScopeKeyParameter } from '../types/properties.js'\nimport type { Compute, ExactPartial } from '../types/utils.js'\n\nexport type GetCapabilitiesOptions<\n  config extends Config = Config,\n  chainId extends config['chains'][number]['id'] | undefined = undefined,\n> = Compute<\n  ExactPartial<GetCapabilitiesParameters<config, chainId>> & ScopeKeyParameter\n>\n\nexport function getCapabilitiesQueryOptions<\n  config extends Config,\n  chainId extends config['chains'][number]['id'] | undefined = undefined,\n>(config: config, options: GetCapabilitiesOptions<config, chainId> = {}) {\n  return {\n    async queryFn({ queryKey }) {\n      const { scopeKey: _, ...parameters } = queryKey[1]\n      const capabilities = await getCapabilities(config, parameters)\n      return capabilities\n    },\n    queryKey: getCapabilitiesQueryKey(options),\n    retry(failureCount, error) {\n      if (error instanceof ConnectorNotConnectedError) return false\n      return failureCount < 3\n    },\n  } as const satisfies QueryOptions<\n    GetCapabilitiesQueryFnData<config, chainId>,\n    GetCapabilitiesErrorType,\n    GetCapabilitiesData<config, chainId>,\n    GetCapabilitiesQueryKey<config, chainId>\n  >\n}\n\nexport type GetCapabilitiesQueryFnData<\n  config extends Config = Config,\n  chainId extends config['chains'][number]['id'] | undefined = undefined,\n> = GetCapabilitiesReturnType<config, chainId>\n\nexport type GetCapabilitiesData<\n  config extends Config = Config,\n  chainId extends config['chains'][number]['id'] | undefined = undefined,\n> = GetCapabilitiesQueryFnData<config, chainId>\n\nexport function getCapabilitiesQueryKey<\n  config extends Config,\n  chainId extends config['chains'][number]['id'] | undefined = undefined,\n>(options: GetCapabilitiesOptions<config, chainId> = {}) {\n  return ['capabilities', filterQueryOptions(options)] as const\n}\n\nexport type GetCapabilitiesQueryKey<\n  config extends Config,\n  chainId extends config['chains'][number]['id'] | undefined = undefined,\n> = ReturnType<typeof getCapabilitiesQueryKey<config, chainId>>\n"],"mappings":"AAEA,SAIEA,eAAe,QACV,+BAA+B;AAEtC,SAASC,0BAA0B,QAAQ,qBAAqB;AAChE,SAASC,kBAAkB,QAAQ,mBAAmB;AAWtD,OAAM,SAAUC,2BAA2BA,CAGzCC,MAAc,EAAEC,OAAA,GAAmD,EAAE;EACrE,OAAO;IACL,MAAMC,OAAOA,CAAC;MAAEC;IAAQ,CAAE;MACxB,MAAM;QAAEC,QAAQ,EAAEC,CAAC;QAAE,GAAGC;MAAU,CAAE,GAAGH,QAAQ,CAAC,CAAC,CAAC;MAClD,MAAMI,YAAY,GAAG,MAAMX,eAAe,CAACI,MAAM,EAAEM,UAAU,CAAC;MAC9D,OAAOC,YAAY;IACrB,CAAC;IACDJ,QAAQ,EAAEK,uBAAuB,CAACP,OAAO,CAAC;IAC1CQ,KAAKA,CAACC,YAAY,EAAEC,KAAK;MACvB,IAAIA,KAAK,YAAYd,0BAA0B,EAAE,OAAO,KAAK;MAC7D,OAAOa,YAAY,GAAG,CAAC;IACzB;GAMD;AACH;AAYA,OAAM,SAAUF,uBAAuBA,CAGrCP,OAAA,GAAmD,EAAE;EACrD,OAAO,CAAC,cAAc,EAAEH,kBAAkB,CAACG,OAAO,CAAC,CAAU;AAC/D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}