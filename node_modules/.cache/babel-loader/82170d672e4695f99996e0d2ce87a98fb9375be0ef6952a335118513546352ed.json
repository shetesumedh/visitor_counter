{"ast":null,"code":"import { readContracts } from '../actions/readContracts.js';\nimport { filterQueryOptions } from './utils.js';\nexport function readContractsQueryOptions(config, options = {}) {\n  return {\n    async queryFn({\n      queryKey\n    }) {\n      const contracts = [];\n      const length = queryKey[1].contracts.length;\n      for (let i = 0; i < length; i++) {\n        const contract = queryKey[1].contracts[i];\n        const abi = (options.contracts?.[i]).abi;\n        contracts.push({\n          ...contract,\n          abi\n        });\n      }\n      const {\n        scopeKey: _,\n        ...parameters\n      } = queryKey[1];\n      return readContracts(config, {\n        ...parameters,\n        contracts\n      });\n    },\n    queryKey: readContractsQueryKey(options)\n  };\n}\nexport function readContractsQueryKey(options = {}) {\n  const contracts = [];\n  for (const contract of options.contracts ?? []) {\n    const {\n      abi: _,\n      ...rest\n    } = contract;\n    contracts.push({\n      ...rest,\n      chainId: rest.chainId ?? options.chainId\n    });\n  }\n  return ['readContracts', filterQueryOptions({\n    ...options,\n    contracts\n  })];\n}","map":{"version":3,"names":["readContracts","filterQueryOptions","readContractsQueryOptions","config","options","queryFn","queryKey","contracts","length","i","contract","abi","push","scopeKey","_","parameters","readContractsQueryKey","rest","chainId"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/@wagmi/core/src/query/readContracts.ts"],"sourcesContent":["import type { QueryOptions } from '@tanstack/query-core'\nimport type {\n  ContractFunctionParameters,\n  MulticallParameters as viem_MulticallParameters,\n} from 'viem'\n\nimport {\n  type ReadContractsErrorType,\n  type ReadContractsReturnType,\n  readContracts,\n} from '../actions/readContracts.js'\nimport type { Config } from '../createConfig.js'\nimport type { ChainIdParameter } from '../types/properties.js'\nimport type { ScopeKeyParameter } from '../types/properties.js'\nimport type { ExactPartial } from '../types/utils.js'\nimport { filterQueryOptions } from './utils.js'\n\nexport type ReadContractsOptions<\n  contracts extends readonly unknown[],\n  allowFailure extends boolean,\n  config extends Config,\n> = ExactPartial<\n  viem_MulticallParameters<\n    contracts,\n    allowFailure,\n    { optional: true; properties: ChainIdParameter<config> }\n  >\n> &\n  ScopeKeyParameter\n\nexport function readContractsQueryOptions<\n  config extends Config,\n  const contracts extends readonly unknown[],\n  allowFailure extends boolean = true,\n>(\n  config: config,\n  options: ReadContractsOptions<contracts, allowFailure, config> &\n    ChainIdParameter<config> = {},\n) {\n  return {\n    async queryFn({ queryKey }) {\n      const contracts: ContractFunctionParameters[] = []\n      const length = queryKey[1].contracts.length\n      for (let i = 0; i < length; i++) {\n        const contract = queryKey[1].contracts[i]!\n        const abi = (options.contracts?.[i] as ContractFunctionParameters).abi\n        contracts.push({ ...contract, abi })\n      }\n      const { scopeKey: _, ...parameters } = queryKey[1]\n      return readContracts(config, {\n        ...parameters,\n        contracts,\n      }) as Promise<ReadContractsReturnType<contracts, allowFailure>>\n    },\n    queryKey: readContractsQueryKey(options),\n  } as const satisfies QueryOptions<\n    ReadContractsQueryFnData<contracts, allowFailure>,\n    ReadContractsErrorType,\n    ReadContractsData<contracts, allowFailure>,\n    ReadContractsQueryKey<contracts, allowFailure, config>\n  >\n}\n\nexport type ReadContractsQueryFnData<\n  contracts extends readonly unknown[],\n  allowFailure extends boolean,\n> = ReadContractsReturnType<contracts, allowFailure>\n\nexport type ReadContractsData<\n  contracts extends readonly unknown[],\n  allowFailure extends boolean,\n> = ReadContractsQueryFnData<contracts, allowFailure>\n\nexport function readContractsQueryKey<\n  config extends Config,\n  const contracts extends readonly unknown[],\n  allowFailure extends boolean,\n>(\n  options: ReadContractsOptions<contracts, allowFailure, config> &\n    ChainIdParameter<config> = {},\n) {\n  const contracts = []\n  for (const contract of (options.contracts ??\n    []) as (ContractFunctionParameters & { chainId: number })[]) {\n    const { abi: _, ...rest } = contract\n    contracts.push({ ...rest, chainId: rest.chainId ?? options.chainId })\n  }\n  return [\n    'readContracts',\n    filterQueryOptions({ ...options, contracts }),\n  ] as const\n}\n\nexport type ReadContractsQueryKey<\n  contracts extends readonly unknown[],\n  allowFailure extends boolean,\n  config extends Config,\n> = ReturnType<typeof readContractsQueryKey<config, contracts, allowFailure>>\n"],"mappings":"AAMA,SAGEA,aAAa,QACR,6BAA6B;AAKpC,SAASC,kBAAkB,QAAQ,YAAY;AAe/C,OAAM,SAAUC,yBAAyBA,CAKvCC,MAAc,EACdC,OAAA,GAC6B,EAAE;EAE/B,OAAO;IACL,MAAMC,OAAOA,CAAC;MAAEC;IAAQ,CAAE;MACxB,MAAMC,SAAS,GAAiC,EAAE;MAClD,MAAMC,MAAM,GAAGF,QAAQ,CAAC,CAAC,CAAC,CAACC,SAAS,CAACC,MAAM;MAC3C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,MAAM,EAAEC,CAAC,EAAE,EAAE;QAC/B,MAAMC,QAAQ,GAAGJ,QAAQ,CAAC,CAAC,CAAC,CAACC,SAAS,CAACE,CAAC,CAAE;QAC1C,MAAME,GAAG,GAAG,CAACP,OAAO,CAACG,SAAS,GAAGE,CAAC,CAAgC,EAACE,GAAG;QACtEJ,SAAS,CAACK,IAAI,CAAC;UAAE,GAAGF,QAAQ;UAAEC;QAAG,CAAE,CAAC;MACtC;MACA,MAAM;QAAEE,QAAQ,EAAEC,CAAC;QAAE,GAAGC;MAAU,CAAE,GAAGT,QAAQ,CAAC,CAAC,CAAC;MAClD,OAAON,aAAa,CAACG,MAAM,EAAE;QAC3B,GAAGY,UAAU;QACbR;OACD,CAA8D;IACjE,CAAC;IACDD,QAAQ,EAAEU,qBAAqB,CAACZ,OAAO;GAMxC;AACH;AAYA,OAAM,SAAUY,qBAAqBA,CAKnCZ,OAAA,GAC6B,EAAE;EAE/B,MAAMG,SAAS,GAAG,EAAE;EACpB,KAAK,MAAMG,QAAQ,IAAKN,OAAO,CAACG,SAAS,IACvC,EAAE,EAA2D;IAC7D,MAAM;MAAEI,GAAG,EAAEG,CAAC;MAAE,GAAGG;IAAI,CAAE,GAAGP,QAAQ;IACpCH,SAAS,CAACK,IAAI,CAAC;MAAE,GAAGK,IAAI;MAAEC,OAAO,EAAED,IAAI,CAACC,OAAO,IAAId,OAAO,CAACc;IAAO,CAAE,CAAC;EACvE;EACA,OAAO,CACL,eAAe,EACfjB,kBAAkB,CAAC;IAAE,GAAGG,OAAO;IAAEG;EAAS,CAAE,CAAC,CACrC;AACZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}