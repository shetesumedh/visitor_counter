{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { encodeFunctionData, hashMessage, hashTypedData } from 'viem';\nimport { MAGIC_VALUE_BYTES, MAGIC_VALUE } from './signatures.js';\nimport { Methods } from '../communication/methods.js';\nimport { RPC_CALLS } from '../eth/constants.js';\nimport { isObjectEIP712TypedData } from '../types/index.js';\nimport requirePermission from '../decorators/requirePermissions.js';\nclass Safe {\n  constructor(communicator) {\n    this.communicator = communicator;\n  }\n  async getChainInfo() {\n    const response = await this.communicator.send(Methods.getChainInfo, undefined);\n    return response.data;\n  }\n  async getInfo() {\n    const response = await this.communicator.send(Methods.getSafeInfo, undefined);\n    return response.data;\n  }\n  // There is a possibility that this method will change because we may add pagination to the endpoint\n  async experimental_getBalances({\n    currency = 'usd'\n  } = {}) {\n    const response = await this.communicator.send(Methods.getSafeBalances, {\n      currency\n    });\n    return response.data;\n  }\n  async check1271Signature(messageHash, signature = '0x') {\n    const safeInfo = await this.getInfo();\n    const encodedIsValidSignatureCall = encodeFunctionData({\n      abi: [{\n        constant: false,\n        inputs: [{\n          name: '_dataHash',\n          type: 'bytes32'\n        }, {\n          name: '_signature',\n          type: 'bytes'\n        }],\n        name: 'isValidSignature',\n        outputs: [{\n          name: '',\n          type: 'bytes4'\n        }],\n        payable: false,\n        stateMutability: 'nonpayable',\n        type: 'function'\n      }],\n      functionName: 'isValidSignature',\n      args: [messageHash, signature]\n    });\n    const payload = {\n      call: RPC_CALLS.eth_call,\n      params: [{\n        to: safeInfo.safeAddress,\n        data: encodedIsValidSignatureCall\n      }, 'latest']\n    };\n    try {\n      const response = await this.communicator.send(Methods.rpcCall, payload);\n      return response.data.slice(0, 10).toLowerCase() === MAGIC_VALUE;\n    } catch (err) {\n      return false;\n    }\n  }\n  async check1271SignatureBytes(messageHash, signature = '0x') {\n    const safeInfo = await this.getInfo();\n    const encodedIsValidSignatureCall = encodeFunctionData({\n      abi: [{\n        constant: false,\n        inputs: [{\n          name: '_data',\n          type: 'bytes'\n        }, {\n          name: '_signature',\n          type: 'bytes'\n        }],\n        name: 'isValidSignature',\n        outputs: [{\n          name: '',\n          type: 'bytes4'\n        }],\n        payable: false,\n        stateMutability: 'nonpayable',\n        type: 'function'\n      }],\n      functionName: 'isValidSignature',\n      args: [messageHash, signature]\n    });\n    const payload = {\n      call: RPC_CALLS.eth_call,\n      params: [{\n        to: safeInfo.safeAddress,\n        data: encodedIsValidSignatureCall\n      }, 'latest']\n    };\n    try {\n      const response = await this.communicator.send(Methods.rpcCall, payload);\n      return response.data.slice(0, 10).toLowerCase() === MAGIC_VALUE_BYTES;\n    } catch (err) {\n      return false;\n    }\n  }\n  calculateMessageHash(message) {\n    return hashMessage(message);\n  }\n  calculateTypedMessageHash(typedMessage) {\n    const chainId = typeof typedMessage.domain.chainId === 'object' ? typedMessage.domain.chainId.toNumber() : Number(typedMessage.domain.chainId);\n    let primaryType = typedMessage.primaryType;\n    if (!primaryType) {\n      const fields = Object.values(typedMessage.types);\n      // We try to infer primaryType (simplified ether's version)\n      const primaryTypes = Object.keys(typedMessage.types).filter(typeName => fields.every(dataTypes => dataTypes.every(({\n        type\n      }) => type.replace('[', '').replace(']', '') !== typeName)));\n      if (primaryTypes.length === 0 || primaryTypes.length > 1) throw new Error('Please specify primaryType');\n      primaryType = primaryTypes[0];\n    }\n    return hashTypedData({\n      message: typedMessage.message,\n      domain: {\n        ...typedMessage.domain,\n        chainId,\n        verifyingContract: typedMessage.domain.verifyingContract,\n        salt: typedMessage.domain.salt\n      },\n      types: typedMessage.types,\n      primaryType\n    });\n  }\n  async getOffChainSignature(messageHash) {\n    const response = await this.communicator.send(Methods.getOffChainSignature, messageHash);\n    return response.data;\n  }\n  async isMessageSigned(message, signature = '0x') {\n    let check;\n    if (typeof message === 'string') {\n      check = async () => {\n        const messageHash = this.calculateMessageHash(message);\n        const messageHashSigned = await this.isMessageHashSigned(messageHash, signature);\n        return messageHashSigned;\n      };\n    }\n    if (isObjectEIP712TypedData(message)) {\n      check = async () => {\n        const messageHash = this.calculateTypedMessageHash(message);\n        const messageHashSigned = await this.isMessageHashSigned(messageHash, signature);\n        return messageHashSigned;\n      };\n    }\n    if (check) {\n      const isValid = await check();\n      return isValid;\n    }\n    throw new Error('Invalid message type');\n  }\n  async isMessageHashSigned(messageHash, signature = '0x') {\n    const checks = [this.check1271Signature.bind(this), this.check1271SignatureBytes.bind(this)];\n    for (const check of checks) {\n      const isValid = await check(messageHash, signature);\n      if (isValid) {\n        return true;\n      }\n    }\n    return false;\n  }\n  async getEnvironmentInfo() {\n    const response = await this.communicator.send(Methods.getEnvironmentInfo, undefined);\n    return response.data;\n  }\n  async requestAddressBook() {\n    const response = await this.communicator.send(Methods.requestAddressBook, undefined);\n    return response.data;\n  }\n}\n__decorate([requirePermission()], Safe.prototype, \"requestAddressBook\", null);\nexport { Safe };","map":{"version":3,"names":["encodeFunctionData","hashMessage","hashTypedData","MAGIC_VALUE_BYTES","MAGIC_VALUE","Methods","RPC_CALLS","isObjectEIP712TypedData","requirePermission","Safe","constructor","communicator","getChainInfo","response","send","undefined","data","getInfo","getSafeInfo","experimental_getBalances","currency","getSafeBalances","check1271Signature","messageHash","signature","safeInfo","encodedIsValidSignatureCall","abi","constant","inputs","name","type","outputs","payable","stateMutability","functionName","args","payload","call","eth_call","params","to","safeAddress","rpcCall","slice","toLowerCase","err","check1271SignatureBytes","calculateMessageHash","message","calculateTypedMessageHash","typedMessage","chainId","domain","toNumber","Number","primaryType","fields","Object","values","types","primaryTypes","keys","filter","typeName","every","dataTypes","replace","length","Error","verifyingContract","salt","getOffChainSignature","isMessageSigned","check","messageHashSigned","isMessageHashSigned","isValid","checks","bind","getEnvironmentInfo","requestAddressBook","__decorate"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/@safe-global/safe-apps-sdk/src/safe/index.ts"],"sourcesContent":["import { encodeFunctionData, Address, hashMessage, hashTypedData } from 'viem';\nimport { MAGIC_VALUE_BYTES, MAGIC_VALUE } from './signatures.js';\nimport { Methods } from '../communication/methods.js';\nimport { RPC_CALLS } from '../eth/constants.js';\nimport {\n  Communicator,\n  ChainInfo,\n  SafeBalances,\n  GetBalanceParams,\n  RPCPayload,\n  TransactionConfig,\n  EnvironmentInfo,\n  AddressBookItem,\n  isObjectEIP712TypedData,\n  EIP712TypedData,\n  SafeInfoExtended,\n} from '../types/index.js';\nimport requirePermission from '../decorators/requirePermissions.js';\n\nclass Safe {\n  private readonly communicator: Communicator;\n\n  constructor(communicator: Communicator) {\n    this.communicator = communicator;\n  }\n\n  async getChainInfo(): Promise<ChainInfo> {\n    const response = await this.communicator.send<Methods.getChainInfo, undefined, ChainInfo>(\n      Methods.getChainInfo,\n      undefined,\n    );\n\n    return response.data;\n  }\n\n  async getInfo(): Promise<SafeInfoExtended> {\n    const response = await this.communicator.send<Methods.getSafeInfo, undefined, SafeInfoExtended>(\n      Methods.getSafeInfo,\n      undefined,\n    );\n\n    return response.data;\n  }\n\n  // There is a possibility that this method will change because we may add pagination to the endpoint\n  async experimental_getBalances({ currency = 'usd' }: GetBalanceParams = {}): Promise<SafeBalances> {\n    const response = await this.communicator.send<Methods.getSafeBalances, { currency: string }, SafeBalances>(\n      Methods.getSafeBalances,\n      {\n        currency,\n      },\n    );\n\n    return response.data;\n  }\n\n  private async check1271Signature(messageHash: string, signature = '0x'): Promise<boolean> {\n    const safeInfo = await this.getInfo();\n\n    const encodedIsValidSignatureCall = encodeFunctionData({\n      abi: [\n        {\n          constant: false,\n          inputs: [\n            {\n              name: '_dataHash',\n              type: 'bytes32',\n            },\n            {\n              name: '_signature',\n              type: 'bytes',\n            },\n          ],\n          name: 'isValidSignature',\n          outputs: [\n            {\n              name: '',\n              type: 'bytes4',\n            },\n          ],\n          payable: false,\n          stateMutability: 'nonpayable',\n          type: 'function',\n        },\n      ] as const,\n      functionName: 'isValidSignature',\n      args: [messageHash as Address, signature as Address],\n    });\n\n    const payload = {\n      call: RPC_CALLS.eth_call,\n      params: [\n        {\n          to: safeInfo.safeAddress,\n          data: encodedIsValidSignatureCall,\n        },\n        'latest',\n      ],\n    };\n    try {\n      const response = await this.communicator.send<Methods.rpcCall, RPCPayload<[TransactionConfig, string]>, string>(\n        Methods.rpcCall,\n        payload,\n      );\n\n      return response.data.slice(0, 10).toLowerCase() === MAGIC_VALUE;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  private async check1271SignatureBytes(messageHash: string, signature = '0x'): Promise<boolean> {\n    const safeInfo = await this.getInfo();\n\n    const encodedIsValidSignatureCall = encodeFunctionData({\n      abi: [\n        {\n          constant: false,\n          inputs: [\n            {\n              name: '_data',\n              type: 'bytes',\n            },\n            {\n              name: '_signature',\n              type: 'bytes',\n            },\n          ],\n          name: 'isValidSignature',\n          outputs: [\n            {\n              name: '',\n              type: 'bytes4',\n            },\n          ],\n          payable: false,\n          stateMutability: 'nonpayable',\n          type: 'function',\n        },\n      ] as const,\n      functionName: 'isValidSignature',\n      args: [messageHash as Address, signature as Address],\n    });\n\n    const payload = {\n      call: RPC_CALLS.eth_call,\n      params: [\n        {\n          to: safeInfo.safeAddress,\n          data: encodedIsValidSignatureCall,\n        },\n        'latest',\n      ],\n    };\n\n    try {\n      const response = await this.communicator.send<Methods.rpcCall, RPCPayload<[TransactionConfig, string]>, string>(\n        Methods.rpcCall,\n        payload,\n      );\n\n      return response.data.slice(0, 10).toLowerCase() === MAGIC_VALUE_BYTES;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  calculateMessageHash(message: string): string {\n    return hashMessage(message);\n  }\n\n  calculateTypedMessageHash(typedMessage: EIP712TypedData): string {\n    const chainId =\n      typeof typedMessage.domain.chainId === 'object'\n        ? typedMessage.domain.chainId.toNumber()\n        : Number(typedMessage.domain.chainId);\n\n    let primaryType = typedMessage.primaryType;\n    if (!primaryType) {\n      const fields = Object.values(typedMessage.types);\n      // We try to infer primaryType (simplified ether's version)\n      const primaryTypes = Object.keys(typedMessage.types).filter((typeName) =>\n        fields.every((dataTypes) => dataTypes.every(({ type }) => type.replace('[', '').replace(']', '') !== typeName)),\n      );\n      if (primaryTypes.length === 0 || primaryTypes.length > 1) throw new Error('Please specify primaryType');\n      primaryType = primaryTypes[0];\n    }\n\n    return hashTypedData({\n      message: typedMessage.message,\n      domain: {\n        ...typedMessage.domain,\n        chainId,\n        verifyingContract: typedMessage.domain.verifyingContract as Address,\n        salt: typedMessage.domain.salt as Address,\n      },\n      types: typedMessage.types,\n      primaryType,\n    });\n  }\n\n  async getOffChainSignature(messageHash: string): Promise<string> {\n    const response = await this.communicator.send<Methods.getOffChainSignature, string, string>(\n      Methods.getOffChainSignature,\n      messageHash,\n    );\n\n    return response.data;\n  }\n\n  async isMessageSigned(message: string | EIP712TypedData, signature = '0x'): Promise<boolean> {\n    let check: (() => Promise<boolean>) | undefined;\n    if (typeof message === 'string') {\n      check = async (): Promise<boolean> => {\n        const messageHash = this.calculateMessageHash(message);\n        const messageHashSigned = await this.isMessageHashSigned(messageHash, signature);\n        return messageHashSigned;\n      };\n    }\n\n    if (isObjectEIP712TypedData(message)) {\n      check = async (): Promise<boolean> => {\n        const messageHash = this.calculateTypedMessageHash(message);\n        const messageHashSigned = await this.isMessageHashSigned(messageHash, signature);\n        return messageHashSigned;\n      };\n    }\n    if (check) {\n      const isValid = await check();\n\n      return isValid;\n    }\n\n    throw new Error('Invalid message type');\n  }\n\n  async isMessageHashSigned(messageHash: string, signature = '0x'): Promise<boolean> {\n    const checks = [this.check1271Signature.bind(this), this.check1271SignatureBytes.bind(this)];\n\n    for (const check of checks) {\n      const isValid = await check(messageHash, signature);\n      if (isValid) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  async getEnvironmentInfo(): Promise<EnvironmentInfo> {\n    const response = await this.communicator.send<Methods.getEnvironmentInfo, undefined, EnvironmentInfo>(\n      Methods.getEnvironmentInfo,\n      undefined,\n    );\n\n    return response.data;\n  }\n\n  @requirePermission()\n  async requestAddressBook(): Promise<AddressBookItem[]> {\n    const response = await this.communicator.send<Methods.requestAddressBook, undefined, AddressBookItem[]>(\n      Methods.requestAddressBook,\n      undefined,\n    );\n\n    return response.data;\n  }\n}\n\nexport { Safe };\n"],"mappings":";;;;;;;AAAA,SAASA,kBAAkB,EAAWC,WAAW,EAAEC,aAAa,QAAQ,MAAM;AAC9E,SAASC,iBAAiB,EAAEC,WAAW,QAAQ,iBAAiB;AAChE,SAASC,OAAO,QAAQ,6BAA6B;AACrD,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SASEC,uBAAuB,QAGlB,mBAAmB;AAC1B,OAAOC,iBAAiB,MAAM,qCAAqC;AAEnE,MAAMC,IAAI;EAGRC,YAAYC,YAA0B;IACpC,IAAI,CAACA,YAAY,GAAGA,YAAY;EAClC;EAEA,MAAMC,YAAYA,CAAA;IAChB,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAACF,YAAY,CAACG,IAAI,CAC3CT,OAAO,CAACO,YAAY,EACpBG,SAAS,CACV;IAED,OAAOF,QAAQ,CAACG,IAAI;EACtB;EAEA,MAAMC,OAAOA,CAAA;IACX,MAAMJ,QAAQ,GAAG,MAAM,IAAI,CAACF,YAAY,CAACG,IAAI,CAC3CT,OAAO,CAACa,WAAW,EACnBH,SAAS,CACV;IAED,OAAOF,QAAQ,CAACG,IAAI;EACtB;EAEA;EACA,MAAMG,wBAAwBA,CAAC;IAAEC,QAAQ,GAAG;EAAK,IAAuB,EAAE;IACxE,MAAMP,QAAQ,GAAG,MAAM,IAAI,CAACF,YAAY,CAACG,IAAI,CAC3CT,OAAO,CAACgB,eAAe,EACvB;MACED;KACD,CACF;IAED,OAAOP,QAAQ,CAACG,IAAI;EACtB;EAEQ,MAAMM,kBAAkBA,CAACC,WAAmB,EAAEC,SAAS,GAAG,IAAI;IACpE,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAACR,OAAO,EAAE;IAErC,MAAMS,2BAA2B,GAAG1B,kBAAkB,CAAC;MACrD2B,GAAG,EAAE,CACH;QACEC,QAAQ,EAAE,KAAK;QACfC,MAAM,EAAE,CACN;UACEC,IAAI,EAAE,WAAW;UACjBC,IAAI,EAAE;SACP,EACD;UACED,IAAI,EAAE,YAAY;UAClBC,IAAI,EAAE;SACP,CACF;QACDD,IAAI,EAAE,kBAAkB;QACxBE,OAAO,EAAE,CACP;UACEF,IAAI,EAAE,EAAE;UACRC,IAAI,EAAE;SACP,CACF;QACDE,OAAO,EAAE,KAAK;QACdC,eAAe,EAAE,YAAY;QAC7BH,IAAI,EAAE;OACP,CACO;MACVI,YAAY,EAAE,kBAAkB;MAChCC,IAAI,EAAE,CAACb,WAAsB,EAAEC,SAAoB;KACpD,CAAC;IAEF,MAAMa,OAAO,GAAG;MACdC,IAAI,EAAEhC,SAAS,CAACiC,QAAQ;MACxBC,MAAM,EAAE,CACN;QACEC,EAAE,EAAEhB,QAAQ,CAACiB,WAAW;QACxB1B,IAAI,EAAEU;OACP,EACD,QAAQ;KAEX;IACD,IAAI;MACF,MAAMb,QAAQ,GAAG,MAAM,IAAI,CAACF,YAAY,CAACG,IAAI,CAC3CT,OAAO,CAACsC,OAAO,EACfN,OAAO,CACR;MAED,OAAOxB,QAAQ,CAACG,IAAI,CAAC4B,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAACC,WAAW,EAAE,KAAKzC,WAAW;KAChE,CAAC,OAAO0C,GAAG,EAAE;MACZ,OAAO,KAAK;;EAEhB;EAEQ,MAAMC,uBAAuBA,CAACxB,WAAmB,EAAEC,SAAS,GAAG,IAAI;IACzE,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAACR,OAAO,EAAE;IAErC,MAAMS,2BAA2B,GAAG1B,kBAAkB,CAAC;MACrD2B,GAAG,EAAE,CACH;QACEC,QAAQ,EAAE,KAAK;QACfC,MAAM,EAAE,CACN;UACEC,IAAI,EAAE,OAAO;UACbC,IAAI,EAAE;SACP,EACD;UACED,IAAI,EAAE,YAAY;UAClBC,IAAI,EAAE;SACP,CACF;QACDD,IAAI,EAAE,kBAAkB;QACxBE,OAAO,EAAE,CACP;UACEF,IAAI,EAAE,EAAE;UACRC,IAAI,EAAE;SACP,CACF;QACDE,OAAO,EAAE,KAAK;QACdC,eAAe,EAAE,YAAY;QAC7BH,IAAI,EAAE;OACP,CACO;MACVI,YAAY,EAAE,kBAAkB;MAChCC,IAAI,EAAE,CAACb,WAAsB,EAAEC,SAAoB;KACpD,CAAC;IAEF,MAAMa,OAAO,GAAG;MACdC,IAAI,EAAEhC,SAAS,CAACiC,QAAQ;MACxBC,MAAM,EAAE,CACN;QACEC,EAAE,EAAEhB,QAAQ,CAACiB,WAAW;QACxB1B,IAAI,EAAEU;OACP,EACD,QAAQ;KAEX;IAED,IAAI;MACF,MAAMb,QAAQ,GAAG,MAAM,IAAI,CAACF,YAAY,CAACG,IAAI,CAC3CT,OAAO,CAACsC,OAAO,EACfN,OAAO,CACR;MAED,OAAOxB,QAAQ,CAACG,IAAI,CAAC4B,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAACC,WAAW,EAAE,KAAK1C,iBAAiB;KACtE,CAAC,OAAO2C,GAAG,EAAE;MACZ,OAAO,KAAK;;EAEhB;EAEAE,oBAAoBA,CAACC,OAAe;IAClC,OAAOhD,WAAW,CAACgD,OAAO,CAAC;EAC7B;EAEAC,yBAAyBA,CAACC,YAA6B;IACrD,MAAMC,OAAO,GACX,OAAOD,YAAY,CAACE,MAAM,CAACD,OAAO,KAAK,QAAQ,GAC3CD,YAAY,CAACE,MAAM,CAACD,OAAO,CAACE,QAAQ,EAAE,GACtCC,MAAM,CAACJ,YAAY,CAACE,MAAM,CAACD,OAAO,CAAC;IAEzC,IAAII,WAAW,GAAGL,YAAY,CAACK,WAAW;IAC1C,IAAI,CAACA,WAAW,EAAE;MAChB,MAAMC,MAAM,GAAGC,MAAM,CAACC,MAAM,CAACR,YAAY,CAACS,KAAK,CAAC;MAChD;MACA,MAAMC,YAAY,GAAGH,MAAM,CAACI,IAAI,CAACX,YAAY,CAACS,KAAK,CAAC,CAACG,MAAM,CAAEC,QAAQ,IACnEP,MAAM,CAACQ,KAAK,CAAEC,SAAS,IAAKA,SAAS,CAACD,KAAK,CAAC,CAAC;QAAElC;MAAI,CAAE,KAAKA,IAAI,CAACoC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,KAAKH,QAAQ,CAAC,CAAC,CAChH;MACD,IAAIH,YAAY,CAACO,MAAM,KAAK,CAAC,IAAIP,YAAY,CAACO,MAAM,GAAG,CAAC,EAAE,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;MACvGb,WAAW,GAAGK,YAAY,CAAC,CAAC,CAAC;;IAG/B,OAAO3D,aAAa,CAAC;MACnB+C,OAAO,EAAEE,YAAY,CAACF,OAAO;MAC7BI,MAAM,EAAE;QACN,GAAGF,YAAY,CAACE,MAAM;QACtBD,OAAO;QACPkB,iBAAiB,EAAEnB,YAAY,CAACE,MAAM,CAACiB,iBAA4B;QACnEC,IAAI,EAAEpB,YAAY,CAACE,MAAM,CAACkB;OAC3B;MACDX,KAAK,EAAET,YAAY,CAACS,KAAK;MACzBJ;KACD,CAAC;EACJ;EAEA,MAAMgB,oBAAoBA,CAACjD,WAAmB;IAC5C,MAAMV,QAAQ,GAAG,MAAM,IAAI,CAACF,YAAY,CAACG,IAAI,CAC3CT,OAAO,CAACmE,oBAAoB,EAC5BjD,WAAW,CACZ;IAED,OAAOV,QAAQ,CAACG,IAAI;EACtB;EAEA,MAAMyD,eAAeA,CAACxB,OAAiC,EAAEzB,SAAS,GAAG,IAAI;IACvE,IAAIkD,KAA2C;IAC/C,IAAI,OAAOzB,OAAO,KAAK,QAAQ,EAAE;MAC/ByB,KAAK,GAAG,MAAAA,CAAA,KAA6B;QACnC,MAAMnD,WAAW,GAAG,IAAI,CAACyB,oBAAoB,CAACC,OAAO,CAAC;QACtD,MAAM0B,iBAAiB,GAAG,MAAM,IAAI,CAACC,mBAAmB,CAACrD,WAAW,EAAEC,SAAS,CAAC;QAChF,OAAOmD,iBAAiB;MAC1B,CAAC;;IAGH,IAAIpE,uBAAuB,CAAC0C,OAAO,CAAC,EAAE;MACpCyB,KAAK,GAAG,MAAAA,CAAA,KAA6B;QACnC,MAAMnD,WAAW,GAAG,IAAI,CAAC2B,yBAAyB,CAACD,OAAO,CAAC;QAC3D,MAAM0B,iBAAiB,GAAG,MAAM,IAAI,CAACC,mBAAmB,CAACrD,WAAW,EAAEC,SAAS,CAAC;QAChF,OAAOmD,iBAAiB;MAC1B,CAAC;;IAEH,IAAID,KAAK,EAAE;MACT,MAAMG,OAAO,GAAG,MAAMH,KAAK,EAAE;MAE7B,OAAOG,OAAO;;IAGhB,MAAM,IAAIR,KAAK,CAAC,sBAAsB,CAAC;EACzC;EAEA,MAAMO,mBAAmBA,CAACrD,WAAmB,EAAEC,SAAS,GAAG,IAAI;IAC7D,MAAMsD,MAAM,GAAG,CAAC,IAAI,CAACxD,kBAAkB,CAACyD,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAChC,uBAAuB,CAACgC,IAAI,CAAC,IAAI,CAAC,CAAC;IAE5F,KAAK,MAAML,KAAK,IAAII,MAAM,EAAE;MAC1B,MAAMD,OAAO,GAAG,MAAMH,KAAK,CAACnD,WAAW,EAAEC,SAAS,CAAC;MACnD,IAAIqD,OAAO,EAAE;QACX,OAAO,IAAI;;;IAIf,OAAO,KAAK;EACd;EAEA,MAAMG,kBAAkBA,CAAA;IACtB,MAAMnE,QAAQ,GAAG,MAAM,IAAI,CAACF,YAAY,CAACG,IAAI,CAC3CT,OAAO,CAAC2E,kBAAkB,EAC1BjE,SAAS,CACV;IAED,OAAOF,QAAQ,CAACG,IAAI;EACtB;EAGM,MAAAiE,kBAAkBA,CAAA;IACtB,MAAMpE,QAAQ,GAAG,MAAM,IAAI,CAACF,YAAY,CAACG,IAAI,CAC3CT,OAAO,CAAC4E,kBAAkB,EAC1BlE,SAAS,CACV;IAED,OAAOF,QAAQ,CAACG,IAAI;EACtB;;AAPMkE,UAAA,EADL1E,iBAAiB,EAAE,C,6CAQnB;AAGH,SAASC,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}