{"ast":null,"code":"import { getConnectorClient } from '../actions/getConnectorClient.js';\nimport { filterQueryOptions } from './utils.js';\nexport function getConnectorClientQueryOptions(config, options = {}) {\n  return {\n    gcTime: 0,\n    async queryFn({\n      queryKey\n    }) {\n      const {\n        connector\n      } = options;\n      const {\n        connectorUid: _,\n        scopeKey: _s,\n        ...parameters\n      } = queryKey[1];\n      return getConnectorClient(config, {\n        ...parameters,\n        connector\n      });\n    },\n    queryKey: getConnectorClientQueryKey(options)\n  };\n}\nexport function getConnectorClientQueryKey(options = {}) {\n  const {\n    connector,\n    ...parameters\n  } = options;\n  return ['connectorClient', {\n    ...filterQueryOptions(parameters),\n    connectorUid: connector?.uid\n  }];\n}","map":{"version":3,"names":["getConnectorClient","filterQueryOptions","getConnectorClientQueryOptions","config","options","gcTime","queryFn","queryKey","connector","connectorUid","_","scopeKey","_s","parameters","getConnectorClientQueryKey","uid"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/@wagmi/core/src/query/getConnectorClient.ts"],"sourcesContent":["import type { QueryOptions } from '@tanstack/query-core'\n\nimport {\n  type GetConnectorClientErrorType,\n  type GetConnectorClientParameters,\n  type GetConnectorClientReturnType,\n  getConnectorClient,\n} from '../actions/getConnectorClient.js'\nimport type { Config } from '../createConfig.js'\nimport type { ScopeKeyParameter } from '../types/properties.js'\nimport type { Compute, ExactPartial } from '../types/utils.js'\nimport { filterQueryOptions } from './utils.js'\n\nexport type GetConnectorClientOptions<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n> = Compute<\n  ExactPartial<GetConnectorClientParameters<config, chainId>> &\n    ScopeKeyParameter\n>\n\nexport function getConnectorClientQueryOptions<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n>(config: config, options: GetConnectorClientOptions<config, chainId> = {}) {\n  return {\n    gcTime: 0,\n    async queryFn({ queryKey }) {\n      const { connector } = options\n      const { connectorUid: _, scopeKey: _s, ...parameters } = queryKey[1]\n      return getConnectorClient(config, {\n        ...parameters,\n        connector,\n      }) as unknown as Promise<GetConnectorClientReturnType<config, chainId>>\n    },\n    queryKey: getConnectorClientQueryKey(options),\n  } as const satisfies QueryOptions<\n    GetConnectorClientQueryFnData<config, chainId>,\n    GetConnectorClientErrorType,\n    GetConnectorClientData<config, chainId>,\n    GetConnectorClientQueryKey<config, chainId>\n  >\n}\n\nexport type GetConnectorClientQueryFnData<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n> = GetConnectorClientReturnType<config, chainId>\n\nexport type GetConnectorClientData<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n> = GetConnectorClientQueryFnData<config, chainId>\n\nexport function getConnectorClientQueryKey<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n>(options: GetConnectorClientOptions<config, chainId> = {}) {\n  const { connector, ...parameters } = options\n  return [\n    'connectorClient',\n    { ...filterQueryOptions(parameters), connectorUid: connector?.uid },\n  ] as const\n}\n\nexport type GetConnectorClientQueryKey<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n> = ReturnType<typeof getConnectorClientQueryKey<config, chainId>>\n"],"mappings":"AAEA,SAIEA,kBAAkB,QACb,kCAAkC;AAIzC,SAASC,kBAAkB,QAAQ,YAAY;AAU/C,OAAM,SAAUC,8BAA8BA,CAG5CC,MAAc,EAAEC,OAAA,GAAsD,EAAE;EACxE,OAAO;IACLC,MAAM,EAAE,CAAC;IACT,MAAMC,OAAOA,CAAC;MAAEC;IAAQ,CAAE;MACxB,MAAM;QAAEC;MAAS,CAAE,GAAGJ,OAAO;MAC7B,MAAM;QAAEK,YAAY,EAAEC,CAAC;QAAEC,QAAQ,EAAEC,EAAE;QAAE,GAAGC;MAAU,CAAE,GAAGN,QAAQ,CAAC,CAAC,CAAC;MACpE,OAAOP,kBAAkB,CAACG,MAAM,EAAE;QAChC,GAAGU,UAAU;QACbL;OACD,CAAsE;IACzE,CAAC;IACDD,QAAQ,EAAEO,0BAA0B,CAACV,OAAO;GAM7C;AACH;AAYA,OAAM,SAAUU,0BAA0BA,CAGxCV,OAAA,GAAsD,EAAE;EACxD,MAAM;IAAEI,SAAS;IAAE,GAAGK;EAAU,CAAE,GAAGT,OAAO;EAC5C,OAAO,CACL,iBAAiB,EACjB;IAAE,GAAGH,kBAAkB,CAACY,UAAU,CAAC;IAAEJ,YAAY,EAAED,SAAS,EAAEO;EAAG,CAAE,CAC3D;AACZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}