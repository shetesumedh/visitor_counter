{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.verifyAuthorization = verifyAuthorization;\nconst getAddress_js_1 = require(\"../address/getAddress.js\");\nconst isAddressEqual_js_1 = require(\"../address/isAddressEqual.js\");\nconst recoverAuthorizationAddress_js_1 = require(\"./recoverAuthorizationAddress.js\");\nasync function verifyAuthorization({\n  address,\n  authorization,\n  signature\n}) {\n  return (0, isAddressEqual_js_1.isAddressEqual)((0, getAddress_js_1.getAddress)(address), await (0, recoverAuthorizationAddress_js_1.recoverAuthorizationAddress)({\n    authorization,\n    signature\n  }));\n}","map":{"version":3,"names":["exports","verifyAuthorization","getAddress_js_1","require","isAddressEqual_js_1","recoverAuthorizationAddress_js_1","address","authorization","signature","isAddressEqual","getAddress","recoverAuthorizationAddress"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/viem/utils/authorization/verifyAuthorization.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport { type GetAddressErrorType, getAddress } from '../address/getAddress.js'\nimport {\n  type IsAddressEqualErrorType,\n  isAddressEqual,\n} from '../address/isAddressEqual.js'\nimport {\n  type RecoverAuthorizationAddressErrorType,\n  type RecoverAuthorizationAddressParameters,\n  recoverAuthorizationAddress,\n} from './recoverAuthorizationAddress.js'\n\nexport type VerifyAuthorizationParameters =\n  RecoverAuthorizationAddressParameters & {\n    /** The address that signed the Authorization object. */\n    address: Address\n  }\n\nexport type VerifyAuthorizationReturnType = boolean\n\nexport type VerifyAuthorizationErrorType =\n  | IsAddressEqualErrorType\n  | GetAddressErrorType\n  | RecoverAuthorizationAddressErrorType\n  | ErrorType\n\n/**\n * Verify that an Authorization object was signed by the provided address.\n *\n * - Docs {@link https://viem.sh/docs/utilities/verifyAuthorization}\n *\n * @param parameters - {@link VerifyAuthorizationParameters}\n * @returns Whether or not the signature is valid. {@link VerifyAuthorizationReturnType}\n */\nexport async function verifyAuthorization({\n  address,\n  authorization,\n  signature,\n}: VerifyAuthorizationParameters): Promise<VerifyAuthorizationReturnType> {\n  return isAddressEqual(\n    getAddress(address),\n    await recoverAuthorizationAddress({\n      authorization,\n      signature,\n    }),\n  )\n}\n"],"mappings":";;;;;AAoCAA,OAAA,CAAAC,mBAAA,GAAAA,mBAAA;AAjCA,MAAAC,eAAA,GAAAC,OAAA;AACA,MAAAC,mBAAA,GAAAD,OAAA;AAIA,MAAAE,gCAAA,GAAAF,OAAA;AA4BO,eAAeF,mBAAmBA,CAAC;EACxCK,OAAO;EACPC,aAAa;EACbC;AAAS,CACqB;EAC9B,OAAO,IAAAJ,mBAAA,CAAAK,cAAc,EACnB,IAAAP,eAAA,CAAAQ,UAAU,EAACJ,OAAO,CAAC,EACnB,MAAM,IAAAD,gCAAA,CAAAM,2BAA2B,EAAC;IAChCJ,aAAa;IACbC;GACD,CAAC,CACH;AACH","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}