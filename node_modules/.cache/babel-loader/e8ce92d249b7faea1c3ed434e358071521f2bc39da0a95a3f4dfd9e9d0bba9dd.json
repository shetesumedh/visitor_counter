{"ast":null,"code":"import { parseAccount } from '../../../accounts/utils/parseAccount.js';\nimport { getEip712Domain } from '../../../actions/public/getEip712Domain.js';\nimport { signTypedData } from '../../../actions/wallet/signTypedData.js';\nimport { AccountNotFoundError } from '../../../errors/account.js';\nimport { getAction } from '../../../utils/getAction.js';\nimport { toPrefixedMessage } from '../../../utils/signature/toPrefixedMessage.js';\n/**\n * Signs a [EIP-191](https://eips.ethereum.org/EIPS/eip-191) personal sign message via [ERC-7739 `PersonalSign` format](https://eips.ethereum.org/EIPS/eip-7702).\n *\n * This Action is suitable to sign messages for Smart Accounts that implement (or conform to) [ERC-7739](https://eips.ethereum.org/EIPS/eip-7702) (e.g. Solady's [ERC1271.sol](https://github.com/Vectorized/solady/blob/main/src/accounts/ERC1271.sol)).\n *\n * - Docs: https://viem.sh/experimental/erc7739/signMessage\n *\n * With the calculated signature, you can:\n * - use [`verifyMessage`](https://viem.sh/docs/utilities/verifyMessage) to verify the signature,\n *\n * @param client - Client to use\n * @param parameters - {@link SignMessageParameters}\n * @returns The signed message. {@link SignMessageReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { signMessage } from 'viem/experimental/erc7739'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n *\n * const signature = await signMessage(client, {\n *   account: '0xE8Df82fA4E10e6A12a9Dab552bceA2acd26De9bb',\n *   message: 'hello world',\n *   verifier: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n * })\n *\n * @example\n * // Account Hoisting\n * import { createWalletClient, custom } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { signMessage } from 'viem/experimental/erc7739'\n *\n * const client = createWalletClient({\n *   account: '0xE8Df82fA4E10e6A12a9Dab552bceA2acd26De9bb',\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n *\n * const signature = await signMessage(client, {\n *   message: 'hello world',\n *   verifier: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n * })\n */\nexport async function signMessage(client, parameters) {\n  const {\n    account: account_ = client.account,\n    factory,\n    factoryData,\n    message,\n    verifier\n  } = parameters;\n  if (!account_) throw new AccountNotFoundError({\n    docsPath: '/experimental/erc7739/signMessage'\n  });\n  const account = parseAccount(account_);\n  const {\n    salt,\n    ...domain\n  } = await (async () => {\n    if (parameters.verifierDomain) return parameters.verifierDomain;\n    const {\n      domain\n    } = await getAction(client, getEip712Domain, 'getEip712Domain')({\n      address: verifier,\n      factory,\n      factoryData\n    });\n    return domain;\n  })();\n  return getAction(client, signTypedData, 'signTypedData')({\n    account,\n    domain,\n    types: {\n      PersonalSign: [{\n        name: 'prefixed',\n        type: 'bytes'\n      }]\n    },\n    primaryType: 'PersonalSign',\n    message: {\n      prefixed: toPrefixedMessage(message)\n    }\n  });\n}","map":{"version":3,"names":["parseAccount","getEip712Domain","signTypedData","AccountNotFoundError","getAction","toPrefixedMessage","signMessage","client","parameters","account","account_","factory","factoryData","message","verifier","docsPath","salt","domain","verifierDomain","address","types","PersonalSign","name","type","primaryType","prefixed"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/viem/experimental/erc7739/actions/signMessage.ts"],"sourcesContent":["import type { Address, TypedDataDomain } from 'abitype'\nimport type { Account } from '../../../accounts/types.js'\nimport { parseAccount } from '../../../accounts/utils/parseAccount.js'\nimport {\n  type GetEip712DomainParameters,\n  getEip712Domain,\n} from '../../../actions/public/getEip712Domain.js'\nimport { signTypedData } from '../../../actions/wallet/signTypedData.js'\nimport type { Client } from '../../../clients/createClient.js'\nimport type { Transport } from '../../../clients/transports/createTransport.js'\nimport { AccountNotFoundError } from '../../../errors/account.js'\nimport type { ErrorType } from '../../../errors/utils.js'\nimport type { GetAccountParameter } from '../../../types/account.js'\nimport type { Chain } from '../../../types/chain.js'\nimport type { Hex, SignableMessage } from '../../../types/misc.js'\nimport type { OneOf, RequiredBy } from '../../../types/utils.js'\nimport { getAction } from '../../../utils/getAction.js'\nimport { toPrefixedMessage } from '../../../utils/signature/toPrefixedMessage.js'\nimport type { GetVerifierParameter } from '../types.js'\n\nexport type SignMessageParameters<\n  account extends Account | undefined = Account | undefined,\n  accountOverride extends Account | undefined = Account | undefined,\n  verifier extends Address | undefined = Address | undefined,\n> = Pick<GetEip712DomainParameters, 'factory' | 'factoryData'> &\n  GetAccountParameter<account, accountOverride> & {\n    message: SignableMessage\n  } & OneOf<\n    | {\n        verifierDomain: RequiredBy<\n          TypedDataDomain,\n          'chainId' | 'name' | 'verifyingContract' | 'version'\n        >\n        verifier?: undefined\n      }\n    | (GetVerifierParameter<verifier> & {\n        verifierDomain?:\n          | RequiredBy<\n              TypedDataDomain,\n              'chainId' | 'name' | 'verifyingContract' | 'version'\n            >\n          | undefined\n      })\n  >\n\nexport type SignMessageReturnType = Hex\n\nexport type SignMessageErrorType = ErrorType\n\n/**\n * Signs a [EIP-191](https://eips.ethereum.org/EIPS/eip-191) personal sign message via [ERC-7739 `PersonalSign` format](https://eips.ethereum.org/EIPS/eip-7702).\n *\n * This Action is suitable to sign messages for Smart Accounts that implement (or conform to) [ERC-7739](https://eips.ethereum.org/EIPS/eip-7702) (e.g. Solady's [ERC1271.sol](https://github.com/Vectorized/solady/blob/main/src/accounts/ERC1271.sol)).\n *\n * - Docs: https://viem.sh/experimental/erc7739/signMessage\n *\n * With the calculated signature, you can:\n * - use [`verifyMessage`](https://viem.sh/docs/utilities/verifyMessage) to verify the signature,\n *\n * @param client - Client to use\n * @param parameters - {@link SignMessageParameters}\n * @returns The signed message. {@link SignMessageReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { signMessage } from 'viem/experimental/erc7739'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n *\n * const signature = await signMessage(client, {\n *   account: '0xE8Df82fA4E10e6A12a9Dab552bceA2acd26De9bb',\n *   message: 'hello world',\n *   verifier: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n * })\n *\n * @example\n * // Account Hoisting\n * import { createWalletClient, custom } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { signMessage } from 'viem/experimental/erc7739'\n *\n * const client = createWalletClient({\n *   account: '0xE8Df82fA4E10e6A12a9Dab552bceA2acd26De9bb',\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n *\n * const signature = await signMessage(client, {\n *   message: 'hello world',\n *   verifier: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n * })\n */\nexport async function signMessage<\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n  accountOverride extends Account | undefined = undefined,\n>(\n  client: Client<Transport, chain, account>,\n  parameters: SignMessageParameters<account, accountOverride>,\n): Promise<SignMessageReturnType> {\n  const {\n    account: account_ = client.account,\n    factory,\n    factoryData,\n    message,\n    verifier,\n  } = parameters\n\n  if (!account_)\n    throw new AccountNotFoundError({\n      docsPath: '/experimental/erc7739/signMessage',\n    })\n  const account = parseAccount(account_)\n\n  const { salt, ...domain } = await (async () => {\n    if (parameters.verifierDomain) return parameters.verifierDomain\n    const { domain } = await getAction(\n      client,\n      getEip712Domain,\n      'getEip712Domain',\n    )({\n      address: verifier!,\n      factory,\n      factoryData,\n    })\n    return domain\n  })()\n\n  return getAction(\n    client,\n    signTypedData,\n    'signTypedData',\n  )({\n    account,\n    domain,\n    types: {\n      PersonalSign: [{ name: 'prefixed', type: 'bytes' }],\n    },\n    primaryType: 'PersonalSign',\n    message: {\n      prefixed: toPrefixedMessage(message),\n    },\n  })\n}\n"],"mappings":"AAEA,SAASA,YAAY,QAAQ,yCAAyC;AACtE,SAEEC,eAAe,QACV,4CAA4C;AACnD,SAASC,aAAa,QAAQ,0CAA0C;AAGxE,SAASC,oBAAoB,QAAQ,4BAA4B;AAMjE,SAASC,SAAS,QAAQ,6BAA6B;AACvD,SAASC,iBAAiB,QAAQ,+CAA+C;AAgCjF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDA,OAAO,eAAeC,WAAWA,CAK/BC,MAAyC,EACzCC,UAA2D;EAE3D,MAAM;IACJC,OAAO,EAAEC,QAAQ,GAAGH,MAAM,CAACE,OAAO;IAClCE,OAAO;IACPC,WAAW;IACXC,OAAO;IACPC;EAAQ,CACT,GAAGN,UAAU;EAEd,IAAI,CAACE,QAAQ,EACX,MAAM,IAAIP,oBAAoB,CAAC;IAC7BY,QAAQ,EAAE;GACX,CAAC;EACJ,MAAMN,OAAO,GAAGT,YAAY,CAACU,QAAQ,CAAC;EAEtC,MAAM;IAAEM,IAAI;IAAE,GAAGC;EAAM,CAAE,GAAG,MAAM,CAAC,YAAW;IAC5C,IAAIT,UAAU,CAACU,cAAc,EAAE,OAAOV,UAAU,CAACU,cAAc;IAC/D,MAAM;MAAED;IAAM,CAAE,GAAG,MAAMb,SAAS,CAChCG,MAAM,EACNN,eAAe,EACf,iBAAiB,CAClB,CAAC;MACAkB,OAAO,EAAEL,QAAS;MAClBH,OAAO;MACPC;KACD,CAAC;IACF,OAAOK,MAAM;EACf,CAAC,EAAC,CAAE;EAEJ,OAAOb,SAAS,CACdG,MAAM,EACNL,aAAa,EACb,eAAe,CAChB,CAAC;IACAO,OAAO;IACPQ,MAAM;IACNG,KAAK,EAAE;MACLC,YAAY,EAAE,CAAC;QAAEC,IAAI,EAAE,UAAU;QAAEC,IAAI,EAAE;MAAO,CAAE;KACnD;IACDC,WAAW,EAAE,cAAc;IAC3BX,OAAO,EAAE;MACPY,QAAQ,EAAEpB,iBAAiB,CAACQ,OAAO;;GAEtC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}