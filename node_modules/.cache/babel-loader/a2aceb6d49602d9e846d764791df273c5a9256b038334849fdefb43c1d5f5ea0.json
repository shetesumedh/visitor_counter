{"ast":null,"code":"import { standardErrors } from '../../../core/error/errors.js';\nimport { assertPresence } from '../../../util/assertPresence.js';\nimport { encodeFunctionData, erc20Abi, hexToBigInt, numberToHex } from 'viem';\nimport { createSpendPermissionBatchMessage, createSpendPermissionMessage, createWalletSendCallsRequest, isEthSendTransactionParams, isSendCallsParams, parseFundingOptions, presentSubAccountFundingDialog, waitForCallsTransactionHash } from '../utils.js';\nimport { abi } from './constants.js';\nexport async function handleInsufficientBalanceError({\n  errorData,\n  globalAccountAddress,\n  subAccountAddress,\n  client,\n  request,\n  subAccountRequest,\n  globalAccountRequest\n}) {\n  var _a;\n  const chainId = (_a = client.chain) === null || _a === void 0 ? void 0 : _a.id;\n  assertPresence(chainId, standardErrors.rpc.internal(`invalid chainId`));\n  // Build spend permission requests for each token and check\n  // that each token has global account as sufficient source\n  // If not, will throw error\n  const spendPermissionRequests = parseFundingOptions({\n    errorData,\n    sourceAddress: globalAccountAddress\n  });\n  // Present options to user via snackbar\n  const userChoice = await presentSubAccountFundingDialog();\n  if (userChoice === 'cancel') {\n    throw new Error('User cancelled funding');\n  }\n  let signatureRequest;\n  // Request 3x the amount per day -- maybe we can do something smarter here\n  const defaultPeriod = 60 * 60 * 24;\n  const defaultMultiplier = 3;\n  if (userChoice === 'update_permission') {\n    if (spendPermissionRequests.length === 1) {\n      const spendPermission = spendPermissionRequests[0];\n      const message = createSpendPermissionMessage({\n        spendPermission: {\n          token: spendPermission.token,\n          allowance: numberToHex(spendPermission.requiredAmount * BigInt(defaultMultiplier)),\n          period: defaultPeriod,\n          account: globalAccountAddress,\n          spender: subAccountAddress,\n          start: 0,\n          end: 281474976710655,\n          salt: numberToHex(BigInt(Math.floor(Math.random() * Number.MAX_SAFE_INTEGER))),\n          extraData: '0x'\n        },\n        chainId\n      });\n      signatureRequest = {\n        method: 'eth_signTypedData_v4',\n        params: [globalAccountAddress, message]\n      };\n    } else {\n      // Batch spend permission request\n      const message = createSpendPermissionBatchMessage({\n        spendPermissionBatch: {\n          account: globalAccountAddress,\n          period: defaultPeriod,\n          start: 0,\n          end: 281474976710655,\n          permissions: spendPermissionRequests.map(spendPermission => ({\n            token: spendPermission.token,\n            allowance: numberToHex(spendPermission.requiredAmount * BigInt(defaultMultiplier)),\n            period: defaultPeriod,\n            account: globalAccountAddress,\n            spender: subAccountAddress,\n            salt: '0x0',\n            extraData: '0x'\n          }))\n        },\n        chainId\n      });\n      signatureRequest = {\n        method: 'eth_signTypedData_v4',\n        params: [globalAccountAddress, message]\n      };\n    }\n    try {\n      // Request the signature - will be stored in backend\n      await globalAccountRequest(signatureRequest);\n    } catch (error) {\n      console.error(error);\n      // If the signature request is denied, we throw the original error\n      throw new Error('User denied spend permission request');\n    }\n    // Retry the original request after updating permissions\n    return subAccountRequest(request);\n  }\n  /* Handle continue_popup path */\n  // Construct calls to transfer required tokens to sub account\n  const transferCalls = spendPermissionRequests.map(spendPermission => {\n    const isNative = spendPermission.token.toLowerCase() === '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE'.toLowerCase();\n    if (isNative) {\n      return {\n        to: subAccountAddress,\n        value: numberToHex(spendPermission.requiredAmount),\n        data: '0x'\n      };\n    }\n    return {\n      to: spendPermission.token,\n      value: '0x0',\n      data: encodeFunctionData({\n        abi: erc20Abi,\n        functionName: 'transfer',\n        args: [subAccountAddress, spendPermission.requiredAmount]\n      })\n    };\n  });\n  // Construct call to execute the original calls using executeBatch\n  let originalSendCallsParams;\n  if (request.method === 'wallet_sendCalls' && isSendCallsParams(request.params)) {\n    originalSendCallsParams = request.params[0];\n  } else if (request.method === 'eth_sendTransaction' && isEthSendTransactionParams(request.params)) {\n    const sendCallsRequest = createWalletSendCallsRequest({\n      calls: [request.params[0]],\n      chainId,\n      from: request.params[0].from\n    });\n    originalSendCallsParams = sendCallsRequest.params[0];\n  } else {\n    throw new Error('Could not get original call');\n  }\n  const subAccountCallData = encodeFunctionData({\n    abi,\n    functionName: 'executeBatch',\n    args: [originalSendCallsParams.calls.map(call => {\n      var _a, _b;\n      return {\n        target: call.to,\n        value: hexToBigInt((_a = call.value) !== null && _a !== void 0 ? _a : '0x0'),\n        data: (_b = call.data) !== null && _b !== void 0 ? _b : '0x'\n      };\n    })]\n  });\n  // Send using wallet_sendCalls\n  const calls = [...transferCalls, {\n    data: subAccountCallData,\n    to: subAccountAddress,\n    value: '0x0'\n  }];\n  const result = await globalAccountRequest({\n    method: 'wallet_sendCalls',\n    params: [Object.assign(Object.assign({}, originalSendCallsParams), {\n      calls,\n      from: globalAccountAddress\n    })]\n  });\n  if (request.method === 'eth_sendTransaction') {\n    return waitForCallsTransactionHash({\n      client,\n      id: result\n    });\n  }\n  return result;\n}","map":{"version":3,"names":["standardErrors","assertPresence","encodeFunctionData","erc20Abi","hexToBigInt","numberToHex","createSpendPermissionBatchMessage","createSpendPermissionMessage","createWalletSendCallsRequest","isEthSendTransactionParams","isSendCallsParams","parseFundingOptions","presentSubAccountFundingDialog","waitForCallsTransactionHash","abi","handleInsufficientBalanceError","errorData","globalAccountAddress","subAccountAddress","client","request","subAccountRequest","globalAccountRequest","chainId","_a","chain","id","rpc","internal","spendPermissionRequests","sourceAddress","userChoice","Error","signatureRequest","defaultPeriod","defaultMultiplier","length","spendPermission","message","token","allowance","requiredAmount","BigInt","period","account","spender","start","end","salt","Math","floor","random","Number","MAX_SAFE_INTEGER","extraData","method","params","spendPermissionBatch","permissions","map","error","console","transferCalls","isNative","toLowerCase","to","value","data","functionName","args","originalSendCallsParams","sendCallsRequest","calls","from","subAccountCallData","call","target","_b","result","Object","assign"],"sources":["../../../../src/sign/scw/utils/handleInsufficientBalance.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}