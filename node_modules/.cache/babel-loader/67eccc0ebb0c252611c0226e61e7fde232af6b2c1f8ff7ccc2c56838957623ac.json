{"ast":null,"code":"import { entryPoint08Address } from '../../../constants/address.js';\nimport { BaseError } from '../../../errors/base.js';\nimport { decodeFunctionData } from '../../../utils/abi/decodeFunctionData.js';\nimport { encodeFunctionData } from '../../../utils/abi/encodeFunctionData.js';\nimport { entryPoint08Abi } from '../../constants/abis.js';\nimport { getUserOperationTypedData } from '../../utils/userOperation/getUserOperationTypedData.js';\nimport { toSmartAccount } from '../toSmartAccount.js';\n/**\n * @description Create a Simple7702 Smart Account â€“ based off [eth-infinitism's `Simple7702Account.sol`](https://github.com/eth-infinitism/account-abstraction/blob/develop/contracts/accounts/Simple7702Account.sol).\n *\n * @param parameters - {@link ToSimple7702SmartAccountParameters}\n * @returns Simple7702 Smart Account. {@link ToSimple7702SmartAccountReturnType}\n *\n * @example\n * import { toSimple7702SmartAccount } from 'viem/account-abstraction'\n * import { client } from './client.js'\n *\n * const implementation = toSimple7702SmartAccount({\n *   client,\n *   owner: '0x...',\n * })\n */\nexport async function toSimple7702SmartAccount(parameters) {\n  const {\n    client,\n    implementation = '0xe6Cae83BdE06E4c305530e199D7217f42808555B',\n    getNonce,\n    owner\n  } = parameters;\n  const entryPoint = {\n    abi: entryPoint08Abi,\n    address: entryPoint08Address,\n    version: '0.8'\n  };\n  return toSmartAccount({\n    authorization: {\n      account: owner,\n      address: implementation\n    },\n    abi,\n    client,\n    extend: {\n      abi,\n      owner\n    },\n    // not removing abi from here as this will be a breaking change\n    entryPoint,\n    getNonce,\n    async decodeCalls(data) {\n      const result = decodeFunctionData({\n        abi,\n        data\n      });\n      if (result.functionName === 'execute') return [{\n        to: result.args[0],\n        value: result.args[1],\n        data: result.args[2]\n      }];\n      if (result.functionName === 'executeBatch') return result.args[0].map(arg => ({\n        to: arg.target,\n        value: arg.value,\n        data: arg.data\n      }));\n      throw new BaseError(`unable to decode calls for \"${result.functionName}\"`);\n    },\n    async encodeCalls(calls) {\n      if (calls.length === 1) return encodeFunctionData({\n        abi,\n        functionName: 'execute',\n        args: [calls[0].to, calls[0].value ?? 0n, calls[0].data ?? '0x']\n      });\n      return encodeFunctionData({\n        abi,\n        functionName: 'executeBatch',\n        args: [calls.map(call => ({\n          data: call.data ?? '0x',\n          target: call.to,\n          value: call.value ?? 0n\n        }))]\n      });\n    },\n    async getAddress() {\n      return owner.address;\n    },\n    async getFactoryArgs() {\n      return {\n        factory: '0x7702',\n        factoryData: '0x'\n      };\n    },\n    async getStubSignature() {\n      return '0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c';\n    },\n    async signMessage(parameters) {\n      const {\n        message\n      } = parameters;\n      return await owner.signMessage({\n        message\n      });\n    },\n    async signTypedData(parameters) {\n      const {\n        domain,\n        types,\n        primaryType,\n        message\n      } = parameters;\n      return await owner.signTypedData({\n        domain,\n        message,\n        primaryType,\n        types\n      });\n    },\n    async signUserOperation(parameters) {\n      const {\n        chainId = client.chain.id,\n        ...userOperation\n      } = parameters;\n      const address = await this.getAddress();\n      const typedData = getUserOperationTypedData({\n        chainId,\n        entryPointAddress: entryPoint.address,\n        userOperation: {\n          ...userOperation,\n          sender: address\n        }\n      });\n      return await owner.signTypedData(typedData);\n    }\n  });\n}\n/////////////////////////////////////////////////////////////////////////////////////////////\n// Constants\nconst abi = [{\n  inputs: [],\n  name: 'ECDSAInvalidSignature',\n  type: 'error'\n}, {\n  inputs: [{\n    internalType: 'uint256',\n    name: 'length',\n    type: 'uint256'\n  }],\n  name: 'ECDSAInvalidSignatureLength',\n  type: 'error'\n}, {\n  inputs: [{\n    internalType: 'bytes32',\n    name: 's',\n    type: 'bytes32'\n  }],\n  name: 'ECDSAInvalidSignatureS',\n  type: 'error'\n}, {\n  inputs: [{\n    internalType: 'uint256',\n    name: 'index',\n    type: 'uint256'\n  }, {\n    internalType: 'bytes',\n    name: 'error',\n    type: 'bytes'\n  }],\n  name: 'ExecuteError',\n  type: 'error'\n}, {\n  stateMutability: 'payable',\n  type: 'fallback'\n}, {\n  inputs: [],\n  name: 'entryPoint',\n  outputs: [{\n    internalType: 'contract IEntryPoint',\n    name: '',\n    type: 'address'\n  }],\n  stateMutability: 'pure',\n  type: 'function'\n}, {\n  inputs: [{\n    internalType: 'address',\n    name: 'target',\n    type: 'address'\n  }, {\n    internalType: 'uint256',\n    name: 'value',\n    type: 'uint256'\n  }, {\n    internalType: 'bytes',\n    name: 'data',\n    type: 'bytes'\n  }],\n  name: 'execute',\n  outputs: [],\n  stateMutability: 'nonpayable',\n  type: 'function'\n}, {\n  inputs: [{\n    components: [{\n      internalType: 'address',\n      name: 'target',\n      type: 'address'\n    }, {\n      internalType: 'uint256',\n      name: 'value',\n      type: 'uint256'\n    }, {\n      internalType: 'bytes',\n      name: 'data',\n      type: 'bytes'\n    }],\n    internalType: 'struct BaseAccount.Call[]',\n    name: 'calls',\n    type: 'tuple[]'\n  }],\n  name: 'executeBatch',\n  outputs: [],\n  stateMutability: 'nonpayable',\n  type: 'function'\n}, {\n  inputs: [],\n  name: 'getNonce',\n  outputs: [{\n    internalType: 'uint256',\n    name: '',\n    type: 'uint256'\n  }],\n  stateMutability: 'view',\n  type: 'function'\n}, {\n  inputs: [{\n    internalType: 'bytes32',\n    name: 'hash',\n    type: 'bytes32'\n  }, {\n    internalType: 'bytes',\n    name: 'signature',\n    type: 'bytes'\n  }],\n  name: 'isValidSignature',\n  outputs: [{\n    internalType: 'bytes4',\n    name: 'magicValue',\n    type: 'bytes4'\n  }],\n  stateMutability: 'view',\n  type: 'function'\n}, {\n  inputs: [{\n    internalType: 'address',\n    name: '',\n    type: 'address'\n  }, {\n    internalType: 'address',\n    name: '',\n    type: 'address'\n  }, {\n    internalType: 'uint256[]',\n    name: '',\n    type: 'uint256[]'\n  }, {\n    internalType: 'uint256[]',\n    name: '',\n    type: 'uint256[]'\n  }, {\n    internalType: 'bytes',\n    name: '',\n    type: 'bytes'\n  }],\n  name: 'onERC1155BatchReceived',\n  outputs: [{\n    internalType: 'bytes4',\n    name: '',\n    type: 'bytes4'\n  }],\n  stateMutability: 'nonpayable',\n  type: 'function'\n}, {\n  inputs: [{\n    internalType: 'address',\n    name: '',\n    type: 'address'\n  }, {\n    internalType: 'address',\n    name: '',\n    type: 'address'\n  }, {\n    internalType: 'uint256',\n    name: '',\n    type: 'uint256'\n  }, {\n    internalType: 'uint256',\n    name: '',\n    type: 'uint256'\n  }, {\n    internalType: 'bytes',\n    name: '',\n    type: 'bytes'\n  }],\n  name: 'onERC1155Received',\n  outputs: [{\n    internalType: 'bytes4',\n    name: '',\n    type: 'bytes4'\n  }],\n  stateMutability: 'nonpayable',\n  type: 'function'\n}, {\n  inputs: [{\n    internalType: 'address',\n    name: '',\n    type: 'address'\n  }, {\n    internalType: 'address',\n    name: '',\n    type: 'address'\n  }, {\n    internalType: 'uint256',\n    name: '',\n    type: 'uint256'\n  }, {\n    internalType: 'bytes',\n    name: '',\n    type: 'bytes'\n  }],\n  name: 'onERC721Received',\n  outputs: [{\n    internalType: 'bytes4',\n    name: '',\n    type: 'bytes4'\n  }],\n  stateMutability: 'nonpayable',\n  type: 'function'\n}, {\n  inputs: [{\n    internalType: 'bytes4',\n    name: 'id',\n    type: 'bytes4'\n  }],\n  name: 'supportsInterface',\n  outputs: [{\n    internalType: 'bool',\n    name: '',\n    type: 'bool'\n  }],\n  stateMutability: 'pure',\n  type: 'function'\n}, {\n  inputs: [{\n    components: [{\n      internalType: 'address',\n      name: 'sender',\n      type: 'address'\n    }, {\n      internalType: 'uint256',\n      name: 'nonce',\n      type: 'uint256'\n    }, {\n      internalType: 'bytes',\n      name: 'initCode',\n      type: 'bytes'\n    }, {\n      internalType: 'bytes',\n      name: 'callData',\n      type: 'bytes'\n    }, {\n      internalType: 'bytes32',\n      name: 'accountGasLimits',\n      type: 'bytes32'\n    }, {\n      internalType: 'uint256',\n      name: 'preVerificationGas',\n      type: 'uint256'\n    }, {\n      internalType: 'bytes32',\n      name: 'gasFees',\n      type: 'bytes32'\n    }, {\n      internalType: 'bytes',\n      name: 'paymasterAndData',\n      type: 'bytes'\n    }, {\n      internalType: 'bytes',\n      name: 'signature',\n      type: 'bytes'\n    }],\n    internalType: 'struct PackedUserOperation',\n    name: 'userOp',\n    type: 'tuple'\n  }, {\n    internalType: 'bytes32',\n    name: 'userOpHash',\n    type: 'bytes32'\n  }, {\n    internalType: 'uint256',\n    name: 'missingAccountFunds',\n    type: 'uint256'\n  }],\n  name: 'validateUserOp',\n  outputs: [{\n    internalType: 'uint256',\n    name: 'validationData',\n    type: 'uint256'\n  }],\n  stateMutability: 'nonpayable',\n  type: 'function'\n}, {\n  stateMutability: 'payable',\n  type: 'receive'\n}];","map":{"version":3,"names":["entryPoint08Address","BaseError","decodeFunctionData","encodeFunctionData","entryPoint08Abi","getUserOperationTypedData","toSmartAccount","toSimple7702SmartAccount","parameters","client","implementation","getNonce","owner","entryPoint","abi","address","version","authorization","account","extend","decodeCalls","data","result","functionName","to","args","value","map","arg","target","encodeCalls","calls","length","call","getAddress","getFactoryArgs","factory","factoryData","getStubSignature","signMessage","message","signTypedData","domain","types","primaryType","signUserOperation","chainId","chain","id","userOperation","typedData","entryPointAddress","sender","inputs","name","type","internalType","stateMutability","outputs","components"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/viem/account-abstraction/accounts/implementations/toSimple7702SmartAccount.ts"],"sourcesContent":["import type { Address, TypedData } from 'abitype'\n\nimport type { PrivateKeyAccount } from '../../../accounts/types.js'\nimport { entryPoint08Address } from '../../../constants/address.js'\nimport { BaseError } from '../../../errors/base.js'\nimport type { TypedDataDefinition } from '../../../types/typedData.js'\nimport type { Prettify } from '../../../types/utils.js'\nimport { decodeFunctionData } from '../../../utils/abi/decodeFunctionData.js'\nimport { encodeFunctionData } from '../../../utils/abi/encodeFunctionData.js'\nimport { entryPoint08Abi } from '../../constants/abis.js'\nimport { getUserOperationTypedData } from '../../utils/userOperation/getUserOperationTypedData.js'\nimport { toSmartAccount } from '../toSmartAccount.js'\nimport type { SmartAccount, SmartAccountImplementation } from '../types.js'\n\nexport type ToSimple7702SmartAccountParameters = {\n  client: Simple7702SmartAccountImplementation['client']\n  implementation?: Address | undefined\n  getNonce?: SmartAccountImplementation['getNonce'] | undefined\n  owner: PrivateKeyAccount\n}\n\nexport type ToSimple7702SmartAccountReturnType = Prettify<\n  SmartAccount<Simple7702SmartAccountImplementation>\n>\n\nexport type Simple7702SmartAccountImplementation = SmartAccountImplementation<\n  typeof entryPoint08Abi,\n  '0.8',\n  { abi: typeof abi; owner: PrivateKeyAccount },\n  true\n>\n\n/**\n * @description Create a Simple7702 Smart Account â€“ based off [eth-infinitism's `Simple7702Account.sol`](https://github.com/eth-infinitism/account-abstraction/blob/develop/contracts/accounts/Simple7702Account.sol).\n *\n * @param parameters - {@link ToSimple7702SmartAccountParameters}\n * @returns Simple7702 Smart Account. {@link ToSimple7702SmartAccountReturnType}\n *\n * @example\n * import { toSimple7702SmartAccount } from 'viem/account-abstraction'\n * import { client } from './client.js'\n *\n * const implementation = toSimple7702SmartAccount({\n *   client,\n *   owner: '0x...',\n * })\n */\nexport async function toSimple7702SmartAccount(\n  parameters: ToSimple7702SmartAccountParameters,\n): Promise<ToSimple7702SmartAccountReturnType> {\n  const {\n    client,\n    implementation = '0xe6Cae83BdE06E4c305530e199D7217f42808555B',\n    getNonce,\n    owner,\n  } = parameters\n\n  const entryPoint = {\n    abi: entryPoint08Abi,\n    address: entryPoint08Address,\n    version: '0.8',\n  } as const\n\n  return toSmartAccount({\n    authorization: { account: owner, address: implementation },\n    abi,\n    client,\n    extend: { abi, owner }, // not removing abi from here as this will be a breaking change\n    entryPoint,\n    getNonce,\n\n    async decodeCalls(data) {\n      const result = decodeFunctionData({\n        abi,\n        data,\n      })\n\n      if (result.functionName === 'execute')\n        return [\n          { to: result.args[0], value: result.args[1], data: result.args[2] },\n        ]\n      if (result.functionName === 'executeBatch')\n        return result.args[0].map((arg) => ({\n          to: arg.target,\n          value: arg.value,\n          data: arg.data,\n        }))\n      throw new BaseError(`unable to decode calls for \"${result.functionName}\"`)\n    },\n\n    async encodeCalls(calls) {\n      if (calls.length === 1)\n        return encodeFunctionData({\n          abi,\n          functionName: 'execute',\n          args: [calls[0].to, calls[0].value ?? 0n, calls[0].data ?? '0x'],\n        })\n      return encodeFunctionData({\n        abi,\n        functionName: 'executeBatch',\n        args: [\n          calls.map((call) => ({\n            data: call.data ?? '0x',\n            target: call.to,\n            value: call.value ?? 0n,\n          })),\n        ],\n      })\n    },\n\n    async getAddress() {\n      return owner.address\n    },\n\n    async getFactoryArgs() {\n      return { factory: '0x7702', factoryData: '0x' }\n    },\n\n    async getStubSignature() {\n      return '0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c'\n    },\n\n    async signMessage(parameters) {\n      const { message } = parameters\n      return await owner.signMessage({ message })\n    },\n\n    async signTypedData(parameters) {\n      const { domain, types, primaryType, message } =\n        parameters as TypedDataDefinition<TypedData, string>\n      return await owner.signTypedData({\n        domain,\n        message,\n        primaryType,\n        types,\n      })\n    },\n\n    async signUserOperation(parameters) {\n      const { chainId = client.chain!.id, ...userOperation } = parameters\n\n      const address = await this.getAddress()\n      const typedData = getUserOperationTypedData({\n        chainId,\n        entryPointAddress: entryPoint.address,\n        userOperation: {\n          ...userOperation,\n          sender: address,\n        },\n      })\n      return await owner.signTypedData(typedData)\n    },\n  })\n}\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n// Constants\n\nconst abi = [\n  { inputs: [], name: 'ECDSAInvalidSignature', type: 'error' },\n  {\n    inputs: [{ internalType: 'uint256', name: 'length', type: 'uint256' }],\n    name: 'ECDSAInvalidSignatureLength',\n    type: 'error',\n  },\n  {\n    inputs: [{ internalType: 'bytes32', name: 's', type: 'bytes32' }],\n    name: 'ECDSAInvalidSignatureS',\n    type: 'error',\n  },\n  {\n    inputs: [\n      { internalType: 'uint256', name: 'index', type: 'uint256' },\n      { internalType: 'bytes', name: 'error', type: 'bytes' },\n    ],\n    name: 'ExecuteError',\n    type: 'error',\n  },\n  { stateMutability: 'payable', type: 'fallback' },\n  {\n    inputs: [],\n    name: 'entryPoint',\n    outputs: [\n      { internalType: 'contract IEntryPoint', name: '', type: 'address' },\n    ],\n    stateMutability: 'pure',\n    type: 'function',\n  },\n  {\n    inputs: [\n      { internalType: 'address', name: 'target', type: 'address' },\n      { internalType: 'uint256', name: 'value', type: 'uint256' },\n      { internalType: 'bytes', name: 'data', type: 'bytes' },\n    ],\n    name: 'execute',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          { internalType: 'address', name: 'target', type: 'address' },\n          { internalType: 'uint256', name: 'value', type: 'uint256' },\n          { internalType: 'bytes', name: 'data', type: 'bytes' },\n        ],\n        internalType: 'struct BaseAccount.Call[]',\n        name: 'calls',\n        type: 'tuple[]',\n      },\n    ],\n    name: 'executeBatch',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'getNonce',\n    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      { internalType: 'bytes32', name: 'hash', type: 'bytes32' },\n      { internalType: 'bytes', name: 'signature', type: 'bytes' },\n    ],\n    name: 'isValidSignature',\n    outputs: [{ internalType: 'bytes4', name: 'magicValue', type: 'bytes4' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      { internalType: 'address', name: '', type: 'address' },\n      { internalType: 'address', name: '', type: 'address' },\n      { internalType: 'uint256[]', name: '', type: 'uint256[]' },\n      { internalType: 'uint256[]', name: '', type: 'uint256[]' },\n      { internalType: 'bytes', name: '', type: 'bytes' },\n    ],\n    name: 'onERC1155BatchReceived',\n    outputs: [{ internalType: 'bytes4', name: '', type: 'bytes4' }],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      { internalType: 'address', name: '', type: 'address' },\n      { internalType: 'address', name: '', type: 'address' },\n      { internalType: 'uint256', name: '', type: 'uint256' },\n      { internalType: 'uint256', name: '', type: 'uint256' },\n      { internalType: 'bytes', name: '', type: 'bytes' },\n    ],\n    name: 'onERC1155Received',\n    outputs: [{ internalType: 'bytes4', name: '', type: 'bytes4' }],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      { internalType: 'address', name: '', type: 'address' },\n      { internalType: 'address', name: '', type: 'address' },\n      { internalType: 'uint256', name: '', type: 'uint256' },\n      { internalType: 'bytes', name: '', type: 'bytes' },\n    ],\n    name: 'onERC721Received',\n    outputs: [{ internalType: 'bytes4', name: '', type: 'bytes4' }],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [{ internalType: 'bytes4', name: 'id', type: 'bytes4' }],\n    name: 'supportsInterface',\n    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n    stateMutability: 'pure',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          { internalType: 'address', name: 'sender', type: 'address' },\n          { internalType: 'uint256', name: 'nonce', type: 'uint256' },\n          { internalType: 'bytes', name: 'initCode', type: 'bytes' },\n          { internalType: 'bytes', name: 'callData', type: 'bytes' },\n          {\n            internalType: 'bytes32',\n            name: 'accountGasLimits',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'uint256',\n            name: 'preVerificationGas',\n            type: 'uint256',\n          },\n          { internalType: 'bytes32', name: 'gasFees', type: 'bytes32' },\n          { internalType: 'bytes', name: 'paymasterAndData', type: 'bytes' },\n          { internalType: 'bytes', name: 'signature', type: 'bytes' },\n        ],\n        internalType: 'struct PackedUserOperation',\n        name: 'userOp',\n        type: 'tuple',\n      },\n      { internalType: 'bytes32', name: 'userOpHash', type: 'bytes32' },\n      { internalType: 'uint256', name: 'missingAccountFunds', type: 'uint256' },\n    ],\n    name: 'validateUserOp',\n    outputs: [\n      { internalType: 'uint256', name: 'validationData', type: 'uint256' },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  { stateMutability: 'payable', type: 'receive' },\n] as const\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}