{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.compactSignatureToSignature = compactSignatureToSignature;\nconst toBytes_js_1 = require(\"../encoding/toBytes.js\");\nconst toHex_js_1 = require(\"../encoding/toHex.js\");\nfunction compactSignatureToSignature({\n  r,\n  yParityAndS\n}) {\n  const yParityAndS_bytes = (0, toBytes_js_1.hexToBytes)(yParityAndS);\n  const yParity = yParityAndS_bytes[0] & 0x80 ? 1 : 0;\n  const s = yParityAndS_bytes;\n  if (yParity === 1) s[0] &= 0x7f;\n  return {\n    r,\n    s: (0, toHex_js_1.bytesToHex)(s),\n    yParity\n  };\n}","map":{"version":3,"names":["exports","compactSignatureToSignature","toBytes_js_1","require","toHex_js_1","r","yParityAndS","yParityAndS_bytes","hexToBytes","yParity","s","bytesToHex"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/viem/utils/signature/compactSignatureToSignature.ts"],"sourcesContent":["import type { ErrorType } from '../../errors/utils.js'\nimport type { CompactSignature, Signature } from '../../types/misc.js'\nimport { type HexToBytesErrorType, hexToBytes } from '../encoding/toBytes.js'\nimport { type BytesToHexErrorType, bytesToHex } from '../encoding/toHex.js'\n\nexport type CompactSignatureToSignatureErrorType =\n  | BytesToHexErrorType\n  | HexToBytesErrorType\n  | ErrorType\n\n/**\n * @description Converts an [EIP-2098 compact signature](https://eips.ethereum.org/EIPS/eip-2098) into signature format.\n *\n * @param signature The compact signature to convert.\n * @returns The compact signature in signature format.\n *\n * @example\n * compactSignatureToSignature({\n *   r: '0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90',\n *   yParityAndS: '0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064',\n * })\n * // {\n * //   r: '0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90',\n * //   s: '0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064',\n * //   v: 27n\n * // }\n */\nexport function compactSignatureToSignature({\n  r,\n  yParityAndS,\n}: CompactSignature): Signature {\n  const yParityAndS_bytes = hexToBytes(yParityAndS)\n  const yParity = yParityAndS_bytes[0] & 0x80 ? 1 : 0\n  const s = yParityAndS_bytes\n  if (yParity === 1) s[0] &= 0x7f\n  return { r, s: bytesToHex(s), yParity }\n}\n"],"mappings":";;;;;AA2BAA,OAAA,CAAAC,2BAAA,GAAAA,2BAAA;AAzBA,MAAAC,YAAA,GAAAC,OAAA;AACA,MAAAC,UAAA,GAAAD,OAAA;AAwBA,SAAgBF,2BAA2BA,CAAC;EAC1CI,CAAC;EACDC;AAAW,CACM;EACjB,MAAMC,iBAAiB,GAAG,IAAAL,YAAA,CAAAM,UAAU,EAACF,WAAW,CAAC;EACjD,MAAMG,OAAO,GAAGF,iBAAiB,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC;EACnD,MAAMG,CAAC,GAAGH,iBAAiB;EAC3B,IAAIE,OAAO,KAAK,CAAC,EAAEC,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI;EAC/B,OAAO;IAAEL,CAAC;IAAEK,CAAC,EAAE,IAAAN,UAAA,CAAAO,UAAU,EAACD,CAAC,CAAC;IAAED;EAAO,CAAE;AACzC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}