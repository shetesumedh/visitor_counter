{"ast":null,"code":"import { waitForCallsStatus } from '../actions/waitForCallsStatus.js';\nimport { ConnectorNotConnectedError } from '../errors/config.js';\nimport { filterQueryOptions } from '../query/utils.js';\nexport function waitForCallsStatusQueryOptions(config, options) {\n  return {\n    async queryFn({\n      queryKey\n    }) {\n      const {\n        scopeKey: _,\n        id,\n        ...parameters\n      } = queryKey[1];\n      if (!id) throw new Error('id is required');\n      const status = await waitForCallsStatus(config, {\n        ...parameters,\n        id\n      });\n      return status;\n    },\n    queryKey: waitForCallsStatusQueryKey(options),\n    retry(failureCount, error) {\n      if (error instanceof ConnectorNotConnectedError) return false;\n      return failureCount < 3;\n    }\n  };\n}\nexport function waitForCallsStatusQueryKey(options) {\n  return ['callsStatus', filterQueryOptions(options)];\n}","map":{"version":3,"names":["waitForCallsStatus","ConnectorNotConnectedError","filterQueryOptions","waitForCallsStatusQueryOptions","config","options","queryFn","queryKey","scopeKey","_","id","parameters","Error","status","waitForCallsStatusQueryKey","retry","failureCount","error"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/@wagmi/core/src/query/waitForCallsStatus.ts"],"sourcesContent":["import type { QueryOptions } from '@tanstack/query-core'\n\nimport {\n  type WaitForCallsStatusErrorType,\n  type WaitForCallsStatusParameters,\n  type WaitForCallsStatusReturnType,\n  waitForCallsStatus,\n} from '../actions/waitForCallsStatus.js'\nimport type { Config } from '../createConfig.js'\nimport { ConnectorNotConnectedError } from '../errors/config.js'\nimport { filterQueryOptions } from '../query/utils.js'\nimport type { ScopeKeyParameter } from '../types/properties.js'\nimport type { Compute, PartialBy } from '../types/utils.js'\n\nexport type WaitForCallsStatusOptions = Compute<\n  PartialBy<WaitForCallsStatusParameters, 'id'> & ScopeKeyParameter\n>\n\nexport function waitForCallsStatusQueryOptions<config extends Config>(\n  config: config,\n  options: WaitForCallsStatusOptions,\n) {\n  return {\n    async queryFn({ queryKey }) {\n      const { scopeKey: _, id, ...parameters } = queryKey[1]\n      if (!id) throw new Error('id is required')\n      const status = await waitForCallsStatus(config, { ...parameters, id })\n      return status\n    },\n    queryKey: waitForCallsStatusQueryKey(options),\n    retry(failureCount, error) {\n      if (error instanceof ConnectorNotConnectedError) return false\n      return failureCount < 3\n    },\n  } as const satisfies QueryOptions<\n    WaitForCallsStatusQueryFnData,\n    WaitForCallsStatusErrorType,\n    WaitForCallsStatusData,\n    WaitForCallsStatusQueryKey\n  >\n}\n\nexport type WaitForCallsStatusQueryFnData = WaitForCallsStatusReturnType\n\nexport type WaitForCallsStatusData = WaitForCallsStatusQueryFnData\n\nexport function waitForCallsStatusQueryKey(options: WaitForCallsStatusOptions) {\n  return ['callsStatus', filterQueryOptions(options)] as const\n}\n\nexport type WaitForCallsStatusQueryKey = ReturnType<\n  typeof waitForCallsStatusQueryKey\n>\n"],"mappings":"AAEA,SAIEA,kBAAkB,QACb,kCAAkC;AAEzC,SAASC,0BAA0B,QAAQ,qBAAqB;AAChE,SAASC,kBAAkB,QAAQ,mBAAmB;AAQtD,OAAM,SAAUC,8BAA8BA,CAC5CC,MAAc,EACdC,OAAkC;EAElC,OAAO;IACL,MAAMC,OAAOA,CAAC;MAAEC;IAAQ,CAAE;MACxB,MAAM;QAAEC,QAAQ,EAAEC,CAAC;QAAEC,EAAE;QAAE,GAAGC;MAAU,CAAE,GAAGJ,QAAQ,CAAC,CAAC,CAAC;MACtD,IAAI,CAACG,EAAE,EAAE,MAAM,IAAIE,KAAK,CAAC,gBAAgB,CAAC;MAC1C,MAAMC,MAAM,GAAG,MAAMb,kBAAkB,CAACI,MAAM,EAAE;QAAE,GAAGO,UAAU;QAAED;MAAE,CAAE,CAAC;MACtE,OAAOG,MAAM;IACf,CAAC;IACDN,QAAQ,EAAEO,0BAA0B,CAACT,OAAO,CAAC;IAC7CU,KAAKA,CAACC,YAAY,EAAEC,KAAK;MACvB,IAAIA,KAAK,YAAYhB,0BAA0B,EAAE,OAAO,KAAK;MAC7D,OAAOe,YAAY,GAAG,CAAC;IACzB;GAMD;AACH;AAMA,OAAM,SAAUF,0BAA0BA,CAACT,OAAkC;EAC3E,OAAO,CAAC,aAAa,EAAEH,kBAAkB,CAACG,OAAO,CAAC,CAAU;AAC9D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}