{"ast":null,"code":"import { ContractFunctionExecutionError } from 'viem';\nimport { multicall } from './multicall.js';\nimport { readContract } from './readContract.js';\nexport async function readContracts(config, parameters) {\n  const {\n    allowFailure = true,\n    blockNumber,\n    blockTag,\n    ...rest\n  } = parameters;\n  const contracts = parameters.contracts;\n  try {\n    const contractsByChainId = {};\n    for (const [index, contract] of contracts.entries()) {\n      const chainId = contract.chainId ?? config.state.chainId;\n      if (!contractsByChainId[chainId]) contractsByChainId[chainId] = [];\n      contractsByChainId[chainId]?.push({\n        contract,\n        index\n      });\n    }\n    const promises = () => Object.entries(contractsByChainId).map(([chainId, contracts]) => multicall(config, {\n      ...rest,\n      allowFailure,\n      blockNumber,\n      blockTag,\n      chainId: Number.parseInt(chainId),\n      contracts: contracts.map(({\n        contract\n      }) => contract)\n    }));\n    const multicallResults = (await Promise.all(promises())).flat();\n    // Reorder the contract results back to the order they were\n    // provided in.\n    const resultIndexes = Object.values(contractsByChainId).flatMap(contracts => contracts.map(({\n      index\n    }) => index));\n    return multicallResults.reduce((results, result, index) => {\n      if (results) results[resultIndexes[index]] = result;\n      return results;\n    }, []);\n  } catch (error) {\n    if (error instanceof ContractFunctionExecutionError) throw error;\n    const promises = () => contracts.map(contract => readContract(config, {\n      ...contract,\n      blockNumber,\n      blockTag\n    }));\n    if (allowFailure) return (await Promise.allSettled(promises())).map(result => {\n      if (result.status === 'fulfilled') return {\n        result: result.value,\n        status: 'success'\n      };\n      return {\n        error: result.reason,\n        result: undefined,\n        status: 'failure'\n      };\n    });\n    return await Promise.all(promises());\n  }\n}","map":{"version":3,"names":["ContractFunctionExecutionError","multicall","readContract","readContracts","config","parameters","allowFailure","blockNumber","blockTag","rest","contracts","contractsByChainId","index","contract","entries","chainId","state","push","promises","Object","map","Number","parseInt","multicallResults","Promise","all","flat","resultIndexes","values","flatMap","reduce","results","result","error","allSettled","status","value","reason","undefined"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/@wagmi/core/src/actions/readContracts.ts"],"sourcesContent":["import type {\n  ContractFunctionParameters,\n  MulticallParameters as viem_MulticallParameters,\n  MulticallReturnType as viem_MulticallReturnType,\n} from 'viem'\nimport { ContractFunctionExecutionError } from 'viem'\n\nimport type { Config } from '../createConfig.js'\nimport type { ChainIdParameter } from '../types/properties.js'\nimport { type MulticallErrorType, multicall } from './multicall.js'\nimport { type ReadContractErrorType, readContract } from './readContract.js'\n\nexport type ReadContractsParameters<\n  contracts extends readonly unknown[] = readonly ContractFunctionParameters[],\n  allowFailure extends boolean = true,\n  config extends Config = Config,\n> = viem_MulticallParameters<\n  contracts,\n  allowFailure,\n  { properties: ChainIdParameter<config> }\n>\n\nexport type ReadContractsReturnType<\n  contracts extends readonly unknown[] = readonly ContractFunctionParameters[],\n  allowFailure extends boolean = true,\n> = viem_MulticallReturnType<contracts, allowFailure>\n\nexport type ReadContractsErrorType = MulticallErrorType | ReadContractErrorType\n\nexport async function readContracts<\n  config extends Config,\n  const contracts extends readonly ContractFunctionParameters[],\n  allowFailure extends boolean = true,\n>(\n  config: config,\n  parameters: ReadContractsParameters<contracts, allowFailure, config>,\n): Promise<ReadContractsReturnType<contracts, allowFailure>> {\n  const { allowFailure = true, blockNumber, blockTag, ...rest } = parameters\n  const contracts = parameters.contracts as (ContractFunctionParameters & {\n    chainId?: number | undefined\n  })[]\n\n  try {\n    const contractsByChainId: {\n      [chainId: number]: {\n        contract: ContractFunctionParameters\n        index: number\n      }[]\n    } = {}\n    for (const [index, contract] of contracts.entries()) {\n      const chainId = contract.chainId ?? config.state.chainId\n      if (!contractsByChainId[chainId]) contractsByChainId[chainId] = []\n      contractsByChainId[chainId]?.push({ contract, index })\n    }\n    const promises = () =>\n      Object.entries(contractsByChainId).map(([chainId, contracts]) =>\n        multicall(config, {\n          ...rest,\n          allowFailure,\n          blockNumber,\n          blockTag,\n          chainId: Number.parseInt(chainId),\n          contracts: contracts.map(({ contract }) => contract),\n        }),\n      )\n\n    const multicallResults = (await Promise.all(promises())).flat()\n    // Reorder the contract results back to the order they were\n    // provided in.\n    const resultIndexes = Object.values(contractsByChainId).flatMap(\n      (contracts) => contracts.map(({ index }) => index),\n    )\n    return multicallResults.reduce((results, result, index) => {\n      if (results) (results as unknown[])[resultIndexes[index]!] = result\n      return results\n    }, [] as unknown[]) as ReadContractsReturnType<contracts, allowFailure>\n  } catch (error) {\n    if (error instanceof ContractFunctionExecutionError) throw error\n\n    const promises = () =>\n      contracts.map((contract) =>\n        readContract(config, { ...contract, blockNumber, blockTag }),\n      )\n    if (allowFailure)\n      return (await Promise.allSettled(promises())).map((result) => {\n        if (result.status === 'fulfilled')\n          return { result: result.value, status: 'success' }\n        return { error: result.reason, result: undefined, status: 'failure' }\n      }) as ReadContractsReturnType<contracts, allowFailure>\n\n    return (await Promise.all(promises())) as ReadContractsReturnType<\n      contracts,\n      allowFailure\n    >\n  }\n}\n"],"mappings":"AAKA,SAASA,8BAA8B,QAAQ,MAAM;AAIrD,SAAkCC,SAAS,QAAQ,gBAAgB;AACnE,SAAqCC,YAAY,QAAQ,mBAAmB;AAmB5E,OAAO,eAAeC,aAAaA,CAKjCC,MAAc,EACdC,UAAoE;EAEpE,MAAM;IAAEC,YAAY,GAAG,IAAI;IAAEC,WAAW;IAAEC,QAAQ;IAAE,GAAGC;EAAI,CAAE,GAAGJ,UAAU;EAC1E,MAAMK,SAAS,GAAGL,UAAU,CAACK,SAEzB;EAEJ,IAAI;IACF,MAAMC,kBAAkB,GAKpB,EAAE;IACN,KAAK,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,IAAIH,SAAS,CAACI,OAAO,EAAE,EAAE;MACnD,MAAMC,OAAO,GAAGF,QAAQ,CAACE,OAAO,IAAIX,MAAM,CAACY,KAAK,CAACD,OAAO;MACxD,IAAI,CAACJ,kBAAkB,CAACI,OAAO,CAAC,EAAEJ,kBAAkB,CAACI,OAAO,CAAC,GAAG,EAAE;MAClEJ,kBAAkB,CAACI,OAAO,CAAC,EAAEE,IAAI,CAAC;QAAEJ,QAAQ;QAAED;MAAK,CAAE,CAAC;IACxD;IACA,MAAMM,QAAQ,GAAGA,CAAA,KACfC,MAAM,CAACL,OAAO,CAACH,kBAAkB,CAAC,CAACS,GAAG,CAAC,CAAC,CAACL,OAAO,EAAEL,SAAS,CAAC,KAC1DT,SAAS,CAACG,MAAM,EAAE;MAChB,GAAGK,IAAI;MACPH,YAAY;MACZC,WAAW;MACXC,QAAQ;MACRO,OAAO,EAAEM,MAAM,CAACC,QAAQ,CAACP,OAAO,CAAC;MACjCL,SAAS,EAAEA,SAAS,CAACU,GAAG,CAAC,CAAC;QAAEP;MAAQ,CAAE,KAAKA,QAAQ;KACpD,CAAC,CACH;IAEH,MAAMU,gBAAgB,GAAG,CAAC,MAAMC,OAAO,CAACC,GAAG,CAACP,QAAQ,EAAE,CAAC,EAAEQ,IAAI,EAAE;IAC/D;IACA;IACA,MAAMC,aAAa,GAAGR,MAAM,CAACS,MAAM,CAACjB,kBAAkB,CAAC,CAACkB,OAAO,CAC5DnB,SAAS,IAAKA,SAAS,CAACU,GAAG,CAAC,CAAC;MAAER;IAAK,CAAE,KAAKA,KAAK,CAAC,CACnD;IACD,OAAOW,gBAAgB,CAACO,MAAM,CAAC,CAACC,OAAO,EAAEC,MAAM,EAAEpB,KAAK,KAAI;MACxD,IAAImB,OAAO,EAAGA,OAAqB,CAACJ,aAAa,CAACf,KAAK,CAAE,CAAC,GAAGoB,MAAM;MACnE,OAAOD,OAAO;IAChB,CAAC,EAAE,EAAe,CAAqD;EACzE,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,IAAIA,KAAK,YAAYjC,8BAA8B,EAAE,MAAMiC,KAAK;IAEhE,MAAMf,QAAQ,GAAGA,CAAA,KACfR,SAAS,CAACU,GAAG,CAAEP,QAAQ,IACrBX,YAAY,CAACE,MAAM,EAAE;MAAE,GAAGS,QAAQ;MAAEN,WAAW;MAAEC;IAAQ,CAAE,CAAC,CAC7D;IACH,IAAIF,YAAY,EACd,OAAO,CAAC,MAAMkB,OAAO,CAACU,UAAU,CAAChB,QAAQ,EAAE,CAAC,EAAEE,GAAG,CAAEY,MAAM,IAAI;MAC3D,IAAIA,MAAM,CAACG,MAAM,KAAK,WAAW,EAC/B,OAAO;QAAEH,MAAM,EAAEA,MAAM,CAACI,KAAK;QAAED,MAAM,EAAE;MAAS,CAAE;MACpD,OAAO;QAAEF,KAAK,EAAED,MAAM,CAACK,MAAM;QAAEL,MAAM,EAAEM,SAAS;QAAEH,MAAM,EAAE;MAAS,CAAE;IACvE,CAAC,CAAqD;IAExD,OAAQ,MAAMX,OAAO,CAACC,GAAG,CAACP,QAAQ,EAAE,CAAC;EAIvC;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}