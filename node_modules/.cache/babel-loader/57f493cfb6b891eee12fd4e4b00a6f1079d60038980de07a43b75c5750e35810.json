{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.blobsToCommitments = blobsToCommitments;\nconst toBytes_js_1 = require(\"../encoding/toBytes.js\");\nconst toHex_js_1 = require(\"../encoding/toHex.js\");\nfunction blobsToCommitments(parameters) {\n  const {\n    kzg\n  } = parameters;\n  const to = parameters.to ?? (typeof parameters.blobs[0] === 'string' ? 'hex' : 'bytes');\n  const blobs = typeof parameters.blobs[0] === 'string' ? parameters.blobs.map(x => (0, toBytes_js_1.hexToBytes)(x)) : parameters.blobs;\n  const commitments = [];\n  for (const blob of blobs) commitments.push(Uint8Array.from(kzg.blobToKzgCommitment(blob)));\n  return to === 'bytes' ? commitments : commitments.map(x => (0, toHex_js_1.bytesToHex)(x));\n}","map":{"version":3,"names":["exports","blobsToCommitments","toBytes_js_1","require","toHex_js_1","parameters","kzg","to","blobs","map","x","hexToBytes","commitments","blob","push","Uint8Array","from","blobToKzgCommitment","bytesToHex"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/viem/utils/blob/blobsToCommitments.ts"],"sourcesContent":["import type { ErrorType } from '../../errors/utils.js'\nimport type { Kzg } from '../../types/kzg.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type HexToBytesErrorType, hexToBytes } from '../encoding/toBytes.js'\nimport { type BytesToHexErrorType, bytesToHex } from '../encoding/toHex.js'\n\ntype To = 'hex' | 'bytes'\n\nexport type BlobsToCommitmentsParameters<\n  blobs extends readonly ByteArray[] | readonly Hex[] =\n    | readonly ByteArray[]\n    | readonly Hex[],\n  to extends To | undefined = undefined,\n> = {\n  /** Blobs to transform into commitments. */\n  blobs: blobs | readonly ByteArray[] | readonly Hex[]\n  /** KZG implementation. */\n  kzg: Pick<Kzg, 'blobToKzgCommitment'>\n  /** Return type. */\n  to?: to | To | undefined\n}\n\nexport type BlobsToCommitmentsReturnType<to extends To> =\n  | (to extends 'bytes' ? readonly ByteArray[] : never)\n  | (to extends 'hex' ? readonly Hex[] : never)\n\nexport type BlobsToCommitmentsErrorType =\n  | HexToBytesErrorType\n  | BytesToHexErrorType\n  | ErrorType\n\n/**\n * Compute commitments from a list of blobs.\n *\n * @example\n * ```ts\n * import { blobsToCommitments, toBlobs } from 'viem'\n * import { kzg } from './kzg'\n *\n * const blobs = toBlobs({ data: '0x1234' })\n * const commitments = blobsToCommitments({ blobs, kzg })\n * ```\n */\nexport function blobsToCommitments<\n  const blobs extends readonly ByteArray[] | readonly Hex[],\n  to extends To =\n    | (blobs extends readonly Hex[] ? 'hex' : never)\n    | (blobs extends readonly ByteArray[] ? 'bytes' : never),\n>(\n  parameters: BlobsToCommitmentsParameters<blobs, to>,\n): BlobsToCommitmentsReturnType<to> {\n  const { kzg } = parameters\n\n  const to =\n    parameters.to ?? (typeof parameters.blobs[0] === 'string' ? 'hex' : 'bytes')\n  const blobs = (\n    typeof parameters.blobs[0] === 'string'\n      ? parameters.blobs.map((x) => hexToBytes(x as any))\n      : parameters.blobs\n  ) as ByteArray[]\n\n  const commitments: ByteArray[] = []\n  for (const blob of blobs)\n    commitments.push(Uint8Array.from(kzg.blobToKzgCommitment(blob)))\n\n  return (to === 'bytes'\n    ? commitments\n    : commitments.map((x) =>\n        bytesToHex(x),\n      )) as {} as BlobsToCommitmentsReturnType<to>\n}\n"],"mappings":";;;;;AA2CAA,OAAA,CAAAC,kBAAA,GAAAA,kBAAA;AAxCA,MAAAC,YAAA,GAAAC,OAAA;AACA,MAAAC,UAAA,GAAAD,OAAA;AAuCA,SAAgBF,kBAAkBA,CAMhCI,UAAmD;EAEnD,MAAM;IAAEC;EAAG,CAAE,GAAGD,UAAU;EAE1B,MAAME,EAAE,GACNF,UAAU,CAACE,EAAE,KAAK,OAAOF,UAAU,CAACG,KAAK,CAAC,CAAC,CAAC,KAAK,QAAQ,GAAG,KAAK,GAAG,OAAO,CAAC;EAC9E,MAAMA,KAAK,GACT,OAAOH,UAAU,CAACG,KAAK,CAAC,CAAC,CAAC,KAAK,QAAQ,GACnCH,UAAU,CAACG,KAAK,CAACC,GAAG,CAAEC,CAAC,IAAK,IAAAR,YAAA,CAAAS,UAAU,EAACD,CAAQ,CAAC,CAAC,GACjDL,UAAU,CAACG,KACD;EAEhB,MAAMI,WAAW,GAAgB,EAAE;EACnC,KAAK,MAAMC,IAAI,IAAIL,KAAK,EACtBI,WAAW,CAACE,IAAI,CAACC,UAAU,CAACC,IAAI,CAACV,GAAG,CAACW,mBAAmB,CAACJ,IAAI,CAAC,CAAC,CAAC;EAElE,OAAQN,EAAE,KAAK,OAAO,GAClBK,WAAW,GACXA,WAAW,CAACH,GAAG,CAAEC,CAAC,IAChB,IAAAN,UAAA,CAAAc,UAAU,EAACR,CAAC,CAAC,CACd;AACP","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}