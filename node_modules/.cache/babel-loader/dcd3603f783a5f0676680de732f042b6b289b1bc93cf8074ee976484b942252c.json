{"ast":null,"code":"import { verifyTypedData } from '../actions/verifyTypedData.js';\nimport { filterQueryOptions } from './utils.js';\nexport function verifyTypedDataQueryOptions(config, options = {}) {\n  return {\n    async queryFn({\n      queryKey\n    }) {\n      const {\n        address,\n        message,\n        primaryType,\n        signature,\n        types,\n        scopeKey: _,\n        ...parameters\n      } = queryKey[1];\n      if (!address) throw new Error('address is required');\n      if (!message) throw new Error('message is required');\n      if (!primaryType) throw new Error('primaryType is required');\n      if (!signature) throw new Error('signature is required');\n      if (!types) throw new Error('types is required');\n      const verified = await verifyTypedData(config, {\n        ...parameters,\n        address,\n        message,\n        primaryType,\n        signature,\n        types\n      });\n      return verified ?? null;\n    },\n    queryKey: verifyTypedDataQueryKey(options)\n  };\n}\nexport function verifyTypedDataQueryKey(options) {\n  return ['verifyTypedData', filterQueryOptions(options)];\n}","map":{"version":3,"names":["verifyTypedData","filterQueryOptions","verifyTypedDataQueryOptions","config","options","queryFn","queryKey","address","message","primaryType","signature","types","scopeKey","_","parameters","Error","verified","verifyTypedDataQueryKey"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/@wagmi/core/src/query/verifyTypedData.ts"],"sourcesContent":["import type { QueryOptions } from '@tanstack/query-core'\nimport type { TypedData } from 'viem'\n\nimport {\n  type VerifyTypedDataErrorType,\n  type VerifyTypedDataParameters,\n  type VerifyTypedDataReturnType,\n  verifyTypedData,\n} from '../actions/verifyTypedData.js'\nimport type { Config } from '../createConfig.js'\nimport type { ScopeKeyParameter } from '../types/properties.js'\nimport type { ExactPartial } from '../types/utils.js'\nimport { filterQueryOptions } from './utils.js'\n\nexport type VerifyTypedDataOptions<\n  typedData extends TypedData | Record<string, unknown>,\n  primaryType extends keyof typedData | 'EIP712Domain',\n  config extends Config,\n> = ExactPartial<VerifyTypedDataParameters<typedData, primaryType, config>> &\n  ScopeKeyParameter\n\nexport function verifyTypedDataQueryOptions<\n  config extends Config,\n  const typedData extends TypedData | Record<string, unknown>,\n  primaryType extends keyof typedData | 'EIP712Domain',\n>(\n  config: config,\n  options: VerifyTypedDataOptions<typedData, primaryType, config> = {} as any,\n) {\n  return {\n    async queryFn({ queryKey }) {\n      const {\n        address,\n        message,\n        primaryType,\n        signature,\n        types,\n        scopeKey: _,\n        ...parameters\n      } = queryKey[1]\n      if (!address) throw new Error('address is required')\n      if (!message) throw new Error('message is required')\n      if (!primaryType) throw new Error('primaryType is required')\n      if (!signature) throw new Error('signature is required')\n      if (!types) throw new Error('types is required')\n\n      const verified = await verifyTypedData(config, {\n        ...parameters,\n        address,\n        message,\n        primaryType,\n        signature,\n        types,\n      } as VerifyTypedDataParameters)\n      return verified ?? null\n    },\n    queryKey: verifyTypedDataQueryKey(options),\n  } as const satisfies QueryOptions<\n    VerifyTypedDataQueryFnData,\n    VerifyTypedDataErrorType,\n    VerifyTypedDataData,\n    VerifyTypedDataQueryKey<typedData, primaryType, config>\n  >\n}\n\nexport type VerifyTypedDataQueryFnData = VerifyTypedDataReturnType\n\nexport type VerifyTypedDataData = VerifyTypedDataQueryFnData\n\nexport function verifyTypedDataQueryKey<\n  config extends Config,\n  const typedData extends TypedData | Record<string, unknown>,\n  primaryType extends keyof typedData | 'EIP712Domain',\n>(options: VerifyTypedDataOptions<typedData, primaryType, config>) {\n  return ['verifyTypedData', filterQueryOptions(options)] as const\n}\n\nexport type VerifyTypedDataQueryKey<\n  typedData extends TypedData | Record<string, unknown>,\n  primaryType extends keyof typedData | 'EIP712Domain',\n  config extends Config,\n> = ReturnType<typeof verifyTypedDataQueryKey<config, typedData, primaryType>>\n"],"mappings":"AAGA,SAIEA,eAAe,QACV,+BAA+B;AAItC,SAASC,kBAAkB,QAAQ,YAAY;AAS/C,OAAM,SAAUC,2BAA2BA,CAKzCC,MAAc,EACdC,OAAA,GAAkE,EAAS;EAE3E,OAAO;IACL,MAAMC,OAAOA,CAAC;MAAEC;IAAQ,CAAE;MACxB,MAAM;QACJC,OAAO;QACPC,OAAO;QACPC,WAAW;QACXC,SAAS;QACTC,KAAK;QACLC,QAAQ,EAAEC,CAAC;QACX,GAAGC;MAAU,CACd,GAAGR,QAAQ,CAAC,CAAC,CAAC;MACf,IAAI,CAACC,OAAO,EAAE,MAAM,IAAIQ,KAAK,CAAC,qBAAqB,CAAC;MACpD,IAAI,CAACP,OAAO,EAAE,MAAM,IAAIO,KAAK,CAAC,qBAAqB,CAAC;MACpD,IAAI,CAACN,WAAW,EAAE,MAAM,IAAIM,KAAK,CAAC,yBAAyB,CAAC;MAC5D,IAAI,CAACL,SAAS,EAAE,MAAM,IAAIK,KAAK,CAAC,uBAAuB,CAAC;MACxD,IAAI,CAACJ,KAAK,EAAE,MAAM,IAAII,KAAK,CAAC,mBAAmB,CAAC;MAEhD,MAAMC,QAAQ,GAAG,MAAMhB,eAAe,CAACG,MAAM,EAAE;QAC7C,GAAGW,UAAU;QACbP,OAAO;QACPC,OAAO;QACPC,WAAW;QACXC,SAAS;QACTC;OAC4B,CAAC;MAC/B,OAAOK,QAAQ,IAAI,IAAI;IACzB,CAAC;IACDV,QAAQ,EAAEW,uBAAuB,CAACb,OAAO;GAM1C;AACH;AAMA,OAAM,SAAUa,uBAAuBA,CAIrCb,OAA+D;EAC/D,OAAO,CAAC,iBAAiB,EAAEH,kBAAkB,CAACG,OAAO,CAAC,CAAU;AAClE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}