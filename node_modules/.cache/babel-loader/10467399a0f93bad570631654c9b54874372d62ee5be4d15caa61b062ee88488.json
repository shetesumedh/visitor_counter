{"ast":null,"code":"import { SocketClosedError, TimeoutError } from '../../errors/request.js';\nimport { createBatchScheduler } from '../promise/createBatchScheduler.js';\nimport { withTimeout } from '../promise/withTimeout.js';\nimport { idCache } from './id.js';\nexport const socketClientCache = /*#__PURE__*/new Map();\nexport async function getSocketRpcClient(parameters) {\n  const {\n    getSocket,\n    keepAlive = true,\n    key = 'socket',\n    reconnect = true,\n    url\n  } = parameters;\n  const {\n    interval: keepAliveInterval = 30_000\n  } = typeof keepAlive === 'object' ? keepAlive : {};\n  const {\n    attempts = 5,\n    delay = 2_000\n  } = typeof reconnect === 'object' ? reconnect : {};\n  const id = JSON.stringify({\n    keepAlive,\n    key,\n    url,\n    reconnect\n  });\n  let socketClient = socketClientCache.get(id);\n  // If the socket already exists, return it.\n  if (socketClient) return socketClient;\n  let reconnectCount = 0;\n  const {\n    schedule\n  } = createBatchScheduler({\n    id,\n    fn: async () => {\n      // Set up a cache for incoming \"synchronous\" requests.\n      const requests = new Map();\n      // Set up a cache for subscriptions (eth_subscribe).\n      const subscriptions = new Map();\n      let error;\n      let socket;\n      let keepAliveTimer;\n      let reconnectInProgress = false;\n      function attemptReconnect() {\n        // Attempt to reconnect.\n        if (reconnect && reconnectCount < attempts) {\n          if (reconnectInProgress) return;\n          reconnectInProgress = true;\n          reconnectCount++;\n          // Make sure the previous socket is definitely closed.\n          socket?.close();\n          setTimeout(async () => {\n            await setup().catch(console.error);\n            reconnectInProgress = false;\n          }, delay);\n        }\n        // Otherwise, clear all requests and subscriptions.\n        else {\n          requests.clear();\n          subscriptions.clear();\n        }\n      }\n      // Set up socket implementation.\n      async function setup() {\n        const result = await getSocket({\n          onClose() {\n            // Notify all requests and subscriptions of the closure error.\n            for (const request of requests.values()) request.onError?.(new SocketClosedError({\n              url\n            }));\n            for (const subscription of subscriptions.values()) subscription.onError?.(new SocketClosedError({\n              url\n            }));\n            attemptReconnect();\n          },\n          onError(error_) {\n            error = error_;\n            // Notify all requests and subscriptions of the error.\n            for (const request of requests.values()) request.onError?.(error);\n            for (const subscription of subscriptions.values()) subscription.onError?.(error);\n            attemptReconnect();\n          },\n          onOpen() {\n            error = undefined;\n            reconnectCount = 0;\n          },\n          onResponse(data) {\n            const isSubscription = data.method === 'eth_subscription';\n            const id = isSubscription ? data.params.subscription : data.id;\n            const cache = isSubscription ? subscriptions : requests;\n            const callback = cache.get(id);\n            if (callback) callback.onResponse(data);\n            if (!isSubscription) cache.delete(id);\n          }\n        });\n        socket = result;\n        if (keepAlive) {\n          if (keepAliveTimer) clearInterval(keepAliveTimer);\n          keepAliveTimer = setInterval(() => socket.ping?.(), keepAliveInterval);\n        }\n        if (reconnect && subscriptions.size > 0) {\n          const subscriptionEntries = subscriptions.entries();\n          for (const [key, {\n            onResponse,\n            body,\n            onError\n          }] of subscriptionEntries) {\n            if (!body) continue;\n            subscriptions.delete(key);\n            socketClient?.request({\n              body,\n              onResponse,\n              onError\n            });\n          }\n        }\n        return result;\n      }\n      await setup();\n      error = undefined;\n      // Create a new socket instance.\n      socketClient = {\n        close() {\n          keepAliveTimer && clearInterval(keepAliveTimer);\n          socket.close();\n          socketClientCache.delete(id);\n        },\n        get socket() {\n          return socket;\n        },\n        request({\n          body,\n          onError,\n          onResponse\n        }) {\n          if (error && onError) onError(error);\n          const id = body.id ?? idCache.take();\n          const callback = response => {\n            if (typeof response.id === 'number' && id !== response.id) return;\n            // If we are subscribing to a topic, we want to set up a listener for incoming\n            // messages.\n            if (body.method === 'eth_subscribe' && typeof response.result === 'string') subscriptions.set(response.result, {\n              onResponse: callback,\n              onError,\n              body\n            });\n            // If we are unsubscribing from a topic, we want to remove the listener.\n            if (body.method === 'eth_unsubscribe') subscriptions.delete(body.params?.[0]);\n            onResponse(response);\n          };\n          requests.set(id, {\n            onResponse: callback,\n            onError\n          });\n          try {\n            socket.request({\n              body: {\n                jsonrpc: '2.0',\n                id,\n                ...body\n              }\n            });\n          } catch (error) {\n            onError?.(error);\n          }\n        },\n        requestAsync({\n          body,\n          timeout = 10_000\n        }) {\n          return withTimeout(() => new Promise((onResponse, onError) => this.request({\n            body,\n            onError,\n            onResponse\n          })), {\n            errorInstance: new TimeoutError({\n              body,\n              url\n            }),\n            timeout\n          });\n        },\n        requests,\n        subscriptions,\n        url\n      };\n      socketClientCache.set(id, socketClient);\n      return [socketClient];\n    }\n  });\n  const [_, [socketClient_]] = await schedule();\n  return socketClient_;\n}","map":{"version":3,"names":["SocketClosedError","TimeoutError","createBatchScheduler","withTimeout","idCache","socketClientCache","Map","getSocketRpcClient","parameters","getSocket","keepAlive","key","reconnect","url","interval","keepAliveInterval","attempts","delay","id","JSON","stringify","socketClient","get","reconnectCount","schedule","fn","requests","subscriptions","error","socket","keepAliveTimer","reconnectInProgress","attemptReconnect","close","setTimeout","setup","catch","console","clear","result","onClose","request","values","onError","subscription","error_","onOpen","undefined","onResponse","data","isSubscription","method","params","cache","callback","delete","clearInterval","setInterval","ping","size","subscriptionEntries","entries","body","take","response","set","jsonrpc","requestAsync","timeout","Promise","errorInstance","_","socketClient_"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/viem/utils/rpc/socket.ts"],"sourcesContent":["import { SocketClosedError, TimeoutError } from '../../errors/request.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { RpcRequest, RpcResponse } from '../../types/rpc.js'\nimport {\n  type CreateBatchSchedulerErrorType,\n  createBatchScheduler,\n} from '../promise/createBatchScheduler.js'\nimport { withTimeout } from '../promise/withTimeout.js'\nimport { idCache } from './id.js'\n\ntype Id = string | number\ntype CallbackFn = {\n  onResponse: (message: any) => void\n  onError?: ((error?: Error | Event | undefined) => void) | undefined\n  body?: RpcRequest\n}\ntype CallbackMap = Map<Id, CallbackFn>\n\nexport type GetSocketParameters = {\n  onClose: () => void\n  onError: (error?: Error | Event | undefined) => void\n  onOpen: () => void\n  onResponse: (data: RpcResponse) => void\n}\n\nexport type Socket<socket extends {}> = socket & {\n  close(): void\n  ping?: (() => void) | undefined\n  request(params: { body: RpcRequest }): void\n}\n\nexport type SocketRpcClient<socket extends {}> = {\n  close(): void\n  socket: Socket<socket>\n  request(params: {\n    body: RpcRequest\n    onError?: ((error?: Error | Event | undefined) => void) | undefined\n    onResponse: (message: RpcResponse) => void\n  }): void\n  requestAsync(params: {\n    body: RpcRequest\n    timeout?: number | undefined\n  }): Promise<RpcResponse>\n  requests: CallbackMap\n  subscriptions: CallbackMap\n  url: string\n}\n\nexport type GetSocketRpcClientParameters<socket extends {} = {}> = {\n  getSocket(params: GetSocketParameters): Promise<Socket<socket>>\n  /**\n   * Whether or not to send keep-alive messages.\n   * @default true\n   */\n  keepAlive?:\n    | boolean\n    | {\n        /**\n         * The interval (in ms) to send keep-alive messages.\n         * @default 30_000\n         */\n        interval?: number | undefined\n      }\n    | undefined\n  key?: string\n  /**\n   * Whether or not to attempt to reconnect on socket failure or closure.\n   * @default true\n   */\n  reconnect?:\n    | boolean\n    | {\n        /**\n         * The maximum number of reconnection attempts.\n         * @default 5\n         */\n        attempts?: number | undefined\n        /**\n         * The delay (in ms) between reconnection attempts.\n         * @default 2_000\n         */\n        delay?: number | undefined\n      }\n    | undefined\n  url: string\n}\n\nexport type GetSocketRpcClientErrorType =\n  | CreateBatchSchedulerErrorType\n  | ErrorType\n\nexport const socketClientCache = /*#__PURE__*/ new Map<\n  string,\n  SocketRpcClient<Socket<{}>>\n>()\n\nexport async function getSocketRpcClient<socket extends {}>(\n  parameters: GetSocketRpcClientParameters<socket>,\n): Promise<SocketRpcClient<socket>> {\n  const {\n    getSocket,\n    keepAlive = true,\n    key = 'socket',\n    reconnect = true,\n    url,\n  } = parameters\n  const { interval: keepAliveInterval = 30_000 } =\n    typeof keepAlive === 'object' ? keepAlive : {}\n  const { attempts = 5, delay = 2_000 } =\n    typeof reconnect === 'object' ? reconnect : {}\n\n  const id = JSON.stringify({ keepAlive, key, url, reconnect })\n  let socketClient = socketClientCache.get(id)\n\n  // If the socket already exists, return it.\n  if (socketClient) return socketClient as {} as SocketRpcClient<socket>\n\n  let reconnectCount = 0\n  const { schedule } = createBatchScheduler<\n    undefined,\n    [SocketRpcClient<socket>]\n  >({\n    id,\n    fn: async () => {\n      // Set up a cache for incoming \"synchronous\" requests.\n      const requests = new Map<Id, CallbackFn>()\n\n      // Set up a cache for subscriptions (eth_subscribe).\n      const subscriptions = new Map<Id, CallbackFn>()\n\n      let error: Error | Event | undefined\n      let socket: Socket<{}>\n      let keepAliveTimer: ReturnType<typeof setInterval> | undefined\n\n      let reconnectInProgress = false\n      function attemptReconnect() {\n        // Attempt to reconnect.\n        if (reconnect && reconnectCount < attempts) {\n          if (reconnectInProgress) return\n          reconnectInProgress = true\n          reconnectCount++\n\n          // Make sure the previous socket is definitely closed.\n          socket?.close()\n\n          setTimeout(async () => {\n            await setup().catch(console.error)\n            reconnectInProgress = false\n          }, delay)\n        }\n        // Otherwise, clear all requests and subscriptions.\n        else {\n          requests.clear()\n          subscriptions.clear()\n        }\n      }\n\n      // Set up socket implementation.\n      async function setup() {\n        const result = await getSocket({\n          onClose() {\n            // Notify all requests and subscriptions of the closure error.\n            for (const request of requests.values())\n              request.onError?.(new SocketClosedError({ url }))\n            for (const subscription of subscriptions.values())\n              subscription.onError?.(new SocketClosedError({ url }))\n\n            attemptReconnect()\n          },\n          onError(error_) {\n            error = error_\n\n            // Notify all requests and subscriptions of the error.\n            for (const request of requests.values()) request.onError?.(error)\n            for (const subscription of subscriptions.values())\n              subscription.onError?.(error)\n\n            attemptReconnect()\n          },\n          onOpen() {\n            error = undefined\n            reconnectCount = 0\n          },\n          onResponse(data) {\n            const isSubscription = data.method === 'eth_subscription'\n            const id = isSubscription ? data.params.subscription : data.id\n            const cache = isSubscription ? subscriptions : requests\n            const callback = cache.get(id)\n            if (callback) callback.onResponse(data)\n            if (!isSubscription) cache.delete(id)\n          },\n        })\n\n        socket = result\n\n        if (keepAlive) {\n          if (keepAliveTimer) clearInterval(keepAliveTimer)\n          keepAliveTimer = setInterval(() => socket.ping?.(), keepAliveInterval)\n        }\n\n        if (reconnect && subscriptions.size > 0) {\n          const subscriptionEntries = subscriptions.entries()\n          for (const [\n            key,\n            { onResponse, body, onError },\n          ] of subscriptionEntries) {\n            if (!body) continue\n\n            subscriptions.delete(key)\n            socketClient?.request({ body, onResponse, onError })\n          }\n        }\n\n        return result\n      }\n      await setup()\n      error = undefined\n\n      // Create a new socket instance.\n      socketClient = {\n        close() {\n          keepAliveTimer && clearInterval(keepAliveTimer)\n          socket.close()\n          socketClientCache.delete(id)\n        },\n        get socket() {\n          return socket\n        },\n        request({ body, onError, onResponse }) {\n          if (error && onError) onError(error)\n\n          const id = body.id ?? idCache.take()\n\n          const callback = (response: RpcResponse) => {\n            if (typeof response.id === 'number' && id !== response.id) return\n\n            // If we are subscribing to a topic, we want to set up a listener for incoming\n            // messages.\n            if (\n              body.method === 'eth_subscribe' &&\n              typeof response.result === 'string'\n            )\n              subscriptions.set(response.result, {\n                onResponse: callback,\n                onError,\n                body,\n              })\n\n            // If we are unsubscribing from a topic, we want to remove the listener.\n            if (body.method === 'eth_unsubscribe')\n              subscriptions.delete(body.params?.[0])\n\n            onResponse(response)\n          }\n\n          requests.set(id, { onResponse: callback, onError })\n          try {\n            socket.request({\n              body: {\n                jsonrpc: '2.0',\n                id,\n                ...body,\n              },\n            })\n          } catch (error) {\n            onError?.(error as Error)\n          }\n        },\n        requestAsync({ body, timeout = 10_000 }) {\n          return withTimeout(\n            () =>\n              new Promise<RpcResponse>((onResponse, onError) =>\n                this.request({\n                  body,\n                  onError,\n                  onResponse,\n                }),\n              ),\n            {\n              errorInstance: new TimeoutError({ body, url }),\n              timeout,\n            },\n          )\n        },\n        requests,\n        subscriptions,\n        url,\n      }\n      socketClientCache.set(id, socketClient)\n\n      return [socketClient as {} as SocketRpcClient<socket>]\n    },\n  })\n\n  const [_, [socketClient_]] = await schedule()\n  return socketClient_\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}