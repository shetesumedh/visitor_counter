{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getChainId = getChainId;\nconst fromHex_js_1 = require(\"../../utils/encoding/fromHex.js\");\nasync function getChainId(client) {\n  const chainIdHex = await client.request({\n    method: 'eth_chainId'\n  }, {\n    dedupe: true\n  });\n  return (0, fromHex_js_1.hexToNumber)(chainIdHex);\n}","map":{"version":3,"names":["exports","getChainId","fromHex_js_1","require","client","chainIdHex","request","method","dedupe","hexToNumber"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/viem/actions/public/getChainId.ts"],"sourcesContent":["import type { Account } from '../../accounts/types.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type HexToNumberErrorType,\n  hexToNumber,\n} from '../../utils/encoding/fromHex.js'\n\nexport type GetChainIdReturnType = number\n\nexport type GetChainIdErrorType =\n  | HexToNumberErrorType\n  | RequestErrorType\n  | ErrorType\n\n/**\n * Returns the chain ID associated with the current network.\n *\n * - Docs: https://viem.sh/docs/actions/public/getChainId\n * - JSON-RPC Methods: [`eth_chainId`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_chainid)\n *\n * @param client - Client to use\n * @returns The current chain ID. {@link GetChainIdReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getChainId } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const chainId = await getChainId(client)\n * // 1\n */\nexport async function getChainId<\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n>(client: Client<Transport, chain, account>): Promise<GetChainIdReturnType> {\n  const chainIdHex = await client.request(\n    {\n      method: 'eth_chainId',\n    },\n    { dedupe: true },\n  )\n  return hexToNumber(chainIdHex)\n}\n"],"mappings":";;;;;AAuCAA,OAAA,CAAAC,UAAA,GAAAA,UAAA;AAjCA,MAAAC,YAAA,GAAAC,OAAA;AAiCO,eAAeF,UAAUA,CAG9BG,MAAyC;EACzC,MAAMC,UAAU,GAAG,MAAMD,MAAM,CAACE,OAAO,CACrC;IACEC,MAAM,EAAE;GACT,EACD;IAAEC,MAAM,EAAE;EAAI,CAAE,CACjB;EACD,OAAO,IAAAN,YAAA,CAAAO,WAAW,EAACJ,UAAU,CAAC;AAChC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}