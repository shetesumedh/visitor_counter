{"ast":null,"code":"'use client';\n\nimport { infiniteReadContractsQueryOptions, structuralSharing } from '@wagmi/core/query';\nimport { useInfiniteQuery } from '../utils/query.js';\nimport { useChainId } from './useChainId.js';\nimport { useConfig } from './useConfig.js';\n/** https://wagmi.sh/react/api/hooks/useInfiniteReadContracts */\nexport function useInfiniteReadContracts(parameters) {\n  const {\n    contracts = [],\n    query\n  } = parameters;\n  const config = useConfig(parameters);\n  const chainId = useChainId({\n    config\n  });\n  const options = infiniteReadContractsQueryOptions(config, {\n    ...parameters,\n    chainId,\n    contracts: contracts,\n    query: query\n  });\n  return useInfiniteQuery({\n    ...query,\n    ...options,\n    initialPageParam: options.initialPageParam,\n    structuralSharing: query.structuralSharing ?? structuralSharing\n  });\n}","map":{"version":3,"names":["infiniteReadContractsQueryOptions","structuralSharing","useInfiniteQuery","useChainId","useConfig","useInfiniteReadContracts","parameters","contracts","query","config","chainId","options","initialPageParam"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/wagmi/src/hooks/useInfiniteReadContracts.ts"],"sourcesContent":["'use client'\n\nimport type {\n  Config,\n  ReadContractsErrorType,\n  ResolvedRegister,\n} from '@wagmi/core'\nimport {\n  type InfiniteReadContractsQueryFnData,\n  type InfiniteReadContractsQueryKey,\n  infiniteReadContractsQueryOptions,\n  structuralSharing,\n} from '@wagmi/core/query'\nimport type { ContractFunctionParameters } from 'viem'\n\nimport type {\n  InfiniteReadContractsData,\n  InfiniteReadContractsOptions,\n} from '../exports/query.js'\nimport type {\n  ConfigParameter,\n  InfiniteQueryParameter,\n} from '../types/properties.js'\nimport {\n  type UseInfiniteQueryParameters,\n  type UseInfiniteQueryReturnType,\n  useInfiniteQuery,\n} from '../utils/query.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseInfiniteContractReadsParameters<\n  contracts extends readonly unknown[] = readonly ContractFunctionParameters[],\n  allowFailure extends boolean = true,\n  config extends Config = Config,\n  pageParam = unknown,\n  selectData = InfiniteReadContractsData<contracts, allowFailure>,\n> = InfiniteReadContractsOptions<contracts, allowFailure, pageParam, config> &\n  ConfigParameter<config> &\n  InfiniteQueryParameter<\n    InfiniteReadContractsQueryFnData<contracts, allowFailure>,\n    ReadContractsErrorType,\n    selectData,\n    InfiniteReadContractsData<contracts, allowFailure>,\n    InfiniteReadContractsQueryKey<contracts, allowFailure, pageParam, config>,\n    pageParam\n  >\n\nexport type UseInfiniteContractReadsReturnType<\n  contracts extends readonly unknown[] = readonly ContractFunctionParameters[],\n  allowFailure extends boolean = true,\n  selectData = InfiniteReadContractsData<contracts, allowFailure>,\n> = UseInfiniteQueryReturnType<selectData, ReadContractsErrorType>\n\n/** https://wagmi.sh/react/api/hooks/useInfiniteReadContracts */\nexport function useInfiniteReadContracts<\n  const contracts extends readonly unknown[],\n  allowFailure extends boolean = true,\n  config extends Config = ResolvedRegister['config'],\n  pageParam = unknown,\n  selectData = InfiniteReadContractsData<contracts, allowFailure>,\n>(\n  parameters: UseInfiniteContractReadsParameters<\n    contracts,\n    allowFailure,\n    config,\n    pageParam,\n    selectData\n  >,\n): UseInfiniteContractReadsReturnType<contracts, allowFailure, selectData> {\n  const { contracts = [], query } = parameters\n\n  const config = useConfig(parameters)\n  const chainId = useChainId({ config })\n\n  const options = infiniteReadContractsQueryOptions(config, {\n    ...parameters,\n    chainId,\n    contracts: contracts as UseInfiniteContractReadsParameters['contracts'],\n    query: query as UseInfiniteQueryParameters,\n  })\n\n  return useInfiniteQuery({\n    ...(query as any),\n    ...options,\n    initialPageParam: options.initialPageParam,\n    structuralSharing: query.structuralSharing ?? structuralSharing,\n  })\n}\n"],"mappings":"AAAA,YAAY;;AAOZ,SAGEA,iCAAiC,EACjCC,iBAAiB,QACZ,mBAAmB;AAW1B,SAGEC,gBAAgB,QACX,mBAAmB;AAC1B,SAASC,UAAU,QAAQ,iBAAiB;AAC5C,SAASC,SAAS,QAAQ,gBAAgB;AAyB1C;AACA,OAAM,SAAUC,wBAAwBA,CAOtCC,UAMC;EAED,MAAM;IAAEC,SAAS,GAAG,EAAE;IAAEC;EAAK,CAAE,GAAGF,UAAU;EAE5C,MAAMG,MAAM,GAAGL,SAAS,CAACE,UAAU,CAAC;EACpC,MAAMI,OAAO,GAAGP,UAAU,CAAC;IAAEM;EAAM,CAAE,CAAC;EAEtC,MAAME,OAAO,GAAGX,iCAAiC,CAACS,MAAM,EAAE;IACxD,GAAGH,UAAU;IACbI,OAAO;IACPH,SAAS,EAAEA,SAA4D;IACvEC,KAAK,EAAEA;GACR,CAAC;EAEF,OAAON,gBAAgB,CAAC;IACtB,GAAIM,KAAa;IACjB,GAAGG,OAAO;IACVC,gBAAgB,EAAED,OAAO,CAACC,gBAAgB;IAC1CX,iBAAiB,EAAEO,KAAK,CAACP,iBAAiB,IAAIA;GAC/C,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}