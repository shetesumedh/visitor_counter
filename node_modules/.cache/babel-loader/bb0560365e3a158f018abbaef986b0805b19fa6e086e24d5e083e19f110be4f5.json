{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.serializeError = void 0;\n// TODO: error should not depend on walletlink. revisit this.\nconst Web3Response_1 = require(\"../../relay/walletlink/type/Web3Response\");\nconst version_1 = require(\"../../version\");\nconst constants_1 = require(\"./constants\");\nconst utils_1 = require(\"./utils\");\n/**\n * Serializes an error to a format that is compatible with the Ethereum JSON RPC error format.\n * See https://docs.cloud.coinbase.com/wallet-sdk/docs/errors\n * for more information.\n */\nfunction serializeError(error, requestOrMethod) {\n  const serialized = (0, utils_1.serialize)(getErrorObject(error), {\n    shouldIncludeStack: true\n  });\n  const docUrl = new URL('https://docs.cloud.coinbase.com/wallet-sdk/docs/errors');\n  docUrl.searchParams.set('version', version_1.LIB_VERSION);\n  docUrl.searchParams.set('code', serialized.code.toString());\n  const method = getMethod(serialized.data, requestOrMethod);\n  if (method) {\n    docUrl.searchParams.set('method', method);\n  }\n  docUrl.searchParams.set('message', serialized.message);\n  return Object.assign(Object.assign({}, serialized), {\n    docUrl: docUrl.href\n  });\n}\nexports.serializeError = serializeError;\n/**\n * Converts an error to a serializable object.\n */\nfunction getErrorObject(error) {\n  if (typeof error === 'string') {\n    return {\n      message: error,\n      code: constants_1.standardErrorCodes.rpc.internal\n    };\n  } else if ((0, Web3Response_1.isErrorResponse)(error)) {\n    return Object.assign(Object.assign({}, error), {\n      message: error.errorMessage,\n      code: error.errorCode,\n      data: {\n        method: error.method\n      }\n    });\n  }\n  return error;\n}\n/**\n * Gets the method name from the serialized data or the request.\n */\nfunction getMethod(serializedData, request) {\n  const methodInData = serializedData === null || serializedData === void 0 ? void 0 : serializedData.method;\n  if (methodInData) {\n    return methodInData;\n  }\n  if (request === undefined) {\n    return undefined;\n  } else if (typeof request === 'string') {\n    return request;\n  } else if (!Array.isArray(request)) {\n    return request.method;\n  } else if (request.length > 0) {\n    return request[0].method;\n  }\n  return undefined;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","serializeError","Web3Response_1","require","version_1","constants_1","utils_1","error","requestOrMethod","serialized","serialize","getErrorObject","shouldIncludeStack","docUrl","URL","searchParams","set","LIB_VERSION","code","toString","method","getMethod","data","message","assign","href","standardErrorCodes","rpc","internal","isErrorResponse","errorMessage","errorCode","serializedData","request","methodInData","undefined","Array","isArray","length"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/cbw-sdk/dist/core/error/serialize.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.serializeError = void 0;\n// TODO: error should not depend on walletlink. revisit this.\nconst Web3Response_1 = require(\"../../relay/walletlink/type/Web3Response\");\nconst version_1 = require(\"../../version\");\nconst constants_1 = require(\"./constants\");\nconst utils_1 = require(\"./utils\");\n/**\n * Serializes an error to a format that is compatible with the Ethereum JSON RPC error format.\n * See https://docs.cloud.coinbase.com/wallet-sdk/docs/errors\n * for more information.\n */\nfunction serializeError(error, requestOrMethod) {\n    const serialized = (0, utils_1.serialize)(getErrorObject(error), {\n        shouldIncludeStack: true,\n    });\n    const docUrl = new URL('https://docs.cloud.coinbase.com/wallet-sdk/docs/errors');\n    docUrl.searchParams.set('version', version_1.LIB_VERSION);\n    docUrl.searchParams.set('code', serialized.code.toString());\n    const method = getMethod(serialized.data, requestOrMethod);\n    if (method) {\n        docUrl.searchParams.set('method', method);\n    }\n    docUrl.searchParams.set('message', serialized.message);\n    return Object.assign(Object.assign({}, serialized), { docUrl: docUrl.href });\n}\nexports.serializeError = serializeError;\n/**\n * Converts an error to a serializable object.\n */\nfunction getErrorObject(error) {\n    if (typeof error === 'string') {\n        return {\n            message: error,\n            code: constants_1.standardErrorCodes.rpc.internal,\n        };\n    }\n    else if ((0, Web3Response_1.isErrorResponse)(error)) {\n        return Object.assign(Object.assign({}, error), { message: error.errorMessage, code: error.errorCode, data: { method: error.method } });\n    }\n    return error;\n}\n/**\n * Gets the method name from the serialized data or the request.\n */\nfunction getMethod(serializedData, request) {\n    const methodInData = serializedData === null || serializedData === void 0 ? void 0 : serializedData.method;\n    if (methodInData) {\n        return methodInData;\n    }\n    if (request === undefined) {\n        return undefined;\n    }\n    else if (typeof request === 'string') {\n        return request;\n    }\n    else if (!Array.isArray(request)) {\n        return request.method;\n    }\n    else if (request.length > 0) {\n        return request[0].method;\n    }\n    return undefined;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}