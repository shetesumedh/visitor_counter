{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getFeeHistory = getFeeHistory;\nconst toHex_js_1 = require(\"../../utils/encoding/toHex.js\");\nconst feeHistory_js_1 = require(\"../../utils/formatters/feeHistory.js\");\nasync function getFeeHistory(client, {\n  blockCount,\n  blockNumber,\n  blockTag = 'latest',\n  rewardPercentiles\n}) {\n  const blockNumberHex = typeof blockNumber === 'bigint' ? (0, toHex_js_1.numberToHex)(blockNumber) : undefined;\n  const feeHistory = await client.request({\n    method: 'eth_feeHistory',\n    params: [(0, toHex_js_1.numberToHex)(blockCount), blockNumberHex || blockTag, rewardPercentiles]\n  }, {\n    dedupe: Boolean(blockNumberHex)\n  });\n  return (0, feeHistory_js_1.formatFeeHistory)(feeHistory);\n}","map":{"version":3,"names":["exports","getFeeHistory","toHex_js_1","require","feeHistory_js_1","client","blockCount","blockNumber","blockTag","rewardPercentiles","blockNumberHex","numberToHex","undefined","feeHistory","request","method","params","dedupe","Boolean","formatFeeHistory"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/viem/actions/public/getFeeHistory.ts"],"sourcesContent":["import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { FeeHistory } from '../../types/fee.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\nimport {\n  type FormatFeeHistoryErrorType,\n  formatFeeHistory,\n} from '../../utils/formatters/feeHistory.js'\n\nexport type GetFeeHistoryParameters = {\n  /**\n   * Number of blocks in the requested range. Between 1 and 1024 blocks can be requested in a single query. Less than requested may be returned if not all blocks are available.\n   */\n  blockCount: number\n  /**\n   * A monotonically increasing list of percentile values to sample from each block's effective priority fees per gas in ascending order, weighted by gas used.\n   */\n  rewardPercentiles: number[]\n} & (\n  | {\n      blockNumber?: undefined\n      /**\n       * Highest number block of the requested range.\n       * @default 'latest'\n       */\n      blockTag?: BlockTag | undefined\n    }\n  | {\n      /** Highest number block of the requested range. */\n      blockNumber?: bigint | undefined\n      blockTag?: undefined\n    }\n)\nexport type GetFeeHistoryReturnType = FeeHistory\n\nexport type GetFeeHistoryErrorType =\n  | NumberToHexErrorType\n  | RequestErrorType\n  | FormatFeeHistoryErrorType\n\n/**\n * Returns a collection of historical gas information.\n *\n * - Docs: https://viem.sh/docs/actions/public/getFeeHistory\n * - JSON-RPC Methods: [`eth_feeHistory`](https://docs.alchemy.com/reference/eth-feehistory)\n *\n * @param client - Client to use\n * @param parameters - {@link GetFeeHistoryParameters}\n * @returns The gas estimate (in wei). {@link GetFeeHistoryReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getFeeHistory } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const feeHistory = await getFeeHistory(client, {\n *   blockCount: 4,\n *   rewardPercentiles: [25, 75],\n * })\n */\nexport async function getFeeHistory<chain extends Chain | undefined>(\n  client: Client<Transport, chain>,\n  {\n    blockCount,\n    blockNumber,\n    blockTag = 'latest',\n    rewardPercentiles,\n  }: GetFeeHistoryParameters,\n): Promise<GetFeeHistoryReturnType> {\n  const blockNumberHex =\n    typeof blockNumber === 'bigint' ? numberToHex(blockNumber) : undefined\n  const feeHistory = await client.request(\n    {\n      method: 'eth_feeHistory',\n      params: [\n        numberToHex(blockCount),\n        blockNumberHex || blockTag,\n        rewardPercentiles,\n      ],\n    },\n    { dedupe: Boolean(blockNumberHex) },\n  )\n  return formatFeeHistory(feeHistory)\n}\n"],"mappings":";;;;;AAsEAA,OAAA,CAAAC,aAAA,GAAAA,aAAA;AAhEA,MAAAC,UAAA,GAAAC,OAAA;AAIA,MAAAC,eAAA,GAAAD,OAAA;AA4DO,eAAeF,aAAaA,CACjCI,MAAgC,EAChC;EACEC,UAAU;EACVC,WAAW;EACXC,QAAQ,GAAG,QAAQ;EACnBC;AAAiB,CACO;EAE1B,MAAMC,cAAc,GAClB,OAAOH,WAAW,KAAK,QAAQ,GAAG,IAAAL,UAAA,CAAAS,WAAW,EAACJ,WAAW,CAAC,GAAGK,SAAS;EACxE,MAAMC,UAAU,GAAG,MAAMR,MAAM,CAACS,OAAO,CACrC;IACEC,MAAM,EAAE,gBAAgB;IACxBC,MAAM,EAAE,CACN,IAAAd,UAAA,CAAAS,WAAW,EAACL,UAAU,CAAC,EACvBI,cAAc,IAAIF,QAAQ,EAC1BC,iBAAiB;GAEpB,EACD;IAAEQ,MAAM,EAAEC,OAAO,CAACR,cAAc;EAAC,CAAE,CACpC;EACD,OAAO,IAAAN,eAAA,CAAAe,gBAAgB,EAACN,UAAU,CAAC;AACrC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}