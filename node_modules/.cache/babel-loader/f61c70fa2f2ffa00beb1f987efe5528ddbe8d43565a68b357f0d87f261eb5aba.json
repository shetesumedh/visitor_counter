{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createTransport = createTransport;\nconst buildRequest_js_1 = require(\"../../utils/buildRequest.js\");\nconst uid_js_1 = require(\"../../utils/uid.js\");\nfunction createTransport({\n  key,\n  methods,\n  name,\n  request,\n  retryCount = 3,\n  retryDelay = 150,\n  timeout,\n  type\n}, value) {\n  const uid = (0, uid_js_1.uid)();\n  return {\n    config: {\n      key,\n      methods,\n      name,\n      request,\n      retryCount,\n      retryDelay,\n      timeout,\n      type\n    },\n    request: (0, buildRequest_js_1.buildRequest)(request, {\n      methods,\n      retryCount,\n      retryDelay,\n      uid\n    }),\n    value\n  };\n}","map":{"version":3,"names":["exports","createTransport","buildRequest_js_1","require","uid_js_1","key","methods","name","request","retryCount","retryDelay","timeout","type","value","uid","config","buildRequest"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/viem/clients/transports/createTransport.ts"],"sourcesContent":["import type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { EIP1193RequestFn } from '../../types/eip1193.js'\nimport type { OneOf } from '../../types/utils.js'\nimport { buildRequest } from '../../utils/buildRequest.js'\nimport { uid as uid_ } from '../../utils/uid.js'\nimport type { ClientConfig } from '../createClient.js'\n\nexport type TransportConfig<\n  type extends string = string,\n  eip1193RequestFn extends EIP1193RequestFn = EIP1193RequestFn,\n> = {\n  /** The name of the transport. */\n  name: string\n  /** The key of the transport. */\n  key: string\n  /** Methods to include or exclude from executing RPC requests. */\n  methods?:\n    | OneOf<\n        | {\n            include?: string[] | undefined\n          }\n        | {\n            exclude?: string[] | undefined\n          }\n      >\n    | undefined\n  /** The JSON-RPC request function that matches the EIP-1193 request spec. */\n  request: eip1193RequestFn\n  /** The base delay (in ms) between retries. */\n  retryDelay?: number | undefined\n  /** The max number of times to retry. */\n  retryCount?: number | undefined\n  /** The timeout (in ms) for requests. */\n  timeout?: number | undefined\n  /** The type of the transport. */\n  type: type\n}\n\nexport type Transport<\n  type extends string = string,\n  rpcAttributes = Record<string, any>,\n  eip1193RequestFn extends EIP1193RequestFn = EIP1193RequestFn,\n> = <chain extends Chain | undefined = Chain>({\n  chain,\n}: {\n  chain?: chain | undefined\n  pollingInterval?: ClientConfig['pollingInterval'] | undefined\n  retryCount?: TransportConfig['retryCount'] | undefined\n  timeout?: TransportConfig['timeout'] | undefined\n}) => {\n  config: TransportConfig<type>\n  request: eip1193RequestFn\n  value?: rpcAttributes | undefined\n}\n\nexport type CreateTransportErrorType = ErrorType\n\n/**\n * @description Creates an transport intended to be used with a client.\n */\nexport function createTransport<\n  type extends string,\n  rpcAttributes extends Record<string, any>,\n>(\n  {\n    key,\n    methods,\n    name,\n    request,\n    retryCount = 3,\n    retryDelay = 150,\n    timeout,\n    type,\n  }: TransportConfig<type>,\n  value?: rpcAttributes | undefined,\n): ReturnType<Transport<type, rpcAttributes>> {\n  const uid = uid_()\n  return {\n    config: {\n      key,\n      methods,\n      name,\n      request,\n      retryCount,\n      retryDelay,\n      timeout,\n      type,\n    },\n    request: buildRequest(request, { methods, retryCount, retryDelay, uid }),\n    value,\n  }\n}\n"],"mappings":";;;;;AA6DAA,OAAA,CAAAC,eAAA,GAAAA,eAAA;AAzDA,MAAAC,iBAAA,GAAAC,OAAA;AACA,MAAAC,QAAA,GAAAD,OAAA;AAwDA,SAAgBF,eAAeA,CAI7B;EACEI,GAAG;EACHC,OAAO;EACPC,IAAI;EACJC,OAAO;EACPC,UAAU,GAAG,CAAC;EACdC,UAAU,GAAG,GAAG;EAChBC,OAAO;EACPC;AAAI,CACkB,EACxBC,KAAiC;EAEjC,MAAMC,GAAG,GAAG,IAAAV,QAAA,CAAAU,GAAI,GAAE;EAClB,OAAO;IACLC,MAAM,EAAE;MACNV,GAAG;MACHC,OAAO;MACPC,IAAI;MACJC,OAAO;MACPC,UAAU;MACVC,UAAU;MACVC,OAAO;MACPC;KACD;IACDJ,OAAO,EAAE,IAAAN,iBAAA,CAAAc,YAAY,EAACR,OAAO,EAAE;MAAEF,OAAO;MAAEG,UAAU;MAAEC,UAAU;MAAEI;IAAG,CAAE,CAAC;IACxED;GACD;AACH","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}