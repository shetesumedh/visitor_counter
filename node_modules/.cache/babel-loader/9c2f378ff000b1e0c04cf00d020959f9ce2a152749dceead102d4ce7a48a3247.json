{"ast":null,"code":"import { logPaymentCompleted, logPaymentError, logPaymentStarted } from '../../core/telemetry/events/payment.js';\nimport { executePaymentWithSDK } from './utils/sdkManager.js';\nimport { translatePaymentToSendCalls } from './utils/translatePayment.js';\nimport { validateAddress, validateStringAmount } from './utils/validation.js';\n/**\n * Pay a specified address with USDC on Base network using an ephemeral wallet\n *\n * @param options - Payment options\n * @param options.amount - Amount of USDC to send as a string (e.g., \"10.50\")\n * @param options.to - Ethereum address to send payment to\n * @param options.testnet - Whether to use Base Sepolia testnet (default: false)\n * @param options.payerInfo - Optional payer information configuration for data callbacks\n * @returns Promise<PaymentResult> - Result of the payment transaction\n *\n * @example\n * ```typescript\n * const payment = await pay({\n *   amount: \"10.50\",\n *   to: \"0xFe21034794A5a574B94fE4fDfD16e005F1C96e51\",\n *   testnet: true\n * });\n *\n * if (payment.success) {\n *   console.log(`Payment sent! Transaction ID: ${payment.id}`);\n * } else {\n *   console.error(`Payment failed: ${payment.error}`);\n * }\n * ```\n */\nexport async function pay(options) {\n  var _a;\n  const {\n    amount,\n    to,\n    testnet = false,\n    payerInfo\n  } = options;\n  // Generate correlation ID for this payment request\n  const correlationId = crypto.randomUUID();\n  // Log payment started\n  logPaymentStarted({\n    amount,\n    testnet,\n    correlationId\n  });\n  try {\n    validateStringAmount(amount, 2);\n    validateAddress(to);\n    // Step 2: Translate payment to sendCalls format\n    const requestParams = translatePaymentToSendCalls(to, amount, testnet, payerInfo);\n    // Step 3: Execute payment with SDK\n    const executionResult = await executePaymentWithSDK(requestParams, testnet);\n    // Log payment completed\n    logPaymentCompleted({\n      amount,\n      testnet,\n      correlationId\n    });\n    // Return success result\n    return {\n      success: true,\n      id: executionResult.transactionHash,\n      amount: amount,\n      to: to,\n      payerInfoResponses: executionResult.payerInfoResponses\n    };\n  } catch (error) {\n    // Extract error message\n    let errorMessage = 'Unknown error occurred';\n    if (error instanceof Error) {\n      errorMessage = error.message;\n    } else if (typeof error === 'string') {\n      errorMessage = error;\n    } else if (error && typeof error === 'object') {\n      // Check for various error message properties using optional chaining\n      const err = error;\n      if (typeof (err === null || err === void 0 ? void 0 : err.message) === 'string') {\n        errorMessage = err.message;\n      } else if (typeof ((_a = err === null || err === void 0 ? void 0 : err.error) === null || _a === void 0 ? void 0 : _a.message) === 'string') {\n        errorMessage = err.error.message;\n      } else if (typeof (err === null || err === void 0 ? void 0 : err.reason) === 'string') {\n        errorMessage = err.reason;\n      }\n    }\n    // Log payment error\n    logPaymentError({\n      amount,\n      testnet,\n      correlationId,\n      errorMessage\n    });\n    // Return error result\n    return {\n      success: false,\n      error: errorMessage,\n      amount: amount,\n      to: to\n    };\n  }\n}","map":{"version":3,"names":["logPaymentCompleted","logPaymentError","logPaymentStarted","executePaymentWithSDK","translatePaymentToSendCalls","validateAddress","validateStringAmount","pay","options","amount","to","testnet","payerInfo","correlationId","crypto","randomUUID","requestParams","executionResult","success","id","transactionHash","payerInfoResponses","error","errorMessage","Error","message","err","_a","reason"],"sources":["../../../src/interface/payment/pay.ts"],"sourcesContent":[null],"mappings":"AAAA,SAASA,mBAAmB,EAAEC,eAAe,EAAEC,iBAAiB,QAAQ,wCAAoC;AAG5G,SAASC,qBAAqB,QAAQ,uBAAuB;AAC7D,SAASC,2BAA2B,QAAQ,6BAA6B;AACzE,SAASC,eAAe,EAAEC,oBAAoB,QAAQ,uBAAuB;AAE7E;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,OAAO,eAAeC,GAAGA,CAACC,OAAuB;;EAC/C,MAAM;IAAEC,MAAM;IAAEC,EAAE;IAAEC,OAAO,GAAG,KAAK;IAAEC;EAAS,CAAE,GAAGJ,OAAO;EAE1D;EACA,MAAMK,aAAa,GAAGC,MAAM,CAACC,UAAU,EAAE;EAEzC;EACAb,iBAAiB,CAAC;IAAEO,MAAM;IAAEE,OAAO;IAAEE;EAAa,CAAE,CAAC;EAErD,IAAI;IACFP,oBAAoB,CAACG,MAAM,EAAE,CAAC,CAAC;IAC/BJ,eAAe,CAACK,EAAE,CAAC;IAEnB;IACA,MAAMM,aAAa,GAAGZ,2BAA2B,CAACM,EAAE,EAAED,MAAM,EAAEE,OAAO,EAAEC,SAAS,CAAC;IAEjF;IACA,MAAMK,eAAe,GAAG,MAAMd,qBAAqB,CAACa,aAAa,EAAEL,OAAO,CAAC;IAE3E;IACAX,mBAAmB,CAAC;MAAES,MAAM;MAAEE,OAAO;MAAEE;IAAa,CAAE,CAAC;IAEvD;IACA,OAAO;MACLK,OAAO,EAAE,IAAI;MACbC,EAAE,EAAEF,eAAe,CAACG,eAAe;MACnCX,MAAM,EAAEA,MAAM;MACdC,EAAE,EAAEA,EAAa;MACjBW,kBAAkB,EAAEJ,eAAe,CAACI;KACrC;EACH,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd;IACA,IAAIC,YAAY,GAAG,wBAAwB;IAE3C,IAAID,KAAK,YAAYE,KAAK,EAAE;MAC1BD,YAAY,GAAGD,KAAK,CAACG,OAAO;IAC9B,CAAC,MAAM,IAAI,OAAOH,KAAK,KAAK,QAAQ,EAAE;MACpCC,YAAY,GAAGD,KAAK;IACtB,CAAC,MAAM,IAAIA,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC7C;MACA,MAAMI,GAAG,GAAGJ,KAA+E;MAC3F,IAAI,QAAOI,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAED,OAAO,MAAK,QAAQ,EAAE;QACpCF,YAAY,GAAGG,GAAG,CAACD,OAAO;MAC5B,CAAC,MAAM,IAAI,QAAO,CAAAE,EAAA,GAAAD,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEJ,KAAK,cAAAK,EAAA,uBAAAA,EAAA,CAAEF,OAAO,MAAK,QAAQ,EAAE;QAClDF,YAAY,GAAGG,GAAG,CAACJ,KAAK,CAACG,OAAO;MAClC,CAAC,MAAM,IAAI,QAAOC,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEE,MAAM,MAAK,QAAQ,EAAE;QAC1CL,YAAY,GAAGG,GAAG,CAACE,MAAM;MAC3B;IACF;IAEA;IACA3B,eAAe,CAAC;MAAEQ,MAAM;MAAEE,OAAO;MAAEE,aAAa;MAAEU;IAAY,CAAE,CAAC;IAEjE;IACA,OAAO;MACLL,OAAO,EAAE,KAAK;MACdI,KAAK,EAAEC,YAAY;MACnBd,MAAM,EAAEA,MAAM;MACdC,EAAE,EAAEA;KACL;EACH;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}