{"ast":null,"code":"'use client';\n\n// Almost identical implementation to `useConnectorClient` (except for return type)\n// Should update both in tandem\nimport { useQueryClient } from '@tanstack/react-query';\nimport { getWalletClientQueryOptions } from '@wagmi/core/query';\nimport { useEffect, useRef } from 'react';\nimport { useQuery } from '../utils/query.js';\nimport { useAccount } from './useAccount.js';\nimport { useChainId } from './useChainId.js';\nimport { useConfig } from './useConfig.js';\n/** https://wagmi.sh/react/api/hooks/useWalletClient */\nexport function useWalletClient(parameters = {}) {\n  const {\n    query = {},\n    ...rest\n  } = parameters;\n  const config = useConfig(rest);\n  const queryClient = useQueryClient();\n  const {\n    address,\n    connector,\n    status\n  } = useAccount({\n    config\n  });\n  const chainId = useChainId({\n    config\n  });\n  const activeConnector = parameters.connector ?? connector;\n  const {\n    queryKey,\n    ...options\n  } = getWalletClientQueryOptions(config, {\n    ...parameters,\n    chainId: parameters.chainId ?? chainId,\n    connector: parameters.connector ?? connector\n  });\n  const enabled = Boolean((status === 'connected' || status === 'reconnecting' && activeConnector?.getProvider) && (query.enabled ?? true));\n  const addressRef = useRef(address);\n  // biome-ignore lint/correctness/useExhaustiveDependencies: `queryKey` not required\n  useEffect(() => {\n    const previousAddress = addressRef.current;\n    if (!address && previousAddress) {\n      // remove when account is disconnected\n      queryClient.removeQueries({\n        queryKey\n      });\n      addressRef.current = undefined;\n    } else if (address !== previousAddress) {\n      // invalidate when address changes\n      queryClient.invalidateQueries({\n        queryKey\n      });\n      addressRef.current = address;\n    }\n  }, [address, queryClient]);\n  return useQuery({\n    ...query,\n    ...options,\n    queryKey,\n    enabled,\n    staleTime: Number.POSITIVE_INFINITY\n  });\n}","map":{"version":3,"names":["useQueryClient","getWalletClientQueryOptions","useEffect","useRef","useQuery","useAccount","useChainId","useConfig","useWalletClient","parameters","query","rest","config","queryClient","address","connector","status","chainId","activeConnector","queryKey","options","enabled","Boolean","getProvider","addressRef","previousAddress","current","removeQueries","undefined","invalidateQueries","staleTime","Number","POSITIVE_INFINITY"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/wagmi/src/hooks/useWalletClient.ts"],"sourcesContent":["'use client'\n\n// Almost identical implementation to `useConnectorClient` (except for return type)\n// Should update both in tandem\n\nimport { useQueryClient } from '@tanstack/react-query'\nimport type {\n  Config,\n  GetWalletClientErrorType,\n  ResolvedRegister,\n} from '@wagmi/core'\nimport type { Compute, Omit } from '@wagmi/core/internal'\nimport {\n  type GetWalletClientData,\n  type GetWalletClientOptions,\n  type GetWalletClientQueryFnData,\n  type GetWalletClientQueryKey,\n  getWalletClientQueryOptions,\n} from '@wagmi/core/query'\nimport { useEffect, useRef } from 'react'\n\nimport type { ConfigParameter } from '../types/properties.js'\nimport {\n  type UseQueryParameters,\n  type UseQueryReturnType,\n  useQuery,\n} from '../utils/query.js'\nimport { useAccount } from './useAccount.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseWalletClientParameters<\n  config extends Config = Config,\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n  selectData = GetWalletClientData<config, chainId>,\n> = Compute<\n  GetWalletClientOptions<config, chainId> &\n    ConfigParameter<config> & {\n      query?:\n        | Compute<\n            Omit<\n              UseQueryParameters<\n                GetWalletClientQueryFnData<config, chainId>,\n                GetWalletClientErrorType,\n                selectData,\n                GetWalletClientQueryKey<config, chainId>\n              >,\n              'gcTime' | 'staleTime'\n            >\n          >\n        | undefined\n    }\n>\n\nexport type UseWalletClientReturnType<\n  config extends Config = Config,\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n  selectData = GetWalletClientData<config, chainId>,\n> = UseQueryReturnType<selectData, GetWalletClientErrorType>\n\n/** https://wagmi.sh/react/api/hooks/useWalletClient */\nexport function useWalletClient<\n  config extends Config = ResolvedRegister['config'],\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n  selectData = GetWalletClientData<config, chainId>,\n>(\n  parameters: UseWalletClientParameters<config, chainId, selectData> = {},\n): UseWalletClientReturnType<config, chainId, selectData> {\n  const { query = {}, ...rest } = parameters\n\n  const config = useConfig(rest)\n  const queryClient = useQueryClient()\n  const { address, connector, status } = useAccount({ config })\n  const chainId = useChainId({ config })\n  const activeConnector = parameters.connector ?? connector\n\n  const { queryKey, ...options } = getWalletClientQueryOptions<config, chainId>(\n    config,\n    {\n      ...parameters,\n      chainId: parameters.chainId ?? chainId,\n      connector: parameters.connector ?? connector,\n    },\n  )\n  const enabled = Boolean(\n    (status === 'connected' ||\n      (status === 'reconnecting' && activeConnector?.getProvider)) &&\n      (query.enabled ?? true),\n  )\n\n  const addressRef = useRef(address)\n  // biome-ignore lint/correctness/useExhaustiveDependencies: `queryKey` not required\n  useEffect(() => {\n    const previousAddress = addressRef.current\n    if (!address && previousAddress) {\n      // remove when account is disconnected\n      queryClient.removeQueries({ queryKey })\n      addressRef.current = undefined\n    } else if (address !== previousAddress) {\n      // invalidate when address changes\n      queryClient.invalidateQueries({ queryKey })\n      addressRef.current = address\n    }\n  }, [address, queryClient])\n\n  return useQuery({\n    ...query,\n    ...options,\n    queryKey,\n    enabled,\n    staleTime: Number.POSITIVE_INFINITY,\n  } as any) as UseWalletClientReturnType<config, chainId, selectData>\n}\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AAEA,SAASA,cAAc,QAAQ,uBAAuB;AAOtD,SAKEC,2BAA2B,QACtB,mBAAmB;AAC1B,SAASC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAGzC,SAGEC,QAAQ,QACH,mBAAmB;AAC1B,SAASC,UAAU,QAAQ,iBAAiB;AAC5C,SAASC,UAAU,QAAQ,iBAAiB;AAC5C,SAASC,SAAS,QAAQ,gBAAgB;AAiC1C;AACA,OAAM,SAAUC,eAAeA,CAM7BC,UAAA,GAAqE,EAAE;EAEvE,MAAM;IAAEC,KAAK,GAAG,EAAE;IAAE,GAAGC;EAAI,CAAE,GAAGF,UAAU;EAE1C,MAAMG,MAAM,GAAGL,SAAS,CAACI,IAAI,CAAC;EAC9B,MAAME,WAAW,GAAGb,cAAc,EAAE;EACpC,MAAM;IAAEc,OAAO;IAAEC,SAAS;IAAEC;EAAM,CAAE,GAAGX,UAAU,CAAC;IAAEO;EAAM,CAAE,CAAC;EAC7D,MAAMK,OAAO,GAAGX,UAAU,CAAC;IAAEM;EAAM,CAAE,CAAC;EACtC,MAAMM,eAAe,GAAGT,UAAU,CAACM,SAAS,IAAIA,SAAS;EAEzD,MAAM;IAAEI,QAAQ;IAAE,GAAGC;EAAO,CAAE,GAAGnB,2BAA2B,CAC1DW,MAAM,EACN;IACE,GAAGH,UAAU;IACbQ,OAAO,EAAER,UAAU,CAACQ,OAAO,IAAIA,OAAO;IACtCF,SAAS,EAAEN,UAAU,CAACM,SAAS,IAAIA;GACpC,CACF;EACD,MAAMM,OAAO,GAAGC,OAAO,CACrB,CAACN,MAAM,KAAK,WAAW,IACpBA,MAAM,KAAK,cAAc,IAAIE,eAAe,EAAEK,WAAY,MAC1Db,KAAK,CAACW,OAAO,IAAI,IAAI,CAAC,CAC1B;EAED,MAAMG,UAAU,GAAGrB,MAAM,CAACW,OAAO,CAAC;EAClC;EACAZ,SAAS,CAAC,MAAK;IACb,MAAMuB,eAAe,GAAGD,UAAU,CAACE,OAAO;IAC1C,IAAI,CAACZ,OAAO,IAAIW,eAAe,EAAE;MAC/B;MACAZ,WAAW,CAACc,aAAa,CAAC;QAAER;MAAQ,CAAE,CAAC;MACvCK,UAAU,CAACE,OAAO,GAAGE,SAAS;IAChC,CAAC,MAAM,IAAId,OAAO,KAAKW,eAAe,EAAE;MACtC;MACAZ,WAAW,CAACgB,iBAAiB,CAAC;QAAEV;MAAQ,CAAE,CAAC;MAC3CK,UAAU,CAACE,OAAO,GAAGZ,OAAO;IAC9B;EACF,CAAC,EAAE,CAACA,OAAO,EAAED,WAAW,CAAC,CAAC;EAE1B,OAAOT,QAAQ,CAAC;IACd,GAAGM,KAAK;IACR,GAAGU,OAAO;IACVD,QAAQ;IACRE,OAAO;IACPS,SAAS,EAAEC,MAAM,CAACC;GACZ,CAA2D;AACrE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}