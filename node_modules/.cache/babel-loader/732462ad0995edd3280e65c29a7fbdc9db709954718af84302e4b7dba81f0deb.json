{"ast":null,"code":"import { getBalance } from '../actions/getBalance.js';\nimport { filterQueryOptions } from './utils.js';\nexport function getBalanceQueryOptions(config, options = {}) {\n  return {\n    async queryFn({\n      queryKey\n    }) {\n      const {\n        address,\n        scopeKey: _,\n        ...parameters\n      } = queryKey[1];\n      if (!address) throw new Error('address is required');\n      const balance = await getBalance(config, {\n        ...parameters,\n        address\n      });\n      return balance ?? null;\n    },\n    queryKey: getBalanceQueryKey(options)\n  };\n}\nexport function getBalanceQueryKey(options = {}) {\n  return ['balance', filterQueryOptions(options)];\n}","map":{"version":3,"names":["getBalance","filterQueryOptions","getBalanceQueryOptions","config","options","queryFn","queryKey","address","scopeKey","_","parameters","Error","balance","getBalanceQueryKey"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/@wagmi/core/src/query/getBalance.ts"],"sourcesContent":["import type { QueryOptions } from '@tanstack/query-core'\n\nimport {\n  type GetBalanceErrorType,\n  type GetBalanceParameters,\n  type GetBalanceReturnType,\n  getBalance,\n} from '../actions/getBalance.js'\nimport type { Config } from '../createConfig.js'\nimport type { ScopeKeyParameter } from '../types/properties.js'\nimport type { Compute, PartialBy } from '../types/utils.js'\nimport { filterQueryOptions } from './utils.js'\n\nexport type GetBalanceOptions<config extends Config> = Compute<\n  PartialBy<GetBalanceParameters<config>, 'address'> & ScopeKeyParameter\n>\n\nexport function getBalanceQueryOptions<config extends Config>(\n  config: config,\n  options: GetBalanceOptions<config> = {},\n) {\n  return {\n    async queryFn({ queryKey }) {\n      const { address, scopeKey: _, ...parameters } = queryKey[1]\n      if (!address) throw new Error('address is required')\n      const balance = await getBalance(config, {\n        ...(parameters as GetBalanceParameters),\n        address,\n      })\n      return balance ?? null\n    },\n    queryKey: getBalanceQueryKey(options),\n  } as const satisfies QueryOptions<\n    GetBalanceQueryFnData,\n    GetBalanceErrorType,\n    GetBalanceData,\n    GetBalanceQueryKey<config>\n  >\n}\n\nexport type GetBalanceQueryFnData = Compute<GetBalanceReturnType>\n\nexport type GetBalanceData = GetBalanceQueryFnData\n\nexport function getBalanceQueryKey<config extends Config>(\n  options: GetBalanceOptions<config> = {},\n) {\n  return ['balance', filterQueryOptions(options)] as const\n}\n\nexport type GetBalanceQueryKey<config extends Config> = ReturnType<\n  typeof getBalanceQueryKey<config>\n>\n"],"mappings":"AAEA,SAIEA,UAAU,QACL,0BAA0B;AAIjC,SAASC,kBAAkB,QAAQ,YAAY;AAM/C,OAAM,SAAUC,sBAAsBA,CACpCC,MAAc,EACdC,OAAA,GAAqC,EAAE;EAEvC,OAAO;IACL,MAAMC,OAAOA,CAAC;MAAEC;IAAQ,CAAE;MACxB,MAAM;QAAEC,OAAO;QAAEC,QAAQ,EAAEC,CAAC;QAAE,GAAGC;MAAU,CAAE,GAAGJ,QAAQ,CAAC,CAAC,CAAC;MAC3D,IAAI,CAACC,OAAO,EAAE,MAAM,IAAII,KAAK,CAAC,qBAAqB,CAAC;MACpD,MAAMC,OAAO,GAAG,MAAMZ,UAAU,CAACG,MAAM,EAAE;QACvC,GAAIO,UAAmC;QACvCH;OACD,CAAC;MACF,OAAOK,OAAO,IAAI,IAAI;IACxB,CAAC;IACDN,QAAQ,EAAEO,kBAAkB,CAACT,OAAO;GAMrC;AACH;AAMA,OAAM,SAAUS,kBAAkBA,CAChCT,OAAA,GAAqC,EAAE;EAEvC,OAAO,CAAC,SAAS,EAAEH,kBAAkB,CAACG,OAAO,CAAC,CAAU;AAC1D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}