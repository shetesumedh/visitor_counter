{"ast":null,"code":"import { ChainNotConfiguredError, createConnector } from '@wagmi/core';\nimport { SwitchChainError, UserRejectedRequestError, getAddress, numberToHex } from 'viem';\nexport function baseAccount(parameters = {}) {\n  let walletProvider;\n  let accountsChanged;\n  let chainChanged;\n  let disconnect;\n  return createConnector(config => ({\n    id: 'baseAccount',\n    name: 'Base Account',\n    rdns: 'app.base.account',\n    type: 'baseAccount',\n    async connect({\n      chainId\n    } = {}) {\n      try {\n        const provider = await this.getProvider();\n        const accounts = (await provider.request({\n          method: 'eth_requestAccounts',\n          params: []\n        })).map(x => getAddress(x));\n        if (!accountsChanged) {\n          accountsChanged = this.onAccountsChanged.bind(this);\n          provider.on('accountsChanged', accountsChanged);\n        }\n        if (!chainChanged) {\n          chainChanged = this.onChainChanged.bind(this);\n          provider.on('chainChanged', chainChanged);\n        }\n        if (!disconnect) {\n          disconnect = this.onDisconnect.bind(this);\n          provider.on('disconnect', disconnect);\n        }\n        // Switch to chain if provided\n        let currentChainId = await this.getChainId();\n        if (chainId && currentChainId !== chainId) {\n          const chain = await this.switchChain({\n            chainId\n          }).catch(error => {\n            if (error.code === UserRejectedRequestError.code) throw error;\n            return {\n              id: currentChainId\n            };\n          });\n          currentChainId = chain?.id ?? currentChainId;\n        }\n        return {\n          accounts,\n          chainId: currentChainId\n        };\n      } catch (error) {\n        if (/(user closed modal|accounts received is empty|user denied account|request rejected)/i.test(error.message)) throw new UserRejectedRequestError(error);\n        throw error;\n      }\n    },\n    async disconnect() {\n      const provider = await this.getProvider();\n      if (accountsChanged) {\n        provider.removeListener('accountsChanged', accountsChanged);\n        accountsChanged = undefined;\n      }\n      if (chainChanged) {\n        provider.removeListener('chainChanged', chainChanged);\n        chainChanged = undefined;\n      }\n      if (disconnect) {\n        provider.removeListener('disconnect', disconnect);\n        disconnect = undefined;\n      }\n      provider.disconnect();\n    },\n    async getAccounts() {\n      const provider = await this.getProvider();\n      return (await provider.request({\n        method: 'eth_accounts'\n      })).map(x => getAddress(x));\n    },\n    async getChainId() {\n      const provider = await this.getProvider();\n      const chainId = await provider.request({\n        method: 'eth_chainId'\n      });\n      return Number(chainId);\n    },\n    async getProvider() {\n      if (!walletProvider) {\n        const preference = (() => {\n          if (typeof parameters.preference === 'string') return {\n            options: parameters.preference\n          };\n          return {\n            ...parameters.preference,\n            options: parameters.preference?.options ?? 'all'\n          };\n        })();\n        const {\n          createBaseAccountSDK\n        } = await import('@base-org/account');\n        const sdk = createBaseAccountSDK({\n          ...parameters,\n          appChainIds: config.chains.map(x => x.id),\n          preference\n        });\n        walletProvider = sdk.getProvider();\n      }\n      return walletProvider;\n    },\n    async isAuthorized() {\n      try {\n        const accounts = await this.getAccounts();\n        return !!accounts.length;\n      } catch {\n        return false;\n      }\n    },\n    async switchChain({\n      addEthereumChainParameter,\n      chainId\n    }) {\n      const chain = config.chains.find(chain => chain.id === chainId);\n      if (!chain) throw new SwitchChainError(new ChainNotConfiguredError());\n      const provider = await this.getProvider();\n      try {\n        await provider.request({\n          method: 'wallet_switchEthereumChain',\n          params: [{\n            chainId: numberToHex(chain.id)\n          }]\n        });\n        return chain;\n      } catch (error) {\n        // Indicates chain is not added to provider\n        if (error.code === 4902) {\n          try {\n            let blockExplorerUrls;\n            if (addEthereumChainParameter?.blockExplorerUrls) blockExplorerUrls = addEthereumChainParameter.blockExplorerUrls;else blockExplorerUrls = chain.blockExplorers?.default.url ? [chain.blockExplorers?.default.url] : [];\n            let rpcUrls;\n            if (addEthereumChainParameter?.rpcUrls?.length) rpcUrls = addEthereumChainParameter.rpcUrls;else rpcUrls = [chain.rpcUrls.default?.http[0] ?? ''];\n            const addEthereumChain = {\n              blockExplorerUrls,\n              chainId: numberToHex(chainId),\n              chainName: addEthereumChainParameter?.chainName ?? chain.name,\n              iconUrls: addEthereumChainParameter?.iconUrls,\n              nativeCurrency: addEthereumChainParameter?.nativeCurrency ?? chain.nativeCurrency,\n              rpcUrls\n            };\n            await provider.request({\n              method: 'wallet_addEthereumChain',\n              params: [addEthereumChain]\n            });\n            return chain;\n          } catch (error) {\n            throw new UserRejectedRequestError(error);\n          }\n        }\n        throw new SwitchChainError(error);\n      }\n    },\n    onAccountsChanged(accounts) {\n      if (accounts.length === 0) this.onDisconnect();else config.emitter.emit('change', {\n        accounts: accounts.map(x => getAddress(x))\n      });\n    },\n    onChainChanged(chain) {\n      const chainId = Number(chain);\n      config.emitter.emit('change', {\n        chainId\n      });\n    },\n    async onDisconnect(_error) {\n      config.emitter.emit('disconnect');\n      const provider = await this.getProvider();\n      if (accountsChanged) {\n        provider.removeListener('accountsChanged', accountsChanged);\n        accountsChanged = undefined;\n      }\n      if (chainChanged) {\n        provider.removeListener('chainChanged', chainChanged);\n        chainChanged = undefined;\n      }\n      if (disconnect) {\n        provider.removeListener('disconnect', disconnect);\n        disconnect = undefined;\n      }\n    }\n  }));\n}","map":{"version":3,"names":["ChainNotConfiguredError","createConnector","SwitchChainError","UserRejectedRequestError","getAddress","numberToHex","baseAccount","parameters","walletProvider","accountsChanged","chainChanged","disconnect","config","id","name","rdns","type","connect","chainId","provider","getProvider","accounts","request","method","params","map","x","onAccountsChanged","bind","on","onChainChanged","onDisconnect","currentChainId","getChainId","chain","switchChain","catch","error","code","test","message","removeListener","undefined","getAccounts","Number","preference","options","createBaseAccountSDK","sdk","appChainIds","chains","isAuthorized","length","addEthereumChainParameter","find","blockExplorerUrls","blockExplorers","default","url","rpcUrls","http","addEthereumChain","chainName","iconUrls","nativeCurrency","emitter","emit","_error"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/@wagmi/connectors/src/baseAccount.ts"],"sourcesContent":["import type { ProviderInterface, createBaseAccountSDK } from '@base-org/account'\nimport {\n  ChainNotConfiguredError,\n  type Connector,\n  createConnector,\n} from '@wagmi/core'\nimport type { Mutable, Omit } from '@wagmi/core/internal'\nimport {\n  type AddEthereumChainParameter,\n  type Address,\n  type Hex,\n  type ProviderRpcError,\n  SwitchChainError,\n  UserRejectedRequestError,\n  getAddress,\n  numberToHex,\n} from 'viem'\n\nexport type BaseAccountParameters = Mutable<\n  Omit<\n    Parameters<typeof createBaseAccountSDK>[0],\n    'appChainIds' // set via wagmi config\n  >\n>\n\nexport function baseAccount(parameters: BaseAccountParameters = {}) {\n  type Provider = ProviderInterface\n  type Properties = {\n    connect(parameters?: {\n      chainId?: number | undefined\n      isReconnecting?: boolean | undefined\n    }): Promise<{\n      accounts: readonly Address[]\n      chainId: number\n    }>\n  }\n\n  let walletProvider: Provider | undefined\n\n  let accountsChanged: Connector['onAccountsChanged'] | undefined\n  let chainChanged: Connector['onChainChanged'] | undefined\n  let disconnect: Connector['onDisconnect'] | undefined\n\n  return createConnector<Provider, Properties>((config) => ({\n    id: 'baseAccount',\n    name: 'Base Account',\n    rdns: 'app.base.account',\n    type: 'baseAccount',\n    async connect({ chainId } = {}) {\n      try {\n        const provider = await this.getProvider()\n        const accounts = (\n          (await provider.request({\n            method: 'eth_requestAccounts',\n            params: [],\n          })) as string[]\n        ).map((x) => getAddress(x))\n\n        if (!accountsChanged) {\n          accountsChanged = this.onAccountsChanged.bind(this)\n          provider.on('accountsChanged', accountsChanged)\n        }\n        if (!chainChanged) {\n          chainChanged = this.onChainChanged.bind(this)\n          provider.on('chainChanged', chainChanged)\n        }\n        if (!disconnect) {\n          disconnect = this.onDisconnect.bind(this)\n          provider.on('disconnect', disconnect)\n        }\n\n        // Switch to chain if provided\n        let currentChainId = await this.getChainId()\n        if (chainId && currentChainId !== chainId) {\n          const chain = await this.switchChain!({ chainId }).catch((error) => {\n            if (error.code === UserRejectedRequestError.code) throw error\n            return { id: currentChainId }\n          })\n          currentChainId = chain?.id ?? currentChainId\n        }\n\n        return { accounts, chainId: currentChainId }\n      } catch (error) {\n        if (\n          /(user closed modal|accounts received is empty|user denied account|request rejected)/i.test(\n            (error as Error).message,\n          )\n        )\n          throw new UserRejectedRequestError(error as Error)\n        throw error\n      }\n    },\n    async disconnect() {\n      const provider = await this.getProvider()\n\n      if (accountsChanged) {\n        provider.removeListener('accountsChanged', accountsChanged)\n        accountsChanged = undefined\n      }\n      if (chainChanged) {\n        provider.removeListener('chainChanged', chainChanged)\n        chainChanged = undefined\n      }\n      if (disconnect) {\n        provider.removeListener('disconnect', disconnect)\n        disconnect = undefined\n      }\n\n      provider.disconnect()\n    },\n    async getAccounts() {\n      const provider = await this.getProvider()\n      return (\n        (await provider.request({\n          method: 'eth_accounts',\n        })) as string[]\n      ).map((x) => getAddress(x))\n    },\n    async getChainId() {\n      const provider = await this.getProvider()\n      const chainId = (await provider.request({\n        method: 'eth_chainId',\n      })) as Hex\n      return Number(chainId)\n    },\n    async getProvider() {\n      if (!walletProvider) {\n        const preference = (() => {\n          if (typeof parameters.preference === 'string')\n            return { options: parameters.preference }\n          return {\n            ...parameters.preference,\n            options: parameters.preference?.options ?? 'all',\n          }\n        })()\n\n        const { createBaseAccountSDK } = await import('@base-org/account')\n        const sdk = createBaseAccountSDK({\n          ...parameters,\n          appChainIds: config.chains.map((x) => x.id),\n          preference,\n        })\n\n        walletProvider = sdk.getProvider()\n      }\n\n      return walletProvider\n    },\n    async isAuthorized() {\n      try {\n        const accounts = await this.getAccounts()\n        return !!accounts.length\n      } catch {\n        return false\n      }\n    },\n    async switchChain({ addEthereumChainParameter, chainId }) {\n      const chain = config.chains.find((chain) => chain.id === chainId)\n      if (!chain) throw new SwitchChainError(new ChainNotConfiguredError())\n\n      const provider = await this.getProvider()\n\n      try {\n        await provider.request({\n          method: 'wallet_switchEthereumChain',\n          params: [{ chainId: numberToHex(chain.id) }],\n        })\n        return chain\n      } catch (error) {\n        // Indicates chain is not added to provider\n        if ((error as ProviderRpcError).code === 4902) {\n          try {\n            let blockExplorerUrls: string[] | undefined\n            if (addEthereumChainParameter?.blockExplorerUrls)\n              blockExplorerUrls = addEthereumChainParameter.blockExplorerUrls\n            else\n              blockExplorerUrls = chain.blockExplorers?.default.url\n                ? [chain.blockExplorers?.default.url]\n                : []\n\n            let rpcUrls: readonly string[]\n            if (addEthereumChainParameter?.rpcUrls?.length)\n              rpcUrls = addEthereumChainParameter.rpcUrls\n            else rpcUrls = [chain.rpcUrls.default?.http[0] ?? '']\n\n            const addEthereumChain = {\n              blockExplorerUrls,\n              chainId: numberToHex(chainId),\n              chainName: addEthereumChainParameter?.chainName ?? chain.name,\n              iconUrls: addEthereumChainParameter?.iconUrls,\n              nativeCurrency:\n                addEthereumChainParameter?.nativeCurrency ??\n                chain.nativeCurrency,\n              rpcUrls,\n            } satisfies AddEthereumChainParameter\n\n            await provider.request({\n              method: 'wallet_addEthereumChain',\n              params: [addEthereumChain],\n            })\n\n            return chain\n          } catch (error) {\n            throw new UserRejectedRequestError(error as Error)\n          }\n        }\n\n        throw new SwitchChainError(error as Error)\n      }\n    },\n    onAccountsChanged(accounts) {\n      if (accounts.length === 0) this.onDisconnect()\n      else\n        config.emitter.emit('change', {\n          accounts: accounts.map((x) => getAddress(x)),\n        })\n    },\n    onChainChanged(chain) {\n      const chainId = Number(chain)\n      config.emitter.emit('change', { chainId })\n    },\n    async onDisconnect(_error) {\n      config.emitter.emit('disconnect')\n\n      const provider = await this.getProvider()\n      if (accountsChanged) {\n        provider.removeListener('accountsChanged', accountsChanged)\n        accountsChanged = undefined\n      }\n      if (chainChanged) {\n        provider.removeListener('chainChanged', chainChanged)\n        chainChanged = undefined\n      }\n      if (disconnect) {\n        provider.removeListener('disconnect', disconnect)\n        disconnect = undefined\n      }\n    },\n  }))\n}\n"],"mappings":"AACA,SACEA,uBAAuB,EAEvBC,eAAe,QACV,aAAa;AAEpB,SAKEC,gBAAgB,EAChBC,wBAAwB,EACxBC,UAAU,EACVC,WAAW,QACN,MAAM;AASb,OAAM,SAAUC,WAAWA,CAACC,UAAA,GAAoC,EAAE;EAYhE,IAAIC,cAAoC;EAExC,IAAIC,eAA2D;EAC/D,IAAIC,YAAqD;EACzD,IAAIC,UAAiD;EAErD,OAAOV,eAAe,CAAwBW,MAAM,KAAM;IACxDC,EAAE,EAAE,aAAa;IACjBC,IAAI,EAAE,cAAc;IACpBC,IAAI,EAAE,kBAAkB;IACxBC,IAAI,EAAE,aAAa;IACnB,MAAMC,OAAOA,CAAC;MAAEC;IAAO,CAAE,GAAG,EAAE;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAACC,WAAW,EAAE;QACzC,MAAMC,QAAQ,GACZ,CAAC,MAAMF,QAAQ,CAACG,OAAO,CAAC;UACtBC,MAAM,EAAE,qBAAqB;UAC7BC,MAAM,EAAE;SACT,CAAC,EACFC,GAAG,CAAEC,CAAC,IAAKtB,UAAU,CAACsB,CAAC,CAAC,CAAC;QAE3B,IAAI,CAACjB,eAAe,EAAE;UACpBA,eAAe,GAAG,IAAI,CAACkB,iBAAiB,CAACC,IAAI,CAAC,IAAI,CAAC;UACnDT,QAAQ,CAACU,EAAE,CAAC,iBAAiB,EAAEpB,eAAe,CAAC;QACjD;QACA,IAAI,CAACC,YAAY,EAAE;UACjBA,YAAY,GAAG,IAAI,CAACoB,cAAc,CAACF,IAAI,CAAC,IAAI,CAAC;UAC7CT,QAAQ,CAACU,EAAE,CAAC,cAAc,EAAEnB,YAAY,CAAC;QAC3C;QACA,IAAI,CAACC,UAAU,EAAE;UACfA,UAAU,GAAG,IAAI,CAACoB,YAAY,CAACH,IAAI,CAAC,IAAI,CAAC;UACzCT,QAAQ,CAACU,EAAE,CAAC,YAAY,EAAElB,UAAU,CAAC;QACvC;QAEA;QACA,IAAIqB,cAAc,GAAG,MAAM,IAAI,CAACC,UAAU,EAAE;QAC5C,IAAIf,OAAO,IAAIc,cAAc,KAAKd,OAAO,EAAE;UACzC,MAAMgB,KAAK,GAAG,MAAM,IAAI,CAACC,WAAY,CAAC;YAAEjB;UAAO,CAAE,CAAC,CAACkB,KAAK,CAAEC,KAAK,IAAI;YACjE,IAAIA,KAAK,CAACC,IAAI,KAAKnC,wBAAwB,CAACmC,IAAI,EAAE,MAAMD,KAAK;YAC7D,OAAO;cAAExB,EAAE,EAAEmB;YAAc,CAAE;UAC/B,CAAC,CAAC;UACFA,cAAc,GAAGE,KAAK,EAAErB,EAAE,IAAImB,cAAc;QAC9C;QAEA,OAAO;UAAEX,QAAQ;UAAEH,OAAO,EAAEc;QAAc,CAAE;MAC9C,CAAC,CAAC,OAAOK,KAAK,EAAE;QACd,IACE,sFAAsF,CAACE,IAAI,CACxFF,KAAe,CAACG,OAAO,CACzB,EAED,MAAM,IAAIrC,wBAAwB,CAACkC,KAAc,CAAC;QACpD,MAAMA,KAAK;MACb;IACF,CAAC;IACD,MAAM1B,UAAUA,CAAA;MACd,MAAMQ,QAAQ,GAAG,MAAM,IAAI,CAACC,WAAW,EAAE;MAEzC,IAAIX,eAAe,EAAE;QACnBU,QAAQ,CAACsB,cAAc,CAAC,iBAAiB,EAAEhC,eAAe,CAAC;QAC3DA,eAAe,GAAGiC,SAAS;MAC7B;MACA,IAAIhC,YAAY,EAAE;QAChBS,QAAQ,CAACsB,cAAc,CAAC,cAAc,EAAE/B,YAAY,CAAC;QACrDA,YAAY,GAAGgC,SAAS;MAC1B;MACA,IAAI/B,UAAU,EAAE;QACdQ,QAAQ,CAACsB,cAAc,CAAC,YAAY,EAAE9B,UAAU,CAAC;QACjDA,UAAU,GAAG+B,SAAS;MACxB;MAEAvB,QAAQ,CAACR,UAAU,EAAE;IACvB,CAAC;IACD,MAAMgC,WAAWA,CAAA;MACf,MAAMxB,QAAQ,GAAG,MAAM,IAAI,CAACC,WAAW,EAAE;MACzC,OACE,CAAC,MAAMD,QAAQ,CAACG,OAAO,CAAC;QACtBC,MAAM,EAAE;OACT,CAAC,EACFE,GAAG,CAAEC,CAAC,IAAKtB,UAAU,CAACsB,CAAC,CAAC,CAAC;IAC7B,CAAC;IACD,MAAMO,UAAUA,CAAA;MACd,MAAMd,QAAQ,GAAG,MAAM,IAAI,CAACC,WAAW,EAAE;MACzC,MAAMF,OAAO,GAAI,MAAMC,QAAQ,CAACG,OAAO,CAAC;QACtCC,MAAM,EAAE;OACT,CAAS;MACV,OAAOqB,MAAM,CAAC1B,OAAO,CAAC;IACxB,CAAC;IACD,MAAME,WAAWA,CAAA;MACf,IAAI,CAACZ,cAAc,EAAE;QACnB,MAAMqC,UAAU,GAAG,CAAC,MAAK;UACvB,IAAI,OAAOtC,UAAU,CAACsC,UAAU,KAAK,QAAQ,EAC3C,OAAO;YAAEC,OAAO,EAAEvC,UAAU,CAACsC;UAAU,CAAE;UAC3C,OAAO;YACL,GAAGtC,UAAU,CAACsC,UAAU;YACxBC,OAAO,EAAEvC,UAAU,CAACsC,UAAU,EAAEC,OAAO,IAAI;WAC5C;QACH,CAAC,EAAC,CAAE;QAEJ,MAAM;UAAEC;QAAoB,CAAE,GAAG,MAAM,MAAM,CAAC,mBAAmB,CAAC;QAClE,MAAMC,GAAG,GAAGD,oBAAoB,CAAC;UAC/B,GAAGxC,UAAU;UACb0C,WAAW,EAAErC,MAAM,CAACsC,MAAM,CAACzB,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACb,EAAE,CAAC;UAC3CgC;SACD,CAAC;QAEFrC,cAAc,GAAGwC,GAAG,CAAC5B,WAAW,EAAE;MACpC;MAEA,OAAOZ,cAAc;IACvB,CAAC;IACD,MAAM2C,YAAYA,CAAA;MAChB,IAAI;QACF,MAAM9B,QAAQ,GAAG,MAAM,IAAI,CAACsB,WAAW,EAAE;QACzC,OAAO,CAAC,CAACtB,QAAQ,CAAC+B,MAAM;MAC1B,CAAC,CAAC,MAAM;QACN,OAAO,KAAK;MACd;IACF,CAAC;IACD,MAAMjB,WAAWA,CAAC;MAAEkB,yBAAyB;MAAEnC;IAAO,CAAE;MACtD,MAAMgB,KAAK,GAAGtB,MAAM,CAACsC,MAAM,CAACI,IAAI,CAAEpB,KAAK,IAAKA,KAAK,CAACrB,EAAE,KAAKK,OAAO,CAAC;MACjE,IAAI,CAACgB,KAAK,EAAE,MAAM,IAAIhC,gBAAgB,CAAC,IAAIF,uBAAuB,EAAE,CAAC;MAErE,MAAMmB,QAAQ,GAAG,MAAM,IAAI,CAACC,WAAW,EAAE;MAEzC,IAAI;QACF,MAAMD,QAAQ,CAACG,OAAO,CAAC;UACrBC,MAAM,EAAE,4BAA4B;UACpCC,MAAM,EAAE,CAAC;YAAEN,OAAO,EAAEb,WAAW,CAAC6B,KAAK,CAACrB,EAAE;UAAC,CAAE;SAC5C,CAAC;QACF,OAAOqB,KAAK;MACd,CAAC,CAAC,OAAOG,KAAK,EAAE;QACd;QACA,IAAKA,KAA0B,CAACC,IAAI,KAAK,IAAI,EAAE;UAC7C,IAAI;YACF,IAAIiB,iBAAuC;YAC3C,IAAIF,yBAAyB,EAAEE,iBAAiB,EAC9CA,iBAAiB,GAAGF,yBAAyB,CAACE,iBAAiB,MAE/DA,iBAAiB,GAAGrB,KAAK,CAACsB,cAAc,EAAEC,OAAO,CAACC,GAAG,GACjD,CAACxB,KAAK,CAACsB,cAAc,EAAEC,OAAO,CAACC,GAAG,CAAC,GACnC,EAAE;YAER,IAAIC,OAA0B;YAC9B,IAAIN,yBAAyB,EAAEM,OAAO,EAAEP,MAAM,EAC5CO,OAAO,GAAGN,yBAAyB,CAACM,OAAO,MACxCA,OAAO,GAAG,CAACzB,KAAK,CAACyB,OAAO,CAACF,OAAO,EAAEG,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;YAErD,MAAMC,gBAAgB,GAAG;cACvBN,iBAAiB;cACjBrC,OAAO,EAAEb,WAAW,CAACa,OAAO,CAAC;cAC7B4C,SAAS,EAAET,yBAAyB,EAAES,SAAS,IAAI5B,KAAK,CAACpB,IAAI;cAC7DiD,QAAQ,EAAEV,yBAAyB,EAAEU,QAAQ;cAC7CC,cAAc,EACZX,yBAAyB,EAAEW,cAAc,IACzC9B,KAAK,CAAC8B,cAAc;cACtBL;aACmC;YAErC,MAAMxC,QAAQ,CAACG,OAAO,CAAC;cACrBC,MAAM,EAAE,yBAAyB;cACjCC,MAAM,EAAE,CAACqC,gBAAgB;aAC1B,CAAC;YAEF,OAAO3B,KAAK;UACd,CAAC,CAAC,OAAOG,KAAK,EAAE;YACd,MAAM,IAAIlC,wBAAwB,CAACkC,KAAc,CAAC;UACpD;QACF;QAEA,MAAM,IAAInC,gBAAgB,CAACmC,KAAc,CAAC;MAC5C;IACF,CAAC;IACDV,iBAAiBA,CAACN,QAAQ;MACxB,IAAIA,QAAQ,CAAC+B,MAAM,KAAK,CAAC,EAAE,IAAI,CAACrB,YAAY,EAAE,MAE5CnB,MAAM,CAACqD,OAAO,CAACC,IAAI,CAAC,QAAQ,EAAE;QAC5B7C,QAAQ,EAAEA,QAAQ,CAACI,GAAG,CAAEC,CAAC,IAAKtB,UAAU,CAACsB,CAAC,CAAC;OAC5C,CAAC;IACN,CAAC;IACDI,cAAcA,CAACI,KAAK;MAClB,MAAMhB,OAAO,GAAG0B,MAAM,CAACV,KAAK,CAAC;MAC7BtB,MAAM,CAACqD,OAAO,CAACC,IAAI,CAAC,QAAQ,EAAE;QAAEhD;MAAO,CAAE,CAAC;IAC5C,CAAC;IACD,MAAMa,YAAYA,CAACoC,MAAM;MACvBvD,MAAM,CAACqD,OAAO,CAACC,IAAI,CAAC,YAAY,CAAC;MAEjC,MAAM/C,QAAQ,GAAG,MAAM,IAAI,CAACC,WAAW,EAAE;MACzC,IAAIX,eAAe,EAAE;QACnBU,QAAQ,CAACsB,cAAc,CAAC,iBAAiB,EAAEhC,eAAe,CAAC;QAC3DA,eAAe,GAAGiC,SAAS;MAC7B;MACA,IAAIhC,YAAY,EAAE;QAChBS,QAAQ,CAACsB,cAAc,CAAC,cAAc,EAAE/B,YAAY,CAAC;QACrDA,YAAY,GAAGgC,SAAS;MAC1B;MACA,IAAI/B,UAAU,EAAE;QACdQ,QAAQ,CAACsB,cAAc,CAAC,YAAY,EAAE9B,UAAU,CAAC;QACjDA,UAAU,GAAG+B,SAAS;MACxB;IACF;GACD,CAAC,CAAC;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}