{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.localBatchGatewayUrl = void 0;\nexports.localBatchGatewayRequest = localBatchGatewayRequest;\nconst abis_js_1 = require(\"../../constants/abis.js\");\nconst solidity_js_1 = require(\"../../constants/solidity.js\");\nconst decodeFunctionData_js_1 = require(\"../abi/decodeFunctionData.js\");\nconst encodeErrorResult_js_1 = require(\"../abi/encodeErrorResult.js\");\nconst encodeFunctionResult_js_1 = require(\"../abi/encodeFunctionResult.js\");\nexports.localBatchGatewayUrl = 'x-batch-gateway:true';\nasync function localBatchGatewayRequest(parameters) {\n  const {\n    data,\n    ccipRequest\n  } = parameters;\n  const {\n    args: [queries]\n  } = (0, decodeFunctionData_js_1.decodeFunctionData)({\n    abi: abis_js_1.batchGatewayAbi,\n    data\n  });\n  const failures = [];\n  const responses = [];\n  await Promise.all(queries.map(async (query, i) => {\n    try {\n      responses[i] = query.urls.includes(exports.localBatchGatewayUrl) ? await localBatchGatewayRequest({\n        data: query.data,\n        ccipRequest\n      }) : await ccipRequest(query);\n      failures[i] = false;\n    } catch (err) {\n      failures[i] = true;\n      responses[i] = encodeError(err);\n    }\n  }));\n  return (0, encodeFunctionResult_js_1.encodeFunctionResult)({\n    abi: abis_js_1.batchGatewayAbi,\n    functionName: 'query',\n    result: [failures, responses]\n  });\n}\nfunction encodeError(error) {\n  if (error.name === 'HttpRequestError' && error.status) return (0, encodeErrorResult_js_1.encodeErrorResult)({\n    abi: abis_js_1.batchGatewayAbi,\n    errorName: 'HttpError',\n    args: [error.status, error.shortMessage]\n  });\n  return (0, encodeErrorResult_js_1.encodeErrorResult)({\n    abi: [solidity_js_1.solidityError],\n    errorName: 'Error',\n    args: ['shortMessage' in error ? error.shortMessage : error.message]\n  });\n}","map":{"version":3,"names":["exports","localBatchGatewayRequest","abis_js_1","require","solidity_js_1","decodeFunctionData_js_1","encodeErrorResult_js_1","encodeFunctionResult_js_1","localBatchGatewayUrl","parameters","data","ccipRequest","args","queries","decodeFunctionData","abi","batchGatewayAbi","failures","responses","Promise","all","map","query","i","urls","includes","err","encodeError","encodeFunctionResult","functionName","result","error","name","status","encodeErrorResult","errorName","shortMessage","solidityError","message"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/viem/utils/ens/localBatchGatewayRequest.ts"],"sourcesContent":["import { batchGatewayAbi } from '../../constants/abis.js'\nimport { solidityError } from '../../constants/solidity.js'\nimport type { Hex } from '../../types/misc.js'\nimport { decodeFunctionData } from '../abi/decodeFunctionData.js'\nimport { encodeErrorResult } from '../abi/encodeErrorResult.js'\nimport { encodeFunctionResult } from '../abi/encodeFunctionResult.js'\nimport type {\n  CcipRequestErrorType,\n  CcipRequestParameters,\n  CcipRequestReturnType,\n} from '../ccip.js'\n\nexport const localBatchGatewayUrl = 'x-batch-gateway:true'\n\nexport async function localBatchGatewayRequest(parameters: {\n  data: Hex\n  ccipRequest: (\n    parameters: CcipRequestParameters,\n  ) => Promise<CcipRequestReturnType>\n}): Promise<Hex> {\n  const { data, ccipRequest } = parameters\n\n  const {\n    args: [queries],\n  } = decodeFunctionData({ abi: batchGatewayAbi, data })\n\n  const failures: boolean[] = []\n  const responses: Hex[] = []\n  await Promise.all(\n    queries.map(async (query, i) => {\n      try {\n        responses[i] = query.urls.includes(localBatchGatewayUrl)\n          ? await localBatchGatewayRequest({ data: query.data, ccipRequest })\n          : await ccipRequest(query)\n        failures[i] = false\n      } catch (err) {\n        failures[i] = true\n        responses[i] = encodeError(err as CcipRequestErrorType)\n      }\n    }),\n  )\n\n  return encodeFunctionResult({\n    abi: batchGatewayAbi,\n    functionName: 'query',\n    result: [failures, responses],\n  })\n}\n\nfunction encodeError(error: CcipRequestErrorType): Hex {\n  if (error.name === 'HttpRequestError' && error.status)\n    return encodeErrorResult({\n      abi: batchGatewayAbi,\n      errorName: 'HttpError',\n      args: [error.status, error.shortMessage],\n    })\n  return encodeErrorResult({\n    abi: [solidityError],\n    errorName: 'Error',\n    args: ['shortMessage' in error ? error.shortMessage : error.message],\n  })\n}\n"],"mappings":";;;;;;AAcAA,OAAA,CAAAC,wBAAA,GAAAA,wBAAA;AAdA,MAAAC,SAAA,GAAAC,OAAA;AACA,MAAAC,aAAA,GAAAD,OAAA;AAEA,MAAAE,uBAAA,GAAAF,OAAA;AACA,MAAAG,sBAAA,GAAAH,OAAA;AACA,MAAAI,yBAAA,GAAAJ,OAAA;AAOaH,OAAA,CAAAQ,oBAAoB,GAAG,sBAAsB;AAEnD,eAAeP,wBAAwBA,CAACQ,UAK9C;EACC,MAAM;IAAEC,IAAI;IAAEC;EAAW,CAAE,GAAGF,UAAU;EAExC,MAAM;IACJG,IAAI,EAAE,CAACC,OAAO;EAAC,CAChB,GAAG,IAAAR,uBAAA,CAAAS,kBAAkB,EAAC;IAAEC,GAAG,EAAEb,SAAA,CAAAc,eAAe;IAAEN;EAAI,CAAE,CAAC;EAEtD,MAAMO,QAAQ,GAAc,EAAE;EAC9B,MAAMC,SAAS,GAAU,EAAE;EAC3B,MAAMC,OAAO,CAACC,GAAG,CACfP,OAAO,CAACQ,GAAG,CAAC,OAAOC,KAAK,EAAEC,CAAC,KAAI;IAC7B,IAAI;MACFL,SAAS,CAACK,CAAC,CAAC,GAAGD,KAAK,CAACE,IAAI,CAACC,QAAQ,CAACzB,OAAA,CAAAQ,oBAAoB,CAAC,GACpD,MAAMP,wBAAwB,CAAC;QAAES,IAAI,EAAEY,KAAK,CAACZ,IAAI;QAAEC;MAAW,CAAE,CAAC,GACjE,MAAMA,WAAW,CAACW,KAAK,CAAC;MAC5BL,QAAQ,CAACM,CAAC,CAAC,GAAG,KAAK;IACrB,CAAC,CAAC,OAAOG,GAAG,EAAE;MACZT,QAAQ,CAACM,CAAC,CAAC,GAAG,IAAI;MAClBL,SAAS,CAACK,CAAC,CAAC,GAAGI,WAAW,CAACD,GAA2B,CAAC;IACzD;EACF,CAAC,CAAC,CACH;EAED,OAAO,IAAAnB,yBAAA,CAAAqB,oBAAoB,EAAC;IAC1Bb,GAAG,EAAEb,SAAA,CAAAc,eAAe;IACpBa,YAAY,EAAE,OAAO;IACrBC,MAAM,EAAE,CAACb,QAAQ,EAAEC,SAAS;GAC7B,CAAC;AACJ;AAEA,SAASS,WAAWA,CAACI,KAA2B;EAC9C,IAAIA,KAAK,CAACC,IAAI,KAAK,kBAAkB,IAAID,KAAK,CAACE,MAAM,EACnD,OAAO,IAAA3B,sBAAA,CAAA4B,iBAAiB,EAAC;IACvBnB,GAAG,EAAEb,SAAA,CAAAc,eAAe;IACpBmB,SAAS,EAAE,WAAW;IACtBvB,IAAI,EAAE,CAACmB,KAAK,CAACE,MAAM,EAAEF,KAAK,CAACK,YAAY;GACxC,CAAC;EACJ,OAAO,IAAA9B,sBAAA,CAAA4B,iBAAiB,EAAC;IACvBnB,GAAG,EAAE,CAACX,aAAA,CAAAiC,aAAa,CAAC;IACpBF,SAAS,EAAE,OAAO;IAClBvB,IAAI,EAAE,CAAC,cAAc,IAAImB,KAAK,GAAGA,KAAK,CAACK,YAAY,GAAGL,KAAK,CAACO,OAAO;GACpE,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}