{"ast":null,"code":"import { estimateGas as viem_estimateGas } from 'viem/actions';\nimport { getAction } from '../utils/getAction.js';\nimport { getConnectorClient } from './getConnectorClient.js';\n/** https://wagmi.sh/core/api/actions/estimateGas */\nexport async function estimateGas(config, parameters) {\n  const {\n    chainId,\n    connector,\n    ...rest\n  } = parameters;\n  let account;\n  if (parameters.account) account = parameters.account;else {\n    const connectorClient = await getConnectorClient(config, {\n      account: parameters.account,\n      chainId,\n      connector\n    });\n    account = connectorClient.account;\n  }\n  const client = config.getClient({\n    chainId\n  });\n  const action = getAction(client, viem_estimateGas, 'estimateGas');\n  return action({\n    ...rest,\n    account\n  });\n}","map":{"version":3,"names":["estimateGas","viem_estimateGas","getAction","getConnectorClient","config","parameters","chainId","connector","rest","account","connectorClient","client","getClient","action"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/@wagmi/core/src/actions/estimateGas.ts"],"sourcesContent":["import type { Account, Address, Chain } from 'viem'\nimport {\n  type EstimateGasErrorType as viem_EstimateGasErrorType,\n  type EstimateGasParameters as viem_EstimateGasParameters,\n  type EstimateGasReturnType as viem_EstimateGasReturnType,\n  estimateGas as viem_estimateGas,\n} from 'viem/actions'\n\nimport type { Config } from '../createConfig.js'\nimport type { BaseErrorType, ErrorType } from '../errors/base.js'\nimport type { SelectChains } from '../types/chain.js'\nimport type {\n  ChainIdParameter,\n  ConnectorParameter,\n} from '../types/properties.js'\nimport type { UnionCompute, UnionLooseOmit } from '../types/utils.js'\nimport { getAction } from '../utils/getAction.js'\nimport {\n  type GetConnectorClientErrorType,\n  getConnectorClient,\n} from './getConnectorClient.js'\n\nexport type EstimateGasParameters<\n  config extends Config = Config,\n  chainId extends\n    | config['chains'][number]['id']\n    | undefined = config['chains'][number]['id'],\n  ///\n  chains extends readonly Chain[] = SelectChains<config, chainId>,\n> = {\n  [key in keyof chains]: UnionCompute<\n    UnionLooseOmit<viem_EstimateGasParameters<chains[key]>, 'chain'> &\n      ChainIdParameter<config, chainId> &\n      ConnectorParameter\n  >\n}[number]\n\nexport type EstimateGasReturnType = viem_EstimateGasReturnType\n\nexport type EstimateGasErrorType =\n  // getConnectorClient()\n  | GetConnectorClientErrorType\n  // base\n  | BaseErrorType\n  | ErrorType\n  // viem\n  | viem_EstimateGasErrorType\n\n/** https://wagmi.sh/core/api/actions/estimateGas */\nexport async function estimateGas<\n  config extends Config,\n  chainId extends config['chains'][number]['id'] | undefined = undefined,\n>(\n  config: config,\n  parameters: EstimateGasParameters<config, chainId>,\n): Promise<EstimateGasReturnType> {\n  const { chainId, connector, ...rest } = parameters\n\n  let account: Address | Account\n  if (parameters.account) account = parameters.account\n  else {\n    const connectorClient = await getConnectorClient(config, {\n      account: parameters.account,\n      chainId,\n      connector,\n    })\n    account = connectorClient.account\n  }\n\n  const client = config.getClient({ chainId })\n  const action = getAction(client, viem_estimateGas, 'estimateGas')\n  return action({ ...(rest as viem_EstimateGasParameters), account })\n}\n"],"mappings":"AACA,SAIEA,WAAW,IAAIC,gBAAgB,QAC1B,cAAc;AAUrB,SAASC,SAAS,QAAQ,uBAAuB;AACjD,SAEEC,kBAAkB,QACb,yBAAyB;AA4BhC;AACA,OAAO,eAAeH,WAAWA,CAI/BI,MAAc,EACdC,UAAkD;EAElD,MAAM;IAAEC,OAAO;IAAEC,SAAS;IAAE,GAAGC;EAAI,CAAE,GAAGH,UAAU;EAElD,IAAII,OAA0B;EAC9B,IAAIJ,UAAU,CAACI,OAAO,EAAEA,OAAO,GAAGJ,UAAU,CAACI,OAAO,MAC/C;IACH,MAAMC,eAAe,GAAG,MAAMP,kBAAkB,CAACC,MAAM,EAAE;MACvDK,OAAO,EAAEJ,UAAU,CAACI,OAAO;MAC3BH,OAAO;MACPC;KACD,CAAC;IACFE,OAAO,GAAGC,eAAe,CAACD,OAAO;EACnC;EAEA,MAAME,MAAM,GAAGP,MAAM,CAACQ,SAAS,CAAC;IAAEN;EAAO,CAAE,CAAC;EAC5C,MAAMO,MAAM,GAAGX,SAAS,CAACS,MAAM,EAAEV,gBAAgB,EAAE,aAAa,CAAC;EACjE,OAAOY,MAAM,CAAC;IAAE,GAAIL,IAAmC;IAAEC;EAAO,CAAE,CAAC;AACrE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}