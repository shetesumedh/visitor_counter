{"ast":null,"code":"import * as Authorization from './Authorization.js';\nimport * as Hex from './Hex.js';\n/**\n * Converts a {@link ox#TransactionRequest.TransactionRequest} to a {@link ox#TransactionRequest.Rpc}.\n *\n * @example\n * ```ts twoslash\n * import { TransactionRequest, Value } from 'ox'\n *\n * const request = TransactionRequest.toRpc({\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('0.01'),\n * })\n * ```\n *\n * @example\n * ### Using with a Provider\n *\n * You can use {@link ox#Provider.(from:function)} to instantiate an EIP-1193 Provider and\n * send a transaction to the Wallet using the `eth_sendTransaction` method.\n *\n * ```ts twoslash\n * import 'ox/window'\n * import { Provider, TransactionRequest, Value } from 'ox'\n *\n * const provider = Provider.from(window.ethereum!)\n *\n * const request = TransactionRequest.toRpc({\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: Value.fromEther('0.01'),\n * })\n *\n * const hash = await provider.request({ // [!code focus]\n *   method: 'eth_sendTransaction', // [!code focus]\n *   params: [request], // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * @param request - The request to convert.\n * @returns An RPC request.\n */\nexport function toRpc(request) {\n  const request_rpc = {};\n  if (typeof request.accessList !== 'undefined') request_rpc.accessList = request.accessList;\n  if (typeof request.authorizationList !== 'undefined') request_rpc.authorizationList = Authorization.toRpcList(request.authorizationList);\n  if (typeof request.blobVersionedHashes !== 'undefined') request_rpc.blobVersionedHashes = request.blobVersionedHashes;\n  if (typeof request.blobs !== 'undefined') request_rpc.blobs = request.blobs;\n  if (typeof request.chainId !== 'undefined') request_rpc.chainId = Hex.fromNumber(request.chainId);\n  if (typeof request.data !== 'undefined') {\n    request_rpc.data = request.data;\n    request_rpc.input = request.data;\n  } else if (typeof request.input !== 'undefined') {\n    request_rpc.data = request.input;\n    request_rpc.input = request.input;\n  }\n  if (typeof request.from !== 'undefined') request_rpc.from = request.from;\n  if (typeof request.gas !== 'undefined') request_rpc.gas = Hex.fromNumber(request.gas);\n  if (typeof request.gasPrice !== 'undefined') request_rpc.gasPrice = Hex.fromNumber(request.gasPrice);\n  if (typeof request.maxFeePerBlobGas !== 'undefined') request_rpc.maxFeePerBlobGas = Hex.fromNumber(request.maxFeePerBlobGas);\n  if (typeof request.maxFeePerGas !== 'undefined') request_rpc.maxFeePerGas = Hex.fromNumber(request.maxFeePerGas);\n  if (typeof request.maxPriorityFeePerGas !== 'undefined') request_rpc.maxPriorityFeePerGas = Hex.fromNumber(request.maxPriorityFeePerGas);\n  if (typeof request.maxPriorityFeePerGas !== 'undefined') request_rpc.maxPriorityFeePerGas = Hex.fromNumber(request.maxPriorityFeePerGas);\n  if (typeof request.nonce !== 'undefined') request_rpc.nonce = Hex.fromNumber(request.nonce);\n  if (typeof request.to !== 'undefined') request_rpc.to = request.to;\n  if (typeof request.type !== 'undefined') request_rpc.type = request.type;\n  if (typeof request.value !== 'undefined') request_rpc.value = Hex.fromNumber(request.value);\n  return request_rpc;\n}","map":{"version":3,"names":["Authorization","Hex","toRpc","request","request_rpc","accessList","authorizationList","toRpcList","blobVersionedHashes","blobs","chainId","fromNumber","data","input","from","gas","gasPrice","maxFeePerBlobGas","maxFeePerGas","maxPriorityFeePerGas","nonce","to","type","value"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/ox/core/TransactionRequest.ts"],"sourcesContent":["import type * as AccessList from './AccessList.js'\nimport type * as Address from './Address.js'\nimport * as Authorization from './Authorization.js'\nimport type * as Errors from './Errors.js'\nimport * as Hex from './Hex.js'\nimport type { Compute } from './internal/types.js'\n\n/** A Transaction Request that is generic to all transaction types, as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/4aca1d7a3e5aab24c8f6437131289ad386944eaa/src/schemas/transaction.yaml#L358-L423). */\nexport type TransactionRequest<\n  bigintType = bigint,\n  numberType = number,\n  type extends string = string,\n> = Compute<{\n  /** EIP-2930 Access List. */\n  accessList?: AccessList.AccessList | undefined\n  /** EIP-7702 Authorization List. */\n  authorizationList?:\n    | Authorization.ListSigned<bigintType, numberType>\n    | undefined\n  /** Versioned hashes of blobs to be included in the transaction. */\n  blobVersionedHashes?: readonly Hex.Hex[]\n  /** Raw blob data. */\n  blobs?: readonly Hex.Hex[] | undefined\n  /** EIP-155 Chain ID. */\n  chainId?: numberType | undefined\n  /** Contract code or a hashed method call with encoded args */\n  data?: Hex.Hex | undefined\n  /** @alias `data` â€“ added for TransactionEnvelope - Transaction compatibility. */\n  input?: Hex.Hex | undefined\n  /** Sender of the transaction. */\n  from?: Address.Address | undefined\n  /** Gas provided for transaction execution */\n  gas?: bigintType | undefined\n  /** Base fee per gas. */\n  gasPrice?: bigintType | undefined\n  /** Maximum total fee per gas sender is willing to pay for blob gas (in wei). */\n  maxFeePerBlobGas?: bigintType | undefined\n  /** Total fee per gas in wei (gasPrice/baseFeePerGas + maxPriorityFeePerGas). */\n  maxFeePerGas?: bigintType | undefined\n  /** Max priority fee per gas (in wei). */\n  maxPriorityFeePerGas?: bigintType | undefined\n  /** Unique number identifying this transaction */\n  nonce?: bigintType | undefined\n  /** Transaction recipient */\n  to?: Address.Address | null | undefined\n  /** Transaction type */\n  type?: type | undefined\n  /** Value in wei sent with this transaction */\n  value?: bigintType | undefined\n}>\n\n/** RPC representation of a {@link ox#TransactionRequest.TransactionRequest}. */\nexport type Rpc = TransactionRequest<Hex.Hex, Hex.Hex, string>\n\n/**\n * Converts a {@link ox#TransactionRequest.TransactionRequest} to a {@link ox#TransactionRequest.Rpc}.\n *\n * @example\n * ```ts twoslash\n * import { TransactionRequest, Value } from 'ox'\n *\n * const request = TransactionRequest.toRpc({\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('0.01'),\n * })\n * ```\n *\n * @example\n * ### Using with a Provider\n *\n * You can use {@link ox#Provider.(from:function)} to instantiate an EIP-1193 Provider and\n * send a transaction to the Wallet using the `eth_sendTransaction` method.\n *\n * ```ts twoslash\n * import 'ox/window'\n * import { Provider, TransactionRequest, Value } from 'ox'\n *\n * const provider = Provider.from(window.ethereum!)\n *\n * const request = TransactionRequest.toRpc({\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: Value.fromEther('0.01'),\n * })\n *\n * const hash = await provider.request({ // [!code focus]\n *   method: 'eth_sendTransaction', // [!code focus]\n *   params: [request], // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * @param request - The request to convert.\n * @returns An RPC request.\n */\nexport function toRpc(request: TransactionRequest): Rpc {\n  const request_rpc: Rpc = {}\n\n  if (typeof request.accessList !== 'undefined')\n    request_rpc.accessList = request.accessList\n  if (typeof request.authorizationList !== 'undefined')\n    request_rpc.authorizationList = Authorization.toRpcList(\n      request.authorizationList,\n    )\n  if (typeof request.blobVersionedHashes !== 'undefined')\n    request_rpc.blobVersionedHashes = request.blobVersionedHashes\n  if (typeof request.blobs !== 'undefined') request_rpc.blobs = request.blobs\n  if (typeof request.chainId !== 'undefined')\n    request_rpc.chainId = Hex.fromNumber(request.chainId)\n  if (typeof request.data !== 'undefined') {\n    request_rpc.data = request.data\n    request_rpc.input = request.data\n  } else if (typeof request.input !== 'undefined') {\n    request_rpc.data = request.input\n    request_rpc.input = request.input\n  }\n  if (typeof request.from !== 'undefined') request_rpc.from = request.from\n  if (typeof request.gas !== 'undefined')\n    request_rpc.gas = Hex.fromNumber(request.gas)\n  if (typeof request.gasPrice !== 'undefined')\n    request_rpc.gasPrice = Hex.fromNumber(request.gasPrice)\n  if (typeof request.maxFeePerBlobGas !== 'undefined')\n    request_rpc.maxFeePerBlobGas = Hex.fromNumber(request.maxFeePerBlobGas)\n  if (typeof request.maxFeePerGas !== 'undefined')\n    request_rpc.maxFeePerGas = Hex.fromNumber(request.maxFeePerGas)\n  if (typeof request.maxPriorityFeePerGas !== 'undefined')\n    request_rpc.maxPriorityFeePerGas = Hex.fromNumber(\n      request.maxPriorityFeePerGas,\n    )\n  if (typeof request.maxPriorityFeePerGas !== 'undefined')\n    request_rpc.maxPriorityFeePerGas = Hex.fromNumber(\n      request.maxPriorityFeePerGas,\n    )\n  if (typeof request.nonce !== 'undefined')\n    request_rpc.nonce = Hex.fromNumber(request.nonce)\n  if (typeof request.to !== 'undefined') request_rpc.to = request.to\n  if (typeof request.type !== 'undefined') request_rpc.type = request.type\n  if (typeof request.value !== 'undefined')\n    request_rpc.value = Hex.fromNumber(request.value)\n\n  return request_rpc\n}\n\nexport declare namespace toRpc {\n  export type ErrorType =\n    | Authorization.toRpcList.ErrorType\n    | Hex.fromNumber.ErrorType\n    | Errors.GlobalErrorType\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}