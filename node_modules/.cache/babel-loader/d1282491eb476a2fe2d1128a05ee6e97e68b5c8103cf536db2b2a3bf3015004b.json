{"ast":null,"code":"import { hexToBigInt } from '../../../utils/encoding/fromHex.js';\nimport { numberToHex } from '../../../utils/encoding/toHex.js';\nimport { formatUserOperationRequest } from '../../utils/formatters/userOperationRequest.js';\n/**\n * Retrieves paymaster-related User Operation properties to be used for sending the User Operation.\n *\n * - Docs: https://viem.sh/account-abstraction/actions/paymaster/getPaymasterData\n *\n * @param client - Client to use\n * @param parameters - {@link GetPaymasterDataParameters}\n * @returns Paymaster-related User Operation properties. {@link GetPaymasterDataReturnType}\n *\n * @example\n * import { http } from 'viem'\n * import { createPaymasterClient, getPaymasterData } from 'viem/account-abstraction'\n *\n * const paymasterClient = createPaymasterClient({\n *   transport: http('https://...'),\n * })\n *\n * const userOperation = { ... }\n *\n * const values = await getPaymasterData(paymasterClient, {\n *   chainId: 1,\n *   entryPointAddress: '0x...',\n *   ...userOperation,\n * })\n */\nexport async function getPaymasterData(client, parameters) {\n  const {\n    chainId,\n    entryPointAddress,\n    context,\n    ...userOperation\n  } = parameters;\n  const request = formatUserOperationRequest(userOperation);\n  const {\n    paymasterPostOpGasLimit,\n    paymasterVerificationGasLimit,\n    ...rest\n  } = await client.request({\n    method: 'pm_getPaymasterData',\n    params: [{\n      ...request,\n      callGasLimit: request.callGasLimit ?? '0x0',\n      verificationGasLimit: request.verificationGasLimit ?? '0x0',\n      preVerificationGas: request.preVerificationGas ?? '0x0'\n    }, entryPointAddress, numberToHex(chainId), context]\n  });\n  return {\n    ...rest,\n    ...(paymasterPostOpGasLimit && {\n      paymasterPostOpGasLimit: hexToBigInt(paymasterPostOpGasLimit)\n    }),\n    ...(paymasterVerificationGasLimit && {\n      paymasterVerificationGasLimit: hexToBigInt(paymasterVerificationGasLimit)\n    })\n  };\n}","map":{"version":3,"names":["hexToBigInt","numberToHex","formatUserOperationRequest","getPaymasterData","client","parameters","chainId","entryPointAddress","context","userOperation","request","paymasterPostOpGasLimit","paymasterVerificationGasLimit","rest","method","params","callGasLimit","verificationGasLimit","preVerificationGas"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/viem/account-abstraction/actions/paymaster/getPaymasterData.ts"],"sourcesContent":["import type { Address } from 'abitype'\nimport type { Client } from '../../../clients/createClient.js'\nimport type { Transport } from '../../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../../errors/utils.js'\nimport type { Hex } from '../../../types/misc.js'\nimport type { OneOf, PartialBy, Prettify } from '../../../types/utils.js'\nimport { hexToBigInt } from '../../../utils/encoding/fromHex.js'\nimport { numberToHex } from '../../../utils/encoding/toHex.js'\nimport type { UserOperation } from '../../types/userOperation.js'\nimport {\n  type FormatUserOperationRequestErrorType,\n  formatUserOperationRequest,\n} from '../../utils/formatters/userOperationRequest.js'\n\nexport type GetPaymasterDataParameters = OneOf<\n  | PartialBy<\n      Pick<\n        UserOperation<'0.6'>,\n        | 'callData'\n        | 'callGasLimit'\n        | 'initCode'\n        | 'maxFeePerGas'\n        | 'maxPriorityFeePerGas'\n        | 'nonce'\n        | 'sender'\n        | 'preVerificationGas'\n        | 'verificationGasLimit'\n      >,\n      | 'callGasLimit'\n      | 'initCode'\n      | 'maxFeePerGas'\n      | 'maxPriorityFeePerGas'\n      | 'preVerificationGas'\n      | 'verificationGasLimit'\n    >\n  | PartialBy<\n      Pick<\n        UserOperation<'0.7'>,\n        | 'callData'\n        | 'callGasLimit'\n        | 'factory'\n        | 'factoryData'\n        | 'maxFeePerGas'\n        | 'maxPriorityFeePerGas'\n        | 'nonce'\n        | 'sender'\n        | 'preVerificationGas'\n        | 'verificationGasLimit'\n        | 'paymasterPostOpGasLimit'\n        | 'paymasterVerificationGasLimit'\n      >,\n      | 'callGasLimit'\n      | 'factory'\n      | 'factoryData'\n      | 'maxFeePerGas'\n      | 'maxPriorityFeePerGas'\n      | 'preVerificationGas'\n      | 'verificationGasLimit'\n    >\n  | PartialBy<\n      Pick<\n        UserOperation<'0.8'>,\n        | 'callData'\n        | 'callGasLimit'\n        | 'factory'\n        | 'factoryData'\n        | 'maxFeePerGas'\n        | 'maxPriorityFeePerGas'\n        | 'nonce'\n        | 'sender'\n        | 'preVerificationGas'\n        | 'verificationGasLimit'\n        | 'paymasterPostOpGasLimit'\n        | 'paymasterVerificationGasLimit'\n      >,\n      | 'callGasLimit'\n      | 'factory'\n      | 'factoryData'\n      | 'maxFeePerGas'\n      | 'maxPriorityFeePerGas'\n      | 'preVerificationGas'\n      | 'verificationGasLimit'\n    >\n> & {\n  context?: unknown | undefined\n  chainId: number\n  entryPointAddress: Address\n}\n\nexport type GetPaymasterDataReturnType = Prettify<\n  OneOf<\n    | { paymasterAndData: Hex }\n    | {\n        paymaster: Address\n        paymasterData: Hex\n        paymasterPostOpGasLimit?: bigint | undefined\n        paymasterVerificationGasLimit?: bigint | undefined\n      }\n  >\n>\n\nexport type GetPaymasterDataErrorType =\n  | FormatUserOperationRequestErrorType\n  | ErrorType\n\n/**\n * Retrieves paymaster-related User Operation properties to be used for sending the User Operation.\n *\n * - Docs: https://viem.sh/account-abstraction/actions/paymaster/getPaymasterData\n *\n * @param client - Client to use\n * @param parameters - {@link GetPaymasterDataParameters}\n * @returns Paymaster-related User Operation properties. {@link GetPaymasterDataReturnType}\n *\n * @example\n * import { http } from 'viem'\n * import { createPaymasterClient, getPaymasterData } from 'viem/account-abstraction'\n *\n * const paymasterClient = createPaymasterClient({\n *   transport: http('https://...'),\n * })\n *\n * const userOperation = { ... }\n *\n * const values = await getPaymasterData(paymasterClient, {\n *   chainId: 1,\n *   entryPointAddress: '0x...',\n *   ...userOperation,\n * })\n */\nexport async function getPaymasterData(\n  client: Client<Transport>,\n  parameters: GetPaymasterDataParameters,\n): Promise<GetPaymasterDataReturnType> {\n  const { chainId, entryPointAddress, context, ...userOperation } = parameters\n  const request = formatUserOperationRequest(userOperation)\n  const { paymasterPostOpGasLimit, paymasterVerificationGasLimit, ...rest } =\n    await client.request({\n      method: 'pm_getPaymasterData',\n      params: [\n        {\n          ...request,\n          callGasLimit: request.callGasLimit ?? '0x0',\n          verificationGasLimit: request.verificationGasLimit ?? '0x0',\n          preVerificationGas: request.preVerificationGas ?? '0x0',\n        },\n        entryPointAddress,\n        numberToHex(chainId),\n        context,\n      ],\n    })\n  return {\n    ...rest,\n    ...(paymasterPostOpGasLimit && {\n      paymasterPostOpGasLimit: hexToBigInt(paymasterPostOpGasLimit),\n    }),\n    ...(paymasterVerificationGasLimit && {\n      paymasterVerificationGasLimit: hexToBigInt(paymasterVerificationGasLimit),\n    }),\n  } as unknown as GetPaymasterDataReturnType\n}\n"],"mappings":"AAMA,SAASA,WAAW,QAAQ,oCAAoC;AAChE,SAASC,WAAW,QAAQ,kCAAkC;AAE9D,SAEEC,0BAA0B,QACrB,gDAAgD;AA6FvD;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,OAAO,eAAeC,gBAAgBA,CACpCC,MAAyB,EACzBC,UAAsC;EAEtC,MAAM;IAAEC,OAAO;IAAEC,iBAAiB;IAAEC,OAAO;IAAE,GAAGC;EAAa,CAAE,GAAGJ,UAAU;EAC5E,MAAMK,OAAO,GAAGR,0BAA0B,CAACO,aAAa,CAAC;EACzD,MAAM;IAAEE,uBAAuB;IAAEC,6BAA6B;IAAE,GAAGC;EAAI,CAAE,GACvE,MAAMT,MAAM,CAACM,OAAO,CAAC;IACnBI,MAAM,EAAE,qBAAqB;IAC7BC,MAAM,EAAE,CACN;MACE,GAAGL,OAAO;MACVM,YAAY,EAAEN,OAAO,CAACM,YAAY,IAAI,KAAK;MAC3CC,oBAAoB,EAAEP,OAAO,CAACO,oBAAoB,IAAI,KAAK;MAC3DC,kBAAkB,EAAER,OAAO,CAACQ,kBAAkB,IAAI;KACnD,EACDX,iBAAiB,EACjBN,WAAW,CAACK,OAAO,CAAC,EACpBE,OAAO;GAEV,CAAC;EACJ,OAAO;IACL,GAAGK,IAAI;IACP,IAAIF,uBAAuB,IAAI;MAC7BA,uBAAuB,EAAEX,WAAW,CAACW,uBAAuB;KAC7D,CAAC;IACF,IAAIC,6BAA6B,IAAI;MACnCA,6BAA6B,EAAEZ,WAAW,CAACY,6BAA6B;KACzE;GACuC;AAC5C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}