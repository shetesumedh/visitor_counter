{"ast":null,"code":"import { getWalletClient } from '../actions/getWalletClient.js';\nimport { filterQueryOptions } from './utils.js';\nexport function getWalletClientQueryOptions(config, options = {}) {\n  return {\n    gcTime: 0,\n    async queryFn({\n      queryKey\n    }) {\n      const {\n        connector\n      } = options;\n      const {\n        connectorUid: _,\n        scopeKey: _s,\n        ...parameters\n      } = queryKey[1];\n      return getWalletClient(config, {\n        ...parameters,\n        connector\n      });\n    },\n    queryKey: getWalletClientQueryKey(options)\n  };\n}\nexport function getWalletClientQueryKey(options = {}) {\n  const {\n    connector,\n    ...parameters\n  } = options;\n  return ['walletClient', {\n    ...filterQueryOptions(parameters),\n    connectorUid: connector?.uid\n  }];\n}","map":{"version":3,"names":["getWalletClient","filterQueryOptions","getWalletClientQueryOptions","config","options","gcTime","queryFn","queryKey","connector","connectorUid","_","scopeKey","_s","parameters","getWalletClientQueryKey","uid"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/@wagmi/core/src/query/getWalletClient.ts"],"sourcesContent":["import type { QueryOptions } from '@tanstack/query-core'\n\nimport {\n  type GetWalletClientErrorType,\n  type GetWalletClientParameters,\n  type GetWalletClientReturnType,\n  getWalletClient,\n} from '../actions/getWalletClient.js'\nimport type { Config } from '../createConfig.js'\nimport type { ScopeKeyParameter } from '../types/properties.js'\nimport type { Compute, ExactPartial } from '../types/utils.js'\nimport { filterQueryOptions } from './utils.js'\n\nexport type GetWalletClientOptions<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n> = Compute<\n  ExactPartial<GetWalletClientParameters<config, chainId>> & ScopeKeyParameter\n>\n\nexport function getWalletClientQueryOptions<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n>(config: config, options: GetWalletClientOptions<config, chainId> = {}) {\n  return {\n    gcTime: 0,\n    async queryFn({ queryKey }) {\n      const { connector } = options\n      const { connectorUid: _, scopeKey: _s, ...parameters } = queryKey[1]\n      return getWalletClient(config, { ...parameters, connector })\n    },\n    queryKey: getWalletClientQueryKey(options),\n  } as const satisfies QueryOptions<\n    GetWalletClientQueryFnData<config, chainId>,\n    GetWalletClientErrorType,\n    GetWalletClientData<config, chainId>,\n    GetWalletClientQueryKey<config, chainId>\n  >\n}\n\nexport type GetWalletClientQueryFnData<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n> = GetWalletClientReturnType<config, chainId>\n\nexport type GetWalletClientData<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n> = GetWalletClientQueryFnData<config, chainId>\n\nexport function getWalletClientQueryKey<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n>(options: GetWalletClientOptions<config, chainId> = {}) {\n  const { connector, ...parameters } = options\n  return [\n    'walletClient',\n    { ...filterQueryOptions(parameters), connectorUid: connector?.uid },\n  ] as const\n}\n\nexport type GetWalletClientQueryKey<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n> = ReturnType<typeof getWalletClientQueryKey<config, chainId>>\n"],"mappings":"AAEA,SAIEA,eAAe,QACV,+BAA+B;AAItC,SAASC,kBAAkB,QAAQ,YAAY;AAS/C,OAAM,SAAUC,2BAA2BA,CAGzCC,MAAc,EAAEC,OAAA,GAAmD,EAAE;EACrE,OAAO;IACLC,MAAM,EAAE,CAAC;IACT,MAAMC,OAAOA,CAAC;MAAEC;IAAQ,CAAE;MACxB,MAAM;QAAEC;MAAS,CAAE,GAAGJ,OAAO;MAC7B,MAAM;QAAEK,YAAY,EAAEC,CAAC;QAAEC,QAAQ,EAAEC,EAAE;QAAE,GAAGC;MAAU,CAAE,GAAGN,QAAQ,CAAC,CAAC,CAAC;MACpE,OAAOP,eAAe,CAACG,MAAM,EAAE;QAAE,GAAGU,UAAU;QAAEL;MAAS,CAAE,CAAC;IAC9D,CAAC;IACDD,QAAQ,EAAEO,uBAAuB,CAACV,OAAO;GAM1C;AACH;AAYA,OAAM,SAAUU,uBAAuBA,CAGrCV,OAAA,GAAmD,EAAE;EACrD,MAAM;IAAEI,SAAS;IAAE,GAAGK;EAAU,CAAE,GAAGT,OAAO;EAC5C,OAAO,CACL,cAAc,EACd;IAAE,GAAGH,kBAAkB,CAACY,UAAU,CAAC;IAAEJ,YAAY,EAAED,SAAS,EAAEO;EAAG,CAAE,CAC3D;AACZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}