{"ast":null,"code":"import * as Hex from '../Hex.js';\nimport * as Secp256k1 from '../Secp256k1.js';\n/** @internal */\nexport function fromScure(key) {\n  return {\n    derive: path => fromScure(key.derive(path)),\n    depth: key.depth,\n    identifier: Hex.fromBytes(key.identifier),\n    index: key.index,\n    privateKey: Hex.fromBytes(key.privateKey),\n    privateExtendedKey: key.privateExtendedKey,\n    publicKey: Secp256k1.getPublicKey({\n      privateKey: key.privateKey\n    }),\n    publicExtendedKey: key.publicExtendedKey,\n    versions: key.versions\n  };\n}","map":{"version":3,"names":["Hex","Secp256k1","fromScure","key","derive","path","depth","identifier","fromBytes","index","privateKey","privateExtendedKey","publicKey","getPublicKey","publicExtendedKey","versions"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/ox/core/internal/hdKey.ts"],"sourcesContent":["import type { HDKey } from '@scure/bip32'\nimport type * as Errors from '../Errors.js'\nimport type * as HdKey from '../HdKey.js'\nimport * as Hex from '../Hex.js'\nimport * as Secp256k1 from '../Secp256k1.js'\n\n/** @internal */\nexport function fromScure(key: HDKey): HdKey.HdKey {\n  return {\n    derive: (path) => fromScure(key.derive(path)),\n    depth: key.depth,\n    identifier: Hex.fromBytes(key.identifier!),\n    index: key.index,\n    privateKey: Hex.fromBytes(key.privateKey!),\n    privateExtendedKey: key.privateExtendedKey,\n    publicKey: Secp256k1.getPublicKey({ privateKey: key.privateKey! }),\n    publicExtendedKey: key.publicExtendedKey,\n    versions: key.versions,\n  }\n}\n\n/** @internal */\nexport declare namespace fromScure {\n  type ErrorType = Errors.GlobalErrorType\n}\n"],"mappings":"AAGA,OAAO,KAAKA,GAAG,MAAM,WAAW;AAChC,OAAO,KAAKC,SAAS,MAAM,iBAAiB;AAE5C;AACA,OAAM,SAAUC,SAASA,CAACC,GAAU;EAClC,OAAO;IACLC,MAAM,EAAGC,IAAI,IAAKH,SAAS,CAACC,GAAG,CAACC,MAAM,CAACC,IAAI,CAAC,CAAC;IAC7CC,KAAK,EAAEH,GAAG,CAACG,KAAK;IAChBC,UAAU,EAAEP,GAAG,CAACQ,SAAS,CAACL,GAAG,CAACI,UAAW,CAAC;IAC1CE,KAAK,EAAEN,GAAG,CAACM,KAAK;IAChBC,UAAU,EAAEV,GAAG,CAACQ,SAAS,CAACL,GAAG,CAACO,UAAW,CAAC;IAC1CC,kBAAkB,EAAER,GAAG,CAACQ,kBAAkB;IAC1CC,SAAS,EAAEX,SAAS,CAACY,YAAY,CAAC;MAAEH,UAAU,EAAEP,GAAG,CAACO;IAAW,CAAE,CAAC;IAClEI,iBAAiB,EAAEX,GAAG,CAACW,iBAAiB;IACxCC,QAAQ,EAAEZ,GAAG,CAACY;GACf;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}