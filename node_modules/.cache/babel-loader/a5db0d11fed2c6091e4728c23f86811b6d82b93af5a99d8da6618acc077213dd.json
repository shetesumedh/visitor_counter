{"ast":null,"code":"'use client';\n\nimport { getTransactionQueryOptions } from '@wagmi/core/query';\nimport { useQuery } from '../utils/query.js';\nimport { useChainId } from './useChainId.js';\nimport { useConfig } from './useConfig.js';\n/** https://wagmi.sh/react/api/hooks/useTransaction */\nexport function useTransaction(parameters = {}) {\n  const {\n    blockHash,\n    blockNumber,\n    blockTag,\n    hash,\n    query = {}\n  } = parameters;\n  const config = useConfig(parameters);\n  const chainId = useChainId({\n    config\n  });\n  const options = getTransactionQueryOptions(config, {\n    ...parameters,\n    chainId: parameters.chainId ?? chainId\n  });\n  const enabled = Boolean(!(blockHash && blockNumber && blockTag && hash) && (query.enabled ?? true));\n  return useQuery({\n    ...query,\n    ...options,\n    enabled\n  });\n}","map":{"version":3,"names":["getTransactionQueryOptions","useQuery","useChainId","useConfig","useTransaction","parameters","blockHash","blockNumber","blockTag","hash","query","config","chainId","options","enabled","Boolean"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/wagmi/src/hooks/useTransaction.ts"],"sourcesContent":["'use client'\n\nimport type {\n  Config,\n  GetTransactionErrorType,\n  ResolvedRegister,\n} from '@wagmi/core'\nimport type { Compute } from '@wagmi/core/internal'\nimport {\n  type GetTransactionData,\n  type GetTransactionOptions,\n  type GetTransactionQueryFnData,\n  type GetTransactionQueryKey,\n  getTransactionQueryOptions,\n} from '@wagmi/core/query'\n\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseTransactionParameters<\n  config extends Config = Config,\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n  selectData = GetTransactionData<config, chainId>,\n> = Compute<\n  GetTransactionOptions<config, chainId> &\n    ConfigParameter<config> &\n    QueryParameter<\n      GetTransactionQueryFnData<config, chainId>,\n      GetTransactionErrorType,\n      selectData,\n      GetTransactionQueryKey<config, chainId>\n    >\n>\n\nexport type UseTransactionReturnType<\n  config extends Config = Config,\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n  selectData = GetTransactionData<config, chainId>,\n> = UseQueryReturnType<selectData, GetTransactionErrorType>\n\n/** https://wagmi.sh/react/api/hooks/useTransaction */\nexport function useTransaction<\n  config extends Config = ResolvedRegister['config'],\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n  selectData = GetTransactionData<config, chainId>,\n>(\n  parameters: UseTransactionParameters<config, chainId, selectData> = {},\n): UseTransactionReturnType<config, chainId, selectData> {\n  const { blockHash, blockNumber, blockTag, hash, query = {} } = parameters\n\n  const config = useConfig(parameters)\n  const chainId = useChainId({ config })\n\n  const options = getTransactionQueryOptions(config, {\n    ...parameters,\n    chainId: parameters.chainId ?? chainId,\n  })\n  const enabled = Boolean(\n    !(blockHash && blockNumber && blockTag && hash) && (query.enabled ?? true),\n  )\n\n  return useQuery({\n    ...(query as any),\n    ...options,\n    enabled,\n  }) as UseTransactionReturnType<config, chainId, selectData>\n}\n"],"mappings":"AAAA,YAAY;;AAQZ,SAKEA,0BAA0B,QACrB,mBAAmB;AAG1B,SAAkCC,QAAQ,QAAQ,mBAAmB;AACrE,SAASC,UAAU,QAAQ,iBAAiB;AAC5C,SAASC,SAAS,QAAQ,gBAAgB;AAyB1C;AACA,OAAM,SAAUC,cAAcA,CAM5BC,UAAA,GAAoE,EAAE;EAEtE,MAAM;IAAEC,SAAS;IAAEC,WAAW;IAAEC,QAAQ;IAAEC,IAAI;IAAEC,KAAK,GAAG;EAAE,CAAE,GAAGL,UAAU;EAEzE,MAAMM,MAAM,GAAGR,SAAS,CAACE,UAAU,CAAC;EACpC,MAAMO,OAAO,GAAGV,UAAU,CAAC;IAAES;EAAM,CAAE,CAAC;EAEtC,MAAME,OAAO,GAAGb,0BAA0B,CAACW,MAAM,EAAE;IACjD,GAAGN,UAAU;IACbO,OAAO,EAAEP,UAAU,CAACO,OAAO,IAAIA;GAChC,CAAC;EACF,MAAME,OAAO,GAAGC,OAAO,CACrB,EAAET,SAAS,IAAIC,WAAW,IAAIC,QAAQ,IAAIC,IAAI,CAAC,KAAKC,KAAK,CAACI,OAAO,IAAI,IAAI,CAAC,CAC3E;EAED,OAAOb,QAAQ,CAAC;IACd,GAAIS,KAAa;IACjB,GAAGG,OAAO;IACVC;GACD,CAA0D;AAC7D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}