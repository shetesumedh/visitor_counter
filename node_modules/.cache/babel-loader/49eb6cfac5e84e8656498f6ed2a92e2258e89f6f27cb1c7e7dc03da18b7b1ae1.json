{"ast":null,"code":"import * as Signature from 'ox/Signature';\nimport * as WebAuthnP256 from 'ox/WebAuthnP256';\nimport { hashMessage } from '../../utils/signature/hashMessage.js';\nimport { hashTypedData } from '../../utils/signature/hashTypedData.js';\n/**\n * @description Creates an Account from a WebAuthn Credential.\n *\n * @returns A WebAuthn Account.\n */\nexport function toWebAuthnAccount(parameters) {\n  const {\n    getFn,\n    rpId\n  } = parameters;\n  const {\n    id,\n    publicKey\n  } = parameters.credential;\n  return {\n    id,\n    publicKey,\n    async sign({\n      hash\n    }) {\n      const {\n        metadata,\n        raw,\n        signature\n      } = await WebAuthnP256.sign({\n        credentialId: id,\n        getFn,\n        challenge: hash,\n        rpId\n      });\n      return {\n        signature: Signature.toHex(signature),\n        raw,\n        webauthn: metadata\n      };\n    },\n    async signMessage({\n      message\n    }) {\n      return this.sign({\n        hash: hashMessage(message)\n      });\n    },\n    async signTypedData(parameters) {\n      return this.sign({\n        hash: hashTypedData(parameters)\n      });\n    },\n    type: 'webAuthn'\n  };\n}","map":{"version":3,"names":["Signature","WebAuthnP256","hashMessage","hashTypedData","toWebAuthnAccount","parameters","getFn","rpId","id","publicKey","credential","sign","hash","metadata","raw","signature","credentialId","challenge","toHex","webauthn","signMessage","message","signTypedData","type"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/viem/account-abstraction/accounts/toWebAuthnAccount.ts"],"sourcesContent":["import * as Signature from 'ox/Signature'\nimport * as WebAuthnP256 from 'ox/WebAuthnP256'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport { hashMessage } from '../../utils/signature/hashMessage.js'\nimport { hashTypedData } from '../../utils/signature/hashTypedData.js'\nimport type { P256Credential } from './createWebAuthnCredential.js'\nimport type { WebAuthnAccount } from './types.js'\n\nexport type ToWebAuthnAccountParameters = {\n  /**\n   * The WebAuthn P256 credential to use.\n   */\n  credential: {\n    id: P256Credential['id']\n    publicKey: P256Credential['publicKey']\n  }\n  /**\n   * Credential request function. Useful for environments that do not support\n   * the WebAuthn API natively (i.e. React Native or testing environments).\n   *\n   * @default window.navigator.credentials.get\n   */\n  getFn?: WebAuthnP256.sign.Options['getFn'] | undefined\n  /**\n   * The relying party identifier to use.\n   */\n  rpId?: WebAuthnP256.sign.Options['rpId'] | undefined\n}\n\nexport type ToWebAuthnAccountReturnType = WebAuthnAccount\n\nexport type ToWebAuthnAccountErrorType = ErrorType\n\n/**\n * @description Creates an Account from a WebAuthn Credential.\n *\n * @returns A WebAuthn Account.\n */\nexport function toWebAuthnAccount(\n  parameters: ToWebAuthnAccountParameters,\n): WebAuthnAccount {\n  const { getFn, rpId } = parameters\n  const { id, publicKey } = parameters.credential\n  return {\n    id,\n    publicKey,\n    async sign({ hash }) {\n      const { metadata, raw, signature } = await WebAuthnP256.sign({\n        credentialId: id,\n        getFn,\n        challenge: hash,\n        rpId,\n      })\n      return {\n        signature: Signature.toHex(signature),\n        raw,\n        webauthn: metadata,\n      }\n    },\n    async signMessage({ message }) {\n      return this.sign({ hash: hashMessage(message) })\n    },\n    async signTypedData(parameters) {\n      return this.sign({ hash: hashTypedData(parameters) })\n    },\n    type: 'webAuthn',\n  }\n}\n"],"mappings":"AAAA,OAAO,KAAKA,SAAS,MAAM,cAAc;AACzC,OAAO,KAAKC,YAAY,MAAM,iBAAiB;AAG/C,SAASC,WAAW,QAAQ,sCAAsC;AAClE,SAASC,aAAa,QAAQ,wCAAwC;AA6BtE;;;;;AAKA,OAAM,SAAUC,iBAAiBA,CAC/BC,UAAuC;EAEvC,MAAM;IAAEC,KAAK;IAAEC;EAAI,CAAE,GAAGF,UAAU;EAClC,MAAM;IAAEG,EAAE;IAAEC;EAAS,CAAE,GAAGJ,UAAU,CAACK,UAAU;EAC/C,OAAO;IACLF,EAAE;IACFC,SAAS;IACT,MAAME,IAAIA,CAAC;MAAEC;IAAI,CAAE;MACjB,MAAM;QAAEC,QAAQ;QAAEC,GAAG;QAAEC;MAAS,CAAE,GAAG,MAAMd,YAAY,CAACU,IAAI,CAAC;QAC3DK,YAAY,EAAER,EAAE;QAChBF,KAAK;QACLW,SAAS,EAAEL,IAAI;QACfL;OACD,CAAC;MACF,OAAO;QACLQ,SAAS,EAAEf,SAAS,CAACkB,KAAK,CAACH,SAAS,CAAC;QACrCD,GAAG;QACHK,QAAQ,EAAEN;OACX;IACH,CAAC;IACD,MAAMO,WAAWA,CAAC;MAAEC;IAAO,CAAE;MAC3B,OAAO,IAAI,CAACV,IAAI,CAAC;QAAEC,IAAI,EAAEV,WAAW,CAACmB,OAAO;MAAC,CAAE,CAAC;IAClD,CAAC;IACD,MAAMC,aAAaA,CAACjB,UAAU;MAC5B,OAAO,IAAI,CAACM,IAAI,CAAC;QAAEC,IAAI,EAAET,aAAa,CAACE,UAAU;MAAC,CAAE,CAAC;IACvD,CAAC;IACDkB,IAAI,EAAE;GACP;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}