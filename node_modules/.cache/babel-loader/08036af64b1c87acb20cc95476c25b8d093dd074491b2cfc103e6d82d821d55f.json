{"ast":null,"code":"import { estimateGas } from '../actions/estimateGas.js';\nimport { filterQueryOptions } from './utils.js';\nexport function estimateGasQueryOptions(config, options = {}) {\n  return {\n    async queryFn({\n      queryKey\n    }) {\n      const {\n        connector\n      } = options;\n      const {\n        account,\n        scopeKey: _,\n        ...parameters\n      } = queryKey[1];\n      if (!account && !connector) throw new Error('account or connector is required');\n      return estimateGas(config, {\n        account,\n        connector,\n        ...parameters\n      });\n    },\n    queryKey: estimateGasQueryKey(options)\n  };\n}\nexport function estimateGasQueryKey(options = {}) {\n  const {\n    connector: _,\n    ...rest\n  } = options;\n  return ['estimateGas', filterQueryOptions(rest)];\n}","map":{"version":3,"names":["estimateGas","filterQueryOptions","estimateGasQueryOptions","config","options","queryFn","queryKey","connector","account","scopeKey","_","parameters","Error","estimateGasQueryKey","rest"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/@wagmi/core/src/query/estimateGas.ts"],"sourcesContent":["import type { QueryOptions } from '@tanstack/query-core'\n\nimport {\n  type EstimateGasErrorType,\n  type EstimateGasParameters,\n  type EstimateGasReturnType,\n  estimateGas,\n} from '../actions/estimateGas.js'\nimport type { Config } from '../createConfig.js'\nimport type { ScopeKeyParameter } from '../types/properties.js'\nimport type { UnionExactPartial } from '../types/utils.js'\nimport { filterQueryOptions } from './utils.js'\n\nexport type EstimateGasOptions<\n  config extends Config,\n  chainId extends config['chains'][number]['id'] | undefined,\n> = UnionExactPartial<EstimateGasParameters<config, chainId>> &\n  ScopeKeyParameter\n\nexport function estimateGasQueryOptions<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n>(config: config, options: EstimateGasOptions<config, chainId> = {} as any) {\n  return {\n    async queryFn({ queryKey }) {\n      const { connector } = options\n      const { account, scopeKey: _, ...parameters } = queryKey[1]\n      if (!account && !connector)\n        throw new Error('account or connector is required')\n      return estimateGas(config, { account, connector, ...(parameters as any) })\n    },\n    queryKey: estimateGasQueryKey(options),\n  } as const satisfies QueryOptions<\n    EstimateGasQueryFnData,\n    EstimateGasErrorType,\n    EstimateGasData,\n    EstimateGasQueryKey<config, chainId>\n  >\n}\n\nexport type EstimateGasQueryFnData = EstimateGasReturnType\n\nexport type EstimateGasData = EstimateGasQueryFnData\n\nexport function estimateGasQueryKey<\n  config extends Config,\n  chainId extends config['chains'][number]['id'] | undefined,\n>(options: EstimateGasOptions<config, chainId> = {} as any) {\n  const { connector: _, ...rest } = options\n  return ['estimateGas', filterQueryOptions(rest)] as const\n}\n\nexport type EstimateGasQueryKey<\n  config extends Config,\n  chainId extends config['chains'][number]['id'] | undefined,\n> = ReturnType<typeof estimateGasQueryKey<config, chainId>>\n"],"mappings":"AAEA,SAIEA,WAAW,QACN,2BAA2B;AAIlC,SAASC,kBAAkB,QAAQ,YAAY;AAQ/C,OAAM,SAAUC,uBAAuBA,CAGrCC,MAAc,EAAEC,OAAA,GAA+C,EAAS;EACxE,OAAO;IACL,MAAMC,OAAOA,CAAC;MAAEC;IAAQ,CAAE;MACxB,MAAM;QAAEC;MAAS,CAAE,GAAGH,OAAO;MAC7B,MAAM;QAAEI,OAAO;QAAEC,QAAQ,EAAEC,CAAC;QAAE,GAAGC;MAAU,CAAE,GAAGL,QAAQ,CAAC,CAAC,CAAC;MAC3D,IAAI,CAACE,OAAO,IAAI,CAACD,SAAS,EACxB,MAAM,IAAIK,KAAK,CAAC,kCAAkC,CAAC;MACrD,OAAOZ,WAAW,CAACG,MAAM,EAAE;QAAEK,OAAO;QAAED,SAAS;QAAE,GAAII;MAAkB,CAAE,CAAC;IAC5E,CAAC;IACDL,QAAQ,EAAEO,mBAAmB,CAACT,OAAO;GAMtC;AACH;AAMA,OAAM,SAAUS,mBAAmBA,CAGjCT,OAAA,GAA+C,EAAS;EACxD,MAAM;IAAEG,SAAS,EAAEG,CAAC;IAAE,GAAGI;EAAI,CAAE,GAAGV,OAAO;EACzC,OAAO,CAAC,aAAa,EAAEH,kBAAkB,CAACa,IAAI,CAAC,CAAU;AAC3D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}