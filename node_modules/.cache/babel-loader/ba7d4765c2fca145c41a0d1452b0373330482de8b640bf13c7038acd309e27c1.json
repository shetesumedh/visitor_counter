{"ast":null,"code":"/**\n * Internal module for NIST P256, P384, P521 curves.\n * Do not use for now.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256, sha384, sha512 } from '@noble/hashes/sha2.js';\nimport { createCurve } from \"./_shortw_utils.js\";\nimport { createHasher } from \"./abstract/hash-to-curve.js\";\nimport { Field } from \"./abstract/modular.js\";\nimport { mapToCurveSimpleSWU } from \"./abstract/weierstrass.js\";\n// p = 2n**224n * (2n**32n-1n) + 2n**192n + 2n**96n - 1n\n// a = Fp256.create(BigInt('-3'));\nconst p256_CURVE = {\n  p: BigInt('0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff'),\n  n: BigInt('0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551'),\n  h: BigInt(1),\n  a: BigInt('0xffffffff00000001000000000000000000000000fffffffffffffffffffffffc'),\n  b: BigInt('0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b'),\n  Gx: BigInt('0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296'),\n  Gy: BigInt('0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5')\n};\n// p = 2n**384n - 2n**128n - 2n**96n + 2n**32n - 1n\nconst p384_CURVE = {\n  p: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000ffffffff'),\n  n: BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffc7634d81f4372ddf581a0db248b0a77aecec196accc52973'),\n  h: BigInt(1),\n  a: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000fffffffc'),\n  b: BigInt('0xb3312fa7e23ee7e4988e056be3f82d19181d9c6efe8141120314088f5013875ac656398d8a2ed19d2a85c8edd3ec2aef'),\n  Gx: BigInt('0xaa87ca22be8b05378eb1c71ef320ad746e1d3b628ba79b9859f741e082542a385502f25dbf55296c3a545e3872760ab7'),\n  Gy: BigInt('0x3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f')\n};\n// p = 2n**521n - 1n\nconst p521_CURVE = {\n  p: BigInt('0x1ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'),\n  n: BigInt('0x01fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa51868783bf2f966b7fcc0148f709a5d03bb5c9b8899c47aebb6fb71e91386409'),\n  h: BigInt(1),\n  a: BigInt('0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc'),\n  b: BigInt('0x0051953eb9618e1c9a1f929a21a0b68540eea2da725b99b315f3b8b489918ef109e156193951ec7e937b1652c0bd3bb1bf073573df883d2c34f1ef451fd46b503f00'),\n  Gx: BigInt('0x00c6858e06b70404e9cd9e3ecb662395b4429c648139053fb521f828af606b4d3dbaa14b5e77efe75928fe1dc127a2ffa8de3348b3c1856a429bf97e7e31c2e5bd66'),\n  Gy: BigInt('0x011839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650')\n};\nconst Fp256 = Field(p256_CURVE.p);\nconst Fp384 = Field(p384_CURVE.p);\nconst Fp521 = Field(p521_CURVE.p);\nfunction createSWU(field, opts) {\n  const map = mapToCurveSimpleSWU(field, opts);\n  return scalars => map(scalars[0]);\n}\n/** NIST P256 (aka secp256r1, prime256v1) curve, ECDSA and ECDH methods. */\nexport const p256 = createCurve({\n  ...p256_CURVE,\n  Fp: Fp256,\n  lowS: false\n}, sha256);\n/** Alias to p256. */\nexport const secp256r1 = p256;\n/** Hashing / encoding to p256 points / field. RFC 9380 methods. */\nexport const p256_hasher = /* @__PURE__ */(() => {\n  return createHasher(p256.Point, createSWU(Fp256, {\n    A: p256_CURVE.a,\n    B: p256_CURVE.b,\n    Z: Fp256.create(BigInt('-10'))\n  }), {\n    DST: 'P256_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'P256_XMD:SHA-256_SSWU_NU_',\n    p: p256_CURVE.p,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha256\n  });\n})();\n/** NIST P384 (aka secp384r1) curve, ECDSA and ECDH methods. */\nexport const p384 = createCurve({\n  ...p384_CURVE,\n  Fp: Fp384,\n  lowS: false\n}, sha384);\n/** Alias to p384. */\nexport const secp384r1 = p384;\n/** Hashing / encoding to p384 points / field. RFC 9380 methods. */\nexport const p384_hasher = /* @__PURE__ */(() => {\n  return createHasher(p384.Point, createSWU(Fp384, {\n    A: p384_CURVE.a,\n    B: p384_CURVE.b,\n    Z: Fp384.create(BigInt('-12'))\n  }), {\n    DST: 'P384_XMD:SHA-384_SSWU_RO_',\n    encodeDST: 'P384_XMD:SHA-384_SSWU_NU_',\n    p: p384_CURVE.p,\n    m: 1,\n    k: 192,\n    expand: 'xmd',\n    hash: sha384\n  });\n})();\n/** NIST P521 (aka secp521r1) curve, ECDSA and ECDH methods. */\nexport const p521 = createCurve({\n  ...p521_CURVE,\n  Fp: Fp521,\n  lowS: false,\n  allowedPrivateKeyLengths: [130, 131, 132]\n}, sha512);\n/** Alias to p521. */\nexport const secp521r1 = p521;\n/** Hashing / encoding to p521 points / field. RFC 9380 methods. */\nexport const p521_hasher = /* @__PURE__ */(() => {\n  return createHasher(p521.Point, createSWU(Fp521, {\n    A: p521_CURVE.a,\n    B: p521_CURVE.b,\n    Z: Fp521.create(BigInt('-4'))\n  }), {\n    DST: 'P521_XMD:SHA-512_SSWU_RO_',\n    encodeDST: 'P521_XMD:SHA-512_SSWU_NU_',\n    p: p521_CURVE.p,\n    m: 1,\n    k: 256,\n    expand: 'xmd',\n    hash: sha512\n  });\n})();","map":{"version":3,"names":["sha256","sha384","sha512","createCurve","createHasher","Field","mapToCurveSimpleSWU","p256_CURVE","p","BigInt","n","h","a","b","Gx","Gy","p384_CURVE","p521_CURVE","Fp256","Fp384","Fp521","createSWU","field","opts","map","scalars","p256","Fp","lowS","secp256r1","p256_hasher","Point","A","B","Z","create","DST","encodeDST","m","k","expand","hash","p384","secp384r1","p384_hasher","p521","allowedPrivateKeyLengths","secp521r1","p521_hasher"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/viem/node_modules/@noble/curves/src/nist.ts"],"sourcesContent":["/**\n * Internal module for NIST P256, P384, P521 curves.\n * Do not use for now.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256, sha384, sha512 } from '@noble/hashes/sha2.js';\nimport { createCurve, type CurveFnWithCreate } from './_shortw_utils.ts';\nimport { createHasher, type H2CHasher } from './abstract/hash-to-curve.ts';\nimport { Field, type IField } from './abstract/modular.ts';\nimport { mapToCurveSimpleSWU, type WeierstrassOpts } from './abstract/weierstrass.ts';\n\n// p = 2n**224n * (2n**32n-1n) + 2n**192n + 2n**96n - 1n\n// a = Fp256.create(BigInt('-3'));\nconst p256_CURVE: WeierstrassOpts<bigint> = {\n  p: BigInt('0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff'),\n  n: BigInt('0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551'),\n  h: BigInt(1),\n  a: BigInt('0xffffffff00000001000000000000000000000000fffffffffffffffffffffffc'),\n  b: BigInt('0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b'),\n  Gx: BigInt('0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296'),\n  Gy: BigInt('0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5'),\n};\n\n// p = 2n**384n - 2n**128n - 2n**96n + 2n**32n - 1n\nconst p384_CURVE: WeierstrassOpts<bigint> = {\n  p: BigInt(\n    '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000ffffffff'\n  ),\n  n: BigInt(\n    '0xffffffffffffffffffffffffffffffffffffffffffffffffc7634d81f4372ddf581a0db248b0a77aecec196accc52973'\n  ),\n  h: BigInt(1),\n  a: BigInt(\n    '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000fffffffc'\n  ),\n  b: BigInt(\n    '0xb3312fa7e23ee7e4988e056be3f82d19181d9c6efe8141120314088f5013875ac656398d8a2ed19d2a85c8edd3ec2aef'\n  ),\n  Gx: BigInt(\n    '0xaa87ca22be8b05378eb1c71ef320ad746e1d3b628ba79b9859f741e082542a385502f25dbf55296c3a545e3872760ab7'\n  ),\n  Gy: BigInt(\n    '0x3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f'\n  ),\n};\n\n// p = 2n**521n - 1n\nconst p521_CURVE: WeierstrassOpts<bigint> = {\n  p: BigInt(\n    '0x1ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n  ),\n  n: BigInt(\n    '0x01fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa51868783bf2f966b7fcc0148f709a5d03bb5c9b8899c47aebb6fb71e91386409'\n  ),\n  h: BigInt(1),\n  a: BigInt(\n    '0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc'\n  ),\n  b: BigInt(\n    '0x0051953eb9618e1c9a1f929a21a0b68540eea2da725b99b315f3b8b489918ef109e156193951ec7e937b1652c0bd3bb1bf073573df883d2c34f1ef451fd46b503f00'\n  ),\n  Gx: BigInt(\n    '0x00c6858e06b70404e9cd9e3ecb662395b4429c648139053fb521f828af606b4d3dbaa14b5e77efe75928fe1dc127a2ffa8de3348b3c1856a429bf97e7e31c2e5bd66'\n  ),\n  Gy: BigInt(\n    '0x011839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650'\n  ),\n};\n\nconst Fp256 = Field(p256_CURVE.p);\nconst Fp384 = Field(p384_CURVE.p);\nconst Fp521 = Field(p521_CURVE.p);\ntype SwuOpts = {\n  A: bigint;\n  B: bigint;\n  Z: bigint;\n};\nfunction createSWU(field: IField<bigint>, opts: SwuOpts) {\n  const map = mapToCurveSimpleSWU(field, opts);\n  return (scalars: bigint[]) => map(scalars[0]);\n}\n\n/** NIST P256 (aka secp256r1, prime256v1) curve, ECDSA and ECDH methods. */\nexport const p256: CurveFnWithCreate = createCurve(\n  { ...p256_CURVE, Fp: Fp256, lowS: false },\n  sha256\n);\n/** Alias to p256. */\nexport const secp256r1: CurveFnWithCreate = p256;\n/** Hashing / encoding to p256 points / field. RFC 9380 methods. */\nexport const p256_hasher: H2CHasher<bigint> = /* @__PURE__ */ (() => {\n  return createHasher(\n    p256.Point,\n    createSWU(Fp256, {\n      A: p256_CURVE.a,\n      B: p256_CURVE.b,\n      Z: Fp256.create(BigInt('-10')),\n    }),\n    {\n      DST: 'P256_XMD:SHA-256_SSWU_RO_',\n      encodeDST: 'P256_XMD:SHA-256_SSWU_NU_',\n      p: p256_CURVE.p,\n      m: 1,\n      k: 128,\n      expand: 'xmd',\n      hash: sha256,\n    }\n  );\n})();\n\n/** NIST P384 (aka secp384r1) curve, ECDSA and ECDH methods. */\nexport const p384: CurveFnWithCreate = createCurve(\n  { ...p384_CURVE, Fp: Fp384, lowS: false },\n  sha384\n);\n/** Alias to p384. */\nexport const secp384r1: CurveFnWithCreate = p384;\n/** Hashing / encoding to p384 points / field. RFC 9380 methods. */\nexport const p384_hasher: H2CHasher<bigint> = /* @__PURE__ */ (() => {\n  return createHasher(\n    p384.Point,\n    createSWU(Fp384, {\n      A: p384_CURVE.a,\n      B: p384_CURVE.b,\n      Z: Fp384.create(BigInt('-12')),\n    }),\n    {\n      DST: 'P384_XMD:SHA-384_SSWU_RO_',\n      encodeDST: 'P384_XMD:SHA-384_SSWU_NU_',\n      p: p384_CURVE.p,\n      m: 1,\n      k: 192,\n      expand: 'xmd',\n      hash: sha384,\n    }\n  );\n})();\n\n/** NIST P521 (aka secp521r1) curve, ECDSA and ECDH methods. */\nexport const p521: CurveFnWithCreate = createCurve(\n  { ...p521_CURVE, Fp: Fp521, lowS: false, allowedPrivateKeyLengths: [130, 131, 132] },\n  sha512\n);\n/** Alias to p521. */\nexport const secp521r1: CurveFnWithCreate = p521;\n/** Hashing / encoding to p521 points / field. RFC 9380 methods. */\nexport const p521_hasher: H2CHasher<bigint> = /* @__PURE__ */ (() => {\n  return createHasher(\n    p521.Point,\n    createSWU(Fp521, {\n      A: p521_CURVE.a,\n      B: p521_CURVE.b,\n      Z: Fp521.create(BigInt('-4')),\n    }),\n    {\n      DST: 'P521_XMD:SHA-512_SSWU_RO_',\n      encodeDST: 'P521_XMD:SHA-512_SSWU_NU_',\n      p: p521_CURVE.p,\n      m: 1,\n      k: 256,\n      expand: 'xmd',\n      hash: sha512,\n    }\n  );\n})();\n"],"mappings":"AAAA;;;;;AAKA;AACA,SAASA,MAAM,EAAEC,MAAM,EAAEC,MAAM,QAAQ,uBAAuB;AAC9D,SAASC,WAAW,QAAgC,oBAAoB;AACxE,SAASC,YAAY,QAAwB,6BAA6B;AAC1E,SAASC,KAAK,QAAqB,uBAAuB;AAC1D,SAASC,mBAAmB,QAA8B,2BAA2B;AAErF;AACA;AACA,MAAMC,UAAU,GAA4B;EAC1CC,CAAC,EAAEC,MAAM,CAAC,oEAAoE,CAAC;EAC/EC,CAAC,EAAED,MAAM,CAAC,oEAAoE,CAAC;EAC/EE,CAAC,EAAEF,MAAM,CAAC,CAAC,CAAC;EACZG,CAAC,EAAEH,MAAM,CAAC,oEAAoE,CAAC;EAC/EI,CAAC,EAAEJ,MAAM,CAAC,oEAAoE,CAAC;EAC/EK,EAAE,EAAEL,MAAM,CAAC,oEAAoE,CAAC;EAChFM,EAAE,EAAEN,MAAM,CAAC,oEAAoE;CAChF;AAED;AACA,MAAMO,UAAU,GAA4B;EAC1CR,CAAC,EAAEC,MAAM,CACP,oGAAoG,CACrG;EACDC,CAAC,EAAED,MAAM,CACP,oGAAoG,CACrG;EACDE,CAAC,EAAEF,MAAM,CAAC,CAAC,CAAC;EACZG,CAAC,EAAEH,MAAM,CACP,oGAAoG,CACrG;EACDI,CAAC,EAAEJ,MAAM,CACP,oGAAoG,CACrG;EACDK,EAAE,EAAEL,MAAM,CACR,oGAAoG,CACrG;EACDM,EAAE,EAAEN,MAAM,CACR,oGAAoG;CAEvG;AAED;AACA,MAAMQ,UAAU,GAA4B;EAC1CT,CAAC,EAAEC,MAAM,CACP,uIAAuI,CACxI;EACDC,CAAC,EAAED,MAAM,CACP,wIAAwI,CACzI;EACDE,CAAC,EAAEF,MAAM,CAAC,CAAC,CAAC;EACZG,CAAC,EAAEH,MAAM,CACP,uIAAuI,CACxI;EACDI,CAAC,EAAEJ,MAAM,CACP,wIAAwI,CACzI;EACDK,EAAE,EAAEL,MAAM,CACR,wIAAwI,CACzI;EACDM,EAAE,EAAEN,MAAM,CACR,wIAAwI;CAE3I;AAED,MAAMS,KAAK,GAAGb,KAAK,CAACE,UAAU,CAACC,CAAC,CAAC;AACjC,MAAMW,KAAK,GAAGd,KAAK,CAACW,UAAU,CAACR,CAAC,CAAC;AACjC,MAAMY,KAAK,GAAGf,KAAK,CAACY,UAAU,CAACT,CAAC,CAAC;AAMjC,SAASa,SAASA,CAACC,KAAqB,EAAEC,IAAa;EACrD,MAAMC,GAAG,GAAGlB,mBAAmB,CAACgB,KAAK,EAAEC,IAAI,CAAC;EAC5C,OAAQE,OAAiB,IAAKD,GAAG,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC;AAC/C;AAEA;AACA,OAAO,MAAMC,IAAI,GAAsBvB,WAAW,CAChD;EAAE,GAAGI,UAAU;EAAEoB,EAAE,EAAET,KAAK;EAAEU,IAAI,EAAE;AAAK,CAAE,EACzC5B,MAAM,CACP;AACD;AACA,OAAO,MAAM6B,SAAS,GAAsBH,IAAI;AAChD;AACA,OAAO,MAAMI,WAAW,GAAsB,eAAgB,CAAC,MAAK;EAClE,OAAO1B,YAAY,CACjBsB,IAAI,CAACK,KAAK,EACVV,SAAS,CAACH,KAAK,EAAE;IACfc,CAAC,EAAEzB,UAAU,CAACK,CAAC;IACfqB,CAAC,EAAE1B,UAAU,CAACM,CAAC;IACfqB,CAAC,EAAEhB,KAAK,CAACiB,MAAM,CAAC1B,MAAM,CAAC,KAAK,CAAC;GAC9B,CAAC,EACF;IACE2B,GAAG,EAAE,2BAA2B;IAChCC,SAAS,EAAE,2BAA2B;IACtC7B,CAAC,EAAED,UAAU,CAACC,CAAC;IACf8B,CAAC,EAAE,CAAC;IACJC,CAAC,EAAE,GAAG;IACNC,MAAM,EAAE,KAAK;IACbC,IAAI,EAAEzC;GACP,CACF;AACH,CAAC,EAAC,CAAE;AAEJ;AACA,OAAO,MAAM0C,IAAI,GAAsBvC,WAAW,CAChD;EAAE,GAAGa,UAAU;EAAEW,EAAE,EAAER,KAAK;EAAES,IAAI,EAAE;AAAK,CAAE,EACzC3B,MAAM,CACP;AACD;AACA,OAAO,MAAM0C,SAAS,GAAsBD,IAAI;AAChD;AACA,OAAO,MAAME,WAAW,GAAsB,eAAgB,CAAC,MAAK;EAClE,OAAOxC,YAAY,CACjBsC,IAAI,CAACX,KAAK,EACVV,SAAS,CAACF,KAAK,EAAE;IACfa,CAAC,EAAEhB,UAAU,CAACJ,CAAC;IACfqB,CAAC,EAAEjB,UAAU,CAACH,CAAC;IACfqB,CAAC,EAAEf,KAAK,CAACgB,MAAM,CAAC1B,MAAM,CAAC,KAAK,CAAC;GAC9B,CAAC,EACF;IACE2B,GAAG,EAAE,2BAA2B;IAChCC,SAAS,EAAE,2BAA2B;IACtC7B,CAAC,EAAEQ,UAAU,CAACR,CAAC;IACf8B,CAAC,EAAE,CAAC;IACJC,CAAC,EAAE,GAAG;IACNC,MAAM,EAAE,KAAK;IACbC,IAAI,EAAExC;GACP,CACF;AACH,CAAC,EAAC,CAAE;AAEJ;AACA,OAAO,MAAM4C,IAAI,GAAsB1C,WAAW,CAChD;EAAE,GAAGc,UAAU;EAAEU,EAAE,EAAEP,KAAK;EAAEQ,IAAI,EAAE,KAAK;EAAEkB,wBAAwB,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG;AAAC,CAAE,EACpF5C,MAAM,CACP;AACD;AACA,OAAO,MAAM6C,SAAS,GAAsBF,IAAI;AAChD;AACA,OAAO,MAAMG,WAAW,GAAsB,eAAgB,CAAC,MAAK;EAClE,OAAO5C,YAAY,CACjByC,IAAI,CAACd,KAAK,EACVV,SAAS,CAACD,KAAK,EAAE;IACfY,CAAC,EAAEf,UAAU,CAACL,CAAC;IACfqB,CAAC,EAAEhB,UAAU,CAACJ,CAAC;IACfqB,CAAC,EAAEd,KAAK,CAACe,MAAM,CAAC1B,MAAM,CAAC,IAAI,CAAC;GAC7B,CAAC,EACF;IACE2B,GAAG,EAAE,2BAA2B;IAChCC,SAAS,EAAE,2BAA2B;IACtC7B,CAAC,EAAES,UAAU,CAACT,CAAC;IACf8B,CAAC,EAAE,CAAC;IACJC,CAAC,EAAE,GAAG;IACNC,MAAM,EAAE,KAAK;IACbC,IAAI,EAAEvC;GACP,CACF;AACH,CAAC,EAAC,CAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}