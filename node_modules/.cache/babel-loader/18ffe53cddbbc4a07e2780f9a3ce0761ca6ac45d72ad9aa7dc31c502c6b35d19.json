{"ast":null,"code":"import { watchBlocks as viem_watchBlocks } from 'viem/actions';\nimport { getAction } from '../utils/getAction.js';\n// TODO: wrap in viem's `observe` to avoid duplicate invocations.\n/** https://wagmi.sh/core/actions/watchBlocks */\nexport function watchBlocks(config, parameters) {\n  const {\n    syncConnectedChain = config._internal.syncConnectedChain,\n    ...rest\n  } = parameters;\n  let unwatch;\n  const listener = chainId => {\n    if (unwatch) unwatch();\n    const client = config.getClient({\n      chainId\n    });\n    const action = getAction(client, viem_watchBlocks, 'watchBlocks');\n    unwatch = action(rest);\n    return unwatch;\n  };\n  // set up listener for block number changes\n  const unlisten = listener(parameters.chainId);\n  // set up subscriber for connected chain changes\n  let unsubscribe;\n  if (syncConnectedChain && !parameters.chainId) unsubscribe = config.subscribe(({\n    chainId\n  }) => chainId, async chainId => listener(chainId));\n  return () => {\n    unlisten?.();\n    unsubscribe?.();\n  };\n}","map":{"version":3,"names":["watchBlocks","viem_watchBlocks","getAction","config","parameters","syncConnectedChain","_internal","rest","unwatch","listener","chainId","client","getClient","action","unlisten","unsubscribe","subscribe"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/@wagmi/core/src/actions/watchBlocks.ts"],"sourcesContent":["import {\n  type WatchBlocksParameters as viem_WatchBlocksParameters,\n  type WatchBlocksReturnType as viem_WatchBlocksReturnType,\n  watchBlocks as viem_watchBlocks,\n} from 'viem/actions'\n\nimport type { BlockTag, Chain, Transport, WebSocketTransport } from 'viem'\nimport type { Config } from '../createConfig.js'\nimport type { SelectChains } from '../types/chain.js'\nimport type {\n  ChainIdParameter,\n  SyncConnectedChainParameter,\n} from '../types/properties.js'\nimport type { IsNarrowable, UnionCompute } from '../types/utils.js'\nimport { getAction } from '../utils/getAction.js'\n\nexport type WatchBlocksParameters<\n  includeTransactions extends boolean = false,\n  blockTag extends BlockTag = 'latest',\n  config extends Config = Config,\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n  ///\n  chains extends readonly Chain[] = SelectChains<config, chainId>,\n> = {\n  [key in keyof chains]: UnionCompute<\n    viem_WatchBlocksParameters<\n      config['_internal']['transports'][chains[key]['id']] extends infer transport extends\n        Transport\n        ? Transport extends transport\n          ? WebSocketTransport\n          : transport\n        : WebSocketTransport,\n      IsNarrowable<chains[key], Chain> extends true ? chains[key] : undefined,\n      includeTransactions,\n      blockTag\n    > &\n      ChainIdParameter<config, chainId> &\n      SyncConnectedChainParameter\n  >\n}[number]\n\nexport type WatchBlocksReturnType = viem_WatchBlocksReturnType\n\n// TODO: wrap in viem's `observe` to avoid duplicate invocations.\n/** https://wagmi.sh/core/actions/watchBlocks */\nexport function watchBlocks<\n  config extends Config,\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n  includeTransactions extends boolean = false,\n  blockTag extends BlockTag = 'latest',\n>(\n  config: config,\n  parameters: WatchBlocksParameters<\n    includeTransactions,\n    blockTag,\n    config,\n    chainId\n  >,\n): WatchBlocksReturnType {\n  const { syncConnectedChain = config._internal.syncConnectedChain, ...rest } =\n    parameters as WatchBlocksParameters\n\n  let unwatch: WatchBlocksReturnType | undefined\n  const listener = (chainId: number | undefined) => {\n    if (unwatch) unwatch()\n\n    const client = config.getClient({ chainId })\n    const action = getAction(client, viem_watchBlocks, 'watchBlocks')\n    unwatch = action(rest as viem_WatchBlocksParameters)\n    return unwatch\n  }\n\n  // set up listener for block number changes\n  const unlisten = listener(parameters.chainId)\n\n  // set up subscriber for connected chain changes\n  let unsubscribe: (() => void) | undefined\n  if (syncConnectedChain && !parameters.chainId)\n    unsubscribe = config.subscribe(\n      ({ chainId }) => chainId,\n      async (chainId) => listener(chainId),\n    )\n\n  return () => {\n    unlisten?.()\n    unsubscribe?.()\n  }\n}\n"],"mappings":"AAAA,SAGEA,WAAW,IAAIC,gBAAgB,QAC1B,cAAc;AAUrB,SAASC,SAAS,QAAQ,uBAAuB;AA8BjD;AACA;AACA,OAAM,SAAUF,WAAWA,CAOzBG,MAAc,EACdC,UAKC;EAED,MAAM;IAAEC,kBAAkB,GAAGF,MAAM,CAACG,SAAS,CAACD,kBAAkB;IAAE,GAAGE;EAAI,CAAE,GACzEH,UAAmC;EAErC,IAAII,OAA0C;EAC9C,MAAMC,QAAQ,GAAIC,OAA2B,IAAI;IAC/C,IAAIF,OAAO,EAAEA,OAAO,EAAE;IAEtB,MAAMG,MAAM,GAAGR,MAAM,CAACS,SAAS,CAAC;MAAEF;IAAO,CAAE,CAAC;IAC5C,MAAMG,MAAM,GAAGX,SAAS,CAACS,MAAM,EAAEV,gBAAgB,EAAE,aAAa,CAAC;IACjEO,OAAO,GAAGK,MAAM,CAACN,IAAkC,CAAC;IACpD,OAAOC,OAAO;EAChB,CAAC;EAED;EACA,MAAMM,QAAQ,GAAGL,QAAQ,CAACL,UAAU,CAACM,OAAO,CAAC;EAE7C;EACA,IAAIK,WAAqC;EACzC,IAAIV,kBAAkB,IAAI,CAACD,UAAU,CAACM,OAAO,EAC3CK,WAAW,GAAGZ,MAAM,CAACa,SAAS,CAC5B,CAAC;IAAEN;EAAO,CAAE,KAAKA,OAAO,EACxB,MAAOA,OAAO,IAAKD,QAAQ,CAACC,OAAO,CAAC,CACrC;EAEH,OAAO,MAAK;IACVI,QAAQ,GAAE,CAAE;IACZC,WAAW,GAAE,CAAE;EACjB,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}