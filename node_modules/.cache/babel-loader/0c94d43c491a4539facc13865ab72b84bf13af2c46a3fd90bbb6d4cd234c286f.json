{"ast":null,"code":"import { ConstantsUtil } from '@reown/appkit-common';\nimport { AccountController } from '../controllers/AccountController.js';\nimport { ChainController } from '../controllers/ChainController.js';\nimport { ConnectorController } from '../controllers/ConnectorController.js';\nimport { RouterController } from '../controllers/RouterController.js';\nexport const NetworkUtil = {\n  /**\n   * Function to handle the network switch.\n   * This function has variety of conditions to handle the network switch depending on the connectors or namespace's connection states.\n   * @param args.network - The network to switch to.\n   * @param args.shouldConfirmSwitch - Whether to confirm the switch. If true, the user will be asked to confirm the switch if necessary.\n   * @returns void\n   */\n  onSwitchNetwork({\n    network,\n    ignoreSwitchConfirmation = false\n  }) {\n    const currentNetwork = ChainController.state.activeCaipNetwork;\n    const routerData = RouterController.state.data;\n    const isSameNetwork = network.id === currentNetwork?.id;\n    if (isSameNetwork) {\n      return;\n    }\n    const isCurrentNamespaceConnected = AccountController.getCaipAddress(ChainController.state.activeChain);\n    const isDifferentNamespace = network.chainNamespace !== ChainController.state.activeChain;\n    const isNextNamespaceConnected = AccountController.getCaipAddress(network.chainNamespace);\n    const connectorId = ConnectorController.getConnectorId(ChainController.state.activeChain);\n    /**\n     * If the network is supported by the auth connector, we don't need to show switch active chain view.\n     * But there are some cases like switching from Ethereum to Bitcoin where Bitcoin is not supported by the auth connector and users should connect with another connector.\n     */\n    const isConnectedWithAuth = connectorId === ConstantsUtil.CONNECTOR_ID.AUTH;\n    const isSupportedForAuthConnector = ConstantsUtil.AUTH_CONNECTOR_SUPPORTED_CHAINS.find(c => c === network.chainNamespace);\n    /**\n     * 1. If the ignoreSwitchConfirmation is set to true, we should switch to the network,\n     * 2. If user connected with auth connector and the next network is supported by the auth connector,\n     * we should switch to the network without confirmation screen.\n     */\n    if (ignoreSwitchConfirmation || isConnectedWithAuth && isSupportedForAuthConnector) {\n      RouterController.push('SwitchNetwork', {\n        ...routerData,\n        network\n      });\n    } else if (\n    /**\n     * If user switching to a different namespace and next namespace is not connected, we need to show switch active chain view for confirmation first.\n     */\n    isCurrentNamespaceConnected && isDifferentNamespace && !isNextNamespaceConnected) {\n      RouterController.push('SwitchActiveChain', {\n        switchToChain: network.chainNamespace,\n        navigateTo: 'Connect',\n        navigateWithReplace: true,\n        network\n      });\n    } else {\n      RouterController.push('SwitchNetwork', {\n        ...routerData,\n        network\n      });\n    }\n  }\n};","map":{"version":3,"names":["ConstantsUtil","AccountController","ChainController","ConnectorController","RouterController","NetworkUtil","onSwitchNetwork","network","ignoreSwitchConfirmation","currentNetwork","state","activeCaipNetwork","routerData","data","isSameNetwork","id","isCurrentNamespaceConnected","getCaipAddress","activeChain","isDifferentNamespace","chainNamespace","isNextNamespaceConnected","connectorId","getConnectorId","isConnectedWithAuth","CONNECTOR_ID","AUTH","isSupportedForAuthConnector","AUTH_CONNECTOR_SUPPORTED_CHAINS","find","c","push","switchToChain","navigateTo","navigateWithReplace"],"sources":["../../../../src/utils/NetworkUtil.ts"],"sourcesContent":[null],"mappings":"AAAA,SAA2BA,aAAa,QAAQ,sBAAsB;AAEtE,SAASC,iBAAiB,QAAQ,qCAAqC;AACvE,SAASC,eAAe,QAAQ,mCAAmC;AACnE,SAASC,mBAAmB,QAAQ,uCAAuC;AAC3E,SAASC,gBAAgB,QAAQ,oCAAoC;AAErE,OAAO,MAAMC,WAAW,GAAG;EACzB;;;;;;;EAOAC,eAAeA,CAAC;IACdC,OAAO;IACPC,wBAAwB,GAAG;EAAK,CAIjC;IACC,MAAMC,cAAc,GAAGP,eAAe,CAACQ,KAAK,CAACC,iBAAiB;IAC9D,MAAMC,UAAU,GAAGR,gBAAgB,CAACM,KAAK,CAACG,IAAI;IAC9C,MAAMC,aAAa,GAAGP,OAAO,CAACQ,EAAE,KAAKN,cAAc,EAAEM,EAAE;IAEvD,IAAID,aAAa,EAAE;MACjB;IACF;IAEA,MAAME,2BAA2B,GAAGf,iBAAiB,CAACgB,cAAc,CAClEf,eAAe,CAACQ,KAAK,CAACQ,WAAW,CAClC;IACD,MAAMC,oBAAoB,GAAGZ,OAAO,CAACa,cAAc,KAAKlB,eAAe,CAACQ,KAAK,CAACQ,WAAW;IACzF,MAAMG,wBAAwB,GAAGpB,iBAAiB,CAACgB,cAAc,CAACV,OAAO,CAACa,cAAc,CAAC;IACzF,MAAME,WAAW,GAAGnB,mBAAmB,CAACoB,cAAc,CAACrB,eAAe,CAACQ,KAAK,CAACQ,WAAW,CAAC;IAEzF;;;;IAIA,MAAMM,mBAAmB,GAAGF,WAAW,KAAKtB,aAAa,CAACyB,YAAY,CAACC,IAAI;IAC3E,MAAMC,2BAA2B,GAAG3B,aAAa,CAAC4B,+BAA+B,CAACC,IAAI,CACpFC,CAAC,IAAIA,CAAC,KAAKvB,OAAO,CAACa,cAAc,CAClC;IAED;;;;;IAKA,IAAIZ,wBAAwB,IAAKgB,mBAAmB,IAAIG,2BAA4B,EAAE;MACpFvB,gBAAgB,CAAC2B,IAAI,CAAC,eAAe,EAAE;QAAE,GAAGnB,UAAU;QAAEL;MAAO,CAAE,CAAC;IACpE,CAAC,MAAM;IACL;;;IAGAS,2BAA2B,IAC3BG,oBAAoB,IACpB,CAACE,wBAAwB,EACzB;MACAjB,gBAAgB,CAAC2B,IAAI,CAAC,mBAAmB,EAAE;QACzCC,aAAa,EAAEzB,OAAO,CAACa,cAAc;QACrCa,UAAU,EAAE,SAAS;QACrBC,mBAAmB,EAAE,IAAI;QACzB3B;OACD,CAAC;IACJ,CAAC,MAAM;MACLH,gBAAgB,CAAC2B,IAAI,CAAC,eAAe,EAAE;QAAE,GAAGnB,UAAU;QAAEL;MAAO,CAAE,CAAC;IACpE;EACF;CACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}