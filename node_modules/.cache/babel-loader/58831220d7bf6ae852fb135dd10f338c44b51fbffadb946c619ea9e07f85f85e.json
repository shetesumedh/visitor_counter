{"ast":null,"code":"import { getTransactionConfirmations } from '../actions/getTransactionConfirmations.js';\nimport { filterQueryOptions } from './utils.js';\nexport function getTransactionConfirmationsQueryOptions(config, options = {}) {\n  return {\n    async queryFn({\n      queryKey\n    }) {\n      const {\n        hash,\n        transactionReceipt,\n        scopeKey: _,\n        ...parameters\n      } = queryKey[1];\n      if (!hash && !transactionReceipt) throw new Error('hash or transactionReceipt is required');\n      const confirmations = await getTransactionConfirmations(config, {\n        hash,\n        transactionReceipt,\n        ...parameters\n      });\n      return confirmations ?? null;\n    },\n    queryKey: getTransactionConfirmationsQueryKey(options)\n  };\n}\nexport function getTransactionConfirmationsQueryKey(options = {}) {\n  return ['transactionConfirmations', filterQueryOptions(options)];\n}","map":{"version":3,"names":["getTransactionConfirmations","filterQueryOptions","getTransactionConfirmationsQueryOptions","config","options","queryFn","queryKey","hash","transactionReceipt","scopeKey","_","parameters","Error","confirmations","getTransactionConfirmationsQueryKey"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/@wagmi/core/src/query/getTransactionConfirmations.ts"],"sourcesContent":["import type { QueryOptions } from '@tanstack/query-core'\n\nimport {\n  type GetTransactionConfirmationsErrorType,\n  type GetTransactionConfirmationsParameters,\n  type GetTransactionConfirmationsReturnType,\n  getTransactionConfirmations,\n} from '../actions/getTransactionConfirmations.js'\nimport type { Config } from '../createConfig.js'\nimport type { ScopeKeyParameter } from '../types/properties.js'\nimport type { UnionExactPartial } from '../types/utils.js'\nimport { filterQueryOptions } from './utils.js'\n\nexport type GetTransactionConfirmationsOptions<\n  config extends Config,\n  chainId extends\n    | config['chains'][number]['id']\n    | undefined = config['chains'][number]['id'],\n> = UnionExactPartial<GetTransactionConfirmationsParameters<config, chainId>> &\n  ScopeKeyParameter\n\nexport function getTransactionConfirmationsQueryOptions<\n  config extends Config,\n  chainId extends\n    | config['chains'][number]['id']\n    | undefined = config['chains'][number]['id'],\n>(\n  config: config,\n  options: GetTransactionConfirmationsOptions<config, chainId> = {} as any,\n) {\n  return {\n    async queryFn({ queryKey }) {\n      const {\n        hash,\n        transactionReceipt,\n        scopeKey: _,\n        ...parameters\n      } = queryKey[1]\n      if (!hash && !transactionReceipt)\n        throw new Error('hash or transactionReceipt is required')\n\n      const confirmations = await getTransactionConfirmations(config, {\n        hash,\n        transactionReceipt,\n        ...(parameters as any),\n      })\n      return confirmations ?? null\n    },\n    queryKey: getTransactionConfirmationsQueryKey(options),\n  } as const satisfies QueryOptions<\n    GetTransactionConfirmationsQueryFnData,\n    GetTransactionConfirmationsErrorType,\n    GetTransactionConfirmationsData,\n    GetTransactionConfirmationsQueryKey<config, chainId>\n  >\n}\n\nexport type GetTransactionConfirmationsQueryFnData =\n  GetTransactionConfirmationsReturnType\n\nexport type GetTransactionConfirmationsData =\n  GetTransactionConfirmationsQueryFnData\n\nexport function getTransactionConfirmationsQueryKey<\n  config extends Config,\n  chainId extends\n    | config['chains'][number]['id']\n    | undefined = config['chains'][number]['id'],\n>(options: GetTransactionConfirmationsOptions<config, chainId> = {} as any) {\n  return ['transactionConfirmations', filterQueryOptions(options)] as const\n}\n\nexport type GetTransactionConfirmationsQueryKey<\n  config extends Config,\n  chainId extends\n    | config['chains'][number]['id']\n    | undefined = config['chains'][number]['id'],\n> = ReturnType<typeof getTransactionConfirmationsQueryKey<config, chainId>>\n"],"mappings":"AAEA,SAIEA,2BAA2B,QACtB,2CAA2C;AAIlD,SAASC,kBAAkB,QAAQ,YAAY;AAU/C,OAAM,SAAUC,uCAAuCA,CAMrDC,MAAc,EACdC,OAAA,GAA+D,EAAS;EAExE,OAAO;IACL,MAAMC,OAAOA,CAAC;MAAEC;IAAQ,CAAE;MACxB,MAAM;QACJC,IAAI;QACJC,kBAAkB;QAClBC,QAAQ,EAAEC,CAAC;QACX,GAAGC;MAAU,CACd,GAAGL,QAAQ,CAAC,CAAC,CAAC;MACf,IAAI,CAACC,IAAI,IAAI,CAACC,kBAAkB,EAC9B,MAAM,IAAII,KAAK,CAAC,wCAAwC,CAAC;MAE3D,MAAMC,aAAa,GAAG,MAAMb,2BAA2B,CAACG,MAAM,EAAE;QAC9DI,IAAI;QACJC,kBAAkB;QAClB,GAAIG;OACL,CAAC;MACF,OAAOE,aAAa,IAAI,IAAI;IAC9B,CAAC;IACDP,QAAQ,EAAEQ,mCAAmC,CAACV,OAAO;GAMtD;AACH;AAQA,OAAM,SAAUU,mCAAmCA,CAKjDV,OAAA,GAA+D,EAAS;EACxE,OAAO,CAAC,0BAA0B,EAAEH,kBAAkB,CAACG,OAAO,CAAC,CAAU;AAC3E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}