{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.verifyHash = verifyHash;\nconst getAddress_js_1 = require(\"../address/getAddress.js\");\nconst isAddressEqual_js_1 = require(\"../address/isAddressEqual.js\");\nconst recoverAddress_js_1 = require(\"./recoverAddress.js\");\nasync function verifyHash({\n  address,\n  hash,\n  signature\n}) {\n  return (0, isAddressEqual_js_1.isAddressEqual)((0, getAddress_js_1.getAddress)(address), await (0, recoverAddress_js_1.recoverAddress)({\n    hash,\n    signature\n  }));\n}","map":{"version":3,"names":["exports","verifyHash","getAddress_js_1","require","isAddressEqual_js_1","recoverAddress_js_1","address","hash","signature","isAddressEqual","getAddress","recoverAddress"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/viem/utils/signature/verifyHash.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport type { ByteArray, Hash, Hex, Signature } from '../../types/misc.js'\nimport { type GetAddressErrorType, getAddress } from '../address/getAddress.js'\nimport {\n  type IsAddressEqualErrorType,\n  isAddressEqual,\n} from '../address/isAddressEqual.js'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport {\n  type RecoverAddressErrorType,\n  recoverAddress,\n} from './recoverAddress.js'\n\nexport type VerifyHashParameters = {\n  /** The address that signed the original message. */\n  address: Address\n  /** The hash to be verified. */\n  hash: Hash\n  /** The signature that was generated by signing the message with the address's private key. */\n  signature: Hex | ByteArray | Signature\n}\n\nexport type VerifyHashReturnType = boolean\n\nexport type VerifyHashErrorType =\n  | IsAddressEqualErrorType\n  | GetAddressErrorType\n  | RecoverAddressErrorType\n  | ErrorType\n\n/**\n * Verify that a message was signed by the provided address.\n *\n * Note:  Only supports Externally Owned Accounts. Does not support Contract Accounts.\n *        It is highly recommended to use `publicClient.verifyHash` instead to ensure\n *        wallet interoperability.\n *\n * - Docs {@link https://viem.sh/docs/utilities/verifyHash}\n *\n * @param parameters - {@link VerifyHashParameters}\n * @returns Whether or not the signature is valid. {@link VerifyHashReturnType}\n */\nexport async function verifyHash({\n  address,\n  hash,\n  signature,\n}: VerifyHashParameters): Promise<VerifyHashReturnType> {\n  return isAddressEqual(\n    getAddress(address),\n    await recoverAddress({ hash, signature }),\n  )\n}\n"],"mappings":";;;;;AA4CAA,OAAA,CAAAC,UAAA,GAAAA,UAAA;AAzCA,MAAAC,eAAA,GAAAC,OAAA;AACA,MAAAC,mBAAA,GAAAD,OAAA;AAMA,MAAAE,mBAAA,GAAAF,OAAA;AAkCO,eAAeF,UAAUA,CAAC;EAC/BK,OAAO;EACPC,IAAI;EACJC;AAAS,CACY;EACrB,OAAO,IAAAJ,mBAAA,CAAAK,cAAc,EACnB,IAAAP,eAAA,CAAAQ,UAAU,EAACJ,OAAO,CAAC,EACnB,MAAM,IAAAD,mBAAA,CAAAM,cAAc,EAAC;IAAEJ,IAAI;IAAEC;EAAS,CAAE,CAAC,CAC1C;AACH","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}