{"ast":null,"code":"import { Methods } from '../communication/methods.js';\nimport { isObjectEIP712TypedData } from '../types/index.js';\nclass TXs {\n  constructor(communicator) {\n    this.communicator = communicator;\n  }\n  async getBySafeTxHash(safeTxHash) {\n    if (!safeTxHash) {\n      throw new Error('Invalid safeTxHash');\n    }\n    const response = await this.communicator.send(Methods.getTxBySafeTxHash, {\n      safeTxHash\n    });\n    return response.data;\n  }\n  async signMessage(message) {\n    const messagePayload = {\n      message\n    };\n    const response = await this.communicator.send(Methods.signMessage, messagePayload);\n    return response.data;\n  }\n  async signTypedMessage(typedData) {\n    if (!isObjectEIP712TypedData(typedData)) {\n      throw new Error('Invalid typed data');\n    }\n    const response = await this.communicator.send(Methods.signTypedMessage, {\n      typedData\n    });\n    return response.data;\n  }\n  async send({\n    txs,\n    params\n  }) {\n    if (!txs || !txs.length) {\n      throw new Error('No transactions were passed');\n    }\n    const messagePayload = {\n      txs,\n      params\n    };\n    const response = await this.communicator.send(Methods.sendTransactions, messagePayload);\n    return response.data;\n  }\n}\nexport { TXs };","map":{"version":3,"names":["Methods","isObjectEIP712TypedData","TXs","constructor","communicator","getBySafeTxHash","safeTxHash","Error","response","send","getTxBySafeTxHash","data","signMessage","message","messagePayload","signTypedMessage","typedData","txs","params","length","sendTransactions"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/@safe-global/safe-apps-sdk/src/txs/index.ts"],"sourcesContent":["import { Methods } from '../communication/methods.js';\nimport {\n  GatewayTransactionDetails,\n  SignMessageParams,\n  SendTransactionsParams,\n  GetTxBySafeTxHashParams,\n  Communicator,\n  SendTransactionsResponse,\n  SignTypedMessageParams,\n  EIP712TypedData,\n  isObjectEIP712TypedData,\n  SignMessageResponse,\n} from '../types/index.js';\n\nclass TXs {\n  private readonly communicator: Communicator;\n\n  constructor(communicator: Communicator) {\n    this.communicator = communicator;\n  }\n\n  async getBySafeTxHash(safeTxHash: string): Promise<GatewayTransactionDetails> {\n    if (!safeTxHash) {\n      throw new Error('Invalid safeTxHash');\n    }\n\n    const response = await this.communicator.send<\n      Methods.getTxBySafeTxHash,\n      GetTxBySafeTxHashParams,\n      GatewayTransactionDetails\n    >(Methods.getTxBySafeTxHash, { safeTxHash });\n\n    return response.data;\n  }\n\n  async signMessage(message: string): Promise<SignMessageResponse> {\n    const messagePayload = {\n      message,\n    };\n\n    const response = await this.communicator.send<Methods.signMessage, SignMessageParams, SignMessageResponse>(\n      Methods.signMessage,\n      messagePayload,\n    );\n\n    return response.data;\n  }\n\n  async signTypedMessage(typedData: EIP712TypedData): Promise<SignMessageResponse> {\n    if (!isObjectEIP712TypedData(typedData)) {\n      throw new Error('Invalid typed data');\n    }\n\n    const response = await this.communicator.send<\n      Methods.signTypedMessage,\n      SignTypedMessageParams,\n      SignMessageResponse\n    >(Methods.signTypedMessage, { typedData });\n\n    return response.data;\n  }\n\n  async send({ txs, params }: SendTransactionsParams): Promise<SendTransactionsResponse> {\n    if (!txs || !txs.length) {\n      throw new Error('No transactions were passed');\n    }\n\n    const messagePayload = {\n      txs,\n      params,\n    };\n\n    const response = await this.communicator.send<\n      Methods.sendTransactions,\n      SendTransactionsParams,\n      SendTransactionsResponse\n    >(Methods.sendTransactions, messagePayload);\n\n    return response.data;\n  }\n}\n\nexport { TXs };\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,6BAA6B;AACrD,SASEC,uBAAuB,QAElB,mBAAmB;AAE1B,MAAMC,GAAG;EAGPC,YAAYC,YAA0B;IACpC,IAAI,CAACA,YAAY,GAAGA,YAAY;EAClC;EAEA,MAAMC,eAAeA,CAACC,UAAkB;IACtC,IAAI,CAACA,UAAU,EAAE;MACf,MAAM,IAAIC,KAAK,CAAC,oBAAoB,CAAC;;IAGvC,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAACJ,YAAY,CAACK,IAAI,CAI3CT,OAAO,CAACU,iBAAiB,EAAE;MAAEJ;IAAU,CAAE,CAAC;IAE5C,OAAOE,QAAQ,CAACG,IAAI;EACtB;EAEA,MAAMC,WAAWA,CAACC,OAAe;IAC/B,MAAMC,cAAc,GAAG;MACrBD;KACD;IAED,MAAML,QAAQ,GAAG,MAAM,IAAI,CAACJ,YAAY,CAACK,IAAI,CAC3CT,OAAO,CAACY,WAAW,EACnBE,cAAc,CACf;IAED,OAAON,QAAQ,CAACG,IAAI;EACtB;EAEA,MAAMI,gBAAgBA,CAACC,SAA0B;IAC/C,IAAI,CAACf,uBAAuB,CAACe,SAAS,CAAC,EAAE;MACvC,MAAM,IAAIT,KAAK,CAAC,oBAAoB,CAAC;;IAGvC,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAACJ,YAAY,CAACK,IAAI,CAI3CT,OAAO,CAACe,gBAAgB,EAAE;MAAEC;IAAS,CAAE,CAAC;IAE1C,OAAOR,QAAQ,CAACG,IAAI;EACtB;EAEA,MAAMF,IAAIA,CAAC;IAAEQ,GAAG;IAAEC;EAAM,CAA0B;IAChD,IAAI,CAACD,GAAG,IAAI,CAACA,GAAG,CAACE,MAAM,EAAE;MACvB,MAAM,IAAIZ,KAAK,CAAC,6BAA6B,CAAC;;IAGhD,MAAMO,cAAc,GAAG;MACrBG,GAAG;MACHC;KACD;IAED,MAAMV,QAAQ,GAAG,MAAM,IAAI,CAACJ,YAAY,CAACK,IAAI,CAI3CT,OAAO,CAACoB,gBAAgB,EAAEN,cAAc,CAAC;IAE3C,OAAON,QAAQ,CAACG,IAAI;EACtB;;AAGF,SAAST,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}