{"ast":null,"code":"import { standardErrors } from '../../../core/error/errors.js';\nimport { decodeFunctionData, isAddress, pad } from 'viem';\nimport { getCode, readContract } from 'viem/actions';\nimport { abi, factoryAbi } from './constants.js';\nexport async function findOwnerIndex({\n  address,\n  client,\n  publicKey,\n  factory,\n  factoryData\n}) {\n  const code = await getCode(client, {\n    address\n  });\n  // Check index of owner in the factoryData\n  // Note: importing an undeployed contract might need to be handled differently\n  // The implemention will likely require the signer to tell us the index\n  if (!code && factory && factoryData) {\n    const initData = decodeFunctionData({\n      abi: factoryAbi,\n      data: factoryData\n    });\n    if (initData.functionName !== 'createAccount') {\n      throw standardErrors.rpc.internal('unknown factory function');\n    }\n    const [owners] = initData.args;\n    return owners.findIndex(owner => {\n      return owner.toLowerCase() === formatPublicKey(publicKey).toLowerCase();\n    });\n  }\n  const ownerCount = await readContract(client, {\n    address,\n    abi,\n    functionName: 'ownerCount'\n  });\n  // Iterate from highest index down and return early when found\n  for (let i = Number(ownerCount) - 1; i >= 0; i--) {\n    const owner = await readContract(client, {\n      address,\n      abi,\n      functionName: 'ownerAtIndex',\n      args: [BigInt(i)]\n    });\n    const formatted = formatPublicKey(publicKey);\n    if (owner.toLowerCase() === formatted.toLowerCase()) {\n      return i;\n    }\n  }\n  return -1;\n}\n/**\n * Formats 20 byte addresses to 32 byte public keys. Contract uses 32 byte keys for owners.\n * @param publicKey - The public key to format\n * @returns The formatted public key\n */\nexport function formatPublicKey(publicKey) {\n  if (isAddress(publicKey)) {\n    return pad(publicKey);\n  }\n  return publicKey;\n}","map":{"version":3,"names":["standardErrors","decodeFunctionData","isAddress","pad","getCode","readContract","abi","factoryAbi","findOwnerIndex","address","client","publicKey","factory","factoryData","code","initData","data","functionName","rpc","internal","owners","args","findIndex","owner","toLowerCase","formatPublicKey","ownerCount","i","Number","BigInt","formatted"],"sources":["../../../../src/sign/base-account/utils/findOwnerIndex.ts"],"sourcesContent":[null],"mappings":"AAAA,SAASA,cAAc,QAAQ,+BAAwB;AACvD,SAA+BC,kBAAkB,EAAEC,SAAS,EAAEC,GAAG,QAAQ,MAAM;AAC/E,SAASC,OAAO,EAAEC,YAAY,QAAQ,cAAc;AACpD,SAASC,GAAG,EAAEC,UAAU,QAAQ,gBAAgB;AAyBhD,OAAO,eAAeC,cAAcA,CAAC;EACnCC,OAAO;EACPC,MAAM;EACNC,SAAS;EACTC,OAAO;EACPC;AAAW,CACU;EACrB,MAAMC,IAAI,GAAG,MAAMV,OAAO,CAACM,MAAM,EAAE;IACjCD;GACD,CAAC;EAEF;EACA;EACA;EACA,IAAI,CAACK,IAAI,IAAIF,OAAO,IAAIC,WAAW,EAAE;IACnC,MAAME,QAAQ,GAAGd,kBAAkB,CAAC;MAClCK,GAAG,EAAEC,UAAU;MACfS,IAAI,EAAEH;KACP,CAAC;IAEF,IAAIE,QAAQ,CAACE,YAAY,KAAK,eAAe,EAAE;MAC7C,MAAMjB,cAAc,CAACkB,GAAG,CAACC,QAAQ,CAAC,0BAA0B,CAAC;IAC/D;IAEA,MAAM,CAACC,MAAM,CAAC,GAAGL,QAAQ,CAACM,IAAI;IAC9B,OAAOD,MAAM,CAACE,SAAS,CAAEC,KAAoB,IAAI;MAC/C,OAAOA,KAAK,CAACC,WAAW,EAAE,KAAKC,eAAe,CAACd,SAAS,CAAC,CAACa,WAAW,EAAE;IACzE,CAAC,CAAC;EACJ;EAEA,MAAME,UAAU,GAAG,MAAMrB,YAAY,CAACK,MAAM,EAAE;IAC5CD,OAAO;IACPH,GAAG;IACHW,YAAY,EAAE;GACf,CAAC;EAEF;EACA,KAAK,IAAIU,CAAC,GAAGC,MAAM,CAACF,UAAU,CAAC,GAAG,CAAC,EAAEC,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;IAChD,MAAMJ,KAAK,GAAG,MAAMlB,YAAY,CAACK,MAAM,EAAE;MACvCD,OAAO;MACPH,GAAG;MACHW,YAAY,EAAE,cAAc;MAC5BI,IAAI,EAAE,CAACQ,MAAM,CAACF,CAAC,CAAC;KACjB,CAAC;IAEF,MAAMG,SAAS,GAAGL,eAAe,CAACd,SAAS,CAAC;IAC5C,IAAIY,KAAK,CAACC,WAAW,EAAE,KAAKM,SAAS,CAACN,WAAW,EAAE,EAAE;MACnD,OAAOG,CAAC;IACV;EACF;EAEA,OAAO,CAAC,CAAC;AACX;AAEA;;;;;AAKA,OAAM,SAAUF,eAAeA,CAACd,SAAc;EAC5C,IAAIT,SAAS,CAACS,SAAS,CAAC,EAAE;IACxB,OAAOR,GAAG,CAACQ,SAAS,CAAC;EACvB;EACA,OAAOA,SAAS;AAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}