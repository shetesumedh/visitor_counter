{"ast":null,"code":"import { signMessage as viem_signMessage } from 'viem/actions';\nimport { getAction } from '../utils/getAction.js';\nimport { getConnectorClient } from './getConnectorClient.js';\n/** https://wagmi.sh/core/api/actions/signMessage */\nexport async function signMessage(config, parameters) {\n  const {\n    account,\n    connector,\n    ...rest\n  } = parameters;\n  let client;\n  if (typeof account === 'object' && account.type === 'local') client = config.getClient();else client = await getConnectorClient(config, {\n    account,\n    connector\n  });\n  const action = getAction(client, viem_signMessage, 'signMessage');\n  return action({\n    ...rest,\n    ...(account ? {\n      account\n    } : {})\n  });\n}","map":{"version":3,"names":["signMessage","viem_signMessage","getAction","getConnectorClient","config","parameters","account","connector","rest","client","type","getClient","action"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/@wagmi/core/src/actions/signMessage.ts"],"sourcesContent":["import type { Account, Client } from 'viem'\nimport {\n  type SignMessageErrorType as viem_SignMessageErrorType,\n  type SignMessageParameters as viem_SignMessageParameters,\n  type SignMessageReturnType as viem_SignMessageReturnType,\n  signMessage as viem_signMessage,\n} from 'viem/actions'\n\nimport type { Config } from '../createConfig.js'\nimport type { BaseErrorType, ErrorType } from '../errors/base.js'\nimport type { ConnectorParameter } from '../types/properties.js'\nimport type { Compute } from '../types/utils.js'\nimport { getAction } from '../utils/getAction.js'\nimport {\n  type GetConnectorClientErrorType,\n  getConnectorClient,\n} from './getConnectorClient.js'\n\nexport type SignMessageParameters = Compute<\n  viem_SignMessageParameters<Account> & ConnectorParameter\n>\n\nexport type SignMessageReturnType = viem_SignMessageReturnType\n\nexport type SignMessageErrorType =\n  // getConnectorClient()\n  | GetConnectorClientErrorType\n  // base\n  | BaseErrorType\n  | ErrorType\n  // viem\n  | viem_SignMessageErrorType\n\n/** https://wagmi.sh/core/api/actions/signMessage */\nexport async function signMessage(\n  config: Config,\n  parameters: SignMessageParameters,\n): Promise<SignMessageReturnType> {\n  const { account, connector, ...rest } = parameters\n\n  let client: Client\n  if (typeof account === 'object' && account.type === 'local')\n    client = config.getClient()\n  else client = await getConnectorClient(config, { account, connector })\n\n  const action = getAction(client, viem_signMessage, 'signMessage')\n  return action({\n    ...rest,\n    ...(account ? { account } : {}),\n  } as viem_SignMessageParameters<Account>)\n}\n"],"mappings":"AACA,SAIEA,WAAW,IAAIC,gBAAgB,QAC1B,cAAc;AAMrB,SAASC,SAAS,QAAQ,uBAAuB;AACjD,SAEEC,kBAAkB,QACb,yBAAyB;AAiBhC;AACA,OAAO,eAAeH,WAAWA,CAC/BI,MAAc,EACdC,UAAiC;EAEjC,MAAM;IAAEC,OAAO;IAAEC,SAAS;IAAE,GAAGC;EAAI,CAAE,GAAGH,UAAU;EAElD,IAAII,MAAc;EAClB,IAAI,OAAOH,OAAO,KAAK,QAAQ,IAAIA,OAAO,CAACI,IAAI,KAAK,OAAO,EACzDD,MAAM,GAAGL,MAAM,CAACO,SAAS,EAAE,MACxBF,MAAM,GAAG,MAAMN,kBAAkB,CAACC,MAAM,EAAE;IAAEE,OAAO;IAAEC;EAAS,CAAE,CAAC;EAEtE,MAAMK,MAAM,GAAGV,SAAS,CAACO,MAAM,EAAER,gBAAgB,EAAE,aAAa,CAAC;EACjE,OAAOW,MAAM,CAAC;IACZ,GAAGJ,IAAI;IACP,IAAIF,OAAO,GAAG;MAAEA;IAAO,CAAE,GAAG,EAAE;GACQ,CAAC;AAC3C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}