{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.encodeFunctionData = encodeFunctionData;\nconst concat_js_1 = require(\"../data/concat.js\");\nconst encodeAbiParameters_js_1 = require(\"./encodeAbiParameters.js\");\nconst prepareEncodeFunctionData_js_1 = require(\"./prepareEncodeFunctionData.js\");\nfunction encodeFunctionData(parameters) {\n  const {\n    args\n  } = parameters;\n  const {\n    abi,\n    functionName\n  } = (() => {\n    if (parameters.abi.length === 1 && parameters.functionName?.startsWith('0x')) return parameters;\n    return (0, prepareEncodeFunctionData_js_1.prepareEncodeFunctionData)(parameters);\n  })();\n  const abiItem = abi[0];\n  const signature = functionName;\n  const data = 'inputs' in abiItem && abiItem.inputs ? (0, encodeAbiParameters_js_1.encodeAbiParameters)(abiItem.inputs, args ?? []) : undefined;\n  return (0, concat_js_1.concatHex)([signature, data ?? '0x']);\n}","map":{"version":3,"names":["exports","encodeFunctionData","concat_js_1","require","encodeAbiParameters_js_1","prepareEncodeFunctionData_js_1","parameters","args","abi","functionName","length","startsWith","prepareEncodeFunctionData","abiItem","signature","data","inputs","encodeAbiParameters","undefined","concatHex"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/viem/utils/abi/encodeFunctionData.ts"],"sourcesContent":["import type { Abi, AbiStateMutability, ExtractAbiFunctions } from 'abitype'\n\nimport type { AbiFunctionNotFoundErrorType } from '../../errors/abi.js'\nimport type {\n  ContractFunctionArgs,\n  ContractFunctionName,\n} from '../../types/contract.js'\nimport { type ConcatHexErrorType, concatHex } from '../data/concat.js'\nimport type { ToFunctionSelectorErrorType } from '../hash/toFunctionSelector.js'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { IsNarrowable, UnionEvaluate } from '../../types/utils.js'\nimport {\n  type EncodeAbiParametersErrorType,\n  encodeAbiParameters,\n} from './encodeAbiParameters.js'\nimport type { FormatAbiItemErrorType } from './formatAbiItem.js'\nimport type { GetAbiItemErrorType } from './getAbiItem.js'\nimport { prepareEncodeFunctionData } from './prepareEncodeFunctionData.js'\n\nexport type EncodeFunctionDataParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  functionName extends\n    | ContractFunctionName<abi>\n    | Hex\n    | undefined = ContractFunctionName<abi>,\n  ///\n  hasFunctions = abi extends Abi\n    ? Abi extends abi\n      ? true\n      : [ExtractAbiFunctions<abi>] extends [never]\n        ? false\n        : true\n    : true,\n  allArgs = ContractFunctionArgs<\n    abi,\n    AbiStateMutability,\n    functionName extends ContractFunctionName<abi>\n      ? functionName\n      : ContractFunctionName<abi>\n  >,\n  allFunctionNames = ContractFunctionName<abi>,\n> = {\n  abi: abi\n} & UnionEvaluate<\n  IsNarrowable<abi, Abi> extends true\n    ? abi['length'] extends 1\n      ? { functionName?: functionName | allFunctionNames | Hex | undefined }\n      : { functionName: functionName | allFunctionNames | Hex }\n    : { functionName?: functionName | allFunctionNames | Hex | undefined }\n> &\n  UnionEvaluate<\n    readonly [] extends allArgs\n      ? { args?: allArgs | undefined }\n      : { args: allArgs }\n  > &\n  (hasFunctions extends true ? unknown : never)\n\nexport type EncodeFunctionDataReturnType = Hex\n\nexport type EncodeFunctionDataErrorType =\n  | AbiFunctionNotFoundErrorType\n  | ConcatHexErrorType\n  | EncodeAbiParametersErrorType\n  | FormatAbiItemErrorType\n  | GetAbiItemErrorType\n  | ToFunctionSelectorErrorType\n  | ErrorType\n\nexport function encodeFunctionData<\n  const abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi> | undefined = undefined,\n>(\n  parameters: EncodeFunctionDataParameters<abi, functionName>,\n): EncodeFunctionDataReturnType {\n  const { args } = parameters as EncodeFunctionDataParameters\n\n  const { abi, functionName } = (() => {\n    if (\n      parameters.abi.length === 1 &&\n      parameters.functionName?.startsWith('0x')\n    )\n      return parameters as { abi: Abi; functionName: Hex }\n    return prepareEncodeFunctionData(parameters)\n  })()\n\n  const abiItem = abi[0]\n  const signature = functionName\n\n  const data =\n    'inputs' in abiItem && abiItem.inputs\n      ? encodeAbiParameters(abiItem.inputs, args ?? [])\n      : undefined\n  return concatHex([signature, data ?? '0x'])\n}\n"],"mappings":";;;;;AAsEAA,OAAA,CAAAC,kBAAA,GAAAA,kBAAA;AA/DA,MAAAC,WAAA,GAAAC,OAAA;AAMA,MAAAC,wBAAA,GAAAD,OAAA;AAMA,MAAAE,8BAAA,GAAAF,OAAA;AAmDA,SAAgBF,kBAAkBA,CAIhCK,UAA2D;EAE3D,MAAM;IAAEC;EAAI,CAAE,GAAGD,UAA0C;EAE3D,MAAM;IAAEE,GAAG;IAAEC;EAAY,CAAE,GAAG,CAAC,MAAK;IAClC,IACEH,UAAU,CAACE,GAAG,CAACE,MAAM,KAAK,CAAC,IAC3BJ,UAAU,CAACG,YAAY,EAAEE,UAAU,CAAC,IAAI,CAAC,EAEzC,OAAOL,UAA6C;IACtD,OAAO,IAAAD,8BAAA,CAAAO,yBAAyB,EAACN,UAAU,CAAC;EAC9C,CAAC,EAAC,CAAE;EAEJ,MAAMO,OAAO,GAAGL,GAAG,CAAC,CAAC,CAAC;EACtB,MAAMM,SAAS,GAAGL,YAAY;EAE9B,MAAMM,IAAI,GACR,QAAQ,IAAIF,OAAO,IAAIA,OAAO,CAACG,MAAM,GACjC,IAAAZ,wBAAA,CAAAa,mBAAmB,EAACJ,OAAO,CAACG,MAAM,EAAET,IAAI,IAAI,EAAE,CAAC,GAC/CW,SAAS;EACf,OAAO,IAAAhB,WAAA,CAAAiB,SAAS,EAAC,CAACL,SAAS,EAAEC,IAAI,IAAI,IAAI,CAAC,CAAC;AAC7C","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}