{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.estimateGas = estimateGas;\nconst parseAccount_js_1 = require(\"../../accounts/utils/parseAccount.js\");\nconst base_js_1 = require(\"../../errors/base.js\");\nconst recoverAuthorizationAddress_js_1 = require(\"../../utils/authorization/recoverAuthorizationAddress.js\");\nconst toHex_js_1 = require(\"../../utils/encoding/toHex.js\");\nconst getEstimateGasError_js_1 = require(\"../../utils/errors/getEstimateGasError.js\");\nconst extract_js_1 = require(\"../../utils/formatters/extract.js\");\nconst transactionRequest_js_1 = require(\"../../utils/formatters/transactionRequest.js\");\nconst stateOverride_js_1 = require(\"../../utils/stateOverride.js\");\nconst assertRequest_js_1 = require(\"../../utils/transaction/assertRequest.js\");\nconst prepareTransactionRequest_js_1 = require(\"../wallet/prepareTransactionRequest.js\");\nconst getBalance_js_1 = require(\"./getBalance.js\");\nasync function estimateGas(client, args) {\n  const {\n    account: account_ = client.account\n  } = args;\n  const account = account_ ? (0, parseAccount_js_1.parseAccount)(account_) : undefined;\n  try {\n    const {\n      accessList,\n      authorizationList,\n      blobs,\n      blobVersionedHashes,\n      blockNumber,\n      blockTag,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerBlobGas,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      value,\n      stateOverride,\n      ...rest\n    } = await (0, prepareTransactionRequest_js_1.prepareTransactionRequest)(client, {\n      ...args,\n      parameters: account?.type === 'local' ? undefined : ['blobVersionedHashes']\n    });\n    const blockNumberHex = typeof blockNumber === 'bigint' ? (0, toHex_js_1.numberToHex)(blockNumber) : undefined;\n    const block = blockNumberHex || blockTag;\n    const rpcStateOverride = (0, stateOverride_js_1.serializeStateOverride)(stateOverride);\n    const to = await (async () => {\n      if (rest.to) return rest.to;\n      if (authorizationList && authorizationList.length > 0) return await (0, recoverAuthorizationAddress_js_1.recoverAuthorizationAddress)({\n        authorization: authorizationList[0]\n      }).catch(() => {\n        throw new base_js_1.BaseError('`to` is required. Could not infer from `authorizationList`');\n      });\n      return undefined;\n    })();\n    (0, assertRequest_js_1.assertRequest)(args);\n    const chainFormat = client.chain?.formatters?.transactionRequest?.format;\n    const format = chainFormat || transactionRequest_js_1.formatTransactionRequest;\n    const request = format({\n      ...(0, extract_js_1.extract)(rest, {\n        format: chainFormat\n      }),\n      from: account?.address,\n      accessList,\n      authorizationList,\n      blobs,\n      blobVersionedHashes,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerBlobGas,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value\n    });\n    function estimateGas_rpc(parameters) {\n      const {\n        block,\n        request,\n        rpcStateOverride\n      } = parameters;\n      return client.request({\n        method: 'eth_estimateGas',\n        params: rpcStateOverride ? [request, block ?? client.experimental_blockTag ?? 'latest', rpcStateOverride] : block ? [request, block] : [request]\n      });\n    }\n    let estimate = BigInt(await estimateGas_rpc({\n      block,\n      request,\n      rpcStateOverride\n    }));\n    if (authorizationList) {\n      const value = await (0, getBalance_js_1.getBalance)(client, {\n        address: request.from\n      });\n      const estimates = await Promise.all(authorizationList.map(async authorization => {\n        const {\n          address\n        } = authorization;\n        const estimate = await estimateGas_rpc({\n          block,\n          request: {\n            authorizationList: undefined,\n            data,\n            from: account?.address,\n            to: address,\n            value: (0, toHex_js_1.numberToHex)(value)\n          },\n          rpcStateOverride\n        }).catch(() => 100000n);\n        return 2n * BigInt(estimate);\n      }));\n      estimate += estimates.reduce((acc, curr) => acc + curr, 0n);\n    }\n    return estimate;\n  } catch (err) {\n    throw (0, getEstimateGasError_js_1.getEstimateGasError)(err, {\n      ...args,\n      account,\n      chain: client.chain\n    });\n  }\n}","map":{"version":3,"names":["exports","estimateGas","parseAccount_js_1","require","base_js_1","recoverAuthorizationAddress_js_1","toHex_js_1","getEstimateGasError_js_1","extract_js_1","transactionRequest_js_1","stateOverride_js_1","assertRequest_js_1","prepareTransactionRequest_js_1","getBalance_js_1","client","args","account","account_","parseAccount","undefined","accessList","authorizationList","blobs","blobVersionedHashes","blockNumber","blockTag","data","gas","gasPrice","maxFeePerBlobGas","maxFeePerGas","maxPriorityFeePerGas","nonce","value","stateOverride","rest","prepareTransactionRequest","parameters","type","blockNumberHex","numberToHex","block","rpcStateOverride","serializeStateOverride","to","length","recoverAuthorizationAddress","authorization","catch","BaseError","assertRequest","chainFormat","chain","formatters","transactionRequest","format","formatTransactionRequest","request","extract","from","address","estimateGas_rpc","method","params","experimental_blockTag","estimate","BigInt","getBalance","estimates","Promise","all","map","reduce","acc","curr","err","getEstimateGasError"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/viem/actions/public/estimateGas.ts"],"sourcesContent":["import type { Address } from 'abitype'\nimport type { Account } from '../../accounts/types.js'\nimport {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../../accounts/utils/parseAccount.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { BaseError } from '../../errors/base.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { StateOverride } from '../../types/stateOverride.js'\nimport type { TransactionRequest } from '../../types/transaction.js'\nimport type { UnionOmit } from '../../types/utils.js'\nimport {\n  type RecoverAuthorizationAddressErrorType,\n  recoverAuthorizationAddress,\n} from '../../utils/authorization/recoverAuthorizationAddress.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\nimport {\n  type GetEstimateGasErrorReturnType,\n  getEstimateGasError,\n} from '../../utils/errors/getEstimateGasError.js'\nimport { extract } from '../../utils/formatters/extract.js'\nimport {\n  type FormattedTransactionRequest,\n  formatTransactionRequest,\n} from '../../utils/formatters/transactionRequest.js'\nimport { serializeStateOverride } from '../../utils/stateOverride.js'\nimport {\n  type AssertRequestErrorType,\n  type AssertRequestParameters,\n  assertRequest,\n} from '../../utils/transaction/assertRequest.js'\nimport {\n  type PrepareTransactionRequestParameters,\n  prepareTransactionRequest,\n} from '../wallet/prepareTransactionRequest.js'\nimport { getBalance } from './getBalance.js'\n\nexport type EstimateGasParameters<\n  chain extends Chain | undefined = Chain | undefined,\n> = UnionOmit<FormattedEstimateGas<chain>, 'from'> & {\n  account?: Account | Address | undefined\n  stateOverride?: StateOverride | undefined\n} & (\n    | {\n        /** The balance of the account at a block number. */\n        blockNumber?: bigint | undefined\n        blockTag?: undefined\n      }\n    | {\n        blockNumber?: undefined\n        /**\n         * The balance of the account at a block tag.\n         * @default 'latest'\n         */\n        blockTag?: BlockTag | undefined\n      }\n  )\ntype FormattedEstimateGas<chain extends Chain | undefined = Chain | undefined> =\n  FormattedTransactionRequest<chain>\n\nexport type EstimateGasReturnType = bigint\n\nexport type EstimateGasErrorType = GetEstimateGasErrorReturnType<\n  | ParseAccountErrorType\n  | NumberToHexErrorType\n  | RequestErrorType\n  | RecoverAuthorizationAddressErrorType\n  | AssertRequestErrorType\n>\n\n/**\n * Estimates the gas necessary to complete a transaction without submitting it to the network.\n *\n * - Docs: https://viem.sh/docs/actions/public/estimateGas\n * - JSON-RPC Methods: [`eth_estimateGas`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_estimategas)\n *\n * @param client - Client to use\n * @param parameters - {@link EstimateGasParameters}\n * @returns The gas estimate (in gas units). {@link EstimateGasReturnType}\n *\n * @example\n * import { createPublicClient, http, parseEther } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { estimateGas } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const gasEstimate = await estimateGas(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: parseEther('1'),\n * })\n */\nexport async function estimateGas<\n  chain extends Chain | undefined,\n  account extends Account | undefined = undefined,\n>(\n  client: Client<Transport, chain, account>,\n  args: EstimateGasParameters<chain>,\n): Promise<EstimateGasReturnType> {\n  const { account: account_ = client.account } = args\n  const account = account_ ? parseAccount(account_) : undefined\n\n  try {\n    const {\n      accessList,\n      authorizationList,\n      blobs,\n      blobVersionedHashes,\n      blockNumber,\n      blockTag,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerBlobGas,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      value,\n      stateOverride,\n      ...rest\n    } = (await prepareTransactionRequest(client, {\n      ...args,\n      parameters:\n        // Some RPC Providers do not compute versioned hashes from blobs. We will need\n        // to compute them.\n        account?.type === 'local' ? undefined : ['blobVersionedHashes'],\n    } as PrepareTransactionRequestParameters)) as EstimateGasParameters\n\n    const blockNumberHex =\n      typeof blockNumber === 'bigint' ? numberToHex(blockNumber) : undefined\n    const block = blockNumberHex || blockTag\n\n    const rpcStateOverride = serializeStateOverride(stateOverride)\n\n    const to = await (async () => {\n      // If `to` exists on the parameters, use that.\n      if (rest.to) return rest.to\n\n      // If no `to` exists, and we are sending a EIP-7702 transaction, use the\n      // address of the first authorization in the list.\n      if (authorizationList && authorizationList.length > 0)\n        return await recoverAuthorizationAddress({\n          authorization: authorizationList[0],\n        }).catch(() => {\n          throw new BaseError(\n            '`to` is required. Could not infer from `authorizationList`',\n          )\n        })\n\n      // Otherwise, we are sending a deployment transaction.\n      return undefined\n    })()\n\n    assertRequest(args as AssertRequestParameters)\n\n    const chainFormat = client.chain?.formatters?.transactionRequest?.format\n    const format = chainFormat || formatTransactionRequest\n\n    const request = format({\n      // Pick out extra data that might exist on the chain's transaction request type.\n      ...extract(rest, { format: chainFormat }),\n      from: account?.address,\n      accessList,\n      authorizationList,\n      blobs,\n      blobVersionedHashes,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerBlobGas,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value,\n    } as TransactionRequest)\n\n    function estimateGas_rpc(parameters: {\n      block: any\n      request: any\n      rpcStateOverride: any\n    }) {\n      const { block, request, rpcStateOverride } = parameters\n      return client.request({\n        method: 'eth_estimateGas',\n        params: rpcStateOverride\n          ? [\n              request,\n              block ?? client.experimental_blockTag ?? 'latest',\n              rpcStateOverride,\n            ]\n          : block\n            ? [request, block]\n            : [request],\n      })\n    }\n\n    let estimate = BigInt(\n      await estimateGas_rpc({ block, request, rpcStateOverride }),\n    )\n\n    // TODO(7702): Remove this once https://github.com/ethereum/execution-apis/issues/561 is resolved.\n    //       Authorization list schema is not implemented on JSON-RPC spec yet, so we need to\n    //       manually estimate the gas.\n    if (authorizationList) {\n      const value = await getBalance(client, { address: request.from })\n      const estimates = await Promise.all(\n        authorizationList.map(async (authorization) => {\n          const { address } = authorization\n          const estimate = await estimateGas_rpc({\n            block,\n            request: {\n              authorizationList: undefined,\n              data,\n              from: account?.address,\n              to: address,\n              value: numberToHex(value),\n            },\n            rpcStateOverride,\n          }).catch(() => 100_000n)\n          return 2n * BigInt(estimate)\n        }),\n      )\n      estimate += estimates.reduce((acc, curr) => acc + curr, 0n)\n    }\n\n    return estimate\n  } catch (err) {\n    throw getEstimateGasError(err as BaseError, {\n      ...args,\n      account,\n      chain: client.chain,\n    })\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}