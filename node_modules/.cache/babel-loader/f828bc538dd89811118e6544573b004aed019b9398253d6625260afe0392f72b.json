{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.eip1559NetworkCache = exports.defaultParameters = void 0;\nexports.prepareTransactionRequest = prepareTransactionRequest;\nconst parseAccount_js_1 = require(\"../../accounts/utils/parseAccount.js\");\nconst estimateFeesPerGas_js_1 = require(\"../../actions/public/estimateFeesPerGas.js\");\nconst estimateGas_js_1 = require(\"../../actions/public/estimateGas.js\");\nconst getBlock_js_1 = require(\"../../actions/public/getBlock.js\");\nconst getTransactionCount_js_1 = require(\"../../actions/public/getTransactionCount.js\");\nconst fee_js_1 = require(\"../../errors/fee.js\");\nconst blobsToCommitments_js_1 = require(\"../../utils/blob/blobsToCommitments.js\");\nconst blobsToProofs_js_1 = require(\"../../utils/blob/blobsToProofs.js\");\nconst commitmentsToVersionedHashes_js_1 = require(\"../../utils/blob/commitmentsToVersionedHashes.js\");\nconst toBlobSidecars_js_1 = require(\"../../utils/blob/toBlobSidecars.js\");\nconst getAction_js_1 = require(\"../../utils/getAction.js\");\nconst assertRequest_js_1 = require(\"../../utils/transaction/assertRequest.js\");\nconst getTransactionType_js_1 = require(\"../../utils/transaction/getTransactionType.js\");\nconst getChainId_js_1 = require(\"../public/getChainId.js\");\nexports.defaultParameters = ['blobVersionedHashes', 'chainId', 'fees', 'gas', 'nonce', 'type'];\nexports.eip1559NetworkCache = new Map();\nasync function prepareTransactionRequest(client, args) {\n  const {\n    account: account_ = client.account,\n    blobs,\n    chain,\n    gas,\n    kzg,\n    nonce,\n    nonceManager,\n    parameters = exports.defaultParameters,\n    type\n  } = args;\n  const account = account_ ? (0, parseAccount_js_1.parseAccount)(account_) : account_;\n  const request = {\n    ...args,\n    ...(account ? {\n      from: account?.address\n    } : {})\n  };\n  let block;\n  async function getBlock() {\n    if (block) return block;\n    block = await (0, getAction_js_1.getAction)(client, getBlock_js_1.getBlock, 'getBlock')({\n      blockTag: 'latest'\n    });\n    return block;\n  }\n  let chainId;\n  async function getChainId() {\n    if (chainId) return chainId;\n    if (chain) return chain.id;\n    if (typeof args.chainId !== 'undefined') return args.chainId;\n    const chainId_ = await (0, getAction_js_1.getAction)(client, getChainId_js_1.getChainId, 'getChainId')({});\n    chainId = chainId_;\n    return chainId;\n  }\n  if (parameters.includes('nonce') && typeof nonce === 'undefined' && account) {\n    if (nonceManager) {\n      const chainId = await getChainId();\n      request.nonce = await nonceManager.consume({\n        address: account.address,\n        chainId,\n        client\n      });\n    } else {\n      request.nonce = await (0, getAction_js_1.getAction)(client, getTransactionCount_js_1.getTransactionCount, 'getTransactionCount')({\n        address: account.address,\n        blockTag: 'pending'\n      });\n    }\n  }\n  if ((parameters.includes('blobVersionedHashes') || parameters.includes('sidecars')) && blobs && kzg) {\n    const commitments = (0, blobsToCommitments_js_1.blobsToCommitments)({\n      blobs,\n      kzg\n    });\n    if (parameters.includes('blobVersionedHashes')) {\n      const versionedHashes = (0, commitmentsToVersionedHashes_js_1.commitmentsToVersionedHashes)({\n        commitments,\n        to: 'hex'\n      });\n      request.blobVersionedHashes = versionedHashes;\n    }\n    if (parameters.includes('sidecars')) {\n      const proofs = (0, blobsToProofs_js_1.blobsToProofs)({\n        blobs,\n        commitments,\n        kzg\n      });\n      const sidecars = (0, toBlobSidecars_js_1.toBlobSidecars)({\n        blobs,\n        commitments,\n        proofs,\n        to: 'hex'\n      });\n      request.sidecars = sidecars;\n    }\n  }\n  if (parameters.includes('chainId')) request.chainId = await getChainId();\n  if ((parameters.includes('fees') || parameters.includes('type')) && typeof type === 'undefined') {\n    try {\n      request.type = (0, getTransactionType_js_1.getTransactionType)(request);\n    } catch {\n      let isEip1559Network = exports.eip1559NetworkCache.get(client.uid);\n      if (typeof isEip1559Network === 'undefined') {\n        const block = await getBlock();\n        isEip1559Network = typeof block?.baseFeePerGas === 'bigint';\n        exports.eip1559NetworkCache.set(client.uid, isEip1559Network);\n      }\n      request.type = isEip1559Network ? 'eip1559' : 'legacy';\n    }\n  }\n  if (parameters.includes('fees')) {\n    if (request.type !== 'legacy' && request.type !== 'eip2930') {\n      if (typeof request.maxFeePerGas === 'undefined' || typeof request.maxPriorityFeePerGas === 'undefined') {\n        const block = await getBlock();\n        const {\n          maxFeePerGas,\n          maxPriorityFeePerGas\n        } = await (0, estimateFeesPerGas_js_1.internal_estimateFeesPerGas)(client, {\n          block: block,\n          chain,\n          request: request\n        });\n        if (typeof args.maxPriorityFeePerGas === 'undefined' && args.maxFeePerGas && args.maxFeePerGas < maxPriorityFeePerGas) throw new fee_js_1.MaxFeePerGasTooLowError({\n          maxPriorityFeePerGas\n        });\n        request.maxPriorityFeePerGas = maxPriorityFeePerGas;\n        request.maxFeePerGas = maxFeePerGas;\n      }\n    } else {\n      if (typeof args.maxFeePerGas !== 'undefined' || typeof args.maxPriorityFeePerGas !== 'undefined') throw new fee_js_1.Eip1559FeesNotSupportedError();\n      if (typeof args.gasPrice === 'undefined') {\n        const block = await getBlock();\n        const {\n          gasPrice: gasPrice_\n        } = await (0, estimateFeesPerGas_js_1.internal_estimateFeesPerGas)(client, {\n          block: block,\n          chain,\n          request: request,\n          type: 'legacy'\n        });\n        request.gasPrice = gasPrice_;\n      }\n    }\n  }\n  if (parameters.includes('gas') && typeof gas === 'undefined') request.gas = await (0, getAction_js_1.getAction)(client, estimateGas_js_1.estimateGas, 'estimateGas')({\n    ...request,\n    account: account ? {\n      address: account.address,\n      type: 'json-rpc'\n    } : account\n  });\n  (0, assertRequest_js_1.assertRequest)(request);\n  delete request.parameters;\n  return request;\n}","map":{"version":3,"names":["exports","prepareTransactionRequest","parseAccount_js_1","require","estimateFeesPerGas_js_1","estimateGas_js_1","getBlock_js_1","getTransactionCount_js_1","fee_js_1","blobsToCommitments_js_1","blobsToProofs_js_1","commitmentsToVersionedHashes_js_1","toBlobSidecars_js_1","getAction_js_1","assertRequest_js_1","getTransactionType_js_1","getChainId_js_1","defaultParameters","eip1559NetworkCache","Map","client","args","account","account_","blobs","chain","gas","kzg","nonce","nonceManager","parameters","type","parseAccount","request","from","address","block","getBlock","getAction","blockTag","chainId","getChainId","id","chainId_","includes","consume","getTransactionCount","commitments","blobsToCommitments","versionedHashes","commitmentsToVersionedHashes","to","blobVersionedHashes","proofs","blobsToProofs","sidecars","toBlobSidecars","getTransactionType","isEip1559Network","get","uid","baseFeePerGas","set","maxFeePerGas","maxPriorityFeePerGas","internal_estimateFeesPerGas","MaxFeePerGasTooLowError","Eip1559FeesNotSupportedError","gasPrice","gasPrice_","estimateGas","assertRequest"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/viem/actions/wallet/prepareTransactionRequest.ts"],"sourcesContent":["import type { Address } from 'abitype'\nimport type { Account } from '../../accounts/types.js'\nimport {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../../accounts/utils/parseAccount.js'\nimport {\n  type EstimateFeesPerGasErrorType,\n  internal_estimateFeesPerGas,\n} from '../../actions/public/estimateFeesPerGas.js'\nimport {\n  type EstimateGasErrorType,\n  type EstimateGasParameters,\n  estimateGas,\n} from '../../actions/public/estimateGas.js'\nimport {\n  type GetBlockErrorType,\n  getBlock as getBlock_,\n} from '../../actions/public/getBlock.js'\nimport {\n  type GetTransactionCountErrorType,\n  getTransactionCount,\n} from '../../actions/public/getTransactionCount.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { AccountNotFoundErrorType } from '../../errors/account.js'\nimport {\n  Eip1559FeesNotSupportedError,\n  MaxFeePerGasTooLowError,\n} from '../../errors/fee.js'\nimport type { DeriveAccount, GetAccountParameter } from '../../types/account.js'\nimport type { Block } from '../../types/block.js'\nimport type { Chain, DeriveChain } from '../../types/chain.js'\nimport type { GetChainParameter } from '../../types/chain.js'\nimport type { GetTransactionRequestKzgParameter } from '../../types/kzg.js'\nimport type {\n  TransactionRequest,\n  TransactionRequestEIP1559,\n  TransactionRequestEIP2930,\n  TransactionRequestEIP4844,\n  TransactionRequestEIP7702,\n  TransactionRequestLegacy,\n  TransactionSerializable,\n} from '../../types/transaction.js'\nimport type {\n  ExactPartial,\n  IsNever,\n  Prettify,\n  UnionOmit,\n  UnionRequiredBy,\n} from '../../types/utils.js'\nimport { blobsToCommitments } from '../../utils/blob/blobsToCommitments.js'\nimport { blobsToProofs } from '../../utils/blob/blobsToProofs.js'\nimport { commitmentsToVersionedHashes } from '../../utils/blob/commitmentsToVersionedHashes.js'\nimport { toBlobSidecars } from '../../utils/blob/toBlobSidecars.js'\nimport type { FormattedTransactionRequest } from '../../utils/formatters/transactionRequest.js'\nimport { getAction } from '../../utils/getAction.js'\nimport type { NonceManager } from '../../utils/nonceManager.js'\nimport {\n  type AssertRequestErrorType,\n  type AssertRequestParameters,\n  assertRequest,\n} from '../../utils/transaction/assertRequest.js'\nimport {\n  type GetTransactionType,\n  getTransactionType,\n} from '../../utils/transaction/getTransactionType.js'\nimport { getChainId as getChainId_ } from '../public/getChainId.js'\n\nexport const defaultParameters = [\n  'blobVersionedHashes',\n  'chainId',\n  'fees',\n  'gas',\n  'nonce',\n  'type',\n] as const\n\n/** @internal */\nexport const eip1559NetworkCache = /*#__PURE__*/ new Map<string, boolean>()\n\nexport type PrepareTransactionRequestParameterType =\n  | 'blobVersionedHashes'\n  | 'chainId'\n  | 'fees'\n  | 'gas'\n  | 'nonce'\n  | 'sidecars'\n  | 'type'\ntype ParameterTypeToParameters<\n  parameterType extends PrepareTransactionRequestParameterType,\n> = parameterType extends 'fees'\n  ? 'maxFeePerGas' | 'maxPriorityFeePerGas' | 'gasPrice'\n  : parameterType\n\nexport type PrepareTransactionRequestRequest<\n  chain extends Chain | undefined = Chain | undefined,\n  chainOverride extends Chain | undefined = Chain | undefined,\n  ///\n  _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>,\n> = UnionOmit<FormattedTransactionRequest<_derivedChain>, 'from'> &\n  GetTransactionRequestKzgParameter & {\n    /**\n     * Nonce manager to use for the transaction request.\n     */\n    nonceManager?: NonceManager | undefined\n    /**\n     * Parameters to prepare for the transaction request.\n     *\n     * @default ['blobVersionedHashes', 'chainId', 'fees', 'gas', 'nonce', 'type']\n     */\n    parameters?: readonly PrepareTransactionRequestParameterType[] | undefined\n  }\n\nexport type PrepareTransactionRequestParameters<\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n  chainOverride extends Chain | undefined = Chain | undefined,\n  accountOverride extends Account | Address | undefined =\n    | Account\n    | Address\n    | undefined,\n  request extends PrepareTransactionRequestRequest<\n    chain,\n    chainOverride\n  > = PrepareTransactionRequestRequest<chain, chainOverride>,\n> = request &\n  GetAccountParameter<account, accountOverride, false, true> &\n  GetChainParameter<chain, chainOverride> &\n  GetTransactionRequestKzgParameter<request> & { chainId?: number | undefined }\n\nexport type PrepareTransactionRequestReturnType<\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n  chainOverride extends Chain | undefined = Chain | undefined,\n  accountOverride extends Account | Address | undefined =\n    | Account\n    | Address\n    | undefined,\n  request extends PrepareTransactionRequestRequest<\n    chain,\n    chainOverride\n  > = PrepareTransactionRequestRequest<chain, chainOverride>,\n  ///\n  _derivedAccount extends Account | Address | undefined = DeriveAccount<\n    account,\n    accountOverride\n  >,\n  _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>,\n  _transactionType = request['type'] extends string | undefined\n    ? request['type']\n    : GetTransactionType<request> extends 'legacy'\n      ? unknown\n      : GetTransactionType<request>,\n  _transactionRequest extends TransactionRequest =\n    | (_transactionType extends 'legacy' ? TransactionRequestLegacy : never)\n    | (_transactionType extends 'eip1559' ? TransactionRequestEIP1559 : never)\n    | (_transactionType extends 'eip2930' ? TransactionRequestEIP2930 : never)\n    | (_transactionType extends 'eip4844' ? TransactionRequestEIP4844 : never)\n    | (_transactionType extends 'eip7702' ? TransactionRequestEIP7702 : never),\n> = Prettify<\n  UnionRequiredBy<\n    Extract<\n      UnionOmit<FormattedTransactionRequest<_derivedChain>, 'from'> &\n        (_derivedChain extends Chain\n          ? { chain: _derivedChain }\n          : { chain?: undefined }) &\n        (_derivedAccount extends Account\n          ? { account: _derivedAccount; from: Address }\n          : { account?: undefined; from?: undefined }),\n      IsNever<_transactionRequest> extends true\n        ? unknown\n        : ExactPartial<_transactionRequest>\n    > & { chainId?: number | undefined },\n    ParameterTypeToParameters<\n      request['parameters'] extends readonly PrepareTransactionRequestParameterType[]\n        ? request['parameters'][number]\n        : (typeof defaultParameters)[number]\n    >\n  > &\n    (unknown extends request['kzg'] ? {} : Pick<request, 'kzg'>)\n>\n\nexport type PrepareTransactionRequestErrorType =\n  | AccountNotFoundErrorType\n  | AssertRequestErrorType\n  | ParseAccountErrorType\n  | GetBlockErrorType\n  | GetTransactionCountErrorType\n  | EstimateGasErrorType\n  | EstimateFeesPerGasErrorType\n\n/**\n * Prepares a transaction request for signing.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/prepareTransactionRequest\n *\n * @param args - {@link PrepareTransactionRequestParameters}\n * @returns The transaction request. {@link PrepareTransactionRequestReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { prepareTransactionRequest } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const request = await prepareTransactionRequest(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: 1n,\n * })\n *\n * @example\n * // Account Hoisting\n * import { createWalletClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { prepareTransactionRequest } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0x…'),\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const request = await prepareTransactionRequest(client, {\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: 1n,\n * })\n */\nexport async function prepareTransactionRequest<\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n  const request extends PrepareTransactionRequestRequest<chain, chainOverride>,\n  accountOverride extends Account | Address | undefined = undefined,\n  chainOverride extends Chain | undefined = undefined,\n>(\n  client: Client<Transport, chain, account>,\n  args: PrepareTransactionRequestParameters<\n    chain,\n    account,\n    chainOverride,\n    accountOverride,\n    request\n  >,\n): Promise<\n  PrepareTransactionRequestReturnType<\n    chain,\n    account,\n    chainOverride,\n    accountOverride,\n    request\n  >\n> {\n  const {\n    account: account_ = client.account,\n    blobs,\n    chain,\n    gas,\n    kzg,\n    nonce,\n    nonceManager,\n    parameters = defaultParameters,\n    type,\n  } = args\n  const account = account_ ? parseAccount(account_) : account_\n\n  const request = { ...args, ...(account ? { from: account?.address } : {}) }\n\n  let block: Block | undefined\n  async function getBlock(): Promise<Block> {\n    if (block) return block\n    block = await getAction(\n      client,\n      getBlock_,\n      'getBlock',\n    )({ blockTag: 'latest' })\n    return block\n  }\n\n  let chainId: number | undefined\n  async function getChainId(): Promise<number> {\n    if (chainId) return chainId\n    if (chain) return chain.id\n    if (typeof args.chainId !== 'undefined') return args.chainId\n    const chainId_ = await getAction(client, getChainId_, 'getChainId')({})\n    chainId = chainId_\n    return chainId\n  }\n\n  if (parameters.includes('nonce') && typeof nonce === 'undefined' && account) {\n    if (nonceManager) {\n      const chainId = await getChainId()\n      request.nonce = await nonceManager.consume({\n        address: account.address,\n        chainId,\n        client,\n      })\n    } else {\n      request.nonce = await getAction(\n        client,\n        getTransactionCount,\n        'getTransactionCount',\n      )({\n        address: account.address,\n        blockTag: 'pending',\n      })\n    }\n  }\n\n  if (\n    (parameters.includes('blobVersionedHashes') ||\n      parameters.includes('sidecars')) &&\n    blobs &&\n    kzg\n  ) {\n    const commitments = blobsToCommitments({ blobs, kzg })\n\n    if (parameters.includes('blobVersionedHashes')) {\n      const versionedHashes = commitmentsToVersionedHashes({\n        commitments,\n        to: 'hex',\n      })\n      request.blobVersionedHashes = versionedHashes\n    }\n    if (parameters.includes('sidecars')) {\n      const proofs = blobsToProofs({ blobs, commitments, kzg })\n      const sidecars = toBlobSidecars({\n        blobs,\n        commitments,\n        proofs,\n        to: 'hex',\n      })\n      request.sidecars = sidecars\n    }\n  }\n\n  if (parameters.includes('chainId')) request.chainId = await getChainId()\n\n  if (\n    (parameters.includes('fees') || parameters.includes('type')) &&\n    typeof type === 'undefined'\n  ) {\n    try {\n      request.type = getTransactionType(\n        request as TransactionSerializable,\n      ) as any\n    } catch {\n      let isEip1559Network = eip1559NetworkCache.get(client.uid)\n      if (typeof isEip1559Network === 'undefined') {\n        const block = await getBlock()\n        isEip1559Network = typeof block?.baseFeePerGas === 'bigint'\n        eip1559NetworkCache.set(client.uid, isEip1559Network)\n      }\n      request.type = isEip1559Network ? 'eip1559' : 'legacy'\n    }\n  }\n\n  if (parameters.includes('fees')) {\n    // TODO(4844): derive blob base fees once https://github.com/ethereum/execution-apis/pull/486 is merged.\n\n    if (request.type !== 'legacy' && request.type !== 'eip2930') {\n      // EIP-1559 fees\n      if (\n        typeof request.maxFeePerGas === 'undefined' ||\n        typeof request.maxPriorityFeePerGas === 'undefined'\n      ) {\n        const block = await getBlock()\n        const { maxFeePerGas, maxPriorityFeePerGas } =\n          await internal_estimateFeesPerGas(client, {\n            block: block as Block,\n            chain,\n            request: request as PrepareTransactionRequestParameters,\n          })\n\n        if (\n          typeof args.maxPriorityFeePerGas === 'undefined' &&\n          args.maxFeePerGas &&\n          args.maxFeePerGas < maxPriorityFeePerGas\n        )\n          throw new MaxFeePerGasTooLowError({\n            maxPriorityFeePerGas,\n          })\n\n        request.maxPriorityFeePerGas = maxPriorityFeePerGas\n        request.maxFeePerGas = maxFeePerGas\n      }\n    } else {\n      // Legacy fees\n      if (\n        typeof args.maxFeePerGas !== 'undefined' ||\n        typeof args.maxPriorityFeePerGas !== 'undefined'\n      )\n        throw new Eip1559FeesNotSupportedError()\n\n      if (typeof args.gasPrice === 'undefined') {\n        const block = await getBlock()\n        const { gasPrice: gasPrice_ } = await internal_estimateFeesPerGas(\n          client,\n          {\n            block: block as Block,\n            chain,\n            request: request as PrepareTransactionRequestParameters,\n            type: 'legacy',\n          },\n        )\n        request.gasPrice = gasPrice_\n      }\n    }\n  }\n\n  if (parameters.includes('gas') && typeof gas === 'undefined')\n    request.gas = await getAction(\n      client,\n      estimateGas,\n      'estimateGas',\n    )({\n      ...request,\n      account: account\n        ? { address: account.address, type: 'json-rpc' }\n        : account,\n    } as EstimateGasParameters)\n\n  assertRequest(request as AssertRequestParameters)\n\n  delete request.parameters\n\n  return request as any\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}