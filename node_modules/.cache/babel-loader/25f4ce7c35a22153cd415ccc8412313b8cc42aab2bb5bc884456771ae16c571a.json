{"ast":null,"code":"import { TelemetryController } from '../controllers/TelemetryController.js';\nexport class AppKitError extends Error {\n  constructor(message, category, originalError) {\n    super(message);\n    this.name = 'AppKitError';\n    this.category = category;\n    this.originalError = originalError;\n    // Ensure `this instanceof AppKitError` is true, important for custom errors.\n    Object.setPrototypeOf(this, AppKitError.prototype);\n    let isStackConstructedFromOriginal = false;\n    if (originalError instanceof Error && typeof originalError.stack === 'string' && originalError.stack) {\n      const originalErrorStack = originalError.stack;\n      /**\n       * Most error stacks start with \"ErrorName: ErrorMessage\\n...frames...\"\n       * We want to take the \"...frames...\" part.\n       */\n      const firstNewlineIndex = originalErrorStack.indexOf('\\n');\n      if (firstNewlineIndex > -1) {\n        const originalFrames = originalErrorStack.substring(firstNewlineIndex + 1);\n        this.stack = `${this.name}: ${this.message}\\n${originalFrames}`;\n        isStackConstructedFromOriginal = true;\n      }\n    }\n    if (!isStackConstructedFromOriginal) {\n      /**\n       * If stack was not (or could not be) constructed from originalError,\n       * generate a standard stack trace for this AppKitError instance.\n       * This will point to where `new AppKitError()` was called.\n       */\n      if (Error.captureStackTrace) {\n        Error.captureStackTrace(this, AppKitError);\n      } else if (!this.stack) {\n        /**\n         * Fallback for environments without Error.captureStackTrace.\n         * `super(message)` might have set a stack.\n         * If `this.stack` is still undefined/empty, provide a minimal one.\n         * Node.js and modern browsers typically set `this.stack` from `super(message)`.\n         */\n        this.stack = `${this.name}: ${this.message}`;\n      }\n    }\n  }\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction errorHandler(err, defaultCategory) {\n  const error = err instanceof AppKitError ? err : new AppKitError(err instanceof Error ? err.message : String(err), defaultCategory, err);\n  TelemetryController.sendError(error, error.category);\n  throw error;\n}\nexport function withErrorBoundary(controller, defaultCategory = 'INTERNAL_SDK_ERROR') {\n  const newController = {};\n  Object.keys(controller).forEach(key => {\n    const original = controller[key];\n    if (typeof original === 'function') {\n      let wrapped = original;\n      if (original.constructor.name === 'AsyncFunction') {\n        wrapped = async (...args) => {\n          try {\n            return await original(...args);\n          } catch (err) {\n            return errorHandler(err, defaultCategory);\n          }\n        };\n      } else {\n        wrapped = (...args) => {\n          try {\n            return original(...args);\n          } catch (err) {\n            return errorHandler(err, defaultCategory);\n          }\n        };\n      }\n      newController[key] = wrapped;\n    } else {\n      newController[key] = original;\n    }\n  });\n  return newController;\n}","map":{"version":3,"names":["TelemetryController","AppKitError","Error","constructor","message","category","originalError","name","Object","setPrototypeOf","prototype","isStackConstructedFromOriginal","stack","originalErrorStack","firstNewlineIndex","indexOf","originalFrames","substring","captureStackTrace","errorHandler","err","defaultCategory","error","String","sendError","withErrorBoundary","controller","newController","keys","forEach","key","original","wrapped","args"],"sources":["../../../../src/utils/withErrorBoundary.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}