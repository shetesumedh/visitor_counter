{"ast":null,"code":"// TODO(v3): Rename to `toLocalAccount` + add `source` property to define source (privateKey, mnemonic, hdKey, etc).\nimport { InvalidAddressError } from '../errors/address.js';\nimport { isAddress } from '../utils/address/isAddress.js';\n/**\n * @description Creates an Account from a custom signing implementation.\n *\n * @returns A Local Account.\n */\nexport function toAccount(source) {\n  if (typeof source === 'string') {\n    if (!isAddress(source, {\n      strict: false\n    })) throw new InvalidAddressError({\n      address: source\n    });\n    return {\n      address: source,\n      type: 'json-rpc'\n    };\n  }\n  if (!isAddress(source.address, {\n    strict: false\n  })) throw new InvalidAddressError({\n    address: source.address\n  });\n  return {\n    address: source.address,\n    nonceManager: source.nonceManager,\n    sign: source.sign,\n    signAuthorization: source.signAuthorization,\n    signMessage: source.signMessage,\n    signTransaction: source.signTransaction,\n    signTypedData: source.signTypedData,\n    source: 'custom',\n    type: 'local'\n  };\n}","map":{"version":3,"names":["InvalidAddressError","isAddress","toAccount","source","strict","address","type","nonceManager","sign","signAuthorization","signMessage","signTransaction","signTypedData"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/viem/accounts/toAccount.ts"],"sourcesContent":["// TODO(v3): Rename to `toLocalAccount` + add `source` property to define source (privateKey, mnemonic, hdKey, etc).\n\nimport type { Address } from 'abitype'\n\nimport {\n  InvalidAddressError,\n  type InvalidAddressErrorType,\n} from '../errors/address.js'\nimport {\n  type IsAddressErrorType,\n  isAddress,\n} from '../utils/address/isAddress.js'\n\nimport type { ErrorType } from '../errors/utils.js'\nimport type {\n  AccountSource,\n  CustomSource,\n  JsonRpcAccount,\n  LocalAccount,\n} from './types.js'\n\ntype GetAccountReturnType<accountSource extends AccountSource> =\n  | (accountSource extends Address ? JsonRpcAccount : never)\n  | (accountSource extends CustomSource ? LocalAccount : never)\n\nexport type ToAccountErrorType =\n  | InvalidAddressErrorType\n  | IsAddressErrorType\n  | ErrorType\n\n/**\n * @description Creates an Account from a custom signing implementation.\n *\n * @returns A Local Account.\n */\nexport function toAccount<accountSource extends AccountSource>(\n  source: accountSource,\n): GetAccountReturnType<accountSource> {\n  if (typeof source === 'string') {\n    if (!isAddress(source, { strict: false }))\n      throw new InvalidAddressError({ address: source })\n    return {\n      address: source,\n      type: 'json-rpc',\n    } as GetAccountReturnType<accountSource>\n  }\n\n  if (!isAddress(source.address, { strict: false }))\n    throw new InvalidAddressError({ address: source.address })\n  return {\n    address: source.address,\n    nonceManager: source.nonceManager,\n    sign: source.sign,\n    signAuthorization: source.signAuthorization,\n    signMessage: source.signMessage,\n    signTransaction: source.signTransaction,\n    signTypedData: source.signTypedData,\n    source: 'custom',\n    type: 'local',\n  } as GetAccountReturnType<accountSource>\n}\n"],"mappings":"AAAA;AAIA,SACEA,mBAAmB,QAEd,sBAAsB;AAC7B,SAEEC,SAAS,QACJ,+BAA+B;AAmBtC;;;;;AAKA,OAAM,SAAUC,SAASA,CACvBC,MAAqB;EAErB,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;IAC9B,IAAI,CAACF,SAAS,CAACE,MAAM,EAAE;MAAEC,MAAM,EAAE;IAAK,CAAE,CAAC,EACvC,MAAM,IAAIJ,mBAAmB,CAAC;MAAEK,OAAO,EAAEF;IAAM,CAAE,CAAC;IACpD,OAAO;MACLE,OAAO,EAAEF,MAAM;MACfG,IAAI,EAAE;KACgC;EAC1C;EAEA,IAAI,CAACL,SAAS,CAACE,MAAM,CAACE,OAAO,EAAE;IAAED,MAAM,EAAE;EAAK,CAAE,CAAC,EAC/C,MAAM,IAAIJ,mBAAmB,CAAC;IAAEK,OAAO,EAAEF,MAAM,CAACE;EAAO,CAAE,CAAC;EAC5D,OAAO;IACLA,OAAO,EAAEF,MAAM,CAACE,OAAO;IACvBE,YAAY,EAAEJ,MAAM,CAACI,YAAY;IACjCC,IAAI,EAAEL,MAAM,CAACK,IAAI;IACjBC,iBAAiB,EAAEN,MAAM,CAACM,iBAAiB;IAC3CC,WAAW,EAAEP,MAAM,CAACO,WAAW;IAC/BC,eAAe,EAAER,MAAM,CAACQ,eAAe;IACvCC,aAAa,EAAET,MAAM,CAACS,aAAa;IACnCT,MAAM,EAAE,QAAQ;IAChBG,IAAI,EAAE;GACgC;AAC1C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}