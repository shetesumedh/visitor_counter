{"ast":null,"code":"import { batchGatewayAbi } from '../../constants/abis.js';\nimport { solidityError } from '../../constants/solidity.js';\nimport { decodeFunctionData } from '../abi/decodeFunctionData.js';\nimport { encodeErrorResult } from '../abi/encodeErrorResult.js';\nimport { encodeFunctionResult } from '../abi/encodeFunctionResult.js';\nexport const localBatchGatewayUrl = 'x-batch-gateway:true';\nexport async function localBatchGatewayRequest(parameters) {\n  const {\n    data,\n    ccipRequest\n  } = parameters;\n  const {\n    args: [queries]\n  } = decodeFunctionData({\n    abi: batchGatewayAbi,\n    data\n  });\n  const failures = [];\n  const responses = [];\n  await Promise.all(queries.map(async (query, i) => {\n    try {\n      responses[i] = query.urls.includes(localBatchGatewayUrl) ? await localBatchGatewayRequest({\n        data: query.data,\n        ccipRequest\n      }) : await ccipRequest(query);\n      failures[i] = false;\n    } catch (err) {\n      failures[i] = true;\n      responses[i] = encodeError(err);\n    }\n  }));\n  return encodeFunctionResult({\n    abi: batchGatewayAbi,\n    functionName: 'query',\n    result: [failures, responses]\n  });\n}\nfunction encodeError(error) {\n  if (error.name === 'HttpRequestError' && error.status) return encodeErrorResult({\n    abi: batchGatewayAbi,\n    errorName: 'HttpError',\n    args: [error.status, error.shortMessage]\n  });\n  return encodeErrorResult({\n    abi: [solidityError],\n    errorName: 'Error',\n    args: ['shortMessage' in error ? error.shortMessage : error.message]\n  });\n}","map":{"version":3,"names":["batchGatewayAbi","solidityError","decodeFunctionData","encodeErrorResult","encodeFunctionResult","localBatchGatewayUrl","localBatchGatewayRequest","parameters","data","ccipRequest","args","queries","abi","failures","responses","Promise","all","map","query","i","urls","includes","err","encodeError","functionName","result","error","name","status","errorName","shortMessage","message"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/viem/utils/ens/localBatchGatewayRequest.ts"],"sourcesContent":["import { batchGatewayAbi } from '../../constants/abis.js'\nimport { solidityError } from '../../constants/solidity.js'\nimport type { Hex } from '../../types/misc.js'\nimport { decodeFunctionData } from '../abi/decodeFunctionData.js'\nimport { encodeErrorResult } from '../abi/encodeErrorResult.js'\nimport { encodeFunctionResult } from '../abi/encodeFunctionResult.js'\nimport type {\n  CcipRequestErrorType,\n  CcipRequestParameters,\n  CcipRequestReturnType,\n} from '../ccip.js'\n\nexport const localBatchGatewayUrl = 'x-batch-gateway:true'\n\nexport async function localBatchGatewayRequest(parameters: {\n  data: Hex\n  ccipRequest: (\n    parameters: CcipRequestParameters,\n  ) => Promise<CcipRequestReturnType>\n}): Promise<Hex> {\n  const { data, ccipRequest } = parameters\n\n  const {\n    args: [queries],\n  } = decodeFunctionData({ abi: batchGatewayAbi, data })\n\n  const failures: boolean[] = []\n  const responses: Hex[] = []\n  await Promise.all(\n    queries.map(async (query, i) => {\n      try {\n        responses[i] = query.urls.includes(localBatchGatewayUrl)\n          ? await localBatchGatewayRequest({ data: query.data, ccipRequest })\n          : await ccipRequest(query)\n        failures[i] = false\n      } catch (err) {\n        failures[i] = true\n        responses[i] = encodeError(err as CcipRequestErrorType)\n      }\n    }),\n  )\n\n  return encodeFunctionResult({\n    abi: batchGatewayAbi,\n    functionName: 'query',\n    result: [failures, responses],\n  })\n}\n\nfunction encodeError(error: CcipRequestErrorType): Hex {\n  if (error.name === 'HttpRequestError' && error.status)\n    return encodeErrorResult({\n      abi: batchGatewayAbi,\n      errorName: 'HttpError',\n      args: [error.status, error.shortMessage],\n    })\n  return encodeErrorResult({\n    abi: [solidityError],\n    errorName: 'Error',\n    args: ['shortMessage' in error ? error.shortMessage : error.message],\n  })\n}\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,yBAAyB;AACzD,SAASC,aAAa,QAAQ,6BAA6B;AAE3D,SAASC,kBAAkB,QAAQ,8BAA8B;AACjE,SAASC,iBAAiB,QAAQ,6BAA6B;AAC/D,SAASC,oBAAoB,QAAQ,gCAAgC;AAOrE,OAAO,MAAMC,oBAAoB,GAAG,sBAAsB;AAE1D,OAAO,eAAeC,wBAAwBA,CAACC,UAK9C;EACC,MAAM;IAAEC,IAAI;IAAEC;EAAW,CAAE,GAAGF,UAAU;EAExC,MAAM;IACJG,IAAI,EAAE,CAACC,OAAO;EAAC,CAChB,GAAGT,kBAAkB,CAAC;IAAEU,GAAG,EAAEZ,eAAe;IAAEQ;EAAI,CAAE,CAAC;EAEtD,MAAMK,QAAQ,GAAc,EAAE;EAC9B,MAAMC,SAAS,GAAU,EAAE;EAC3B,MAAMC,OAAO,CAACC,GAAG,CACfL,OAAO,CAACM,GAAG,CAAC,OAAOC,KAAK,EAAEC,CAAC,KAAI;IAC7B,IAAI;MACFL,SAAS,CAACK,CAAC,CAAC,GAAGD,KAAK,CAACE,IAAI,CAACC,QAAQ,CAAChB,oBAAoB,CAAC,GACpD,MAAMC,wBAAwB,CAAC;QAAEE,IAAI,EAAEU,KAAK,CAACV,IAAI;QAAEC;MAAW,CAAE,CAAC,GACjE,MAAMA,WAAW,CAACS,KAAK,CAAC;MAC5BL,QAAQ,CAACM,CAAC,CAAC,GAAG,KAAK;IACrB,CAAC,CAAC,OAAOG,GAAG,EAAE;MACZT,QAAQ,CAACM,CAAC,CAAC,GAAG,IAAI;MAClBL,SAAS,CAACK,CAAC,CAAC,GAAGI,WAAW,CAACD,GAA2B,CAAC;IACzD;EACF,CAAC,CAAC,CACH;EAED,OAAOlB,oBAAoB,CAAC;IAC1BQ,GAAG,EAAEZ,eAAe;IACpBwB,YAAY,EAAE,OAAO;IACrBC,MAAM,EAAE,CAACZ,QAAQ,EAAEC,SAAS;GAC7B,CAAC;AACJ;AAEA,SAASS,WAAWA,CAACG,KAA2B;EAC9C,IAAIA,KAAK,CAACC,IAAI,KAAK,kBAAkB,IAAID,KAAK,CAACE,MAAM,EACnD,OAAOzB,iBAAiB,CAAC;IACvBS,GAAG,EAAEZ,eAAe;IACpB6B,SAAS,EAAE,WAAW;IACtBnB,IAAI,EAAE,CAACgB,KAAK,CAACE,MAAM,EAAEF,KAAK,CAACI,YAAY;GACxC,CAAC;EACJ,OAAO3B,iBAAiB,CAAC;IACvBS,GAAG,EAAE,CAACX,aAAa,CAAC;IACpB4B,SAAS,EAAE,OAAO;IAClBnB,IAAI,EAAE,CAAC,cAAc,IAAIgB,KAAK,GAAGA,KAAK,CAACI,YAAY,GAAGJ,KAAK,CAACK,OAAO;GACpE,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}