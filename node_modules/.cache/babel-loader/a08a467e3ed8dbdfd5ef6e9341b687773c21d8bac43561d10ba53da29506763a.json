{"ast":null,"code":"import { BaseError } from '../../errors/base.js';\nexport class AccountNotDeployedError extends BaseError {\n  constructor({\n    cause\n  }) {\n    super('Smart Account is not deployed.', {\n      cause,\n      metaMessages: ['This could arise when:', '- No `factory`/`factoryData` or `initCode` properties are provided for Smart Account deployment.', '- An incorrect `sender` address is provided.'],\n      name: 'AccountNotDeployedError'\n    });\n  }\n}\nObject.defineProperty(AccountNotDeployedError, \"message\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: /aa20/\n});\nexport class ExecutionRevertedError extends BaseError {\n  constructor({\n    cause,\n    data,\n    message\n  } = {}) {\n    const reason = message?.replace('execution reverted: ', '')?.replace('execution reverted', '');\n    super(`Execution reverted ${reason ? `with reason: ${reason}` : 'for an unknown reason'}.`, {\n      cause,\n      name: 'ExecutionRevertedError'\n    });\n    Object.defineProperty(this, \"data\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.data = data;\n  }\n}\nObject.defineProperty(ExecutionRevertedError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32521\n});\nObject.defineProperty(ExecutionRevertedError, \"message\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: /execution reverted/\n});\nexport class FailedToSendToBeneficiaryError extends BaseError {\n  constructor({\n    cause\n  }) {\n    super('Failed to send funds to beneficiary.', {\n      cause,\n      name: 'FailedToSendToBeneficiaryError'\n    });\n  }\n}\nObject.defineProperty(FailedToSendToBeneficiaryError, \"message\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: /aa91/\n});\nexport class GasValuesOverflowError extends BaseError {\n  constructor({\n    cause\n  }) {\n    super('Gas value overflowed.', {\n      cause,\n      metaMessages: ['This could arise when:', '- one of the gas values exceeded 2**120 (uint120)'].filter(Boolean),\n      name: 'GasValuesOverflowError'\n    });\n  }\n}\nObject.defineProperty(GasValuesOverflowError, \"message\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: /aa94/\n});\nexport class HandleOpsOutOfGasError extends BaseError {\n  constructor({\n    cause\n  }) {\n    super('The `handleOps` function was called by the Bundler with a gas limit too low.', {\n      cause,\n      name: 'HandleOpsOutOfGasError'\n    });\n  }\n}\nObject.defineProperty(HandleOpsOutOfGasError, \"message\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: /aa95/\n});\nexport class InitCodeFailedError extends BaseError {\n  constructor({\n    cause,\n    factory,\n    factoryData,\n    initCode\n  }) {\n    super('Failed to simulate deployment for Smart Account.', {\n      cause,\n      metaMessages: ['This could arise when:', '- Invalid `factory`/`factoryData` or `initCode` properties are present', '- Smart Account deployment execution ran out of gas (low `verificationGasLimit` value)', '- Smart Account deployment execution reverted with an error\\n', factory && `factory: ${factory}`, factoryData && `factoryData: ${factoryData}`, initCode && `initCode: ${initCode}`].filter(Boolean),\n      name: 'InitCodeFailedError'\n    });\n  }\n}\nObject.defineProperty(InitCodeFailedError, \"message\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: /aa13/\n});\nexport class InitCodeMustCreateSenderError extends BaseError {\n  constructor({\n    cause,\n    factory,\n    factoryData,\n    initCode\n  }) {\n    super('Smart Account initialization implementation did not create an account.', {\n      cause,\n      metaMessages: ['This could arise when:', '- `factory`/`factoryData` or `initCode` properties are invalid', '- Smart Account initialization implementation is incorrect\\n', factory && `factory: ${factory}`, factoryData && `factoryData: ${factoryData}`, initCode && `initCode: ${initCode}`].filter(Boolean),\n      name: 'InitCodeMustCreateSenderError'\n    });\n  }\n}\nObject.defineProperty(InitCodeMustCreateSenderError, \"message\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: /aa15/\n});\nexport class InitCodeMustReturnSenderError extends BaseError {\n  constructor({\n    cause,\n    factory,\n    factoryData,\n    initCode,\n    sender\n  }) {\n    super('Smart Account initialization implementation does not return the expected sender.', {\n      cause,\n      metaMessages: ['This could arise when:', 'Smart Account initialization implementation does not return a sender address\\n', factory && `factory: ${factory}`, factoryData && `factoryData: ${factoryData}`, initCode && `initCode: ${initCode}`, sender && `sender: ${sender}`].filter(Boolean),\n      name: 'InitCodeMustReturnSenderError'\n    });\n  }\n}\nObject.defineProperty(InitCodeMustReturnSenderError, \"message\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: /aa14/\n});\nexport class InsufficientPrefundError extends BaseError {\n  constructor({\n    cause\n  }) {\n    super('Smart Account does not have sufficient funds to execute the User Operation.', {\n      cause,\n      metaMessages: ['This could arise when:', '- the Smart Account does not have sufficient funds to cover the required prefund, or', '- a Paymaster was not provided'].filter(Boolean),\n      name: 'InsufficientPrefundError'\n    });\n  }\n}\nObject.defineProperty(InsufficientPrefundError, \"message\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: /aa21/\n});\nexport class InternalCallOnlyError extends BaseError {\n  constructor({\n    cause\n  }) {\n    super('Bundler attempted to call an invalid function on the EntryPoint.', {\n      cause,\n      name: 'InternalCallOnlyError'\n    });\n  }\n}\nObject.defineProperty(InternalCallOnlyError, \"message\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: /aa92/\n});\nexport class InvalidAggregatorError extends BaseError {\n  constructor({\n    cause\n  }) {\n    super('Bundler used an invalid aggregator for handling aggregated User Operations.', {\n      cause,\n      name: 'InvalidAggregatorError'\n    });\n  }\n}\nObject.defineProperty(InvalidAggregatorError, \"message\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: /aa96/\n});\nexport class InvalidAccountNonceError extends BaseError {\n  constructor({\n    cause,\n    nonce\n  }) {\n    super('Invalid Smart Account nonce used for User Operation.', {\n      cause,\n      metaMessages: [nonce && `nonce: ${nonce}`].filter(Boolean),\n      name: 'InvalidAccountNonceError'\n    });\n  }\n}\nObject.defineProperty(InvalidAccountNonceError, \"message\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: /aa25/\n});\nexport class InvalidBeneficiaryError extends BaseError {\n  constructor({\n    cause\n  }) {\n    super('Bundler has not set a beneficiary address.', {\n      cause,\n      name: 'InvalidBeneficiaryError'\n    });\n  }\n}\nObject.defineProperty(InvalidBeneficiaryError, \"message\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: /aa90/\n});\nexport class InvalidFieldsError extends BaseError {\n  constructor({\n    cause\n  }) {\n    super('Invalid fields set on User Operation.', {\n      cause,\n      name: 'InvalidFieldsError'\n    });\n  }\n}\nObject.defineProperty(InvalidFieldsError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32602\n});\nexport class InvalidPaymasterAndDataError extends BaseError {\n  constructor({\n    cause,\n    paymasterAndData\n  }) {\n    super('Paymaster properties provided are invalid.', {\n      cause,\n      metaMessages: ['This could arise when:', '- the `paymasterAndData` property is of an incorrect length\\n', paymasterAndData && `paymasterAndData: ${paymasterAndData}`].filter(Boolean),\n      name: 'InvalidPaymasterAndDataError'\n    });\n  }\n}\nObject.defineProperty(InvalidPaymasterAndDataError, \"message\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: /aa93/\n});\nexport class PaymasterDepositTooLowError extends BaseError {\n  constructor({\n    cause\n  }) {\n    super('Paymaster deposit for the User Operation is too low.', {\n      cause,\n      metaMessages: ['This could arise when:', '- the Paymaster has deposited less than the expected amount via the `deposit` function'].filter(Boolean),\n      name: 'PaymasterDepositTooLowError'\n    });\n  }\n}\nObject.defineProperty(PaymasterDepositTooLowError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32508\n});\nObject.defineProperty(PaymasterDepositTooLowError, \"message\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: /aa31/\n});\nexport class PaymasterFunctionRevertedError extends BaseError {\n  constructor({\n    cause\n  }) {\n    super('The `validatePaymasterUserOp` function on the Paymaster reverted.', {\n      cause,\n      name: 'PaymasterFunctionRevertedError'\n    });\n  }\n}\nObject.defineProperty(PaymasterFunctionRevertedError, \"message\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: /aa33/\n});\nexport class PaymasterNotDeployedError extends BaseError {\n  constructor({\n    cause\n  }) {\n    super('The Paymaster contract has not been deployed.', {\n      cause,\n      name: 'PaymasterNotDeployedError'\n    });\n  }\n}\nObject.defineProperty(PaymasterNotDeployedError, \"message\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: /aa30/\n});\nexport class PaymasterRateLimitError extends BaseError {\n  constructor({\n    cause\n  }) {\n    super('UserOperation rejected because paymaster (or signature aggregator) is throttled/banned.', {\n      cause,\n      name: 'PaymasterRateLimitError'\n    });\n  }\n}\nObject.defineProperty(PaymasterRateLimitError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32504\n});\nexport class PaymasterStakeTooLowError extends BaseError {\n  constructor({\n    cause\n  }) {\n    super('UserOperation rejected because paymaster (or signature aggregator) is throttled/banned.', {\n      cause,\n      name: 'PaymasterStakeTooLowError'\n    });\n  }\n}\nObject.defineProperty(PaymasterStakeTooLowError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32505\n});\nexport class PaymasterPostOpFunctionRevertedError extends BaseError {\n  constructor({\n    cause\n  }) {\n    super('Paymaster `postOp` function reverted.', {\n      cause,\n      name: 'PaymasterPostOpFunctionRevertedError'\n    });\n  }\n}\nObject.defineProperty(PaymasterPostOpFunctionRevertedError, \"message\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: /aa50/\n});\nexport class SenderAlreadyConstructedError extends BaseError {\n  constructor({\n    cause,\n    factory,\n    factoryData,\n    initCode\n  }) {\n    super('Smart Account has already been deployed.', {\n      cause,\n      metaMessages: ['Remove the following properties and try again:', factory && '`factory`', factoryData && '`factoryData`', initCode && '`initCode`'].filter(Boolean),\n      name: 'SenderAlreadyConstructedError'\n    });\n  }\n}\nObject.defineProperty(SenderAlreadyConstructedError, \"message\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: /aa10/\n});\nexport class SignatureCheckFailedError extends BaseError {\n  constructor({\n    cause\n  }) {\n    super('UserOperation rejected because account signature check failed (or paymaster signature, if the paymaster uses its data as signature).', {\n      cause,\n      name: 'SignatureCheckFailedError'\n    });\n  }\n}\nObject.defineProperty(SignatureCheckFailedError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32507\n});\nexport class SmartAccountFunctionRevertedError extends BaseError {\n  constructor({\n    cause\n  }) {\n    super('The `validateUserOp` function on the Smart Account reverted.', {\n      cause,\n      name: 'SmartAccountFunctionRevertedError'\n    });\n  }\n}\nObject.defineProperty(SmartAccountFunctionRevertedError, \"message\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: /aa23/\n});\nexport class UnsupportedSignatureAggregatorError extends BaseError {\n  constructor({\n    cause\n  }) {\n    super('UserOperation rejected because account specified unsupported signature aggregator.', {\n      cause,\n      name: 'UnsupportedSignatureAggregatorError'\n    });\n  }\n}\nObject.defineProperty(UnsupportedSignatureAggregatorError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32506\n});\nexport class UserOperationExpiredError extends BaseError {\n  constructor({\n    cause\n  }) {\n    super('User Operation expired.', {\n      cause,\n      metaMessages: ['This could arise when:', '- the `validAfter` or `validUntil` values returned from `validateUserOp` on the Smart Account are not satisfied'].filter(Boolean),\n      name: 'UserOperationExpiredError'\n    });\n  }\n}\nObject.defineProperty(UserOperationExpiredError, \"message\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: /aa22/\n});\nexport class UserOperationPaymasterExpiredError extends BaseError {\n  constructor({\n    cause\n  }) {\n    super('Paymaster for User Operation expired.', {\n      cause,\n      metaMessages: ['This could arise when:', '- the `validAfter` or `validUntil` values returned from `validatePaymasterUserOp` on the Paymaster are not satisfied'].filter(Boolean),\n      name: 'UserOperationPaymasterExpiredError'\n    });\n  }\n}\nObject.defineProperty(UserOperationPaymasterExpiredError, \"message\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: /aa32/\n});\nexport class UserOperationSignatureError extends BaseError {\n  constructor({\n    cause\n  }) {\n    super('Signature provided for the User Operation is invalid.', {\n      cause,\n      metaMessages: ['This could arise when:', '- the `signature` for the User Operation is incorrectly computed, and unable to be verified by the Smart Account'].filter(Boolean),\n      name: 'UserOperationSignatureError'\n    });\n  }\n}\nObject.defineProperty(UserOperationSignatureError, \"message\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: /aa24/\n});\nexport class UserOperationPaymasterSignatureError extends BaseError {\n  constructor({\n    cause\n  }) {\n    super('Signature provided for the User Operation is invalid.', {\n      cause,\n      metaMessages: ['This could arise when:', '- the `signature` for the User Operation is incorrectly computed, and unable to be verified by the Paymaster'].filter(Boolean),\n      name: 'UserOperationPaymasterSignatureError'\n    });\n  }\n}\nObject.defineProperty(UserOperationPaymasterSignatureError, \"message\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: /aa34/\n});\nexport class UserOperationRejectedByEntryPointError extends BaseError {\n  constructor({\n    cause\n  }) {\n    super(\"User Operation rejected by EntryPoint's `simulateValidation` during account creation or validation.\", {\n      cause,\n      name: 'UserOperationRejectedByEntryPointError'\n    });\n  }\n}\nObject.defineProperty(UserOperationRejectedByEntryPointError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32500\n});\nexport class UserOperationRejectedByPaymasterError extends BaseError {\n  constructor({\n    cause\n  }) {\n    super(\"User Operation rejected by Paymaster's `validatePaymasterUserOp`.\", {\n      cause,\n      name: 'UserOperationRejectedByPaymasterError'\n    });\n  }\n}\nObject.defineProperty(UserOperationRejectedByPaymasterError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32501\n});\nexport class UserOperationRejectedByOpCodeError extends BaseError {\n  constructor({\n    cause\n  }) {\n    super('User Operation rejected with op code validation error.', {\n      cause,\n      name: 'UserOperationRejectedByOpCodeError'\n    });\n  }\n}\nObject.defineProperty(UserOperationRejectedByOpCodeError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32502\n});\nexport class UserOperationOutOfTimeRangeError extends BaseError {\n  constructor({\n    cause\n  }) {\n    super('UserOperation out of time-range: either wallet or paymaster returned a time-range, and it is already expired (or will expire soon).', {\n      cause,\n      name: 'UserOperationOutOfTimeRangeError'\n    });\n  }\n}\nObject.defineProperty(UserOperationOutOfTimeRangeError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32503\n});\nexport class UnknownBundlerError extends BaseError {\n  constructor({\n    cause\n  }) {\n    super(`An error occurred while executing user operation: ${cause?.shortMessage}`, {\n      cause,\n      name: 'UnknownBundlerError'\n    });\n  }\n}\nexport class VerificationGasLimitExceededError extends BaseError {\n  constructor({\n    cause\n  }) {\n    super('User Operation verification gas limit exceeded.', {\n      cause,\n      metaMessages: ['This could arise when:', '- the gas used for verification exceeded the `verificationGasLimit`'].filter(Boolean),\n      name: 'VerificationGasLimitExceededError'\n    });\n  }\n}\nObject.defineProperty(VerificationGasLimitExceededError, \"message\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: /aa40/\n});\nexport class VerificationGasLimitTooLowError extends BaseError {\n  constructor({\n    cause\n  }) {\n    super('User Operation verification gas limit is too low.', {\n      cause,\n      metaMessages: ['This could arise when:', '- the `verificationGasLimit` is too low to verify the User Operation'].filter(Boolean),\n      name: 'VerificationGasLimitTooLowError'\n    });\n  }\n}\nObject.defineProperty(VerificationGasLimitTooLowError, \"message\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: /aa41/\n});","map":{"version":3,"names":["BaseError","AccountNotDeployedError","constructor","cause","metaMessages","name","Object","defineProperty","ExecutionRevertedError","data","message","reason","replace","FailedToSendToBeneficiaryError","GasValuesOverflowError","filter","Boolean","HandleOpsOutOfGasError","InitCodeFailedError","factory","factoryData","initCode","InitCodeMustCreateSenderError","InitCodeMustReturnSenderError","sender","InsufficientPrefundError","InternalCallOnlyError","InvalidAggregatorError","InvalidAccountNonceError","nonce","InvalidBeneficiaryError","InvalidFieldsError","InvalidPaymasterAndDataError","paymasterAndData","PaymasterDepositTooLowError","PaymasterFunctionRevertedError","PaymasterNotDeployedError","PaymasterRateLimitError","PaymasterStakeTooLowError","PaymasterPostOpFunctionRevertedError","SenderAlreadyConstructedError","SignatureCheckFailedError","SmartAccountFunctionRevertedError","UnsupportedSignatureAggregatorError","UserOperationExpiredError","UserOperationPaymasterExpiredError","UserOperationSignatureError","UserOperationPaymasterSignatureError","UserOperationRejectedByEntryPointError","UserOperationRejectedByPaymasterError","UserOperationRejectedByOpCodeError","UserOperationOutOfTimeRangeError","UnknownBundlerError","shortMessage","VerificationGasLimitExceededError","VerificationGasLimitTooLowError"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/viem/account-abstraction/errors/bundler.ts"],"sourcesContent":["import type { Address } from 'abitype'\nimport { BaseError } from '../../errors/base.js'\nimport type { Hex } from '../../types/misc.js'\n\nexport type AccountNotDeployedErrorType = AccountNotDeployedError & {\n  name: 'AccountNotDeployedError'\n}\nexport class AccountNotDeployedError extends BaseError {\n  static message = /aa20/\n  constructor({\n    cause,\n  }: {\n    cause?: BaseError | undefined\n  }) {\n    super('Smart Account is not deployed.', {\n      cause,\n      metaMessages: [\n        'This could arise when:',\n        '- No `factory`/`factoryData` or `initCode` properties are provided for Smart Account deployment.',\n        '- An incorrect `sender` address is provided.',\n      ],\n      name: 'AccountNotDeployedError',\n    })\n  }\n}\n\nexport type ExecutionRevertedErrorType = ExecutionRevertedError & {\n  code: -32521\n  name: 'ExecutionRevertedError'\n}\nexport class ExecutionRevertedError extends BaseError {\n  static code = -32521\n  static message = /execution reverted/\n\n  data?: { revertData?: Hex } | undefined\n\n  constructor({\n    cause,\n    data,\n    message,\n  }: {\n    cause?: BaseError | undefined\n    data?: { revertData?: Hex } | undefined\n    message?: string | undefined\n  } = {}) {\n    const reason = message\n      ?.replace('execution reverted: ', '')\n      ?.replace('execution reverted', '')\n    super(\n      `Execution reverted ${\n        reason ? `with reason: ${reason}` : 'for an unknown reason'\n      }.`,\n      {\n        cause,\n        name: 'ExecutionRevertedError',\n      },\n    )\n\n    this.data = data\n  }\n}\n\nexport type FailedToSendToBeneficiaryErrorType =\n  FailedToSendToBeneficiaryError & {\n    name: 'FailedToSendToBeneficiaryError'\n  }\nexport class FailedToSendToBeneficiaryError extends BaseError {\n  static message = /aa91/\n  constructor({\n    cause,\n  }: {\n    cause?: BaseError | undefined\n  }) {\n    super('Failed to send funds to beneficiary.', {\n      cause,\n      name: 'FailedToSendToBeneficiaryError',\n    })\n  }\n}\n\nexport type GasValuesOverflowErrorType = GasValuesOverflowError & {\n  name: 'GasValuesOverflowError'\n}\nexport class GasValuesOverflowError extends BaseError {\n  static message = /aa94/\n  constructor({\n    cause,\n  }: {\n    cause?: BaseError | undefined\n  }) {\n    super('Gas value overflowed.', {\n      cause,\n      metaMessages: [\n        'This could arise when:',\n        '- one of the gas values exceeded 2**120 (uint120)',\n      ].filter(Boolean) as string[],\n      name: 'GasValuesOverflowError',\n    })\n  }\n}\n\nexport type HandleOpsOutOfGasErrorType = HandleOpsOutOfGasError & {\n  name: 'HandleOpsOutOfGasError'\n}\nexport class HandleOpsOutOfGasError extends BaseError {\n  static message = /aa95/\n  constructor({\n    cause,\n  }: {\n    cause?: BaseError | undefined\n  }) {\n    super(\n      'The `handleOps` function was called by the Bundler with a gas limit too low.',\n      {\n        cause,\n        name: 'HandleOpsOutOfGasError',\n      },\n    )\n  }\n}\n\nexport type InitCodeFailedErrorType = InitCodeFailedError & {\n  name: 'InitCodeFailedError'\n}\nexport class InitCodeFailedError extends BaseError {\n  static message = /aa13/\n  constructor({\n    cause,\n    factory,\n    factoryData,\n    initCode,\n  }: {\n    cause?: BaseError | undefined\n    factory?: Address | undefined\n    factoryData?: Hex | undefined\n    initCode?: Hex | undefined\n  }) {\n    super('Failed to simulate deployment for Smart Account.', {\n      cause,\n      metaMessages: [\n        'This could arise when:',\n        '- Invalid `factory`/`factoryData` or `initCode` properties are present',\n        '- Smart Account deployment execution ran out of gas (low `verificationGasLimit` value)',\n        '- Smart Account deployment execution reverted with an error\\n',\n        factory && `factory: ${factory}`,\n        factoryData && `factoryData: ${factoryData}`,\n        initCode && `initCode: ${initCode}`,\n      ].filter(Boolean) as string[],\n      name: 'InitCodeFailedError',\n    })\n  }\n}\n\nexport type InitCodeMustCreateSenderErrorType =\n  InitCodeMustCreateSenderError & {\n    name: 'InitCodeMustCreateSenderError'\n  }\nexport class InitCodeMustCreateSenderError extends BaseError {\n  static message = /aa15/\n  constructor({\n    cause,\n    factory,\n    factoryData,\n    initCode,\n  }: {\n    cause?: BaseError | undefined\n    factory?: Address | undefined\n    factoryData?: Hex | undefined\n    initCode?: Hex | undefined\n  }) {\n    super(\n      'Smart Account initialization implementation did not create an account.',\n      {\n        cause,\n        metaMessages: [\n          'This could arise when:',\n          '- `factory`/`factoryData` or `initCode` properties are invalid',\n          '- Smart Account initialization implementation is incorrect\\n',\n          factory && `factory: ${factory}`,\n          factoryData && `factoryData: ${factoryData}`,\n          initCode && `initCode: ${initCode}`,\n        ].filter(Boolean) as string[],\n        name: 'InitCodeMustCreateSenderError',\n      },\n    )\n  }\n}\n\nexport type InitCodeMustReturnSenderErrorType =\n  InitCodeMustReturnSenderError & {\n    name: 'InitCodeMustReturnSenderError'\n  }\nexport class InitCodeMustReturnSenderError extends BaseError {\n  static message = /aa14/\n  constructor({\n    cause,\n    factory,\n    factoryData,\n    initCode,\n    sender,\n  }: {\n    cause?: BaseError | undefined\n    factory?: Address | undefined\n    factoryData?: Hex | undefined\n    initCode?: Hex | undefined\n    sender?: Address | undefined\n  }) {\n    super(\n      'Smart Account initialization implementation does not return the expected sender.',\n      {\n        cause,\n        metaMessages: [\n          'This could arise when:',\n          'Smart Account initialization implementation does not return a sender address\\n',\n          factory && `factory: ${factory}`,\n          factoryData && `factoryData: ${factoryData}`,\n          initCode && `initCode: ${initCode}`,\n          sender && `sender: ${sender}`,\n        ].filter(Boolean) as string[],\n        name: 'InitCodeMustReturnSenderError',\n      },\n    )\n  }\n}\n\nexport type InsufficientPrefundErrorType = InsufficientPrefundError & {\n  name: 'InsufficientPrefundError'\n}\nexport class InsufficientPrefundError extends BaseError {\n  static message = /aa21/\n  constructor({\n    cause,\n  }: {\n    cause?: BaseError | undefined\n  }) {\n    super(\n      'Smart Account does not have sufficient funds to execute the User Operation.',\n      {\n        cause,\n        metaMessages: [\n          'This could arise when:',\n          '- the Smart Account does not have sufficient funds to cover the required prefund, or',\n          '- a Paymaster was not provided',\n        ].filter(Boolean) as string[],\n        name: 'InsufficientPrefundError',\n      },\n    )\n  }\n}\n\nexport type InternalCallOnlyErrorType = InternalCallOnlyError & {\n  name: 'InternalCallOnlyError'\n}\nexport class InternalCallOnlyError extends BaseError {\n  static message = /aa92/\n  constructor({\n    cause,\n  }: {\n    cause?: BaseError | undefined\n  }) {\n    super('Bundler attempted to call an invalid function on the EntryPoint.', {\n      cause,\n      name: 'InternalCallOnlyError',\n    })\n  }\n}\n\nexport type InvalidAggregatorErrorType = InvalidAggregatorError & {\n  name: 'InvalidAggregatorError'\n}\nexport class InvalidAggregatorError extends BaseError {\n  static message = /aa96/\n  constructor({\n    cause,\n  }: {\n    cause?: BaseError | undefined\n  }) {\n    super(\n      'Bundler used an invalid aggregator for handling aggregated User Operations.',\n      {\n        cause,\n        name: 'InvalidAggregatorError',\n      },\n    )\n  }\n}\n\nexport type InvalidAccountNonceErrorType = InvalidAccountNonceError & {\n  name: 'InvalidAccountNonceError'\n}\nexport class InvalidAccountNonceError extends BaseError {\n  static message = /aa25/\n  constructor({\n    cause,\n    nonce,\n  }: {\n    cause?: BaseError | undefined\n    nonce?: bigint | undefined\n  }) {\n    super('Invalid Smart Account nonce used for User Operation.', {\n      cause,\n      metaMessages: [nonce && `nonce: ${nonce}`].filter(Boolean) as string[],\n      name: 'InvalidAccountNonceError',\n    })\n  }\n}\n\nexport type InvalidBeneficiaryErrorType = InvalidBeneficiaryError & {\n  name: 'InvalidBeneficiaryError'\n}\nexport class InvalidBeneficiaryError extends BaseError {\n  static message = /aa90/\n  constructor({\n    cause,\n  }: {\n    cause?: BaseError | undefined\n  }) {\n    super('Bundler has not set a beneficiary address.', {\n      cause,\n      name: 'InvalidBeneficiaryError',\n    })\n  }\n}\n\nexport type InvalidFieldsErrorType = InvalidFieldsError & {\n  name: 'InvalidFieldsError'\n}\nexport class InvalidFieldsError extends BaseError {\n  static code = -32602\n\n  constructor({\n    cause,\n  }: {\n    cause?: BaseError | undefined\n  }) {\n    super('Invalid fields set on User Operation.', {\n      cause,\n      name: 'InvalidFieldsError',\n    })\n  }\n}\n\nexport type InvalidPaymasterAndDataErrorType = InvalidPaymasterAndDataError & {\n  name: 'InvalidPaymasterAndDataError'\n}\nexport class InvalidPaymasterAndDataError extends BaseError {\n  static message = /aa93/\n  constructor({\n    cause,\n    paymasterAndData,\n  }: {\n    cause?: BaseError | undefined\n    paymasterAndData?: Hex | undefined\n  }) {\n    super('Paymaster properties provided are invalid.', {\n      cause,\n      metaMessages: [\n        'This could arise when:',\n        '- the `paymasterAndData` property is of an incorrect length\\n',\n        paymasterAndData && `paymasterAndData: ${paymasterAndData}`,\n      ].filter(Boolean) as string[],\n      name: 'InvalidPaymasterAndDataError',\n    })\n  }\n}\n\nexport type PaymasterDepositTooLowErrorType = PaymasterDepositTooLowError & {\n  code: -32508\n  name: 'PaymasterDepositTooLowError'\n}\nexport class PaymasterDepositTooLowError extends BaseError {\n  static code = -32508\n  static message = /aa31/\n\n  constructor({\n    cause,\n  }: {\n    cause?: BaseError | undefined\n  }) {\n    super('Paymaster deposit for the User Operation is too low.', {\n      cause,\n      metaMessages: [\n        'This could arise when:',\n        '- the Paymaster has deposited less than the expected amount via the `deposit` function',\n      ].filter(Boolean) as string[],\n      name: 'PaymasterDepositTooLowError',\n    })\n  }\n}\n\nexport type PaymasterFunctionRevertedErrorType =\n  PaymasterFunctionRevertedError & {\n    name: 'PaymasterFunctionRevertedError'\n  }\nexport class PaymasterFunctionRevertedError extends BaseError {\n  static message = /aa33/\n  constructor({\n    cause,\n  }: {\n    cause?: BaseError | undefined\n  }) {\n    super('The `validatePaymasterUserOp` function on the Paymaster reverted.', {\n      cause,\n      name: 'PaymasterFunctionRevertedError',\n    })\n  }\n}\n\nexport type PaymasterNotDeployedErrorType = PaymasterNotDeployedError & {\n  name: 'PaymasterNotDeployedError'\n}\nexport class PaymasterNotDeployedError extends BaseError {\n  static message = /aa30/\n  constructor({\n    cause,\n  }: {\n    cause?: BaseError | undefined\n  }) {\n    super('The Paymaster contract has not been deployed.', {\n      cause,\n      name: 'PaymasterNotDeployedError',\n    })\n  }\n}\n\nexport type PaymasterRateLimitErrorType = PaymasterRateLimitError & {\n  code: -32504\n  name: 'PaymasterRateLimitError'\n}\nexport class PaymasterRateLimitError extends BaseError {\n  static code = -32504\n\n  constructor({ cause }: { cause?: BaseError | undefined }) {\n    super(\n      'UserOperation rejected because paymaster (or signature aggregator) is throttled/banned.',\n      {\n        cause,\n        name: 'PaymasterRateLimitError',\n      },\n    )\n  }\n}\n\nexport type PaymasterStakeTooLowErrorType = PaymasterStakeTooLowError & {\n  code: -32505\n  name: 'PaymasterStakeTooLowError'\n}\nexport class PaymasterStakeTooLowError extends BaseError {\n  static code = -32505\n\n  constructor({ cause }: { cause?: BaseError | undefined }) {\n    super(\n      'UserOperation rejected because paymaster (or signature aggregator) is throttled/banned.',\n      {\n        cause,\n        name: 'PaymasterStakeTooLowError',\n      },\n    )\n  }\n}\n\nexport type PaymasterPostOpFunctionRevertedErrorType =\n  PaymasterPostOpFunctionRevertedError & {\n    name: 'PaymasterPostOpFunctionRevertedError'\n  }\nexport class PaymasterPostOpFunctionRevertedError extends BaseError {\n  static message = /aa50/\n  constructor({\n    cause,\n  }: {\n    cause?: BaseError | undefined\n  }) {\n    super('Paymaster `postOp` function reverted.', {\n      cause,\n      name: 'PaymasterPostOpFunctionRevertedError',\n    })\n  }\n}\n\nexport type SenderAlreadyConstructedErrorType =\n  SenderAlreadyConstructedError & {\n    name: 'SenderAlreadyConstructedError'\n  }\nexport class SenderAlreadyConstructedError extends BaseError {\n  static message = /aa10/\n  constructor({\n    cause,\n    factory,\n    factoryData,\n    initCode,\n  }: {\n    cause?: BaseError | undefined\n    factory?: Address | undefined\n    factoryData?: Hex | undefined\n    initCode?: Hex | undefined\n  }) {\n    super('Smart Account has already been deployed.', {\n      cause,\n      metaMessages: [\n        'Remove the following properties and try again:',\n        factory && '`factory`',\n        factoryData && '`factoryData`',\n        initCode && '`initCode`',\n      ].filter(Boolean) as string[],\n      name: 'SenderAlreadyConstructedError',\n    })\n  }\n}\n\nexport type SignatureCheckFailedErrorType = SignatureCheckFailedError & {\n  code: -32507\n  name: 'SignatureCheckFailedError'\n}\nexport class SignatureCheckFailedError extends BaseError {\n  static code = -32507\n\n  constructor({ cause }: { cause?: BaseError | undefined }) {\n    super(\n      'UserOperation rejected because account signature check failed (or paymaster signature, if the paymaster uses its data as signature).',\n      {\n        cause,\n        name: 'SignatureCheckFailedError',\n      },\n    )\n  }\n}\n\nexport type SmartAccountFunctionRevertedErrorType =\n  SmartAccountFunctionRevertedError & {\n    name: 'SmartAccountFunctionRevertedError'\n  }\nexport class SmartAccountFunctionRevertedError extends BaseError {\n  static message = /aa23/\n  constructor({\n    cause,\n  }: {\n    cause?: BaseError | undefined\n  }) {\n    super('The `validateUserOp` function on the Smart Account reverted.', {\n      cause,\n      name: 'SmartAccountFunctionRevertedError',\n    })\n  }\n}\n\nexport type UnsupportedSignatureAggregatorErrorType =\n  UnsupportedSignatureAggregatorError & {\n    code: -32506\n    name: 'UnsupportedSignatureAggregatorError'\n  }\nexport class UnsupportedSignatureAggregatorError extends BaseError {\n  static code = -32506\n\n  constructor({ cause }: { cause?: BaseError | undefined }) {\n    super(\n      'UserOperation rejected because account specified unsupported signature aggregator.',\n      {\n        cause,\n        name: 'UnsupportedSignatureAggregatorError',\n      },\n    )\n  }\n}\n\nexport type UserOperationExpiredErrorType = UserOperationExpiredError & {\n  name: 'UserOperationExpiredError'\n}\nexport class UserOperationExpiredError extends BaseError {\n  static message = /aa22/\n  constructor({\n    cause,\n  }: {\n    cause?: BaseError | undefined\n  }) {\n    super('User Operation expired.', {\n      cause,\n      metaMessages: [\n        'This could arise when:',\n        '- the `validAfter` or `validUntil` values returned from `validateUserOp` on the Smart Account are not satisfied',\n      ].filter(Boolean) as string[],\n      name: 'UserOperationExpiredError',\n    })\n  }\n}\n\nexport type UserOperationPaymasterExpiredErrorType =\n  UserOperationPaymasterExpiredError & {\n    name: 'UserOperationPaymasterExpiredError'\n  }\nexport class UserOperationPaymasterExpiredError extends BaseError {\n  static message = /aa32/\n  constructor({\n    cause,\n  }: {\n    cause?: BaseError | undefined\n  }) {\n    super('Paymaster for User Operation expired.', {\n      cause,\n      metaMessages: [\n        'This could arise when:',\n        '- the `validAfter` or `validUntil` values returned from `validatePaymasterUserOp` on the Paymaster are not satisfied',\n      ].filter(Boolean) as string[],\n      name: 'UserOperationPaymasterExpiredError',\n    })\n  }\n}\n\nexport type UserOperationSignatureErrorType = UserOperationSignatureError & {\n  name: 'UserOperationSignatureError'\n}\nexport class UserOperationSignatureError extends BaseError {\n  static message = /aa24/\n  constructor({\n    cause,\n  }: {\n    cause?: BaseError | undefined\n  }) {\n    super('Signature provided for the User Operation is invalid.', {\n      cause,\n      metaMessages: [\n        'This could arise when:',\n        '- the `signature` for the User Operation is incorrectly computed, and unable to be verified by the Smart Account',\n      ].filter(Boolean) as string[],\n      name: 'UserOperationSignatureError',\n    })\n  }\n}\n\nexport type UserOperationPaymasterSignatureErrorType =\n  UserOperationPaymasterSignatureError & {\n    name: 'UserOperationPaymasterSignatureError'\n  }\nexport class UserOperationPaymasterSignatureError extends BaseError {\n  static message = /aa34/\n  constructor({\n    cause,\n  }: {\n    cause?: BaseError | undefined\n  }) {\n    super('Signature provided for the User Operation is invalid.', {\n      cause,\n      metaMessages: [\n        'This could arise when:',\n        '- the `signature` for the User Operation is incorrectly computed, and unable to be verified by the Paymaster',\n      ].filter(Boolean) as string[],\n      name: 'UserOperationPaymasterSignatureError',\n    })\n  }\n}\n\nexport type UserOperationRejectedByEntryPointErrorType =\n  UserOperationRejectedByEntryPointError & {\n    code: -32500\n    name: 'UserOperationRejectedByEntryPointError'\n  }\nexport class UserOperationRejectedByEntryPointError extends BaseError {\n  static code = -32500\n\n  constructor({ cause }: { cause?: BaseError | undefined }) {\n    super(\n      \"User Operation rejected by EntryPoint's `simulateValidation` during account creation or validation.\",\n      {\n        cause,\n        name: 'UserOperationRejectedByEntryPointError',\n      },\n    )\n  }\n}\n\nexport type UserOperationRejectedByPaymasterErrorType =\n  UserOperationRejectedByPaymasterError & {\n    code: -32501\n    name: 'UserOperationRejectedByPaymasterError'\n  }\nexport class UserOperationRejectedByPaymasterError extends BaseError {\n  static code = -32501\n\n  constructor({ cause }: { cause?: BaseError | undefined }) {\n    super(\"User Operation rejected by Paymaster's `validatePaymasterUserOp`.\", {\n      cause,\n      name: 'UserOperationRejectedByPaymasterError',\n    })\n  }\n}\n\nexport type UserOperationRejectedByOpCodeErrorType =\n  UserOperationRejectedByOpCodeError & {\n    code: -32502\n    name: 'UserOperationRejectedByOpCodeError'\n  }\nexport class UserOperationRejectedByOpCodeError extends BaseError {\n  static code = -32502\n\n  constructor({ cause }: { cause?: BaseError | undefined }) {\n    super('User Operation rejected with op code validation error.', {\n      cause,\n      name: 'UserOperationRejectedByOpCodeError',\n    })\n  }\n}\n\nexport type UserOperationOutOfTimeRangeErrorType =\n  UserOperationOutOfTimeRangeError & {\n    code: -32503\n    name: 'UserOperationOutOfTimeRangeError'\n  }\nexport class UserOperationOutOfTimeRangeError extends BaseError {\n  static code = -32503\n\n  constructor({ cause }: { cause?: BaseError | undefined }) {\n    super(\n      'UserOperation out of time-range: either wallet or paymaster returned a time-range, and it is already expired (or will expire soon).',\n      {\n        cause,\n        name: 'UserOperationOutOfTimeRangeError',\n      },\n    )\n  }\n}\n\nexport type UnknownBundlerErrorType = UnknownBundlerError & {\n  name: 'UnknownBundlerError'\n}\nexport class UnknownBundlerError extends BaseError {\n  constructor({ cause }: { cause?: BaseError | undefined }) {\n    super(\n      `An error occurred while executing user operation: ${cause?.shortMessage}`,\n      {\n        cause,\n        name: 'UnknownBundlerError',\n      },\n    )\n  }\n}\n\nexport type VerificationGasLimitExceededErrorType =\n  VerificationGasLimitExceededError & {\n    name: 'VerificationGasLimitExceededError'\n  }\nexport class VerificationGasLimitExceededError extends BaseError {\n  static message = /aa40/\n  constructor({\n    cause,\n  }: {\n    cause?: BaseError | undefined\n  }) {\n    super('User Operation verification gas limit exceeded.', {\n      cause,\n      metaMessages: [\n        'This could arise when:',\n        '- the gas used for verification exceeded the `verificationGasLimit`',\n      ].filter(Boolean) as string[],\n      name: 'VerificationGasLimitExceededError',\n    })\n  }\n}\n\nexport type VerificationGasLimitTooLowErrorType =\n  VerificationGasLimitTooLowError & {\n    name: 'VerificationGasLimitTooLowError'\n  }\nexport class VerificationGasLimitTooLowError extends BaseError {\n  static message = /aa41/\n  constructor({\n    cause,\n  }: {\n    cause?: BaseError | undefined\n  }) {\n    super('User Operation verification gas limit is too low.', {\n      cause,\n      metaMessages: [\n        'This could arise when:',\n        '- the `verificationGasLimit` is too low to verify the User Operation',\n      ].filter(Boolean) as string[],\n      name: 'VerificationGasLimitTooLowError',\n    })\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}