{"ast":null,"code":"'use client';\n\nimport { getEnsAddressQueryOptions } from '@wagmi/core/query';\nimport { useQuery } from '../utils/query.js';\nimport { useChainId } from './useChainId.js';\nimport { useConfig } from './useConfig.js';\n/** https://wagmi.sh/react/api/hooks/useEnsAddress */\nexport function useEnsAddress(parameters = {}) {\n  const {\n    name,\n    query = {}\n  } = parameters;\n  const config = useConfig(parameters);\n  const chainId = useChainId({\n    config\n  });\n  const options = getEnsAddressQueryOptions(config, {\n    ...parameters,\n    chainId: parameters.chainId ?? chainId\n  });\n  const enabled = Boolean(name && (query.enabled ?? true));\n  return useQuery({\n    ...query,\n    ...options,\n    enabled\n  });\n}","map":{"version":3,"names":["getEnsAddressQueryOptions","useQuery","useChainId","useConfig","useEnsAddress","parameters","name","query","config","chainId","options","enabled","Boolean"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/wagmi/src/hooks/useEnsAddress.ts"],"sourcesContent":["'use client'\n\nimport type {\n  Config,\n  GetEnsAddressErrorType,\n  ResolvedRegister,\n} from '@wagmi/core'\nimport type { Compute } from '@wagmi/core/internal'\nimport {\n  type GetEnsAddressData,\n  type GetEnsAddressOptions,\n  type GetEnsAddressQueryFnData,\n  type GetEnsAddressQueryKey,\n  getEnsAddressQueryOptions,\n} from '@wagmi/core/query'\n\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseEnsAddressParameters<\n  config extends Config = Config,\n  selectData = GetEnsAddressData,\n> = Compute<\n  GetEnsAddressOptions<config> &\n    ConfigParameter<config> &\n    QueryParameter<\n      GetEnsAddressQueryFnData,\n      GetEnsAddressErrorType,\n      selectData,\n      GetEnsAddressQueryKey<config>\n    >\n>\n\nexport type UseEnsAddressReturnType<selectData = GetEnsAddressData> =\n  UseQueryReturnType<selectData, GetEnsAddressErrorType>\n\n/** https://wagmi.sh/react/api/hooks/useEnsAddress */\nexport function useEnsAddress<\n  config extends Config = ResolvedRegister['config'],\n  selectData = GetEnsAddressData,\n>(\n  parameters: UseEnsAddressParameters<config, selectData> = {},\n): UseEnsAddressReturnType<selectData> {\n  const { name, query = {} } = parameters\n\n  const config = useConfig(parameters)\n  const chainId = useChainId({ config })\n\n  const options = getEnsAddressQueryOptions(config, {\n    ...parameters,\n    chainId: parameters.chainId ?? chainId,\n  })\n  const enabled = Boolean(name && (query.enabled ?? true))\n\n  return useQuery({ ...query, ...options, enabled })\n}\n"],"mappings":"AAAA,YAAY;;AAQZ,SAKEA,yBAAyB,QACpB,mBAAmB;AAG1B,SAAkCC,QAAQ,QAAQ,mBAAmB;AACrE,SAASC,UAAU,QAAQ,iBAAiB;AAC5C,SAASC,SAAS,QAAQ,gBAAgB;AAmB1C;AACA,OAAM,SAAUC,aAAaA,CAI3BC,UAAA,GAA0D,EAAE;EAE5D,MAAM;IAAEC,IAAI;IAAEC,KAAK,GAAG;EAAE,CAAE,GAAGF,UAAU;EAEvC,MAAMG,MAAM,GAAGL,SAAS,CAACE,UAAU,CAAC;EACpC,MAAMI,OAAO,GAAGP,UAAU,CAAC;IAAEM;EAAM,CAAE,CAAC;EAEtC,MAAME,OAAO,GAAGV,yBAAyB,CAACQ,MAAM,EAAE;IAChD,GAAGH,UAAU;IACbI,OAAO,EAAEJ,UAAU,CAACI,OAAO,IAAIA;GAChC,CAAC;EACF,MAAME,OAAO,GAAGC,OAAO,CAACN,IAAI,KAAKC,KAAK,CAACI,OAAO,IAAI,IAAI,CAAC,CAAC;EAExD,OAAOV,QAAQ,CAAC;IAAE,GAAGM,KAAK;IAAE,GAAGG,OAAO;IAAEC;EAAO,CAAE,CAAC;AACpD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}