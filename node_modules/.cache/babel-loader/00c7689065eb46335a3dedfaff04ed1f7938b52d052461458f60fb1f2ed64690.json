{"ast":null,"code":"import { Hex, PublicKey, Signature, WebAuthnP256, WebCryptoP256 } from 'ox';\nimport { hashMessage, hashTypedData } from 'viem';\nimport { createStorage } from './storage.js';\n// *****************************************************************\n// Constants\n// *****************************************************************\nexport const STORAGE_SCOPE = 'base-acc-sdk';\nexport const STORAGE_NAME = 'keys';\nexport const ACTIVE_ID_KEY = 'activeId';\n// *****************************************************************\n// Storage\n// *****************************************************************\nexport const storage = createStorage(STORAGE_SCOPE, STORAGE_NAME);\n// *****************************************************************\n// Functions\n// *****************************************************************\nexport async function generateKeyPair() {\n  const keypair = await WebCryptoP256.createKeyPair({\n    extractable: false\n  });\n  const publicKey = Hex.slice(PublicKey.toHex(keypair.publicKey), 1);\n  await storage.setItem(publicKey, keypair);\n  await storage.setItem(ACTIVE_ID_KEY, publicKey);\n  return keypair;\n}\nexport async function getKeypair() {\n  const id = await storage.getItem(ACTIVE_ID_KEY);\n  if (!id) {\n    return null;\n  }\n  const keypair = await storage.getItem(id);\n  if (!keypair) {\n    return null;\n  }\n  return keypair;\n}\nasync function getOrCreateKeypair() {\n  const keypair = await getKeypair();\n  if (!keypair) {\n    const kp = await generateKeyPair();\n    const pubKey = Hex.slice(PublicKey.toHex(kp.publicKey), 1);\n    await storage.setItem(pubKey, kp);\n    await storage.setItem(ACTIVE_ID_KEY, pubKey);\n    return kp;\n  }\n  return keypair;\n}\nasync function getAccount() {\n  const keypair = await getOrCreateKeypair();\n  /**\n   * public key / address\n   */\n  const publicKey = Hex.slice(PublicKey.toHex(keypair.publicKey), 1);\n  const sign = async payload => {\n    const {\n      payload: message,\n      metadata\n    } = WebAuthnP256.getSignPayload({\n      challenge: payload,\n      origin: 'https://keys.coinbase.com',\n      userVerification: 'preferred'\n    });\n    const signature = await WebCryptoP256.sign({\n      payload: message,\n      privateKey: keypair.privateKey\n    });\n    return {\n      signature: Signature.toHex(signature),\n      raw: {},\n      // type changed in viem\n      webauthn: metadata\n    };\n  };\n  return {\n    id: publicKey,\n    publicKey,\n    async sign({\n      hash\n    }) {\n      return sign(hash);\n    },\n    async signMessage({\n      message\n    }) {\n      return sign(hashMessage(message));\n    },\n    async signTypedData(parameters) {\n      return sign(hashTypedData(parameters));\n    },\n    type: 'webAuthn'\n  };\n}\nexport async function getCryptoKeyAccount() {\n  const account = await getAccount();\n  return {\n    account\n  };\n}\nexport async function removeCryptoKey() {\n  const keypair = await getKeypair();\n  if (!keypair) {\n    return;\n  }\n  await storage.removeItem(Hex.slice(PublicKey.toHex(keypair.publicKey), 1));\n  await storage.removeItem(ACTIVE_ID_KEY);\n}","map":{"version":3,"names":["Hex","PublicKey","Signature","WebAuthnP256","WebCryptoP256","hashMessage","hashTypedData","createStorage","STORAGE_SCOPE","STORAGE_NAME","ACTIVE_ID_KEY","storage","generateKeyPair","keypair","createKeyPair","extractable","publicKey","slice","toHex","setItem","getKeypair","id","getItem","getOrCreateKeypair","kp","pubKey","getAccount","sign","payload","message","metadata","getSignPayload","challenge","origin","userVerification","signature","privateKey","raw","webauthn","hash","signMessage","signTypedData","parameters","type","getCryptoKeyAccount","account","removeCryptoKey","removeItem"],"sources":["../../../src/kms/crypto-key/index.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}