{"ast":null,"code":"import { estimateFeesPerGas } from '../actions/estimateFeesPerGas.js';\nimport { filterQueryOptions } from './utils.js';\nexport function estimateFeesPerGasQueryOptions(config, options = {}) {\n  return {\n    async queryFn({\n      queryKey\n    }) {\n      const {\n        scopeKey: _,\n        ...parameters\n      } = queryKey[1];\n      return estimateFeesPerGas(config, parameters);\n    },\n    queryKey: estimateFeesPerGasQueryKey(options)\n  };\n}\nexport function estimateFeesPerGasQueryKey(options = {}) {\n  return ['estimateFeesPerGas', filterQueryOptions(options)];\n}","map":{"version":3,"names":["estimateFeesPerGas","filterQueryOptions","estimateFeesPerGasQueryOptions","config","options","queryFn","queryKey","scopeKey","_","parameters","estimateFeesPerGasQueryKey"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/@wagmi/core/src/query/estimateFeesPerGas.ts"],"sourcesContent":["import type { QueryOptions } from '@tanstack/query-core'\nimport type { FeeValuesType } from 'viem'\n\nimport {\n  type EstimateFeesPerGasErrorType,\n  type EstimateFeesPerGasParameters,\n  type EstimateFeesPerGasReturnType,\n  estimateFeesPerGas,\n} from '../actions/estimateFeesPerGas.js'\nimport type { Config } from '../createConfig.js'\nimport type { ScopeKeyParameter } from '../types/properties.js'\nimport type { Compute, ExactPartial } from '../types/utils.js'\nimport { filterQueryOptions } from './utils.js'\n\nexport type EstimateFeesPerGasOptions<\n  type extends FeeValuesType,\n  config extends Config,\n> = Compute<\n  ExactPartial<EstimateFeesPerGasParameters<type, config>> & ScopeKeyParameter\n>\n\nexport function estimateFeesPerGasQueryOptions<\n  config extends Config,\n  type extends FeeValuesType = 'eip1559',\n>(config: config, options: EstimateFeesPerGasOptions<type, config> = {}) {\n  return {\n    async queryFn({ queryKey }) {\n      const { scopeKey: _, ...parameters } = queryKey[1]\n      return estimateFeesPerGas(config, parameters)\n    },\n    queryKey: estimateFeesPerGasQueryKey(options),\n  } as const satisfies QueryOptions<\n    EstimateFeesPerGasQueryFnData<type>,\n    EstimateFeesPerGasErrorType,\n    EstimateFeesPerGasData<type>,\n    EstimateFeesPerGasQueryKey<config, type>\n  >\n}\n\nexport type EstimateFeesPerGasQueryFnData<type extends FeeValuesType> =\n  EstimateFeesPerGasReturnType<type>\n\nexport type EstimateFeesPerGasData<type extends FeeValuesType> =\n  EstimateFeesPerGasQueryFnData<type>\n\nexport function estimateFeesPerGasQueryKey<\n  config extends Config,\n  type extends FeeValuesType = 'eip1559',\n>(options: EstimateFeesPerGasOptions<type, config> = {}) {\n  return ['estimateFeesPerGas', filterQueryOptions(options)] as const\n}\n\nexport type EstimateFeesPerGasQueryKey<\n  config extends Config,\n  type extends FeeValuesType,\n> = ReturnType<typeof estimateFeesPerGasQueryKey<config, type>>\n"],"mappings":"AAGA,SAIEA,kBAAkB,QACb,kCAAkC;AAIzC,SAASC,kBAAkB,QAAQ,YAAY;AAS/C,OAAM,SAAUC,8BAA8BA,CAG5CC,MAAc,EAAEC,OAAA,GAAmD,EAAE;EACrE,OAAO;IACL,MAAMC,OAAOA,CAAC;MAAEC;IAAQ,CAAE;MACxB,MAAM;QAAEC,QAAQ,EAAEC,CAAC;QAAE,GAAGC;MAAU,CAAE,GAAGH,QAAQ,CAAC,CAAC,CAAC;MAClD,OAAON,kBAAkB,CAACG,MAAM,EAAEM,UAAU,CAAC;IAC/C,CAAC;IACDH,QAAQ,EAAEI,0BAA0B,CAACN,OAAO;GAM7C;AACH;AAQA,OAAM,SAAUM,0BAA0BA,CAGxCN,OAAA,GAAmD,EAAE;EACrD,OAAO,CAAC,oBAAoB,EAAEH,kBAAkB,CAACG,OAAO,CAAC,CAAU;AACrE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}