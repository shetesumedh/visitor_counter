{"ast":null,"code":"'use client';\n\nimport { useMutation } from '@tanstack/react-query';\nimport { disconnectMutationOptions } from '@wagmi/core/query';\nimport { useConfig } from './useConfig.js';\nimport { useConnections } from './useConnections.js';\n/** https://wagmi.sh/react/api/hooks/useDisconnect */\nexport function useDisconnect(parameters = {}) {\n  const {\n    mutation\n  } = parameters;\n  const config = useConfig(parameters);\n  const mutationOptions = disconnectMutationOptions(config);\n  const {\n    mutate,\n    mutateAsync,\n    ...result\n  } = useMutation({\n    ...mutation,\n    ...mutationOptions\n  });\n  return {\n    ...result,\n    connectors: useConnections({\n      config\n    }).map(connection => connection.connector),\n    disconnect: mutate,\n    disconnectAsync: mutateAsync\n  };\n}","map":{"version":3,"names":["useMutation","disconnectMutationOptions","useConfig","useConnections","useDisconnect","parameters","mutation","config","mutationOptions","mutate","mutateAsync","result","connectors","map","connection","connector","disconnect","disconnectAsync"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/wagmi/src/hooks/useDisconnect.ts"],"sourcesContent":["'use client'\n\nimport { useMutation } from '@tanstack/react-query'\nimport type { Connector, DisconnectErrorType } from '@wagmi/core'\nimport type { Compute } from '@wagmi/core/internal'\nimport {\n  type DisconnectData,\n  type DisconnectMutate,\n  type DisconnectMutateAsync,\n  type DisconnectVariables,\n  disconnectMutationOptions,\n} from '@wagmi/core/query'\n\nimport type { ConfigParameter } from '../types/properties.js'\nimport type {\n  UseMutationParameters,\n  UseMutationReturnType,\n} from '../utils/query.js'\nimport { useConfig } from './useConfig.js'\nimport { useConnections } from './useConnections.js'\n\nexport type UseDisconnectParameters<context = unknown> = Compute<\n  ConfigParameter & {\n    mutation?:\n      | UseMutationParameters<\n          DisconnectData,\n          DisconnectErrorType,\n          DisconnectVariables,\n          context\n        >\n      | undefined\n  }\n>\n\nexport type UseDisconnectReturnType<context = unknown> = Compute<\n  UseMutationReturnType<\n    DisconnectData,\n    DisconnectErrorType,\n    DisconnectVariables,\n    context\n  > & {\n    connectors: readonly Connector[]\n    disconnect: DisconnectMutate<context>\n    disconnectAsync: DisconnectMutateAsync<context>\n  }\n>\n\n/** https://wagmi.sh/react/api/hooks/useDisconnect */\nexport function useDisconnect<context = unknown>(\n  parameters: UseDisconnectParameters<context> = {},\n): UseDisconnectReturnType<context> {\n  const { mutation } = parameters\n\n  const config = useConfig(parameters)\n\n  const mutationOptions = disconnectMutationOptions(config)\n  const { mutate, mutateAsync, ...result } = useMutation({\n    ...mutation,\n    ...mutationOptions,\n  })\n\n  return {\n    ...result,\n    connectors: useConnections({ config }).map(\n      (connection) => connection.connector,\n    ),\n    disconnect: mutate,\n    disconnectAsync: mutateAsync,\n  }\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,SAASA,WAAW,QAAQ,uBAAuB;AAGnD,SAKEC,yBAAyB,QACpB,mBAAmB;AAO1B,SAASC,SAAS,QAAQ,gBAAgB;AAC1C,SAASC,cAAc,QAAQ,qBAAqB;AA4BpD;AACA,OAAM,SAAUC,aAAaA,CAC3BC,UAAA,GAA+C,EAAE;EAEjD,MAAM;IAAEC;EAAQ,CAAE,GAAGD,UAAU;EAE/B,MAAME,MAAM,GAAGL,SAAS,CAACG,UAAU,CAAC;EAEpC,MAAMG,eAAe,GAAGP,yBAAyB,CAACM,MAAM,CAAC;EACzD,MAAM;IAAEE,MAAM;IAAEC,WAAW;IAAE,GAAGC;EAAM,CAAE,GAAGX,WAAW,CAAC;IACrD,GAAGM,QAAQ;IACX,GAAGE;GACJ,CAAC;EAEF,OAAO;IACL,GAAGG,MAAM;IACTC,UAAU,EAAET,cAAc,CAAC;MAAEI;IAAM,CAAE,CAAC,CAACM,GAAG,CACvCC,UAAU,IAAKA,UAAU,CAACC,SAAS,CACrC;IACDC,UAAU,EAAEP,MAAM;IAClBQ,eAAe,EAAEP;GAClB;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}