{"ast":null,"code":"import { writeContract as viem_writeContract } from 'viem/actions';\nimport { getAction } from '../utils/getAction.js';\nimport { getConnectorClient } from './getConnectorClient.js';\n/** https://wagmi.sh/core/api/actions/writeContract */\nexport async function writeContract(config, parameters) {\n  const {\n    account,\n    chainId,\n    connector,\n    ...request\n  } = parameters;\n  let client;\n  if (typeof account === 'object' && account?.type === 'local') client = config.getClient({\n    chainId\n  });else client = await getConnectorClient(config, {\n    account: account ?? undefined,\n    chainId,\n    connector\n  });\n  const action = getAction(client, viem_writeContract, 'writeContract');\n  const hash = await action({\n    ...request,\n    ...(account ? {\n      account\n    } : {}),\n    chain: chainId ? {\n      id: chainId\n    } : null\n  });\n  return hash;\n}","map":{"version":3,"names":["writeContract","viem_writeContract","getAction","getConnectorClient","config","parameters","account","chainId","connector","request","client","type","getClient","undefined","action","hash","chain","id"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/@wagmi/core/src/actions/writeContract.ts"],"sourcesContent":["import type {\n  Abi,\n  Account,\n  Chain,\n  Client,\n  ContractFunctionArgs,\n  ContractFunctionName,\n} from 'viem'\nimport {\n  type WriteContractErrorType as viem_WriteContractErrorType,\n  type WriteContractParameters as viem_WriteContractParameters,\n  type WriteContractReturnType as viem_WriteContractReturnType,\n  writeContract as viem_writeContract,\n} from 'viem/actions'\n\nimport type { Config } from '../createConfig.js'\nimport type { BaseErrorType, ErrorType } from '../errors/base.js'\nimport type { SelectChains } from '../types/chain.js'\nimport type {\n  ChainIdParameter,\n  ConnectorParameter,\n} from '../types/properties.js'\nimport type { Compute, UnionCompute } from '../types/utils.js'\nimport { getAction } from '../utils/getAction.js'\nimport {\n  type GetConnectorClientErrorType,\n  getConnectorClient,\n} from './getConnectorClient.js'\n\nexport type WriteContractParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  functionName extends ContractFunctionName<\n    abi,\n    'nonpayable' | 'payable'\n  > = ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n  args extends ContractFunctionArgs<\n    abi,\n    'nonpayable' | 'payable',\n    functionName\n  > = ContractFunctionArgs<abi, 'nonpayable' | 'payable', functionName>,\n  config extends Config = Config,\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n  ///\n  allFunctionNames = ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n  chains extends readonly Chain[] = SelectChains<config, chainId>,\n> = UnionCompute<\n  {\n    // TODO: Should use `UnionStrictOmit<..., 'chain'>` on `viem_WriteContractParameters` result instead\n    // temp workaround that doesn't affect runtime behavior for for https://github.com/wevm/wagmi/issues/3981\n    [key in keyof chains]: viem_WriteContractParameters<\n      abi,\n      functionName,\n      args,\n      chains[key],\n      Account,\n      chains[key],\n      allFunctionNames\n    >\n  }[number] &\n    Compute<ChainIdParameter<config, chainId>> &\n    ConnectorParameter & {\n      /** @deprecated */\n      __mode?: 'prepared'\n    }\n>\n\nexport type WriteContractReturnType = viem_WriteContractReturnType\n\nexport type WriteContractErrorType =\n  // getConnectorClient()\n  | GetConnectorClientErrorType\n  // base\n  | BaseErrorType\n  | ErrorType\n  // viem\n  | viem_WriteContractErrorType\n\n/** https://wagmi.sh/core/api/actions/writeContract */\nexport async function writeContract<\n  config extends Config,\n  const abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n  args extends ContractFunctionArgs<\n    abi,\n    'nonpayable' | 'payable',\n    functionName\n  >,\n  chainId extends config['chains'][number]['id'],\n>(\n  config: config,\n  parameters: WriteContractParameters<abi, functionName, args, config, chainId>,\n): Promise<WriteContractReturnType> {\n  const { account, chainId, connector, ...request } = parameters\n\n  let client: Client\n  if (typeof account === 'object' && account?.type === 'local')\n    client = config.getClient({ chainId })\n  else\n    client = await getConnectorClient(config, {\n      account: account ?? undefined,\n      chainId,\n      connector,\n    })\n\n  const action = getAction(client, viem_writeContract, 'writeContract')\n  const hash = await action({\n    ...(request as any),\n    ...(account ? { account } : {}),\n    chain: chainId ? { id: chainId } : null,\n  })\n\n  return hash\n}\n"],"mappings":"AAQA,SAIEA,aAAa,IAAIC,kBAAkB,QAC9B,cAAc;AAUrB,SAASC,SAAS,QAAQ,uBAAuB;AACjD,SAEEC,kBAAkB,QACb,yBAAyB;AAmDhC;AACA,OAAO,eAAeH,aAAaA,CAWjCI,MAAc,EACdC,UAA6E;EAE7E,MAAM;IAAEC,OAAO;IAAEC,OAAO;IAAEC,SAAS;IAAE,GAAGC;EAAO,CAAE,GAAGJ,UAAU;EAE9D,IAAIK,MAAc;EAClB,IAAI,OAAOJ,OAAO,KAAK,QAAQ,IAAIA,OAAO,EAAEK,IAAI,KAAK,OAAO,EAC1DD,MAAM,GAAGN,MAAM,CAACQ,SAAS,CAAC;IAAEL;EAAO,CAAE,CAAC,MAEtCG,MAAM,GAAG,MAAMP,kBAAkB,CAACC,MAAM,EAAE;IACxCE,OAAO,EAAEA,OAAO,IAAIO,SAAS;IAC7BN,OAAO;IACPC;GACD,CAAC;EAEJ,MAAMM,MAAM,GAAGZ,SAAS,CAACQ,MAAM,EAAET,kBAAkB,EAAE,eAAe,CAAC;EACrE,MAAMc,IAAI,GAAG,MAAMD,MAAM,CAAC;IACxB,GAAIL,OAAe;IACnB,IAAIH,OAAO,GAAG;MAAEA;IAAO,CAAE,GAAG,EAAE,CAAC;IAC/BU,KAAK,EAAET,OAAO,GAAG;MAAEU,EAAE,EAAEV;IAAO,CAAE,GAAG;GACpC,CAAC;EAEF,OAAOQ,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}