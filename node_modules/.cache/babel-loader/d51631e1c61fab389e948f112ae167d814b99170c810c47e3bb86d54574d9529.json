{"ast":null,"code":"import { sendTransaction } from '../../../actions/wallet/sendTransaction.js';\nimport { withCache } from '../../../utils/promise/withCache.js';\nimport { executionMode } from '../constants.js';\nimport { ExecuteUnsupportedError } from '../errors.js';\nimport { encodeExecuteData } from '../utils/encodeExecuteData.js';\nimport { getExecuteError } from '../utils/getExecuteError.js';\nimport { supportsExecutionMode } from './supportsExecutionMode.js';\n/**\n * Executes call(s) using the `execute` function on an [ERC-7821-compatible contract](https://eips.ethereum.org/EIPS/eip-7821).\n *\n * @example\n * ```ts\n * import { createClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { execute } from 'viem/experimental/erc7821'\n *\n * const account = privateKeyToAccount('0x...')\n *\n * const client = createClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n *\n * const hash = await execute(client, {\n *   account,\n *   calls: [{\n *     {\n *       data: '0xdeadbeef',\n *       to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *     },\n *     {\n *       to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *       value: 69420n,\n *     },\n *   }],\n *   to: account.address,\n * })\n * ```\n *\n * @example\n * ```ts\n * // Account Hoisting\n * import { createClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { execute } from 'viem/experimental/erc7821'\n *\n * const account = privateKeyToAccount('0x...')\n *\n * const client = createClient({\n *   account,\n *   chain: mainnet,\n *   transport: http(),\n * })\n *\n * const hash = await execute(client, {\n *   calls: [{\n *     {\n *       data: '0xdeadbeef',\n *       to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *     },\n *     {\n *       to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *       value: 69420n,\n *     },\n *   }],\n *   to: account.address,\n * })\n * ```\n *\n * @param client - Client to use.\n * @param parameters - {@link ExecuteParameters}\n * @returns Transaction hash. {@link ExecuteReturnType}\n */\nexport async function execute(client, parameters) {\n  const {\n    authorizationList,\n    calls,\n    opData\n  } = parameters;\n  const address = authorizationList?.[0]?.address ?? parameters.address;\n  const mode = opData ? executionMode.opData : executionMode.default;\n  const supported = await withCache(() => supportsExecutionMode(client, {\n    address,\n    mode\n  }), {\n    cacheKey: `supportsExecutionMode.${client.uid}.${address}.${mode}`\n  });\n  if (!supported) throw new ExecuteUnsupportedError();\n  try {\n    return await sendTransaction(client, {\n      ...parameters,\n      to: parameters.address,\n      data: encodeExecuteData({\n        calls,\n        opData\n      })\n    });\n  } catch (e) {\n    throw getExecuteError(e, {\n      calls\n    });\n  }\n}","map":{"version":3,"names":["sendTransaction","withCache","executionMode","ExecuteUnsupportedError","encodeExecuteData","getExecuteError","supportsExecutionMode","execute","client","parameters","authorizationList","calls","opData","address","mode","default","supported","cacheKey","uid","to","data","e"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/viem/experimental/erc7821/actions/execute.ts"],"sourcesContent":["import type { Address, Narrow } from 'abitype'\n\nimport {\n  type SendTransactionErrorType,\n  sendTransaction,\n} from '../../../actions/wallet/sendTransaction.js'\nimport type { Client } from '../../../clients/createClient.js'\nimport type { Transport } from '../../../clients/transports/createTransport.js'\nimport type { BaseError } from '../../../errors/base.js'\nimport type { ErrorType } from '../../../errors/utils.js'\nimport type { Account, GetAccountParameter } from '../../../types/account.js'\nimport type { Calls } from '../../../types/calls.js'\nimport type {\n  Chain,\n  DeriveChain,\n  GetChainParameter,\n} from '../../../types/chain.js'\nimport type { Hex } from '../../../types/misc.js'\nimport type { UnionEvaluate, UnionPick } from '../../../types/utils.js'\nimport type { FormattedTransactionRequest } from '../../../utils/formatters/transactionRequest.js'\nimport { withCache } from '../../../utils/promise/withCache.js'\nimport { executionMode } from '../constants.js'\nimport { ExecuteUnsupportedError } from '../errors.js'\nimport {\n  type EncodeExecuteDataErrorType,\n  encodeExecuteData,\n} from '../utils/encodeExecuteData.js'\nimport {\n  type GetExecuteErrorReturnType,\n  getExecuteError,\n} from '../utils/getExecuteError.js'\nimport { supportsExecutionMode } from './supportsExecutionMode.js'\n\nexport type ExecuteParameters<\n  calls extends readonly unknown[] = readonly unknown[],\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n  chainOverride extends Chain | undefined = Chain | undefined,\n  _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>,\n> = UnionEvaluate<\n  UnionPick<\n    FormattedTransactionRequest<_derivedChain>,\n    | 'authorizationList'\n    | 'gas'\n    | 'gasPrice'\n    | 'maxFeePerGas'\n    | 'maxPriorityFeePerGas'\n  >\n> &\n  GetAccountParameter<account, Account | Address, true, true> &\n  GetChainParameter<chain, chainOverride> & {\n    /** Address that will execute the calls. */\n    address: Address\n    /** Calls to execute. */\n    calls: Calls<Narrow<calls>>\n    /** Additional data to include for execution. */\n    opData?: Hex | undefined\n  }\n\nexport type ExecuteReturnType = Hex\n\nexport type ExecuteErrorType =\n  | GetExecuteErrorReturnType\n  | EncodeExecuteDataErrorType\n  | SendTransactionErrorType\n  | ErrorType\n\n/**\n * Executes call(s) using the `execute` function on an [ERC-7821-compatible contract](https://eips.ethereum.org/EIPS/eip-7821).\n *\n * @example\n * ```ts\n * import { createClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { execute } from 'viem/experimental/erc7821'\n *\n * const account = privateKeyToAccount('0x...')\n *\n * const client = createClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n *\n * const hash = await execute(client, {\n *   account,\n *   calls: [{\n *     {\n *       data: '0xdeadbeef',\n *       to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *     },\n *     {\n *       to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *       value: 69420n,\n *     },\n *   }],\n *   to: account.address,\n * })\n * ```\n *\n * @example\n * ```ts\n * // Account Hoisting\n * import { createClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { execute } from 'viem/experimental/erc7821'\n *\n * const account = privateKeyToAccount('0x...')\n *\n * const client = createClient({\n *   account,\n *   chain: mainnet,\n *   transport: http(),\n * })\n *\n * const hash = await execute(client, {\n *   calls: [{\n *     {\n *       data: '0xdeadbeef',\n *       to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *     },\n *     {\n *       to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *       value: 69420n,\n *     },\n *   }],\n *   to: account.address,\n * })\n * ```\n *\n * @param client - Client to use.\n * @param parameters - {@link ExecuteParameters}\n * @returns Transaction hash. {@link ExecuteReturnType}\n */\nexport async function execute<\n  const calls extends readonly unknown[],\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n  chainOverride extends Chain | undefined = undefined,\n>(\n  client: Client<Transport, chain, account>,\n  parameters: ExecuteParameters<calls, chain, account, chainOverride>,\n): Promise<ExecuteReturnType> {\n  const { authorizationList, calls, opData } = parameters\n\n  const address = authorizationList?.[0]?.address ?? parameters.address\n  const mode = opData ? executionMode.opData : executionMode.default\n\n  const supported = await withCache(\n    () =>\n      supportsExecutionMode(client, {\n        address,\n        mode,\n      }),\n    {\n      cacheKey: `supportsExecutionMode.${client.uid}.${address}.${mode}`,\n    },\n  )\n  if (!supported) throw new ExecuteUnsupportedError()\n\n  try {\n    return await sendTransaction(client, {\n      ...parameters,\n      to: parameters.address,\n      data: encodeExecuteData({ calls, opData }),\n    } as any)\n  } catch (e) {\n    throw getExecuteError(e as BaseError, { calls })\n  }\n}\n"],"mappings":"AAEA,SAEEA,eAAe,QACV,4CAA4C;AAenD,SAASC,SAAS,QAAQ,qCAAqC;AAC/D,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,uBAAuB,QAAQ,cAAc;AACtD,SAEEC,iBAAiB,QACZ,+BAA+B;AACtC,SAEEC,eAAe,QACV,6BAA6B;AACpC,SAASC,qBAAqB,QAAQ,4BAA4B;AAoClE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoEA,OAAO,eAAeC,OAAOA,CAM3BC,MAAyC,EACzCC,UAAmE;EAEnE,MAAM;IAAEC,iBAAiB;IAAEC,KAAK;IAAEC;EAAM,CAAE,GAAGH,UAAU;EAEvD,MAAMI,OAAO,GAAGH,iBAAiB,GAAG,CAAC,CAAC,EAAEG,OAAO,IAAIJ,UAAU,CAACI,OAAO;EACrE,MAAMC,IAAI,GAAGF,MAAM,GAAGV,aAAa,CAACU,MAAM,GAAGV,aAAa,CAACa,OAAO;EAElE,MAAMC,SAAS,GAAG,MAAMf,SAAS,CAC/B,MACEK,qBAAqB,CAACE,MAAM,EAAE;IAC5BK,OAAO;IACPC;GACD,CAAC,EACJ;IACEG,QAAQ,EAAE,yBAAyBT,MAAM,CAACU,GAAG,IAAIL,OAAO,IAAIC,IAAI;GACjE,CACF;EACD,IAAI,CAACE,SAAS,EAAE,MAAM,IAAIb,uBAAuB,EAAE;EAEnD,IAAI;IACF,OAAO,MAAMH,eAAe,CAACQ,MAAM,EAAE;MACnC,GAAGC,UAAU;MACbU,EAAE,EAAEV,UAAU,CAACI,OAAO;MACtBO,IAAI,EAAEhB,iBAAiB,CAAC;QAAEO,KAAK;QAAEC;MAAM,CAAE;KACnC,CAAC;EACX,CAAC,CAAC,OAAOS,CAAC,EAAE;IACV,MAAMhB,eAAe,CAACgB,CAAc,EAAE;MAAEV;IAAK,CAAE,CAAC;EAClD;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}