{"ast":null,"code":"/**\n * blake2b (64-bit) & blake2s (8 to 32-bit) hash functions.\n * b could have been faster, but there is no fast u64 in js, so s is 1.5x faster.\n * @module\n */\nimport { BSIGMA, G1s, G2s } from \"./_blake.js\";\nimport { SHA256_IV } from \"./_md.js\";\nimport * as u64 from \"./_u64.js\";\n// prettier-ignore\nimport { abytes, aexists, anumber, aoutput, clean, createOptHasher, Hash, swap32IfBE, swap8IfBE, toBytes, u32 } from \"./utils.js\";\n// Same as SHA512_IV, but swapped endianness: LE instead of BE. iv[1] is iv[0], etc.\nconst B2B_IV = /* @__PURE__ */Uint32Array.from([0xf3bcc908, 0x6a09e667, 0x84caa73b, 0xbb67ae85, 0xfe94f82b, 0x3c6ef372, 0x5f1d36f1, 0xa54ff53a, 0xade682d1, 0x510e527f, 0x2b3e6c1f, 0x9b05688c, 0xfb41bd6b, 0x1f83d9ab, 0x137e2179, 0x5be0cd19]);\n// Temporary buffer\nconst BBUF = /* @__PURE__ */new Uint32Array(32);\n// Mixing function G splitted in two halfs\nfunction G1b(a, b, c, d, msg, x) {\n  // NOTE: V is LE here\n  const Xl = msg[x],\n    Xh = msg[x + 1]; // prettier-ignore\n  let Al = BBUF[2 * a],\n    Ah = BBUF[2 * a + 1]; // prettier-ignore\n  let Bl = BBUF[2 * b],\n    Bh = BBUF[2 * b + 1]; // prettier-ignore\n  let Cl = BBUF[2 * c],\n    Ch = BBUF[2 * c + 1]; // prettier-ignore\n  let Dl = BBUF[2 * d],\n    Dh = BBUF[2 * d + 1]; // prettier-ignore\n  // v[a] = (v[a] + v[b] + x) | 0;\n  let ll = u64.add3L(Al, Bl, Xl);\n  Ah = u64.add3H(ll, Ah, Bh, Xh);\n  Al = ll | 0;\n  // v[d] = rotr(v[d] ^ v[a], 32)\n  ({\n    Dh,\n    Dl\n  } = {\n    Dh: Dh ^ Ah,\n    Dl: Dl ^ Al\n  });\n  ({\n    Dh,\n    Dl\n  } = {\n    Dh: u64.rotr32H(Dh, Dl),\n    Dl: u64.rotr32L(Dh, Dl)\n  });\n  // v[c] = (v[c] + v[d]) | 0;\n  ({\n    h: Ch,\n    l: Cl\n  } = u64.add(Ch, Cl, Dh, Dl));\n  // v[b] = rotr(v[b] ^ v[c], 24)\n  ({\n    Bh,\n    Bl\n  } = {\n    Bh: Bh ^ Ch,\n    Bl: Bl ^ Cl\n  });\n  ({\n    Bh,\n    Bl\n  } = {\n    Bh: u64.rotrSH(Bh, Bl, 24),\n    Bl: u64.rotrSL(Bh, Bl, 24)\n  });\n  BBUF[2 * a] = Al, BBUF[2 * a + 1] = Ah;\n  BBUF[2 * b] = Bl, BBUF[2 * b + 1] = Bh;\n  BBUF[2 * c] = Cl, BBUF[2 * c + 1] = Ch;\n  BBUF[2 * d] = Dl, BBUF[2 * d + 1] = Dh;\n}\nfunction G2b(a, b, c, d, msg, x) {\n  // NOTE: V is LE here\n  const Xl = msg[x],\n    Xh = msg[x + 1]; // prettier-ignore\n  let Al = BBUF[2 * a],\n    Ah = BBUF[2 * a + 1]; // prettier-ignore\n  let Bl = BBUF[2 * b],\n    Bh = BBUF[2 * b + 1]; // prettier-ignore\n  let Cl = BBUF[2 * c],\n    Ch = BBUF[2 * c + 1]; // prettier-ignore\n  let Dl = BBUF[2 * d],\n    Dh = BBUF[2 * d + 1]; // prettier-ignore\n  // v[a] = (v[a] + v[b] + x) | 0;\n  let ll = u64.add3L(Al, Bl, Xl);\n  Ah = u64.add3H(ll, Ah, Bh, Xh);\n  Al = ll | 0;\n  // v[d] = rotr(v[d] ^ v[a], 16)\n  ({\n    Dh,\n    Dl\n  } = {\n    Dh: Dh ^ Ah,\n    Dl: Dl ^ Al\n  });\n  ({\n    Dh,\n    Dl\n  } = {\n    Dh: u64.rotrSH(Dh, Dl, 16),\n    Dl: u64.rotrSL(Dh, Dl, 16)\n  });\n  // v[c] = (v[c] + v[d]) | 0;\n  ({\n    h: Ch,\n    l: Cl\n  } = u64.add(Ch, Cl, Dh, Dl));\n  // v[b] = rotr(v[b] ^ v[c], 63)\n  ({\n    Bh,\n    Bl\n  } = {\n    Bh: Bh ^ Ch,\n    Bl: Bl ^ Cl\n  });\n  ({\n    Bh,\n    Bl\n  } = {\n    Bh: u64.rotrBH(Bh, Bl, 63),\n    Bl: u64.rotrBL(Bh, Bl, 63)\n  });\n  BBUF[2 * a] = Al, BBUF[2 * a + 1] = Ah;\n  BBUF[2 * b] = Bl, BBUF[2 * b + 1] = Bh;\n  BBUF[2 * c] = Cl, BBUF[2 * c + 1] = Ch;\n  BBUF[2 * d] = Dl, BBUF[2 * d + 1] = Dh;\n}\nfunction checkBlake2Opts(outputLen, opts = {}, keyLen, saltLen, persLen) {\n  anumber(keyLen);\n  if (outputLen < 0 || outputLen > keyLen) throw new Error('outputLen bigger than keyLen');\n  const {\n    key,\n    salt,\n    personalization\n  } = opts;\n  if (key !== undefined && (key.length < 1 || key.length > keyLen)) throw new Error('key length must be undefined or 1..' + keyLen);\n  if (salt !== undefined && salt.length !== saltLen) throw new Error('salt must be undefined or ' + saltLen);\n  if (personalization !== undefined && personalization.length !== persLen) throw new Error('personalization must be undefined or ' + persLen);\n}\n/** Class, from which others are subclassed. */\nexport class BLAKE2 extends Hash {\n  constructor(blockLen, outputLen) {\n    super();\n    this.finished = false;\n    this.destroyed = false;\n    this.length = 0;\n    this.pos = 0;\n    anumber(blockLen);\n    anumber(outputLen);\n    this.blockLen = blockLen;\n    this.outputLen = outputLen;\n    this.buffer = new Uint8Array(blockLen);\n    this.buffer32 = u32(this.buffer);\n  }\n  update(data) {\n    aexists(this);\n    data = toBytes(data);\n    abytes(data);\n    // Main difference with other hashes: there is flag for last block,\n    // so we cannot process current block before we know that there\n    // is the next one. This significantly complicates logic and reduces ability\n    // to do zero-copy processing\n    const {\n      blockLen,\n      buffer,\n      buffer32\n    } = this;\n    const len = data.length;\n    const offset = data.byteOffset;\n    const buf = data.buffer;\n    for (let pos = 0; pos < len;) {\n      // If buffer is full and we still have input (don't process last block, same as blake2s)\n      if (this.pos === blockLen) {\n        swap32IfBE(buffer32);\n        this.compress(buffer32, 0, false);\n        swap32IfBE(buffer32);\n        this.pos = 0;\n      }\n      const take = Math.min(blockLen - this.pos, len - pos);\n      const dataOffset = offset + pos;\n      // full block && aligned to 4 bytes && not last in input\n      if (take === blockLen && !(dataOffset % 4) && pos + take < len) {\n        const data32 = new Uint32Array(buf, dataOffset, Math.floor((len - pos) / 4));\n        swap32IfBE(data32);\n        for (let pos32 = 0; pos + blockLen < len; pos32 += buffer32.length, pos += blockLen) {\n          this.length += blockLen;\n          this.compress(data32, pos32, false);\n        }\n        swap32IfBE(data32);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      this.length += take;\n      pos += take;\n    }\n    return this;\n  }\n  digestInto(out) {\n    aexists(this);\n    aoutput(out, this);\n    const {\n      pos,\n      buffer32\n    } = this;\n    this.finished = true;\n    // Padding\n    clean(this.buffer.subarray(pos));\n    swap32IfBE(buffer32);\n    this.compress(buffer32, 0, true);\n    swap32IfBE(buffer32);\n    const out32 = u32(out);\n    this.get().forEach((v, i) => out32[i] = swap8IfBE(v));\n  }\n  digest() {\n    const {\n      buffer,\n      outputLen\n    } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to) {\n    const {\n      buffer,\n      length,\n      finished,\n      destroyed,\n      outputLen,\n      pos\n    } = this;\n    to || (to = new this.constructor({\n      dkLen: outputLen\n    }));\n    to.set(...this.get());\n    to.buffer.set(buffer);\n    to.destroyed = destroyed;\n    to.finished = finished;\n    to.length = length;\n    to.pos = pos;\n    // @ts-ignore\n    to.outputLen = outputLen;\n    return to;\n  }\n  clone() {\n    return this._cloneInto();\n  }\n}\nexport class BLAKE2b extends BLAKE2 {\n  constructor(opts = {}) {\n    const olen = opts.dkLen === undefined ? 64 : opts.dkLen;\n    super(128, olen);\n    // Same as SHA-512, but LE\n    this.v0l = B2B_IV[0] | 0;\n    this.v0h = B2B_IV[1] | 0;\n    this.v1l = B2B_IV[2] | 0;\n    this.v1h = B2B_IV[3] | 0;\n    this.v2l = B2B_IV[4] | 0;\n    this.v2h = B2B_IV[5] | 0;\n    this.v3l = B2B_IV[6] | 0;\n    this.v3h = B2B_IV[7] | 0;\n    this.v4l = B2B_IV[8] | 0;\n    this.v4h = B2B_IV[9] | 0;\n    this.v5l = B2B_IV[10] | 0;\n    this.v5h = B2B_IV[11] | 0;\n    this.v6l = B2B_IV[12] | 0;\n    this.v6h = B2B_IV[13] | 0;\n    this.v7l = B2B_IV[14] | 0;\n    this.v7h = B2B_IV[15] | 0;\n    checkBlake2Opts(olen, opts, 64, 16, 16);\n    let {\n      key,\n      personalization,\n      salt\n    } = opts;\n    let keyLength = 0;\n    if (key !== undefined) {\n      key = toBytes(key);\n      keyLength = key.length;\n    }\n    this.v0l ^= this.outputLen | keyLength << 8 | 0x01 << 16 | 0x01 << 24;\n    if (salt !== undefined) {\n      salt = toBytes(salt);\n      const slt = u32(salt);\n      this.v4l ^= swap8IfBE(slt[0]);\n      this.v4h ^= swap8IfBE(slt[1]);\n      this.v5l ^= swap8IfBE(slt[2]);\n      this.v5h ^= swap8IfBE(slt[3]);\n    }\n    if (personalization !== undefined) {\n      personalization = toBytes(personalization);\n      const pers = u32(personalization);\n      this.v6l ^= swap8IfBE(pers[0]);\n      this.v6h ^= swap8IfBE(pers[1]);\n      this.v7l ^= swap8IfBE(pers[2]);\n      this.v7h ^= swap8IfBE(pers[3]);\n    }\n    if (key !== undefined) {\n      // Pad to blockLen and update\n      const tmp = new Uint8Array(this.blockLen);\n      tmp.set(key);\n      this.update(tmp);\n    }\n  }\n  // prettier-ignore\n  get() {\n    let {\n      v0l,\n      v0h,\n      v1l,\n      v1h,\n      v2l,\n      v2h,\n      v3l,\n      v3h,\n      v4l,\n      v4h,\n      v5l,\n      v5h,\n      v6l,\n      v6h,\n      v7l,\n      v7h\n    } = this;\n    return [v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h];\n  }\n  // prettier-ignore\n  set(v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h) {\n    this.v0l = v0l | 0;\n    this.v0h = v0h | 0;\n    this.v1l = v1l | 0;\n    this.v1h = v1h | 0;\n    this.v2l = v2l | 0;\n    this.v2h = v2h | 0;\n    this.v3l = v3l | 0;\n    this.v3h = v3h | 0;\n    this.v4l = v4l | 0;\n    this.v4h = v4h | 0;\n    this.v5l = v5l | 0;\n    this.v5h = v5h | 0;\n    this.v6l = v6l | 0;\n    this.v6h = v6h | 0;\n    this.v7l = v7l | 0;\n    this.v7h = v7h | 0;\n  }\n  compress(msg, offset, isLast) {\n    this.get().forEach((v, i) => BBUF[i] = v); // First half from state.\n    BBUF.set(B2B_IV, 16); // Second half from IV.\n    let {\n      h,\n      l\n    } = u64.fromBig(BigInt(this.length));\n    BBUF[24] = B2B_IV[8] ^ l; // Low word of the offset.\n    BBUF[25] = B2B_IV[9] ^ h; // High word.\n    // Invert all bits for last block\n    if (isLast) {\n      BBUF[28] = ~BBUF[28];\n      BBUF[29] = ~BBUF[29];\n    }\n    let j = 0;\n    const s = BSIGMA;\n    for (let i = 0; i < 12; i++) {\n      G1b(0, 4, 8, 12, msg, offset + 2 * s[j++]);\n      G2b(0, 4, 8, 12, msg, offset + 2 * s[j++]);\n      G1b(1, 5, 9, 13, msg, offset + 2 * s[j++]);\n      G2b(1, 5, 9, 13, msg, offset + 2 * s[j++]);\n      G1b(2, 6, 10, 14, msg, offset + 2 * s[j++]);\n      G2b(2, 6, 10, 14, msg, offset + 2 * s[j++]);\n      G1b(3, 7, 11, 15, msg, offset + 2 * s[j++]);\n      G2b(3, 7, 11, 15, msg, offset + 2 * s[j++]);\n      G1b(0, 5, 10, 15, msg, offset + 2 * s[j++]);\n      G2b(0, 5, 10, 15, msg, offset + 2 * s[j++]);\n      G1b(1, 6, 11, 12, msg, offset + 2 * s[j++]);\n      G2b(1, 6, 11, 12, msg, offset + 2 * s[j++]);\n      G1b(2, 7, 8, 13, msg, offset + 2 * s[j++]);\n      G2b(2, 7, 8, 13, msg, offset + 2 * s[j++]);\n      G1b(3, 4, 9, 14, msg, offset + 2 * s[j++]);\n      G2b(3, 4, 9, 14, msg, offset + 2 * s[j++]);\n    }\n    this.v0l ^= BBUF[0] ^ BBUF[16];\n    this.v0h ^= BBUF[1] ^ BBUF[17];\n    this.v1l ^= BBUF[2] ^ BBUF[18];\n    this.v1h ^= BBUF[3] ^ BBUF[19];\n    this.v2l ^= BBUF[4] ^ BBUF[20];\n    this.v2h ^= BBUF[5] ^ BBUF[21];\n    this.v3l ^= BBUF[6] ^ BBUF[22];\n    this.v3h ^= BBUF[7] ^ BBUF[23];\n    this.v4l ^= BBUF[8] ^ BBUF[24];\n    this.v4h ^= BBUF[9] ^ BBUF[25];\n    this.v5l ^= BBUF[10] ^ BBUF[26];\n    this.v5h ^= BBUF[11] ^ BBUF[27];\n    this.v6l ^= BBUF[12] ^ BBUF[28];\n    this.v6h ^= BBUF[13] ^ BBUF[29];\n    this.v7l ^= BBUF[14] ^ BBUF[30];\n    this.v7h ^= BBUF[15] ^ BBUF[31];\n    clean(BBUF);\n  }\n  destroy() {\n    this.destroyed = true;\n    clean(this.buffer32);\n    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n  }\n}\n/**\n * Blake2b hash function. 64-bit. 1.5x slower than blake2s in JS.\n * @param msg - message that would be hashed\n * @param opts - dkLen output length, key for MAC mode, salt, personalization\n */\nexport const blake2b = /* @__PURE__ */createOptHasher(opts => new BLAKE2b(opts));\n// prettier-ignore\nexport function compress(s, offset, msg, rounds, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15) {\n  let j = 0;\n  for (let i = 0; i < rounds; i++) {\n    ({\n      a: v0,\n      b: v4,\n      c: v8,\n      d: v12\n    } = G1s(v0, v4, v8, v12, msg[offset + s[j++]]));\n    ({\n      a: v0,\n      b: v4,\n      c: v8,\n      d: v12\n    } = G2s(v0, v4, v8, v12, msg[offset + s[j++]]));\n    ({\n      a: v1,\n      b: v5,\n      c: v9,\n      d: v13\n    } = G1s(v1, v5, v9, v13, msg[offset + s[j++]]));\n    ({\n      a: v1,\n      b: v5,\n      c: v9,\n      d: v13\n    } = G2s(v1, v5, v9, v13, msg[offset + s[j++]]));\n    ({\n      a: v2,\n      b: v6,\n      c: v10,\n      d: v14\n    } = G1s(v2, v6, v10, v14, msg[offset + s[j++]]));\n    ({\n      a: v2,\n      b: v6,\n      c: v10,\n      d: v14\n    } = G2s(v2, v6, v10, v14, msg[offset + s[j++]]));\n    ({\n      a: v3,\n      b: v7,\n      c: v11,\n      d: v15\n    } = G1s(v3, v7, v11, v15, msg[offset + s[j++]]));\n    ({\n      a: v3,\n      b: v7,\n      c: v11,\n      d: v15\n    } = G2s(v3, v7, v11, v15, msg[offset + s[j++]]));\n    ({\n      a: v0,\n      b: v5,\n      c: v10,\n      d: v15\n    } = G1s(v0, v5, v10, v15, msg[offset + s[j++]]));\n    ({\n      a: v0,\n      b: v5,\n      c: v10,\n      d: v15\n    } = G2s(v0, v5, v10, v15, msg[offset + s[j++]]));\n    ({\n      a: v1,\n      b: v6,\n      c: v11,\n      d: v12\n    } = G1s(v1, v6, v11, v12, msg[offset + s[j++]]));\n    ({\n      a: v1,\n      b: v6,\n      c: v11,\n      d: v12\n    } = G2s(v1, v6, v11, v12, msg[offset + s[j++]]));\n    ({\n      a: v2,\n      b: v7,\n      c: v8,\n      d: v13\n    } = G1s(v2, v7, v8, v13, msg[offset + s[j++]]));\n    ({\n      a: v2,\n      b: v7,\n      c: v8,\n      d: v13\n    } = G2s(v2, v7, v8, v13, msg[offset + s[j++]]));\n    ({\n      a: v3,\n      b: v4,\n      c: v9,\n      d: v14\n    } = G1s(v3, v4, v9, v14, msg[offset + s[j++]]));\n    ({\n      a: v3,\n      b: v4,\n      c: v9,\n      d: v14\n    } = G2s(v3, v4, v9, v14, msg[offset + s[j++]]));\n  }\n  return {\n    v0,\n    v1,\n    v2,\n    v3,\n    v4,\n    v5,\n    v6,\n    v7,\n    v8,\n    v9,\n    v10,\n    v11,\n    v12,\n    v13,\n    v14,\n    v15\n  };\n}\nconst B2S_IV = SHA256_IV;\nexport class BLAKE2s extends BLAKE2 {\n  constructor(opts = {}) {\n    const olen = opts.dkLen === undefined ? 32 : opts.dkLen;\n    super(64, olen);\n    // Internal state, same as SHA-256\n    this.v0 = B2S_IV[0] | 0;\n    this.v1 = B2S_IV[1] | 0;\n    this.v2 = B2S_IV[2] | 0;\n    this.v3 = B2S_IV[3] | 0;\n    this.v4 = B2S_IV[4] | 0;\n    this.v5 = B2S_IV[5] | 0;\n    this.v6 = B2S_IV[6] | 0;\n    this.v7 = B2S_IV[7] | 0;\n    checkBlake2Opts(olen, opts, 32, 8, 8);\n    let {\n      key,\n      personalization,\n      salt\n    } = opts;\n    let keyLength = 0;\n    if (key !== undefined) {\n      key = toBytes(key);\n      keyLength = key.length;\n    }\n    this.v0 ^= this.outputLen | keyLength << 8 | 0x01 << 16 | 0x01 << 24;\n    if (salt !== undefined) {\n      salt = toBytes(salt);\n      const slt = u32(salt);\n      this.v4 ^= swap8IfBE(slt[0]);\n      this.v5 ^= swap8IfBE(slt[1]);\n    }\n    if (personalization !== undefined) {\n      personalization = toBytes(personalization);\n      const pers = u32(personalization);\n      this.v6 ^= swap8IfBE(pers[0]);\n      this.v7 ^= swap8IfBE(pers[1]);\n    }\n    if (key !== undefined) {\n      // Pad to blockLen and update\n      abytes(key);\n      const tmp = new Uint8Array(this.blockLen);\n      tmp.set(key);\n      this.update(tmp);\n    }\n  }\n  get() {\n    const {\n      v0,\n      v1,\n      v2,\n      v3,\n      v4,\n      v5,\n      v6,\n      v7\n    } = this;\n    return [v0, v1, v2, v3, v4, v5, v6, v7];\n  }\n  // prettier-ignore\n  set(v0, v1, v2, v3, v4, v5, v6, v7) {\n    this.v0 = v0 | 0;\n    this.v1 = v1 | 0;\n    this.v2 = v2 | 0;\n    this.v3 = v3 | 0;\n    this.v4 = v4 | 0;\n    this.v5 = v5 | 0;\n    this.v6 = v6 | 0;\n    this.v7 = v7 | 0;\n  }\n  compress(msg, offset, isLast) {\n    const {\n      h,\n      l\n    } = u64.fromBig(BigInt(this.length));\n    // prettier-ignore\n    const {\n      v0,\n      v1,\n      v2,\n      v3,\n      v4,\n      v5,\n      v6,\n      v7,\n      v8,\n      v9,\n      v10,\n      v11,\n      v12,\n      v13,\n      v14,\n      v15\n    } = compress(BSIGMA, offset, msg, 10, this.v0, this.v1, this.v2, this.v3, this.v4, this.v5, this.v6, this.v7, B2S_IV[0], B2S_IV[1], B2S_IV[2], B2S_IV[3], l ^ B2S_IV[4], h ^ B2S_IV[5], isLast ? ~B2S_IV[6] : B2S_IV[6], B2S_IV[7]);\n    this.v0 ^= v0 ^ v8;\n    this.v1 ^= v1 ^ v9;\n    this.v2 ^= v2 ^ v10;\n    this.v3 ^= v3 ^ v11;\n    this.v4 ^= v4 ^ v12;\n    this.v5 ^= v5 ^ v13;\n    this.v6 ^= v6 ^ v14;\n    this.v7 ^= v7 ^ v15;\n  }\n  destroy() {\n    this.destroyed = true;\n    clean(this.buffer32);\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n  }\n}\n/**\n * Blake2s hash function. Focuses on 8-bit to 32-bit platforms. 1.5x faster than blake2b in JS.\n * @param msg - message that would be hashed\n * @param opts - dkLen output length, key for MAC mode, salt, personalization\n */\nexport const blake2s = /* @__PURE__ */createOptHasher(opts => new BLAKE2s(opts));","map":{"version":3,"names":["BSIGMA","G1s","G2s","SHA256_IV","u64","abytes","aexists","anumber","aoutput","clean","createOptHasher","Hash","swap32IfBE","swap8IfBE","toBytes","u32","B2B_IV","Uint32Array","from","BBUF","G1b","a","b","c","d","msg","x","Xl","Xh","Al","Ah","Bl","Bh","Cl","Ch","Dl","Dh","ll","add3L","add3H","rotr32H","rotr32L","h","l","add","rotrSH","rotrSL","G2b","rotrBH","rotrBL","checkBlake2Opts","outputLen","opts","keyLen","saltLen","persLen","Error","key","salt","personalization","undefined","length","BLAKE2","constructor","blockLen","finished","destroyed","pos","buffer","Uint8Array","buffer32","update","data","len","offset","byteOffset","buf","compress","take","Math","min","dataOffset","data32","floor","pos32","set","subarray","digestInto","out","out32","get","forEach","v","i","digest","res","slice","destroy","_cloneInto","to","dkLen","clone","BLAKE2b","olen","v0l","v0h","v1l","v1h","v2l","v2h","v3l","v3h","v4l","v4h","v5l","v5h","v6l","v6h","v7l","v7h","keyLength","slt","pers","tmp","isLast","fromBig","BigInt","j","s","blake2b","rounds","v0","v1","v2","v3","v4","v5","v6","v7","v8","v9","v10","v11","v12","v13","v14","v15","B2S_IV","BLAKE2s","blake2s"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/ox/node_modules/@noble/hashes/src/blake2.ts"],"sourcesContent":["/**\n * blake2b (64-bit) & blake2s (8 to 32-bit) hash functions.\n * b could have been faster, but there is no fast u64 in js, so s is 1.5x faster.\n * @module\n */\nimport { BSIGMA, G1s, G2s } from './_blake.ts';\nimport { SHA256_IV } from './_md.ts';\nimport * as u64 from './_u64.ts';\n// prettier-ignore\nimport {\n  abytes, aexists, anumber, aoutput,\n  clean, createOptHasher, Hash, swap32IfBE, swap8IfBE, toBytes, u32,\n  type CHashO, type Input\n} from './utils.ts';\n\n/** Blake hash options. dkLen is output length. key is used in MAC mode. salt is used in KDF mode. */\nexport type Blake2Opts = {\n  dkLen?: number;\n  key?: Input;\n  salt?: Input;\n  personalization?: Input;\n};\n\n// Same as SHA512_IV, but swapped endianness: LE instead of BE. iv[1] is iv[0], etc.\nconst B2B_IV = /* @__PURE__ */ Uint32Array.from([\n  0xf3bcc908, 0x6a09e667, 0x84caa73b, 0xbb67ae85, 0xfe94f82b, 0x3c6ef372, 0x5f1d36f1, 0xa54ff53a,\n  0xade682d1, 0x510e527f, 0x2b3e6c1f, 0x9b05688c, 0xfb41bd6b, 0x1f83d9ab, 0x137e2179, 0x5be0cd19,\n]);\n// Temporary buffer\nconst BBUF = /* @__PURE__ */ new Uint32Array(32);\n\n// Mixing function G splitted in two halfs\nfunction G1b(a: number, b: number, c: number, d: number, msg: Uint32Array, x: number) {\n  // NOTE: V is LE here\n  const Xl = msg[x], Xh = msg[x + 1]; // prettier-ignore\n  let Al = BBUF[2 * a], Ah = BBUF[2 * a + 1]; // prettier-ignore\n  let Bl = BBUF[2 * b], Bh = BBUF[2 * b + 1]; // prettier-ignore\n  let Cl = BBUF[2 * c], Ch = BBUF[2 * c + 1]; // prettier-ignore\n  let Dl = BBUF[2 * d], Dh = BBUF[2 * d + 1]; // prettier-ignore\n  // v[a] = (v[a] + v[b] + x) | 0;\n  let ll = u64.add3L(Al, Bl, Xl);\n  Ah = u64.add3H(ll, Ah, Bh, Xh);\n  Al = ll | 0;\n  // v[d] = rotr(v[d] ^ v[a], 32)\n  ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });\n  ({ Dh, Dl } = { Dh: u64.rotr32H(Dh, Dl), Dl: u64.rotr32L(Dh, Dl) });\n  // v[c] = (v[c] + v[d]) | 0;\n  ({ h: Ch, l: Cl } = u64.add(Ch, Cl, Dh, Dl));\n  // v[b] = rotr(v[b] ^ v[c], 24)\n  ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });\n  ({ Bh, Bl } = { Bh: u64.rotrSH(Bh, Bl, 24), Bl: u64.rotrSL(Bh, Bl, 24) });\n  (BBUF[2 * a] = Al), (BBUF[2 * a + 1] = Ah);\n  (BBUF[2 * b] = Bl), (BBUF[2 * b + 1] = Bh);\n  (BBUF[2 * c] = Cl), (BBUF[2 * c + 1] = Ch);\n  (BBUF[2 * d] = Dl), (BBUF[2 * d + 1] = Dh);\n}\n\nfunction G2b(a: number, b: number, c: number, d: number, msg: Uint32Array, x: number) {\n  // NOTE: V is LE here\n  const Xl = msg[x], Xh = msg[x + 1]; // prettier-ignore\n  let Al = BBUF[2 * a], Ah = BBUF[2 * a + 1]; // prettier-ignore\n  let Bl = BBUF[2 * b], Bh = BBUF[2 * b + 1]; // prettier-ignore\n  let Cl = BBUF[2 * c], Ch = BBUF[2 * c + 1]; // prettier-ignore\n  let Dl = BBUF[2 * d], Dh = BBUF[2 * d + 1]; // prettier-ignore\n  // v[a] = (v[a] + v[b] + x) | 0;\n  let ll = u64.add3L(Al, Bl, Xl);\n  Ah = u64.add3H(ll, Ah, Bh, Xh);\n  Al = ll | 0;\n  // v[d] = rotr(v[d] ^ v[a], 16)\n  ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });\n  ({ Dh, Dl } = { Dh: u64.rotrSH(Dh, Dl, 16), Dl: u64.rotrSL(Dh, Dl, 16) });\n  // v[c] = (v[c] + v[d]) | 0;\n  ({ h: Ch, l: Cl } = u64.add(Ch, Cl, Dh, Dl));\n  // v[b] = rotr(v[b] ^ v[c], 63)\n  ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });\n  ({ Bh, Bl } = { Bh: u64.rotrBH(Bh, Bl, 63), Bl: u64.rotrBL(Bh, Bl, 63) });\n  (BBUF[2 * a] = Al), (BBUF[2 * a + 1] = Ah);\n  (BBUF[2 * b] = Bl), (BBUF[2 * b + 1] = Bh);\n  (BBUF[2 * c] = Cl), (BBUF[2 * c + 1] = Ch);\n  (BBUF[2 * d] = Dl), (BBUF[2 * d + 1] = Dh);\n}\n\nfunction checkBlake2Opts(\n  outputLen: number,\n  opts: Blake2Opts | undefined = {},\n  keyLen: number,\n  saltLen: number,\n  persLen: number\n) {\n  anumber(keyLen);\n  if (outputLen < 0 || outputLen > keyLen) throw new Error('outputLen bigger than keyLen');\n  const { key, salt, personalization } = opts;\n  if (key !== undefined && (key.length < 1 || key.length > keyLen))\n    throw new Error('key length must be undefined or 1..' + keyLen);\n  if (salt !== undefined && salt.length !== saltLen)\n    throw new Error('salt must be undefined or ' + saltLen);\n  if (personalization !== undefined && personalization.length !== persLen)\n    throw new Error('personalization must be undefined or ' + persLen);\n}\n\n/** Class, from which others are subclassed. */\nexport abstract class BLAKE2<T extends BLAKE2<T>> extends Hash<T> {\n  protected abstract compress(msg: Uint32Array, offset: number, isLast: boolean): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected buffer: Uint8Array;\n  protected buffer32: Uint32Array;\n  protected finished = false;\n  protected destroyed = false;\n  protected length: number = 0;\n  protected pos: number = 0;\n  readonly blockLen: number;\n  readonly outputLen: number;\n\n  constructor(blockLen: number, outputLen: number) {\n    super();\n    anumber(blockLen);\n    anumber(outputLen);\n    this.blockLen = blockLen;\n    this.outputLen = outputLen;\n    this.buffer = new Uint8Array(blockLen);\n    this.buffer32 = u32(this.buffer);\n  }\n  update(data: Input): this {\n    aexists(this);\n    data = toBytes(data);\n    abytes(data);\n    // Main difference with other hashes: there is flag for last block,\n    // so we cannot process current block before we know that there\n    // is the next one. This significantly complicates logic and reduces ability\n    // to do zero-copy processing\n    const { blockLen, buffer, buffer32 } = this;\n    const len = data.length;\n    const offset = data.byteOffset;\n    const buf = data.buffer;\n    for (let pos = 0; pos < len; ) {\n      // If buffer is full and we still have input (don't process last block, same as blake2s)\n      if (this.pos === blockLen) {\n        swap32IfBE(buffer32);\n        this.compress(buffer32, 0, false);\n        swap32IfBE(buffer32);\n        this.pos = 0;\n      }\n      const take = Math.min(blockLen - this.pos, len - pos);\n      const dataOffset = offset + pos;\n      // full block && aligned to 4 bytes && not last in input\n      if (take === blockLen && !(dataOffset % 4) && pos + take < len) {\n        const data32 = new Uint32Array(buf, dataOffset, Math.floor((len - pos) / 4));\n        swap32IfBE(data32);\n        for (let pos32 = 0; pos + blockLen < len; pos32 += buffer32.length, pos += blockLen) {\n          this.length += blockLen;\n          this.compress(data32, pos32, false);\n        }\n        swap32IfBE(data32);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      this.length += take;\n      pos += take;\n    }\n    return this;\n  }\n  digestInto(out: Uint8Array): void {\n    aexists(this);\n    aoutput(out, this);\n    const { pos, buffer32 } = this;\n    this.finished = true;\n    // Padding\n    clean(this.buffer.subarray(pos));\n    swap32IfBE(buffer32);\n    this.compress(buffer32, 0, true);\n    swap32IfBE(buffer32);\n    const out32 = u32(out);\n    this.get().forEach((v, i) => (out32[i] = swap8IfBE(v)));\n  }\n  digest(): Uint8Array {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    const { buffer, length, finished, destroyed, outputLen, pos } = this;\n    to ||= new (this.constructor as any)({ dkLen: outputLen }) as T;\n    to.set(...this.get());\n    to.buffer.set(buffer);\n    to.destroyed = destroyed;\n    to.finished = finished;\n    to.length = length;\n    to.pos = pos;\n    // @ts-ignore\n    to.outputLen = outputLen;\n    return to;\n  }\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\nexport class BLAKE2b extends BLAKE2<BLAKE2b> {\n  // Same as SHA-512, but LE\n  private v0l = B2B_IV[0] | 0;\n  private v0h = B2B_IV[1] | 0;\n  private v1l = B2B_IV[2] | 0;\n  private v1h = B2B_IV[3] | 0;\n  private v2l = B2B_IV[4] | 0;\n  private v2h = B2B_IV[5] | 0;\n  private v3l = B2B_IV[6] | 0;\n  private v3h = B2B_IV[7] | 0;\n  private v4l = B2B_IV[8] | 0;\n  private v4h = B2B_IV[9] | 0;\n  private v5l = B2B_IV[10] | 0;\n  private v5h = B2B_IV[11] | 0;\n  private v6l = B2B_IV[12] | 0;\n  private v6h = B2B_IV[13] | 0;\n  private v7l = B2B_IV[14] | 0;\n  private v7h = B2B_IV[15] | 0;\n\n  constructor(opts: Blake2Opts = {}) {\n    const olen = opts.dkLen === undefined ? 64 : opts.dkLen;\n    super(128, olen);\n    checkBlake2Opts(olen, opts, 64, 16, 16);\n    let { key, personalization, salt } = opts;\n    let keyLength = 0;\n    if (key !== undefined) {\n      key = toBytes(key);\n      keyLength = key.length;\n    }\n    this.v0l ^= this.outputLen | (keyLength << 8) | (0x01 << 16) | (0x01 << 24);\n    if (salt !== undefined) {\n      salt = toBytes(salt);\n      const slt = u32(salt);\n      this.v4l ^= swap8IfBE(slt[0]);\n      this.v4h ^= swap8IfBE(slt[1]);\n      this.v5l ^= swap8IfBE(slt[2]);\n      this.v5h ^= swap8IfBE(slt[3]);\n    }\n    if (personalization !== undefined) {\n      personalization = toBytes(personalization);\n      const pers = u32(personalization);\n      this.v6l ^= swap8IfBE(pers[0]);\n      this.v6h ^= swap8IfBE(pers[1]);\n      this.v7l ^= swap8IfBE(pers[2]);\n      this.v7h ^= swap8IfBE(pers[3]);\n    }\n    if (key !== undefined) {\n      // Pad to blockLen and update\n      const tmp = new Uint8Array(this.blockLen);\n      tmp.set(key);\n      this.update(tmp);\n    }\n  }\n  // prettier-ignore\n  protected get(): [\n    number, number, number, number, number, number, number, number,\n    number, number, number, number, number, number, number, number\n  ] {\n    let { v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h } = this;\n    return [v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h];\n  }\n  // prettier-ignore\n  protected set(\n    v0l: number, v0h: number, v1l: number, v1h: number,\n    v2l: number, v2h: number, v3l: number, v3h: number,\n    v4l: number, v4h: number, v5l: number, v5h: number,\n    v6l: number, v6h: number, v7l: number, v7h: number\n  ): void {\n    this.v0l = v0l | 0;\n    this.v0h = v0h | 0;\n    this.v1l = v1l | 0;\n    this.v1h = v1h | 0;\n    this.v2l = v2l | 0;\n    this.v2h = v2h | 0;\n    this.v3l = v3l | 0;\n    this.v3h = v3h | 0;\n    this.v4l = v4l | 0;\n    this.v4h = v4h | 0;\n    this.v5l = v5l | 0;\n    this.v5h = v5h | 0;\n    this.v6l = v6l | 0;\n    this.v6h = v6h | 0;\n    this.v7l = v7l | 0;\n    this.v7h = v7h | 0;\n  }\n  protected compress(msg: Uint32Array, offset: number, isLast: boolean): void {\n    this.get().forEach((v, i) => (BBUF[i] = v)); // First half from state.\n    BBUF.set(B2B_IV, 16); // Second half from IV.\n    let { h, l } = u64.fromBig(BigInt(this.length));\n    BBUF[24] = B2B_IV[8] ^ l; // Low word of the offset.\n    BBUF[25] = B2B_IV[9] ^ h; // High word.\n    // Invert all bits for last block\n    if (isLast) {\n      BBUF[28] = ~BBUF[28];\n      BBUF[29] = ~BBUF[29];\n    }\n    let j = 0;\n    const s = BSIGMA;\n    for (let i = 0; i < 12; i++) {\n      G1b(0, 4, 8, 12, msg, offset + 2 * s[j++]);\n      G2b(0, 4, 8, 12, msg, offset + 2 * s[j++]);\n      G1b(1, 5, 9, 13, msg, offset + 2 * s[j++]);\n      G2b(1, 5, 9, 13, msg, offset + 2 * s[j++]);\n      G1b(2, 6, 10, 14, msg, offset + 2 * s[j++]);\n      G2b(2, 6, 10, 14, msg, offset + 2 * s[j++]);\n      G1b(3, 7, 11, 15, msg, offset + 2 * s[j++]);\n      G2b(3, 7, 11, 15, msg, offset + 2 * s[j++]);\n\n      G1b(0, 5, 10, 15, msg, offset + 2 * s[j++]);\n      G2b(0, 5, 10, 15, msg, offset + 2 * s[j++]);\n      G1b(1, 6, 11, 12, msg, offset + 2 * s[j++]);\n      G2b(1, 6, 11, 12, msg, offset + 2 * s[j++]);\n      G1b(2, 7, 8, 13, msg, offset + 2 * s[j++]);\n      G2b(2, 7, 8, 13, msg, offset + 2 * s[j++]);\n      G1b(3, 4, 9, 14, msg, offset + 2 * s[j++]);\n      G2b(3, 4, 9, 14, msg, offset + 2 * s[j++]);\n    }\n    this.v0l ^= BBUF[0] ^ BBUF[16];\n    this.v0h ^= BBUF[1] ^ BBUF[17];\n    this.v1l ^= BBUF[2] ^ BBUF[18];\n    this.v1h ^= BBUF[3] ^ BBUF[19];\n    this.v2l ^= BBUF[4] ^ BBUF[20];\n    this.v2h ^= BBUF[5] ^ BBUF[21];\n    this.v3l ^= BBUF[6] ^ BBUF[22];\n    this.v3h ^= BBUF[7] ^ BBUF[23];\n    this.v4l ^= BBUF[8] ^ BBUF[24];\n    this.v4h ^= BBUF[9] ^ BBUF[25];\n    this.v5l ^= BBUF[10] ^ BBUF[26];\n    this.v5h ^= BBUF[11] ^ BBUF[27];\n    this.v6l ^= BBUF[12] ^ BBUF[28];\n    this.v6h ^= BBUF[13] ^ BBUF[29];\n    this.v7l ^= BBUF[14] ^ BBUF[30];\n    this.v7h ^= BBUF[15] ^ BBUF[31];\n    clean(BBUF);\n  }\n  destroy(): void {\n    this.destroyed = true;\n    clean(this.buffer32);\n    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n  }\n}\n\n/**\n * Blake2b hash function. 64-bit. 1.5x slower than blake2s in JS.\n * @param msg - message that would be hashed\n * @param opts - dkLen output length, key for MAC mode, salt, personalization\n */\nexport const blake2b: CHashO = /* @__PURE__ */ createOptHasher<BLAKE2b, Blake2Opts>(\n  (opts) => new BLAKE2b(opts)\n);\n\n// =================\n// Blake2S\n// =================\n\n// prettier-ignore\nexport type Num16 = {\n  v0: number; v1: number; v2: number; v3: number;\n  v4: number; v5: number; v6: number; v7: number;\n  v8: number; v9: number; v10: number; v11: number;\n  v12: number; v13: number; v14: number; v15: number;\n};\n\n// prettier-ignore\nexport function compress(s: Uint8Array, offset: number, msg: Uint32Array, rounds: number,\n  v0: number, v1: number, v2: number, v3: number, v4: number, v5: number, v6: number, v7: number,\n  v8: number, v9: number, v10: number, v11: number, v12: number, v13: number, v14: number, v15: number,\n): Num16 {\n  let j = 0;\n  for (let i = 0; i < rounds; i++) {\n    ({ a: v0, b: v4, c: v8, d: v12 } = G1s(v0, v4, v8, v12, msg[offset + s[j++]]));\n    ({ a: v0, b: v4, c: v8, d: v12 } = G2s(v0, v4, v8, v12, msg[offset + s[j++]]));\n    ({ a: v1, b: v5, c: v9, d: v13 } = G1s(v1, v5, v9, v13, msg[offset + s[j++]]));\n    ({ a: v1, b: v5, c: v9, d: v13 } = G2s(v1, v5, v9, v13, msg[offset + s[j++]]));\n    ({ a: v2, b: v6, c: v10, d: v14 } = G1s(v2, v6, v10, v14, msg[offset + s[j++]]));\n    ({ a: v2, b: v6, c: v10, d: v14 } = G2s(v2, v6, v10, v14, msg[offset + s[j++]]));\n    ({ a: v3, b: v7, c: v11, d: v15 } = G1s(v3, v7, v11, v15, msg[offset + s[j++]]));\n    ({ a: v3, b: v7, c: v11, d: v15 } = G2s(v3, v7, v11, v15, msg[offset + s[j++]]));\n\n    ({ a: v0, b: v5, c: v10, d: v15 } = G1s(v0, v5, v10, v15, msg[offset + s[j++]]));\n    ({ a: v0, b: v5, c: v10, d: v15 } = G2s(v0, v5, v10, v15, msg[offset + s[j++]]));\n    ({ a: v1, b: v6, c: v11, d: v12 } = G1s(v1, v6, v11, v12, msg[offset + s[j++]]));\n    ({ a: v1, b: v6, c: v11, d: v12 } = G2s(v1, v6, v11, v12, msg[offset + s[j++]]));\n    ({ a: v2, b: v7, c: v8, d: v13 } = G1s(v2, v7, v8, v13, msg[offset + s[j++]]));\n    ({ a: v2, b: v7, c: v8, d: v13 } = G2s(v2, v7, v8, v13, msg[offset + s[j++]]));\n    ({ a: v3, b: v4, c: v9, d: v14 } = G1s(v3, v4, v9, v14, msg[offset + s[j++]]));\n    ({ a: v3, b: v4, c: v9, d: v14 } = G2s(v3, v4, v9, v14, msg[offset + s[j++]]));\n  }\n  return { v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 };\n}\n\nconst B2S_IV = SHA256_IV;\nexport class BLAKE2s extends BLAKE2<BLAKE2s> {\n  // Internal state, same as SHA-256\n  private v0 = B2S_IV[0] | 0;\n  private v1 = B2S_IV[1] | 0;\n  private v2 = B2S_IV[2] | 0;\n  private v3 = B2S_IV[3] | 0;\n  private v4 = B2S_IV[4] | 0;\n  private v5 = B2S_IV[5] | 0;\n  private v6 = B2S_IV[6] | 0;\n  private v7 = B2S_IV[7] | 0;\n\n  constructor(opts: Blake2Opts = {}) {\n    const olen = opts.dkLen === undefined ? 32 : opts.dkLen;\n    super(64, olen);\n    checkBlake2Opts(olen, opts, 32, 8, 8);\n    let { key, personalization, salt } = opts;\n    let keyLength = 0;\n    if (key !== undefined) {\n      key = toBytes(key);\n      keyLength = key.length;\n    }\n    this.v0 ^= this.outputLen | (keyLength << 8) | (0x01 << 16) | (0x01 << 24);\n    if (salt !== undefined) {\n      salt = toBytes(salt);\n      const slt = u32(salt as Uint8Array);\n      this.v4 ^= swap8IfBE(slt[0]);\n      this.v5 ^= swap8IfBE(slt[1]);\n    }\n    if (personalization !== undefined) {\n      personalization = toBytes(personalization);\n      const pers = u32(personalization as Uint8Array);\n      this.v6 ^= swap8IfBE(pers[0]);\n      this.v7 ^= swap8IfBE(pers[1]);\n    }\n    if (key !== undefined) {\n      // Pad to blockLen and update\n      abytes(key);\n      const tmp = new Uint8Array(this.blockLen);\n      tmp.set(key);\n      this.update(tmp);\n    }\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { v0, v1, v2, v3, v4, v5, v6, v7 } = this;\n    return [v0, v1, v2, v3, v4, v5, v6, v7];\n  }\n  // prettier-ignore\n  protected set(\n    v0: number, v1: number, v2: number, v3: number, v4: number, v5: number, v6: number, v7: number\n  ): void {\n    this.v0 = v0 | 0;\n    this.v1 = v1 | 0;\n    this.v2 = v2 | 0;\n    this.v3 = v3 | 0;\n    this.v4 = v4 | 0;\n    this.v5 = v5 | 0;\n    this.v6 = v6 | 0;\n    this.v7 = v7 | 0;\n  }\n  protected compress(msg: Uint32Array, offset: number, isLast: boolean): void {\n    const { h, l } = u64.fromBig(BigInt(this.length));\n    // prettier-ignore\n    const { v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 } =\n      compress(\n        BSIGMA, offset, msg, 10,\n        this.v0, this.v1, this.v2, this.v3, this.v4, this.v5, this.v6, this.v7,\n        B2S_IV[0], B2S_IV[1], B2S_IV[2], B2S_IV[3], l ^ B2S_IV[4], h ^ B2S_IV[5], isLast ? ~B2S_IV[6] : B2S_IV[6], B2S_IV[7]\n      );\n    this.v0 ^= v0 ^ v8;\n    this.v1 ^= v1 ^ v9;\n    this.v2 ^= v2 ^ v10;\n    this.v3 ^= v3 ^ v11;\n    this.v4 ^= v4 ^ v12;\n    this.v5 ^= v5 ^ v13;\n    this.v6 ^= v6 ^ v14;\n    this.v7 ^= v7 ^ v15;\n  }\n  destroy(): void {\n    this.destroyed = true;\n    clean(this.buffer32);\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n  }\n}\n\n/**\n * Blake2s hash function. Focuses on 8-bit to 32-bit platforms. 1.5x faster than blake2b in JS.\n * @param msg - message that would be hashed\n * @param opts - dkLen output length, key for MAC mode, salt, personalization\n */\nexport const blake2s: CHashO = /* @__PURE__ */ createOptHasher<BLAKE2s, Blake2Opts>(\n  (opts) => new BLAKE2s(opts)\n);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}