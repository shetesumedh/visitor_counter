{"ast":null,"code":"/**\n * SECG secp256k1. See [pdf](https://www.secg.org/sec2-v2.pdf).\n *\n * Belongs to Koblitz curves: it has efficiently-computable GLV endomorphism ψ,\n * check out {@link EndomorphismOpts}. Seems to be rigid (not backdoored).\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha2.js';\nimport { randomBytes } from '@noble/hashes/utils.js';\nimport { createCurve } from \"./_shortw_utils.js\";\nimport { createHasher, isogenyMap } from \"./abstract/hash-to-curve.js\";\nimport { Field, mod, pow2 } from \"./abstract/modular.js\";\nimport { mapToCurveSimpleSWU } from \"./abstract/weierstrass.js\";\nimport { aInRange, bytesToNumberBE, concatBytes, ensureBytes, inRange, numberToBytesBE } from \"./utils.js\";\n// Seems like generator was produced from some seed:\n// `Point.BASE.multiply(Point.Fn.inv(2n, N)).toAffine().x`\n// // gives short x 0x3b78ce563f89a0ed9414f5aa28ad0d96d6795f9c63n\nconst secp256k1_CURVE = {\n  p: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f'),\n  n: BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141'),\n  h: BigInt(1),\n  a: BigInt(0),\n  b: BigInt(7),\n  Gx: BigInt('0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798'),\n  Gy: BigInt('0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8')\n};\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a, b) => (a + b / _2n) / b;\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y) {\n  const P = secp256k1_CURVE.p;\n  // prettier-ignore\n  const _3n = BigInt(3),\n    _6n = BigInt(6),\n    _11n = BigInt(11),\n    _22n = BigInt(22);\n  // prettier-ignore\n  const _23n = BigInt(23),\n    _44n = BigInt(44),\n    _88n = BigInt(88);\n  const b2 = y * y * y % P; // x^3, 11\n  const b3 = b2 * b2 * y % P; // x^7\n  const b6 = pow2(b3, _3n, P) * b3 % P;\n  const b9 = pow2(b6, _3n, P) * b3 % P;\n  const b11 = pow2(b9, _2n, P) * b2 % P;\n  const b22 = pow2(b11, _11n, P) * b11 % P;\n  const b44 = pow2(b22, _22n, P) * b22 % P;\n  const b88 = pow2(b44, _44n, P) * b44 % P;\n  const b176 = pow2(b88, _88n, P) * b88 % P;\n  const b220 = pow2(b176, _44n, P) * b44 % P;\n  const b223 = pow2(b220, _3n, P) * b3 % P;\n  const t1 = pow2(b223, _23n, P) * b22 % P;\n  const t2 = pow2(t1, _6n, P) * b2 % P;\n  const root = pow2(t2, _2n, P);\n  if (!Fpk1.eql(Fpk1.sqr(root), y)) throw new Error('Cannot find square root');\n  return root;\n}\nconst Fpk1 = Field(secp256k1_CURVE.p, undefined, undefined, {\n  sqrt: sqrtMod\n});\n/**\n * secp256k1 curve, ECDSA and ECDH methods.\n *\n * Field: `2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n`\n *\n * @example\n * ```js\n * import { secp256k1 } from '@noble/curves/secp256k1';\n * const priv = secp256k1.utils.randomPrivateKey();\n * const pub = secp256k1.getPublicKey(priv);\n * const msg = new Uint8Array(32).fill(1); // message hash (not message) in ecdsa\n * const sig = secp256k1.sign(msg, priv); // `{prehash: true}` option is available\n * const isValid = secp256k1.verify(sig, msg, pub) === true;\n * ```\n */\nexport const secp256k1 = createCurve({\n  ...secp256k1_CURVE,\n  Fp: Fpk1,\n  lowS: true,\n  // Allow only low-S signatures by default in sign() and verify()\n  endo: {\n    // Endomorphism, see above\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n    splitScalar: k => {\n      const n = secp256k1_CURVE.n;\n      const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n      const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n      const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n      const b2 = a1;\n      const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n      const c1 = divNearest(b2 * k, n);\n      const c2 = divNearest(-b1 * k, n);\n      let k1 = mod(k - c1 * a1 - c2 * a2, n);\n      let k2 = mod(-c1 * b1 - c2 * b2, n);\n      const k1neg = k1 > POW_2_128;\n      const k2neg = k2 > POW_2_128;\n      if (k1neg) k1 = n - k1;\n      if (k2neg) k2 = n - k2;\n      if (k1 > POW_2_128 || k2 > POW_2_128) {\n        throw new Error('splitScalar: Endomorphism failed, k=' + k);\n      }\n      return {\n        k1neg,\n        k1,\n        k2neg,\n        k2\n      };\n    }\n  }\n}, sha256);\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES = {};\nfunction taggedHash(tag, ...messages) {\n  let tagP = TAGGED_HASH_PREFIXES[tag];\n  if (tagP === undefined) {\n    const tagH = sha256(Uint8Array.from(tag, c => c.charCodeAt(0)));\n    tagP = concatBytes(tagH, tagH);\n    TAGGED_HASH_PREFIXES[tag] = tagP;\n  }\n  return sha256(concatBytes(tagP, ...messages));\n}\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = point => point.toBytes(true).slice(1);\nconst numTo32b = n => numberToBytesBE(n, 32);\nconst modP = x => mod(x, secp256k1_CURVE.p);\nconst modN = x => mod(x, secp256k1_CURVE.n);\nconst Point = /* @__PURE__ */(() => secp256k1.Point)();\nconst hasEven = y => y % _2n === _0n;\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv) {\n  let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n  let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n  const scalar = hasEven(p.y) ? d_ : modN(-d_);\n  return {\n    scalar: scalar,\n    bytes: pointToBytes(p)\n  };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x) {\n  aInRange('x', x, _1n, secp256k1_CURVE.p); // Fail if x ≥ p.\n  const xx = modP(x * x);\n  const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n  let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n  if (!hasEven(y)) y = modP(-y); // Return the unique point P such that x(P) = x and\n  const p = Point.fromAffine({\n    x,\n    y\n  }); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n  p.assertValidity();\n  return p;\n}\nconst num = bytesToNumberBE;\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args) {\n  return modN(num(taggedHash('BIP0340/challenge', ...args)));\n}\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey) {\n  return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(message, privateKey, auxRand = randomBytes(32)) {\n  const m = ensureBytes('message', message);\n  const {\n    bytes: px,\n    scalar: d\n  } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n  const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n  const t = numTo32b(d ^ num(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n  const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n  const k_ = modN(num(rand)); // Let k' = int(rand) mod n\n  if (k_ === _0n) throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n  const {\n    bytes: rx,\n    scalar: k\n  } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n  const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n  const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n  sig.set(rx, 0);\n  sig.set(numTo32b(modN(k + e * d)), 32);\n  // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n  if (!schnorrVerify(sig, m, px)) throw new Error('sign: Invalid signature produced');\n  return sig;\n}\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature, message, publicKey) {\n  const sig = ensureBytes('signature', signature, 64);\n  const m = ensureBytes('message', message);\n  const pub = ensureBytes('publicKey', publicKey, 32);\n  try {\n    const P = lift_x(num(pub)); // P = lift_x(int(pk)); fail if that fails\n    const r = num(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n    if (!inRange(r, _1n, secp256k1_CURVE.p)) return false;\n    const s = num(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n    if (!inRange(s, _1n, secp256k1_CURVE.n)) return false;\n    const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n    // R = s⋅G - e⋅P, where -eP == (n-e)P\n    const R = Point.BASE.multiplyUnsafe(s).add(P.multiplyUnsafe(modN(-e)));\n    const {\n      x,\n      y\n    } = R.toAffine();\n    // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n    if (R.is0() || !hasEven(y) || x !== r) return false;\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n/**\n * Schnorr signatures over secp256k1.\n * https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n * @example\n * ```js\n * import { schnorr } from '@noble/curves/secp256k1';\n * const priv = schnorr.utils.randomPrivateKey();\n * const pub = schnorr.getPublicKey(priv);\n * const msg = new TextEncoder().encode('hello');\n * const sig = schnorr.sign(msg, priv);\n * const isValid = schnorr.verify(sig, msg, pub);\n * ```\n */\nexport const schnorr = /* @__PURE__ */(() => ({\n  getPublicKey: schnorrGetPublicKey,\n  sign: schnorrSign,\n  verify: schnorrVerify,\n  utils: {\n    randomPrivateKey: secp256k1.utils.randomPrivateKey,\n    lift_x,\n    pointToBytes,\n    numberToBytesBE,\n    bytesToNumberBE,\n    taggedHash,\n    mod\n  }\n}))();\nconst isoMap = /* @__PURE__ */(() => isogenyMap(Fpk1, [\n// xNum\n['0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7', '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581', '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262', '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c'],\n// xDen\n['0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b', '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14', '0x0000000000000000000000000000000000000000000000000000000000000001' // LAST 1\n],\n// yNum\n['0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c', '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3', '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931', '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84'],\n// yDen\n['0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b', '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573', '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f', '0x0000000000000000000000000000000000000000000000000000000000000001' // LAST 1\n]].map(i => i.map(j => BigInt(j)))))();\nconst mapSWU = /* @__PURE__ */(() => mapToCurveSimpleSWU(Fpk1, {\n  A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n  B: BigInt('1771'),\n  Z: Fpk1.create(BigInt('-11'))\n}))();\n/** Hashing / encoding to secp256k1 points / field. RFC 9380 methods. */\nexport const secp256k1_hasher = /* @__PURE__ */(() => createHasher(secp256k1.Point, scalars => {\n  const {\n    x,\n    y\n  } = mapSWU(Fpk1.create(scalars[0]));\n  return isoMap(x, y);\n}, {\n  DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n  encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n  p: Fpk1.ORDER,\n  m: 1,\n  k: 128,\n  expand: 'xmd',\n  hash: sha256\n}))();\nexport const hashToCurve = /* @__PURE__ */(() => secp256k1_hasher.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */(() => secp256k1_hasher.encodeToCurve)();","map":{"version":3,"names":["sha256","randomBytes","createCurve","createHasher","isogenyMap","Field","mod","pow2","mapToCurveSimpleSWU","aInRange","bytesToNumberBE","concatBytes","ensureBytes","inRange","numberToBytesBE","secp256k1_CURVE","p","BigInt","n","h","a","b","Gx","Gy","_0n","_1n","_2n","divNearest","sqrtMod","y","P","_3n","_6n","_11n","_22n","_23n","_44n","_88n","b2","b3","b6","b9","b11","b22","b44","b88","b176","b220","b223","t1","t2","root","Fpk1","eql","sqr","Error","undefined","sqrt","secp256k1","Fp","lowS","endo","beta","splitScalar","k","a1","b1","a2","POW_2_128","c1","c2","k1","k2","k1neg","k2neg","TAGGED_HASH_PREFIXES","taggedHash","tag","messages","tagP","tagH","Uint8Array","from","c","charCodeAt","pointToBytes","point","toBytes","slice","numTo32b","modP","x","modN","Point","hasEven","schnorrGetExtPubKey","priv","d_","utils","normPrivateKeyToScalar","fromPrivateKey","scalar","bytes","lift_x","xx","fromAffine","assertValidity","num","challenge","args","schnorrGetPublicKey","privateKey","schnorrSign","message","auxRand","m","px","d","t","rand","k_","rx","e","sig","set","schnorrVerify","signature","publicKey","pub","r","subarray","s","R","BASE","multiplyUnsafe","add","toAffine","is0","error","schnorr","getPublicKey","sign","verify","randomPrivateKey","isoMap","map","i","j","mapSWU","A","B","Z","create","secp256k1_hasher","scalars","DST","encodeDST","ORDER","expand","hash","hashToCurve","encodeToCurve"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/viem/node_modules/@noble/curves/src/secp256k1.ts"],"sourcesContent":["/**\n * SECG secp256k1. See [pdf](https://www.secg.org/sec2-v2.pdf).\n *\n * Belongs to Koblitz curves: it has efficiently-computable GLV endomorphism ψ,\n * check out {@link EndomorphismOpts}. Seems to be rigid (not backdoored).\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha2.js';\nimport { randomBytes } from '@noble/hashes/utils.js';\nimport { createCurve, type CurveFnWithCreate } from './_shortw_utils.ts';\nimport {\n  createHasher,\n  type H2CHasher,\n  type H2CMethod,\n  isogenyMap,\n} from './abstract/hash-to-curve.ts';\nimport { Field, mod, pow2 } from './abstract/modular.ts';\nimport {\n  type EndomorphismOpts,\n  mapToCurveSimpleSWU,\n  type ProjPointType as PointType,\n  type WeierstrassOpts,\n} from './abstract/weierstrass.ts';\nimport type { Hex, PrivKey } from './utils.ts';\nimport {\n  aInRange,\n  bytesToNumberBE,\n  concatBytes,\n  ensureBytes,\n  inRange,\n  numberToBytesBE,\n} from './utils.ts';\n\n// Seems like generator was produced from some seed:\n// `Point.BASE.multiply(Point.Fn.inv(2n, N)).toAffine().x`\n// // gives short x 0x3b78ce563f89a0ed9414f5aa28ad0d96d6795f9c63n\nconst secp256k1_CURVE: WeierstrassOpts<bigint> = {\n  p: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f'),\n  n: BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141'),\n  h: BigInt(1),\n  a: BigInt(0),\n  b: BigInt(7),\n  Gx: BigInt('0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798'),\n  Gy: BigInt('0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8'),\n};\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a: bigint, b: bigint) => (a + b / _2n) / b;\n\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y: bigint): bigint {\n  const P = secp256k1_CURVE.p;\n  // prettier-ignore\n  const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n  // prettier-ignore\n  const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n  const b2 = (y * y * y) % P; // x^3, 11\n  const b3 = (b2 * b2 * y) % P; // x^7\n  const b6 = (pow2(b3, _3n, P) * b3) % P;\n  const b9 = (pow2(b6, _3n, P) * b3) % P;\n  const b11 = (pow2(b9, _2n, P) * b2) % P;\n  const b22 = (pow2(b11, _11n, P) * b11) % P;\n  const b44 = (pow2(b22, _22n, P) * b22) % P;\n  const b88 = (pow2(b44, _44n, P) * b44) % P;\n  const b176 = (pow2(b88, _88n, P) * b88) % P;\n  const b220 = (pow2(b176, _44n, P) * b44) % P;\n  const b223 = (pow2(b220, _3n, P) * b3) % P;\n  const t1 = (pow2(b223, _23n, P) * b22) % P;\n  const t2 = (pow2(t1, _6n, P) * b2) % P;\n  const root = pow2(t2, _2n, P);\n  if (!Fpk1.eql(Fpk1.sqr(root), y)) throw new Error('Cannot find square root');\n  return root;\n}\n\nconst Fpk1 = Field(secp256k1_CURVE.p, undefined, undefined, { sqrt: sqrtMod });\n\n/**\n * secp256k1 curve, ECDSA and ECDH methods.\n *\n * Field: `2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n`\n *\n * @example\n * ```js\n * import { secp256k1 } from '@noble/curves/secp256k1';\n * const priv = secp256k1.utils.randomPrivateKey();\n * const pub = secp256k1.getPublicKey(priv);\n * const msg = new Uint8Array(32).fill(1); // message hash (not message) in ecdsa\n * const sig = secp256k1.sign(msg, priv); // `{prehash: true}` option is available\n * const isValid = secp256k1.verify(sig, msg, pub) === true;\n * ```\n */\nexport const secp256k1: CurveFnWithCreate = createCurve(\n  {\n    ...secp256k1_CURVE,\n    Fp: Fpk1,\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    endo: {\n      // Endomorphism, see above\n      beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n      splitScalar: (k: bigint) => {\n        const n = secp256k1_CURVE.n;\n        const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n        const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n        const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n        const b2 = a1;\n        const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n\n        const c1 = divNearest(b2 * k, n);\n        const c2 = divNearest(-b1 * k, n);\n        let k1 = mod(k - c1 * a1 - c2 * a2, n);\n        let k2 = mod(-c1 * b1 - c2 * b2, n);\n        const k1neg = k1 > POW_2_128;\n        const k2neg = k2 > POW_2_128;\n        if (k1neg) k1 = n - k1;\n        if (k2neg) k2 = n - k2;\n        if (k1 > POW_2_128 || k2 > POW_2_128) {\n          throw new Error('splitScalar: Endomorphism failed, k=' + k);\n        }\n        return { k1neg, k1, k2neg, k2 };\n      },\n    } satisfies EndomorphismOpts,\n  },\n  sha256\n);\n\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES: { [tag: string]: Uint8Array } = {};\nfunction taggedHash(tag: string, ...messages: Uint8Array[]): Uint8Array {\n  let tagP = TAGGED_HASH_PREFIXES[tag];\n  if (tagP === undefined) {\n    const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n    tagP = concatBytes(tagH, tagH);\n    TAGGED_HASH_PREFIXES[tag] = tagP;\n  }\n  return sha256(concatBytes(tagP, ...messages));\n}\n\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point: PointType<bigint>) => point.toBytes(true).slice(1);\nconst numTo32b = (n: bigint) => numberToBytesBE(n, 32);\nconst modP = (x: bigint) => mod(x, secp256k1_CURVE.p);\nconst modN = (x: bigint) => mod(x, secp256k1_CURVE.n);\nconst Point = /* @__PURE__ */ (() => secp256k1.Point)();\nconst hasEven = (y: bigint) => y % _2n === _0n;\n\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv: PrivKey) {\n  let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n  let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n  const scalar = hasEven(p.y) ? d_ : modN(-d_);\n  return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x: bigint): PointType<bigint> {\n  aInRange('x', x, _1n, secp256k1_CURVE.p); // Fail if x ≥ p.\n  const xx = modP(x * x);\n  const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n  let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n  if (!hasEven(y)) y = modP(-y); // Return the unique point P such that x(P) = x and\n  const p = Point.fromAffine({ x, y }); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n  p.assertValidity();\n  return p;\n}\nconst num = bytesToNumberBE;\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args: Uint8Array[]): bigint {\n  return modN(num(taggedHash('BIP0340/challenge', ...args)));\n}\n\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey: Hex): Uint8Array {\n  return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(\n  message: Hex,\n  privateKey: PrivKey,\n  auxRand: Hex = randomBytes(32)\n): Uint8Array {\n  const m = ensureBytes('message', message);\n  const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n  const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n  const t = numTo32b(d ^ num(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n  const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n  const k_ = modN(num(rand)); // Let k' = int(rand) mod n\n  if (k_ === _0n) throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n  const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n  const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n  const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n  sig.set(rx, 0);\n  sig.set(numTo32b(modN(k + e * d)), 32);\n  // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n  if (!schnorrVerify(sig, m, px)) throw new Error('sign: Invalid signature produced');\n  return sig;\n}\n\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature: Hex, message: Hex, publicKey: Hex): boolean {\n  const sig = ensureBytes('signature', signature, 64);\n  const m = ensureBytes('message', message);\n  const pub = ensureBytes('publicKey', publicKey, 32);\n  try {\n    const P = lift_x(num(pub)); // P = lift_x(int(pk)); fail if that fails\n    const r = num(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n    if (!inRange(r, _1n, secp256k1_CURVE.p)) return false;\n    const s = num(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n    if (!inRange(s, _1n, secp256k1_CURVE.n)) return false;\n    const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n    // R = s⋅G - e⋅P, where -eP == (n-e)P\n    const R = Point.BASE.multiplyUnsafe(s).add(P.multiplyUnsafe(modN(-e)));\n    const { x, y } = R.toAffine();\n    // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n    if (R.is0() || !hasEven(y) || x !== r) return false;\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\nexport type SecpSchnorr = {\n  getPublicKey: typeof schnorrGetPublicKey;\n  sign: typeof schnorrSign;\n  verify: typeof schnorrVerify;\n  utils: {\n    randomPrivateKey: () => Uint8Array;\n    lift_x: typeof lift_x;\n    pointToBytes: (point: PointType<bigint>) => Uint8Array;\n    numberToBytesBE: typeof numberToBytesBE;\n    bytesToNumberBE: typeof bytesToNumberBE;\n    taggedHash: typeof taggedHash;\n    mod: typeof mod;\n  };\n};\n/**\n * Schnorr signatures over secp256k1.\n * https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n * @example\n * ```js\n * import { schnorr } from '@noble/curves/secp256k1';\n * const priv = schnorr.utils.randomPrivateKey();\n * const pub = schnorr.getPublicKey(priv);\n * const msg = new TextEncoder().encode('hello');\n * const sig = schnorr.sign(msg, priv);\n * const isValid = schnorr.verify(sig, msg, pub);\n * ```\n */\nexport const schnorr: SecpSchnorr = /* @__PURE__ */ (() => ({\n  getPublicKey: schnorrGetPublicKey,\n  sign: schnorrSign,\n  verify: schnorrVerify,\n  utils: {\n    randomPrivateKey: secp256k1.utils.randomPrivateKey,\n    lift_x,\n    pointToBytes,\n    numberToBytesBE,\n    bytesToNumberBE,\n    taggedHash,\n    mod,\n  },\n}))();\n\nconst isoMap = /* @__PURE__ */ (() =>\n  isogenyMap(\n    Fpk1,\n    [\n      // xNum\n      [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n      ],\n      // xDen\n      [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n      // yNum\n      [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n      ],\n      // yDen\n      [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n    ].map((i) => i.map((j) => BigInt(j))) as [bigint[], bigint[], bigint[], bigint[]]\n  ))();\nconst mapSWU = /* @__PURE__ */ (() =>\n  mapToCurveSimpleSWU(Fpk1, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fpk1.create(BigInt('-11')),\n  }))();\n/** Hashing / encoding to secp256k1 points / field. RFC 9380 methods. */\nexport const secp256k1_hasher: H2CHasher<bigint> = /* @__PURE__ */ (() =>\n  createHasher(\n    secp256k1.Point,\n    (scalars: bigint[]) => {\n      const { x, y } = mapSWU(Fpk1.create(scalars[0]));\n      return isoMap(x, y);\n    },\n    {\n      DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n      encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n      p: Fpk1.ORDER,\n      m: 1,\n      k: 128,\n      expand: 'xmd',\n      hash: sha256,\n    }\n  ))();\n\nexport const hashToCurve: H2CMethod<bigint> = /* @__PURE__ */ (() =>\n  secp256k1_hasher.hashToCurve)();\n\nexport const encodeToCurve: H2CMethod<bigint> = /* @__PURE__ */ (() =>\n  secp256k1_hasher.encodeToCurve)();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}