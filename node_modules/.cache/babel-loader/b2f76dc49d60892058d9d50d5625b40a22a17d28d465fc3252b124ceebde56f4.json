{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.recoverPublicKey = recoverPublicKey;\nconst isHex_js_1 = require(\"../data/isHex.js\");\nconst size_js_1 = require(\"../data/size.js\");\nconst fromHex_js_1 = require(\"../encoding/fromHex.js\");\nconst toHex_js_1 = require(\"../encoding/toHex.js\");\nasync function recoverPublicKey({\n  hash,\n  signature\n}) {\n  const hashHex = (0, isHex_js_1.isHex)(hash) ? hash : (0, toHex_js_1.toHex)(hash);\n  const {\n    secp256k1\n  } = await Promise.resolve().then(() => require('@noble/curves/secp256k1'));\n  const signature_ = (() => {\n    if (typeof signature === 'object' && 'r' in signature && 's' in signature) {\n      const {\n        r,\n        s,\n        v,\n        yParity\n      } = signature;\n      const yParityOrV = Number(yParity ?? v);\n      const recoveryBit = toRecoveryBit(yParityOrV);\n      return new secp256k1.Signature((0, fromHex_js_1.hexToBigInt)(r), (0, fromHex_js_1.hexToBigInt)(s)).addRecoveryBit(recoveryBit);\n    }\n    const signatureHex = (0, isHex_js_1.isHex)(signature) ? signature : (0, toHex_js_1.toHex)(signature);\n    if ((0, size_js_1.size)(signatureHex) !== 65) throw new Error('invalid signature length');\n    const yParityOrV = (0, fromHex_js_1.hexToNumber)(`0x${signatureHex.slice(130)}`);\n    const recoveryBit = toRecoveryBit(yParityOrV);\n    return secp256k1.Signature.fromCompact(signatureHex.substring(2, 130)).addRecoveryBit(recoveryBit);\n  })();\n  const publicKey = signature_.recoverPublicKey(hashHex.substring(2)).toHex(false);\n  return `0x${publicKey}`;\n}\nfunction toRecoveryBit(yParityOrV) {\n  if (yParityOrV === 0 || yParityOrV === 1) return yParityOrV;\n  if (yParityOrV === 27) return 0;\n  if (yParityOrV === 28) return 1;\n  throw new Error('Invalid yParityOrV value');\n}","map":{"version":3,"names":["exports","recoverPublicKey","isHex_js_1","require","size_js_1","fromHex_js_1","toHex_js_1","hash","signature","hashHex","isHex","toHex","secp256k1","Promise","resolve","then","signature_","r","s","v","yParity","yParityOrV","Number","recoveryBit","toRecoveryBit","Signature","hexToBigInt","addRecoveryBit","signatureHex","size","Error","hexToNumber","slice","fromCompact","substring","publicKey"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/viem/utils/signature/recoverPublicKey.ts"],"sourcesContent":["import type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex, Signature } from '../../types/misc.js'\nimport { type IsHexErrorType, isHex } from '../data/isHex.js'\nimport { size } from '../data/size.js'\nimport {\n  type HexToNumberErrorType,\n  hexToBigInt,\n  hexToNumber,\n} from '../encoding/fromHex.js'\nimport { toHex } from '../encoding/toHex.js'\n\nexport type RecoverPublicKeyParameters = {\n  hash: Hex | ByteArray\n  signature: Hex | ByteArray | Signature\n}\n\nexport type RecoverPublicKeyReturnType = Hex\n\nexport type RecoverPublicKeyErrorType =\n  | HexToNumberErrorType\n  | IsHexErrorType\n  | ErrorType\n\nexport async function recoverPublicKey({\n  hash,\n  signature,\n}: RecoverPublicKeyParameters): Promise<RecoverPublicKeyReturnType> {\n  const hashHex = isHex(hash) ? hash : toHex(hash)\n\n  const { secp256k1 } = await import('@noble/curves/secp256k1')\n  const signature_ = (() => {\n    // typeof signature: `Signature`\n    if (typeof signature === 'object' && 'r' in signature && 's' in signature) {\n      const { r, s, v, yParity } = signature\n      const yParityOrV = Number(yParity ?? v)!\n      const recoveryBit = toRecoveryBit(yParityOrV)\n      return new secp256k1.Signature(\n        hexToBigInt(r),\n        hexToBigInt(s),\n      ).addRecoveryBit(recoveryBit)\n    }\n\n    // typeof signature: `Hex | ByteArray`\n    const signatureHex = isHex(signature) ? signature : toHex(signature)\n    if (size(signatureHex) !== 65) throw new Error('invalid signature length')\n    const yParityOrV = hexToNumber(`0x${signatureHex.slice(130)}`)\n    const recoveryBit = toRecoveryBit(yParityOrV)\n    return secp256k1.Signature.fromCompact(\n      signatureHex.substring(2, 130),\n    ).addRecoveryBit(recoveryBit)\n  })()\n\n  const publicKey = signature_\n    .recoverPublicKey(hashHex.substring(2))\n    .toHex(false)\n  return `0x${publicKey}`\n}\n\nfunction toRecoveryBit(yParityOrV: number) {\n  if (yParityOrV === 0 || yParityOrV === 1) return yParityOrV\n  if (yParityOrV === 27) return 0\n  if (yParityOrV === 28) return 1\n  throw new Error('Invalid yParityOrV value')\n}\n"],"mappings":";;;;;AAuBAA,OAAA,CAAAC,gBAAA,GAAAA,gBAAA;AArBA,MAAAC,UAAA,GAAAC,OAAA;AACA,MAAAC,SAAA,GAAAD,OAAA;AACA,MAAAE,YAAA,GAAAF,OAAA;AAKA,MAAAG,UAAA,GAAAH,OAAA;AAcO,eAAeF,gBAAgBA,CAAC;EACrCM,IAAI;EACJC;AAAS,CACkB;EAC3B,MAAMC,OAAO,GAAG,IAAAP,UAAA,CAAAQ,KAAK,EAACH,IAAI,CAAC,GAAGA,IAAI,GAAG,IAAAD,UAAA,CAAAK,KAAK,EAACJ,IAAI,CAAC;EAEhD,MAAM;IAAEK;EAAS,CAAE,GAAG,MAAAC,OAAA,CAAAC,OAAA,GAAAC,IAAA,OAAAZ,OAAA,CAAa,yBAAyB,EAAC;EAC7D,MAAMa,UAAU,GAAG,CAAC,MAAK;IAEvB,IAAI,OAAOR,SAAS,KAAK,QAAQ,IAAI,GAAG,IAAIA,SAAS,IAAI,GAAG,IAAIA,SAAS,EAAE;MACzE,MAAM;QAAES,CAAC;QAAEC,CAAC;QAAEC,CAAC;QAAEC;MAAO,CAAE,GAAGZ,SAAS;MACtC,MAAMa,UAAU,GAAGC,MAAM,CAACF,OAAO,IAAID,CAAC,CAAE;MACxC,MAAMI,WAAW,GAAGC,aAAa,CAACH,UAAU,CAAC;MAC7C,OAAO,IAAIT,SAAS,CAACa,SAAS,CAC5B,IAAApB,YAAA,CAAAqB,WAAW,EAACT,CAAC,CAAC,EACd,IAAAZ,YAAA,CAAAqB,WAAW,EAACR,CAAC,CAAC,CACf,CAACS,cAAc,CAACJ,WAAW,CAAC;IAC/B;IAGA,MAAMK,YAAY,GAAG,IAAA1B,UAAA,CAAAQ,KAAK,EAACF,SAAS,CAAC,GAAGA,SAAS,GAAG,IAAAF,UAAA,CAAAK,KAAK,EAACH,SAAS,CAAC;IACpE,IAAI,IAAAJ,SAAA,CAAAyB,IAAI,EAACD,YAAY,CAAC,KAAK,EAAE,EAAE,MAAM,IAAIE,KAAK,CAAC,0BAA0B,CAAC;IAC1E,MAAMT,UAAU,GAAG,IAAAhB,YAAA,CAAA0B,WAAW,EAAC,KAAKH,YAAY,CAACI,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC;IAC9D,MAAMT,WAAW,GAAGC,aAAa,CAACH,UAAU,CAAC;IAC7C,OAAOT,SAAS,CAACa,SAAS,CAACQ,WAAW,CACpCL,YAAY,CAACM,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,CAC/B,CAACP,cAAc,CAACJ,WAAW,CAAC;EAC/B,CAAC,EAAC,CAAE;EAEJ,MAAMY,SAAS,GAAGnB,UAAU,CACzBf,gBAAgB,CAACQ,OAAO,CAACyB,SAAS,CAAC,CAAC,CAAC,CAAC,CACtCvB,KAAK,CAAC,KAAK,CAAC;EACf,OAAO,KAAKwB,SAAS,EAAE;AACzB;AAEA,SAASX,aAAaA,CAACH,UAAkB;EACvC,IAAIA,UAAU,KAAK,CAAC,IAAIA,UAAU,KAAK,CAAC,EAAE,OAAOA,UAAU;EAC3D,IAAIA,UAAU,KAAK,EAAE,EAAE,OAAO,CAAC;EAC/B,IAAIA,UAAU,KAAK,EAAE,EAAE,OAAO,CAAC;EAC/B,MAAM,IAAIS,KAAK,CAAC,0BAA0B,CAAC;AAC7C","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}