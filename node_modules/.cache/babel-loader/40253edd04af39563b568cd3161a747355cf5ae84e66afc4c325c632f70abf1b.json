{"ast":null,"code":"import { ChainNotConfiguredError } from '../errors/config.js';\nimport { SwitchChainNotSupportedError } from '../errors/connector.js';\n/** https://wagmi.sh/core/api/actions/switchChain */\nexport async function switchChain(config, parameters) {\n  const {\n    addEthereumChainParameter,\n    chainId\n  } = parameters;\n  const connection = config.state.connections.get(parameters.connector?.uid ?? config.state.current);\n  if (connection) {\n    const connector = connection.connector;\n    if (!connector.switchChain) throw new SwitchChainNotSupportedError({\n      connector\n    });\n    const chain = await connector.switchChain({\n      addEthereumChainParameter,\n      chainId\n    });\n    return chain;\n  }\n  const chain = config.chains.find(x => x.id === chainId);\n  if (!chain) throw new ChainNotConfiguredError();\n  config.setState(x => ({\n    ...x,\n    chainId\n  }));\n  return chain;\n}","map":{"version":3,"names":["ChainNotConfiguredError","SwitchChainNotSupportedError","switchChain","config","parameters","addEthereumChainParameter","chainId","connection","state","connections","get","connector","uid","current","chain","chains","find","x","id","setState"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/@wagmi/core/src/actions/switchChain.ts"],"sourcesContent":["import type {\n  AddEthereumChainParameter,\n  UserRejectedRequestErrorType,\n  SwitchChainErrorType as viem_SwitchChainErrorType,\n} from 'viem'\n\nimport type { Config } from '../createConfig.js'\nimport type { BaseErrorType, ErrorType } from '../errors/base.js'\nimport {\n  ChainNotConfiguredError,\n  type ChainNotConfiguredErrorType,\n} from '../errors/config.js'\nimport {\n  type ProviderNotFoundErrorType,\n  SwitchChainNotSupportedError,\n  type SwitchChainNotSupportedErrorType,\n} from '../errors/connector.js'\nimport type { ConnectorParameter } from '../types/properties.js'\nimport type { Compute, ExactPartial } from '../types/utils.js'\n\nexport type SwitchChainParameters<\n  config extends Config = Config,\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n> = Compute<\n  ConnectorParameter & {\n    chainId: chainId | config['chains'][number]['id']\n    addEthereumChainParameter?:\n      | Compute<ExactPartial<Omit<AddEthereumChainParameter, 'chainId'>>>\n      | undefined\n  }\n>\n\nexport type SwitchChainReturnType<\n  config extends Config = Config,\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n> = Extract<\n  config['chains'][number],\n  { id: Config extends config ? number : chainId }\n>\n\nexport type SwitchChainErrorType =\n  | SwitchChainNotSupportedErrorType\n  | ChainNotConfiguredErrorType\n  // connector.switchChain()\n  | ProviderNotFoundErrorType\n  | UserRejectedRequestErrorType\n  // base\n  | BaseErrorType\n  | ErrorType\n  // viem\n  | viem_SwitchChainErrorType\n\n/** https://wagmi.sh/core/api/actions/switchChain */\nexport async function switchChain<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n>(\n  config: config,\n  parameters: SwitchChainParameters<config, chainId>,\n): Promise<SwitchChainReturnType<config, chainId>> {\n  const { addEthereumChainParameter, chainId } = parameters\n\n  const connection = config.state.connections.get(\n    parameters.connector?.uid ?? config.state.current!,\n  )\n  if (connection) {\n    const connector = connection.connector\n    if (!connector.switchChain)\n      throw new SwitchChainNotSupportedError({ connector })\n    const chain = await connector.switchChain({\n      addEthereumChainParameter,\n      chainId,\n    })\n    return chain as SwitchChainReturnType<config, chainId>\n  }\n\n  const chain = config.chains.find((x) => x.id === chainId)\n  if (!chain) throw new ChainNotConfiguredError()\n  config.setState((x) => ({ ...x, chainId }))\n  return chain as SwitchChainReturnType<config, chainId>\n}\n"],"mappings":"AAQA,SACEA,uBAAuB,QAElB,qBAAqB;AAC5B,SAEEC,4BAA4B,QAEvB,wBAAwB;AAsC/B;AACA,OAAO,eAAeC,WAAWA,CAI/BC,MAAc,EACdC,UAAkD;EAElD,MAAM;IAAEC,yBAAyB;IAAEC;EAAO,CAAE,GAAGF,UAAU;EAEzD,MAAMG,UAAU,GAAGJ,MAAM,CAACK,KAAK,CAACC,WAAW,CAACC,GAAG,CAC7CN,UAAU,CAACO,SAAS,EAAEC,GAAG,IAAIT,MAAM,CAACK,KAAK,CAACK,OAAQ,CACnD;EACD,IAAIN,UAAU,EAAE;IACd,MAAMI,SAAS,GAAGJ,UAAU,CAACI,SAAS;IACtC,IAAI,CAACA,SAAS,CAACT,WAAW,EACxB,MAAM,IAAID,4BAA4B,CAAC;MAAEU;IAAS,CAAE,CAAC;IACvD,MAAMG,KAAK,GAAG,MAAMH,SAAS,CAACT,WAAW,CAAC;MACxCG,yBAAyB;MACzBC;KACD,CAAC;IACF,OAAOQ,KAA+C;EACxD;EAEA,MAAMA,KAAK,GAAGX,MAAM,CAACY,MAAM,CAACC,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,EAAE,KAAKZ,OAAO,CAAC;EACzD,IAAI,CAACQ,KAAK,EAAE,MAAM,IAAId,uBAAuB,EAAE;EAC/CG,MAAM,CAACgB,QAAQ,CAAEF,CAAC,KAAM;IAAE,GAAGA,CAAC;IAAEX;EAAO,CAAE,CAAC,CAAC;EAC3C,OAAOQ,KAA+C;AACxD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}