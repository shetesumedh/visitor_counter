{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.narrow = narrow;\nfunction narrow(value) {\n  return value;\n}","map":{"version":3,"names":["exports","narrow","value"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/abitype/src/narrow.ts"],"sourcesContent":["/**\n * Infers embedded primitive type of any type\n *\n * @param T - Type to infer\n * @returns Embedded type of {@link type}\n *\n * @example\n * type Result = Narrow<['foo', 'bar', 1]>\n */\n// s/o https://twitter.com/hd_nvim/status/1578567206190780417\nexport type Narrow<type> =\n  | (unknown extends type ? unknown : never)\n  | (type extends Function ? type : never)\n  | (type extends bigint | boolean | number | string ? type : never)\n  | (type extends [] ? [] : never)\n  | { [K in keyof type]: Narrow<type[K]> }\n\n/**\n * Infers embedded primitive type of any type\n * Same as `as const` but without setting the object as readonly and without needing the user to use it.\n *\n * @param value - Value to infer\n * @returns Value with embedded type inferred\n *\n * @example\n * const result = narrow(['foo', 'bar', 1])\n */\nexport function narrow<type>(value: Narrow<type>) {\n  return value\n}\n"],"mappings":";;;;;AA2BAA,OAAA,CAAAC,MAAA,GAAAA,MAAA;AAAA,SAAgBA,MAAMA,CAAOC,KAAmB;EAC9C,OAAOA,KAAK;AACd","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}