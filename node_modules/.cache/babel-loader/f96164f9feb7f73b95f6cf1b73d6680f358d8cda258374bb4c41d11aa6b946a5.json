{"ast":null,"code":"import { getEnsText } from '../actions/getEnsText.js';\nimport { filterQueryOptions } from './utils.js';\nexport function getEnsTextQueryOptions(config, options = {}) {\n  return {\n    async queryFn({\n      queryKey\n    }) {\n      const {\n        key,\n        name,\n        scopeKey: _,\n        ...parameters\n      } = queryKey[1];\n      if (!key || !name) throw new Error('key and name are required');\n      return getEnsText(config, {\n        ...parameters,\n        key,\n        name\n      });\n    },\n    queryKey: getEnsTextQueryKey(options)\n  };\n}\nexport function getEnsTextQueryKey(options = {}) {\n  return ['ensText', filterQueryOptions(options)];\n}","map":{"version":3,"names":["getEnsText","filterQueryOptions","getEnsTextQueryOptions","config","options","queryFn","queryKey","key","name","scopeKey","_","parameters","Error","getEnsTextQueryKey"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/@wagmi/core/src/query/getEnsText.ts"],"sourcesContent":["import type { QueryOptions } from '@tanstack/query-core'\n\nimport {\n  type GetEnsTextErrorType,\n  type GetEnsTextParameters,\n  type GetEnsTextReturnType,\n  getEnsText,\n} from '../actions/getEnsText.js'\nimport type { Config } from '../createConfig.js'\nimport type { ScopeKeyParameter } from '../types/properties.js'\nimport type { Compute, ExactPartial } from '../types/utils.js'\nimport { filterQueryOptions } from './utils.js'\n\nexport type GetEnsTextOptions<config extends Config> = Compute<\n  ExactPartial<GetEnsTextParameters<config>> & ScopeKeyParameter\n>\n\nexport function getEnsTextQueryOptions<config extends Config>(\n  config: config,\n  options: GetEnsTextOptions<config> = {},\n) {\n  return {\n    async queryFn({ queryKey }) {\n      const { key, name, scopeKey: _, ...parameters } = queryKey[1]\n      if (!key || !name) throw new Error('key and name are required')\n      return getEnsText(config, { ...parameters, key, name })\n    },\n    queryKey: getEnsTextQueryKey(options),\n  } as const satisfies QueryOptions<\n    GetEnsTextQueryFnData,\n    GetEnsTextErrorType,\n    GetEnsTextData,\n    GetEnsTextQueryKey<config>\n  >\n}\n\nexport type GetEnsTextQueryFnData = GetEnsTextReturnType\n\nexport type GetEnsTextData = GetEnsTextQueryFnData\n\nexport function getEnsTextQueryKey<config extends Config>(\n  options: GetEnsTextOptions<config> = {},\n) {\n  return ['ensText', filterQueryOptions(options)] as const\n}\n\nexport type GetEnsTextQueryKey<config extends Config> = ReturnType<\n  typeof getEnsTextQueryKey<config>\n>\n"],"mappings":"AAEA,SAIEA,UAAU,QACL,0BAA0B;AAIjC,SAASC,kBAAkB,QAAQ,YAAY;AAM/C,OAAM,SAAUC,sBAAsBA,CACpCC,MAAc,EACdC,OAAA,GAAqC,EAAE;EAEvC,OAAO;IACL,MAAMC,OAAOA,CAAC;MAAEC;IAAQ,CAAE;MACxB,MAAM;QAAEC,GAAG;QAAEC,IAAI;QAAEC,QAAQ,EAAEC,CAAC;QAAE,GAAGC;MAAU,CAAE,GAAGL,QAAQ,CAAC,CAAC,CAAC;MAC7D,IAAI,CAACC,GAAG,IAAI,CAACC,IAAI,EAAE,MAAM,IAAII,KAAK,CAAC,2BAA2B,CAAC;MAC/D,OAAOZ,UAAU,CAACG,MAAM,EAAE;QAAE,GAAGQ,UAAU;QAAEJ,GAAG;QAAEC;MAAI,CAAE,CAAC;IACzD,CAAC;IACDF,QAAQ,EAAEO,kBAAkB,CAACT,OAAO;GAMrC;AACH;AAMA,OAAM,SAAUS,kBAAkBA,CAChCT,OAAA,GAAqC,EAAE;EAEvC,OAAO,CAAC,SAAS,EAAEH,kBAAkB,CAACG,OAAO,CAAC,CAAU;AAC1D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}