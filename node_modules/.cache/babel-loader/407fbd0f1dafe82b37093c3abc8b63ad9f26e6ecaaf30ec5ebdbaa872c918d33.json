{"ast":null,"code":"import * as RpcRequest from '../RpcRequest.js';\nimport * as RpcResponse from '../RpcResponse.js';\n/** @internal */\nexport function create(transport, options_root) {\n  const requestStore = RpcRequest.createStore();\n  return {\n    request: async ({\n      method,\n      params\n    }, options = {}) => {\n      const body = requestStore.prepare({\n        method,\n        params\n      });\n      const data = await transport.request(body, options);\n      return RpcResponse.parse(data, {\n        raw: options.raw ?? options_root?.raw\n      });\n    }\n  };\n}","map":{"version":3,"names":["RpcRequest","RpcResponse","create","transport","options_root","requestStore","createStore","request","method","params","options","body","prepare","data","parse","raw"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/ox/core/internal/rpcTransport.ts"],"sourcesContent":["import type * as Errors from '../Errors.js'\nimport * as RpcRequest from '../RpcRequest.js'\nimport * as RpcResponse from '../RpcResponse.js'\nimport type * as RpcSchema from '../RpcSchema.js'\nimport type * as RpcTransport from '../RpcTransport.js'\nimport type { Compute } from './types.js'\n\n/** @internal */\nexport type Options<\n  raw extends boolean | undefined = undefined,\n  options extends Record<string, unknown> = {},\n  schema extends RpcSchema.Generic = RpcSchema.Default,\n> = {\n  /**\n   * Enables raw mode â€“ responses will return an object with `result` and `error` properties instead of returning the `result` directly and throwing errors.\n   *\n   * - `true`: a JSON-RPC response object will be returned with `result` and `error` properties.\n   * - `false`: the JSON-RPC response object's `result` property will be returned directly, and JSON-RPC Errors will be thrown.\n   *\n   * @default false\n   */\n  raw?: raw | boolean | undefined\n  /**\n   * RPC Schema to use for the Transport's `request` function.\n   * See {@link ox#RpcSchema.(from:function)} for more.\n   *\n   * @default `RpcSchema.Default`\n   */\n  schema?: schema | RpcSchema.Default | undefined\n} & options\n\n/** @internal */\nexport function create<\n  options extends Record<string, unknown> = {},\n  schema extends RpcSchema.Generic = RpcSchema.Default,\n  raw extends boolean = false,\n>(\n  transport: create.Transport<options>,\n  options_root?: Options<raw, options, schema>,\n): RpcTransport.RpcTransport<raw, options, schema> {\n  const requestStore = RpcRequest.createStore()\n\n  return {\n    request: async ({ method, params }, options: any = {}) => {\n      const body = requestStore.prepare({ method, params } as never)\n\n      const data = await transport.request(body as never, options as never)\n\n      return RpcResponse.parse(data, {\n        raw: options.raw ?? options_root?.raw,\n      }) as never\n    },\n  }\n}\n\n/** @internal */\nexport declare namespace create {\n  type Transport<options extends Record<string, unknown> = {}> = {\n    request: (\n      body: Compute<Omit<RpcRequest.RpcRequest, '_returnType'>>,\n      options: options,\n    ) => Promise<RpcResponse.RpcResponse>\n  }\n\n  type ErrorType =\n    | RpcRequest.createStore.ErrorType\n    | RpcResponse.parse.ErrorType\n    | Errors.GlobalErrorType\n}\n"],"mappings":"AACA,OAAO,KAAKA,UAAU,MAAM,kBAAkB;AAC9C,OAAO,KAAKC,WAAW,MAAM,mBAAmB;AA6BhD;AACA,OAAM,SAAUC,MAAMA,CAKpBC,SAAoC,EACpCC,YAA4C;EAE5C,MAAMC,YAAY,GAAGL,UAAU,CAACM,WAAW,EAAE;EAE7C,OAAO;IACLC,OAAO,EAAE,MAAAA,CAAO;MAAEC,MAAM;MAAEC;IAAM,CAAE,EAAEC,OAAA,GAAe,EAAE,KAAI;MACvD,MAAMC,IAAI,GAAGN,YAAY,CAACO,OAAO,CAAC;QAAEJ,MAAM;QAAEC;MAAM,CAAW,CAAC;MAE9D,MAAMI,IAAI,GAAG,MAAMV,SAAS,CAACI,OAAO,CAACI,IAAa,EAAED,OAAgB,CAAC;MAErE,OAAOT,WAAW,CAACa,KAAK,CAACD,IAAI,EAAE;QAC7BE,GAAG,EAAEL,OAAO,CAACK,GAAG,IAAIX,YAAY,EAAEW;OACnC,CAAU;IACb;GACD;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}