{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getCode = getCode;\nconst toHex_js_1 = require(\"../../utils/encoding/toHex.js\");\nasync function getCode(client, {\n  address,\n  blockNumber,\n  blockTag = 'latest'\n}) {\n  const blockNumberHex = blockNumber !== undefined ? (0, toHex_js_1.numberToHex)(blockNumber) : undefined;\n  const hex = await client.request({\n    method: 'eth_getCode',\n    params: [address, blockNumberHex || blockTag]\n  }, {\n    dedupe: Boolean(blockNumberHex)\n  });\n  if (hex === '0x') return undefined;\n  return hex;\n}","map":{"version":3,"names":["exports","getCode","toHex_js_1","require","client","address","blockNumber","blockTag","blockNumberHex","undefined","numberToHex","hex","request","method","params","dedupe","Boolean"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/viem/actions/public/getCode.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\n\nexport type GetCodeParameters = {\n  address: Address\n} & (\n  | {\n      blockNumber?: undefined\n      blockTag?: BlockTag | undefined\n    }\n  | {\n      blockNumber?: bigint | undefined\n      blockTag?: undefined\n    }\n)\n\nexport type GetCodeReturnType = Hex | undefined\n\nexport type GetCodeErrorType =\n  | NumberToHexErrorType\n  | RequestErrorType\n  | ErrorType\n\n/**\n * Retrieves the bytecode at an address.\n *\n * - Docs: https://viem.sh/docs/contract/getCode\n * - JSON-RPC Methods: [`eth_getCode`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getcode)\n *\n * @param client - Client to use\n * @param parameters - {@link GetCodeParameters}\n * @returns The contract's bytecode. {@link GetCodeReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getCode } from 'viem/contract'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const code = await getCode(client, {\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n * })\n */\nexport async function getCode<chain extends Chain | undefined>(\n  client: Client<Transport, chain>,\n  { address, blockNumber, blockTag = 'latest' }: GetCodeParameters,\n): Promise<GetCodeReturnType> {\n  const blockNumberHex =\n    blockNumber !== undefined ? numberToHex(blockNumber) : undefined\n  const hex = await client.request(\n    {\n      method: 'eth_getCode',\n      params: [address, blockNumberHex || blockTag],\n    },\n    { dedupe: Boolean(blockNumberHex) },\n  )\n  if (hex === '0x') return undefined\n  return hex\n}\n"],"mappings":";;;;;AAyDAA,OAAA,CAAAC,OAAA,GAAAA,OAAA;AAhDA,MAAAC,UAAA,GAAAC,OAAA;AAgDO,eAAeF,OAAOA,CAC3BG,MAAgC,EAChC;EAAEC,OAAO;EAAEC,WAAW;EAAEC,QAAQ,GAAG;AAAQ,CAAqB;EAEhE,MAAMC,cAAc,GAClBF,WAAW,KAAKG,SAAS,GAAG,IAAAP,UAAA,CAAAQ,WAAW,EAACJ,WAAW,CAAC,GAAGG,SAAS;EAClE,MAAME,GAAG,GAAG,MAAMP,MAAM,CAACQ,OAAO,CAC9B;IACEC,MAAM,EAAE,aAAa;IACrBC,MAAM,EAAE,CAACT,OAAO,EAAEG,cAAc,IAAID,QAAQ;GAC7C,EACD;IAAEQ,MAAM,EAAEC,OAAO,CAACR,cAAc;EAAC,CAAE,CACpC;EACD,IAAIG,GAAG,KAAK,IAAI,EAAE,OAAOF,SAAS;EAClC,OAAOE,GAAG;AACZ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}