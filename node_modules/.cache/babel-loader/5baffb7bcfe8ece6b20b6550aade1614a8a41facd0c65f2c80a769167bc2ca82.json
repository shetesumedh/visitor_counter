{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { Communicator } from './core/communicator/Communicator.js';\nimport { CB_WALLET_RPC_URL } from './core/constants.js';\nimport { standardErrorCodes } from './core/error/constants.js';\nimport { standardErrors } from './core/error/errors.js';\nimport { serializeError } from './core/error/serialize.js';\nimport { ProviderEventEmitter } from './core/provider/interface.js';\nimport { ScopedLocalStorage } from './core/storage/ScopedLocalStorage.js';\nimport { logEnableFunctionCalled, logRequestError, logRequestResponded, logRequestStarted, logSignerLoadedFromStorage } from './core/telemetry/events/provider.js';\nimport { logSignerSelectionRequested, logSignerSelectionResponded } from './core/telemetry/events/signer-selection.js';\nimport { hexStringFromNumber } from './core/type/util.js';\nimport { correlationIds } from './store/correlation-ids/store.js';\nimport { store } from './store/store.js';\nimport { checkErrorForInvalidRequestArgs, fetchRPCRequest } from './util/provider.js';\nimport { createSigner, fetchSignerType, loadSignerType, signerToSignerType, storeSignerType } from './sign/util.js';\nexport class CoinbaseWalletProvider extends ProviderEventEmitter {\n  constructor(_a) {\n    var {\n        metadata\n      } = _a,\n      _b = _a.preference,\n      {\n        keysUrl\n      } = _b,\n      preference = __rest(_b, [\"keysUrl\"]);\n    super();\n    this.signer = null;\n    this.isCoinbaseWallet = true;\n    this.metadata = metadata;\n    this.preference = preference;\n    this.communicator = new Communicator({\n      url: keysUrl,\n      metadata,\n      preference\n    });\n    const signerType = loadSignerType();\n    if (signerType) {\n      this.signer = this.initSigner(signerType);\n      logSignerLoadedFromStorage({\n        signerType\n      });\n    }\n  }\n  async request(args) {\n    // correlation id across the entire request lifecycle\n    const correlationId = crypto.randomUUID();\n    correlationIds.set(args, correlationId);\n    logRequestStarted({\n      method: args.method,\n      correlationId\n    });\n    try {\n      const result = await this._request(args);\n      logRequestResponded({\n        method: args.method,\n        signerType: signerToSignerType(this.signer),\n        correlationId\n      });\n      return result;\n    } catch (error) {\n      logRequestError({\n        method: args.method,\n        correlationId,\n        signerType: signerToSignerType(this.signer),\n        errorMessage: error instanceof Error ? error.message : ''\n      });\n      throw error;\n    } finally {\n      correlationIds.delete(args);\n    }\n  }\n  async _request(args) {\n    try {\n      checkErrorForInvalidRequestArgs(args);\n      if (!this.signer) {\n        switch (args.method) {\n          case 'eth_requestAccounts':\n            {\n              let signerType;\n              const subAccountsConfig = store.subAccountsConfig.get();\n              if (subAccountsConfig === null || subAccountsConfig === void 0 ? void 0 : subAccountsConfig.enableAutoSubAccounts) {\n                signerType = 'scw';\n              } else {\n                signerType = await this.requestSignerSelection(args);\n              }\n              const signer = this.initSigner(signerType);\n              if (signerType === 'scw' && (subAccountsConfig === null || subAccountsConfig === void 0 ? void 0 : subAccountsConfig.enableAutoSubAccounts)) {\n                await signer.handshake({\n                  method: 'handshake'\n                });\n                // eth_requestAccounts gets translated to wallet_connect at SCWSigner level\n                await signer.request(args);\n              } else {\n                await signer.handshake(args);\n              }\n              this.signer = signer;\n              storeSignerType(signerType);\n              break;\n            }\n          case 'wallet_connect':\n            {\n              const signer = this.initSigner('scw');\n              await signer.handshake({\n                method: 'handshake'\n              }); // exchange session keys\n              const result = await signer.request(args); // send diffie-hellman encrypted request\n              this.signer = signer;\n              return result;\n            }\n          case 'wallet_sendCalls':\n          case 'wallet_sign':\n            {\n              const ephemeralSigner = this.initSigner('scw');\n              await ephemeralSigner.handshake({\n                method: 'handshake'\n              }); // exchange session keys\n              const result = await ephemeralSigner.request(args); // send diffie-hellman encrypted request\n              await ephemeralSigner.cleanup(); // clean up (rotate) the ephemeral session keys\n              return result;\n            }\n          case 'wallet_getCallsStatus':\n            {\n              const result = await fetchRPCRequest(args, CB_WALLET_RPC_URL);\n              return result;\n            }\n          case 'net_version':\n            {\n              const result = 1; // default value\n              return result;\n            }\n          case 'eth_chainId':\n            {\n              const result = hexStringFromNumber(1); // default value\n              return result;\n            }\n          default:\n            {\n              throw standardErrors.provider.unauthorized(\"Must call 'eth_requestAccounts' before other methods\");\n            }\n        }\n      }\n      const result = await this.signer.request(args);\n      return result;\n    } catch (error) {\n      const {\n        code\n      } = error;\n      if (code === standardErrorCodes.provider.unauthorized) this.disconnect();\n      return Promise.reject(serializeError(error));\n    }\n  }\n  /** @deprecated Use `.request({ method: 'eth_requestAccounts' })` instead. */\n  async enable() {\n    console.warn(`.enable() has been deprecated. Please use .request({ method: \"eth_requestAccounts\" }) instead.`);\n    logEnableFunctionCalled();\n    return await this.request({\n      method: 'eth_requestAccounts'\n    });\n  }\n  async disconnect() {\n    var _a;\n    await ((_a = this.signer) === null || _a === void 0 ? void 0 : _a.cleanup());\n    this.signer = null;\n    ScopedLocalStorage.clearAll();\n    correlationIds.clear();\n    this.emit('disconnect', standardErrors.provider.disconnected('User initiated disconnection'));\n  }\n  async requestSignerSelection(handshakeRequest) {\n    logSignerSelectionRequested();\n    const signerType = await fetchSignerType({\n      communicator: this.communicator,\n      preference: this.preference,\n      metadata: this.metadata,\n      handshakeRequest,\n      callback: this.emit.bind(this)\n    });\n    logSignerSelectionResponded(signerType);\n    return signerType;\n  }\n  initSigner(signerType) {\n    return createSigner({\n      signerType,\n      metadata: this.metadata,\n      communicator: this.communicator,\n      callback: this.emit.bind(this)\n    });\n  }\n}","map":{"version":3,"names":["Communicator","CB_WALLET_RPC_URL","standardErrorCodes","standardErrors","serializeError","ProviderEventEmitter","ScopedLocalStorage","logEnableFunctionCalled","logRequestError","logRequestResponded","logRequestStarted","logSignerLoadedFromStorage","logSignerSelectionRequested","logSignerSelectionResponded","hexStringFromNumber","correlationIds","store","checkErrorForInvalidRequestArgs","fetchRPCRequest","createSigner","fetchSignerType","loadSignerType","signerToSignerType","storeSignerType","CoinbaseWalletProvider","constructor","_a","metadata","_b","preference","keysUrl","__rest","signer","isCoinbaseWallet","communicator","url","signerType","initSigner","request","args","correlationId","crypto","randomUUID","set","method","result","_request","error","errorMessage","Error","message","delete","subAccountsConfig","get","enableAutoSubAccounts","requestSignerSelection","handshake","ephemeralSigner","cleanup","provider","unauthorized","code","disconnect","Promise","reject","enable","console","warn","clearAll","clear","emit","disconnected","handshakeRequest","callback","bind"],"sources":["../src/CoinbaseWalletProvider.ts"],"sourcesContent":[null],"mappings":";;;;;;;;AAAA,SAASA,YAAY,QAAQ,qCAAqC;AAClE,SAASC,iBAAiB,QAAQ,qBAAqB;AACvD,SAASC,kBAAkB,QAAQ,2BAA2B;AAC9D,SAASC,cAAc,QAAQ,wBAAwB;AACvD,SAASC,cAAc,QAAQ,2BAA2B;AAE1D,SAIEC,oBAAoB,QAGf,8BAA8B;AACrC,SAASC,kBAAkB,QAAQ,sCAAsC;AACzE,SACEC,uBAAuB,EACvBC,eAAe,EACfC,mBAAmB,EACnBC,iBAAiB,EACjBC,0BAA0B,QACrB,qCAAqC;AAC5C,SACEC,2BAA2B,EAC3BC,2BAA2B,QACtB,6CAA6C;AACpD,SAASC,mBAAmB,QAAQ,qBAAqB;AACzD,SAASC,cAAc,QAAQ,kCAAkC;AACjE,SAASC,KAAK,QAAQ,kBAAkB;AACxC,SAASC,+BAA+B,EAAEC,eAAe,QAAQ,oBAAoB;AAErF,SACEC,YAAY,EACZC,eAAe,EACfC,cAAc,EACdC,kBAAkB,EAClBC,eAAe,QACV,gBAAgB;AAEvB,OAAM,MAAOC,sBAAuB,SAAQnB,oBAAoB;EAO9DoB,YAAYC,EAAkF;QAAlF;QAAEC;MAAQ,IAAAD,EAAwE;MAAtEE,EAAA,GAAAF,EAAA,CAAAG,UAAsC;MAAtC;QAAcC;MAAO,IAAAF,EAAiB;MAAZC,UAAU,GAAAE,MAAA,CAAAH,EAAA,EAAxB,WAA0B,CAAF;IAC1D,KAAK,EAAE;IAHD,KAAAI,MAAM,GAAkB,IAAI;IAwI3B,KAAAC,gBAAgB,GAAG,IAAI;IApI9B,IAAI,CAACN,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACE,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACK,YAAY,GAAG,IAAIlC,YAAY,CAAC;MACnCmC,GAAG,EAAEL,OAAO;MACZH,QAAQ;MACRE;KACD,CAAC;IAEF,MAAMO,UAAU,GAAGf,cAAc,EAAE;IACnC,IAAIe,UAAU,EAAE;MACd,IAAI,CAACJ,MAAM,GAAG,IAAI,CAACK,UAAU,CAACD,UAAU,CAAC;MACzCzB,0BAA0B,CAAC;QAAEyB;MAAU,CAAE,CAAC;IAC5C;EACF;EAEO,MAAME,OAAOA,CAAIC,IAAsB;IAC5C;IACA,MAAMC,aAAa,GAAGC,MAAM,CAACC,UAAU,EAAE;IACzC3B,cAAc,CAAC4B,GAAG,CAACJ,IAAI,EAAEC,aAAa,CAAC;IACvC9B,iBAAiB,CAAC;MAAEkC,MAAM,EAAEL,IAAI,CAACK,MAAM;MAAEJ;IAAa,CAAE,CAAC;IAEzD,IAAI;MACF,MAAMK,MAAM,GAAG,MAAM,IAAI,CAACC,QAAQ,CAACP,IAAI,CAAC;MACxC9B,mBAAmB,CAAC;QAClBmC,MAAM,EAAEL,IAAI,CAACK,MAAM;QACnBR,UAAU,EAAEd,kBAAkB,CAAC,IAAI,CAACU,MAAM,CAAC;QAC3CQ;OACD,CAAC;MACF,OAAOK,MAAW;IACpB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdvC,eAAe,CAAC;QACdoC,MAAM,EAAEL,IAAI,CAACK,MAAM;QACnBJ,aAAa;QACbJ,UAAU,EAAEd,kBAAkB,CAAC,IAAI,CAACU,MAAM,CAAC;QAC3CgB,YAAY,EAAED,KAAK,YAAYE,KAAK,GAAGF,KAAK,CAACG,OAAO,GAAG;OACxD,CAAC;MACF,MAAMH,KAAK;IACb,CAAC,SAAS;MACRhC,cAAc,CAACoC,MAAM,CAACZ,IAAI,CAAC;IAC7B;EACF;EAEQ,MAAMO,QAAQA,CAAIP,IAAsB;IAC9C,IAAI;MACFtB,+BAA+B,CAACsB,IAAI,CAAC;MACrC,IAAI,CAAC,IAAI,CAACP,MAAM,EAAE;QAChB,QAAQO,IAAI,CAACK,MAAM;UACjB,KAAK,qBAAqB;YAAE;cAC1B,IAAIR,UAAsB;cAE1B,MAAMgB,iBAAiB,GAAGpC,KAAK,CAACoC,iBAAiB,CAACC,GAAG,EAAE;cACvD,IAAID,iBAAiB,aAAjBA,iBAAiB,uBAAjBA,iBAAiB,CAAEE,qBAAqB,EAAE;gBAC5ClB,UAAU,GAAG,KAAK;cACpB,CAAC,MAAM;gBACLA,UAAU,GAAG,MAAM,IAAI,CAACmB,sBAAsB,CAAChB,IAAI,CAAC;cACtD;cACA,MAAMP,MAAM,GAAG,IAAI,CAACK,UAAU,CAACD,UAAU,CAAC;cAE1C,IAAIA,UAAU,KAAK,KAAK,KAAIgB,iBAAiB,aAAjBA,iBAAiB,uBAAjBA,iBAAiB,CAAEE,qBAAqB,GAAE;gBACpE,MAAMtB,MAAM,CAACwB,SAAS,CAAC;kBAAEZ,MAAM,EAAE;gBAAW,CAAE,CAAC;gBAC/C;gBACA,MAAMZ,MAAM,CAACM,OAAO,CAACC,IAAI,CAAC;cAC5B,CAAC,MAAM;gBACL,MAAMP,MAAM,CAACwB,SAAS,CAACjB,IAAI,CAAC;cAC9B;cAEA,IAAI,CAACP,MAAM,GAAGA,MAAM;cACpBT,eAAe,CAACa,UAAU,CAAC;cAC3B;YACF;UACA,KAAK,gBAAgB;YAAE;cACrB,MAAMJ,MAAM,GAAG,IAAI,CAACK,UAAU,CAAC,KAAK,CAAC;cACrC,MAAML,MAAM,CAACwB,SAAS,CAAC;gBAAEZ,MAAM,EAAE;cAAW,CAAE,CAAC,CAAC,CAAC;cACjD,MAAMC,MAAM,GAAG,MAAMb,MAAM,CAACM,OAAO,CAACC,IAAI,CAAC,CAAC,CAAC;cAC3C,IAAI,CAACP,MAAM,GAAGA,MAAM;cACpB,OAAOa,MAAW;YACpB;UACA,KAAK,kBAAkB;UACvB,KAAK,aAAa;YAAE;cAClB,MAAMY,eAAe,GAAG,IAAI,CAACpB,UAAU,CAAC,KAAK,CAAC;cAC9C,MAAMoB,eAAe,CAACD,SAAS,CAAC;gBAAEZ,MAAM,EAAE;cAAW,CAAE,CAAC,CAAC,CAAC;cAC1D,MAAMC,MAAM,GAAG,MAAMY,eAAe,CAACnB,OAAO,CAACC,IAAI,CAAC,CAAC,CAAC;cACpD,MAAMkB,eAAe,CAACC,OAAO,EAAE,CAAC,CAAC;cACjC,OAAOb,MAAW;YACpB;UACA,KAAK,uBAAuB;YAAE;cAC5B,MAAMA,MAAM,GAAG,MAAM3B,eAAe,CAACqB,IAAI,EAAEtC,iBAAiB,CAAC;cAC7D,OAAO4C,MAAW;YACpB;UACA,KAAK,aAAa;YAAE;cAClB,MAAMA,MAAM,GAAG,CAAM,CAAC,CAAC;cACvB,OAAOA,MAAM;YACf;UACA,KAAK,aAAa;YAAE;cAClB,MAAMA,MAAM,GAAG/B,mBAAmB,CAAC,CAAC,CAAM,CAAC,CAAC;cAC5C,OAAO+B,MAAM;YACf;UACA;YAAS;cACP,MAAM1C,cAAc,CAACwD,QAAQ,CAACC,YAAY,CACxC,sDAAsD,CACvD;YACH;QACF;MACF;MACA,MAAMf,MAAM,GAAG,MAAM,IAAI,CAACb,MAAM,CAACM,OAAO,CAACC,IAAI,CAAC;MAC9C,OAAOM,MAAW;IACpB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACd,MAAM;QAAEc;MAAI,CAAE,GAAGd,KAA0B;MAC3C,IAAIc,IAAI,KAAK3D,kBAAkB,CAACyD,QAAQ,CAACC,YAAY,EAAE,IAAI,CAACE,UAAU,EAAE;MACxE,OAAOC,OAAO,CAACC,MAAM,CAAC5D,cAAc,CAAC2C,KAAK,CAAC,CAAC;IAC9C;EACF;EAEA;EACO,MAAMkB,MAAMA,CAAA;IACjBC,OAAO,CAACC,IAAI,CACV,gGAAgG,CACjG;IACD5D,uBAAuB,EAAE;IACzB,OAAO,MAAM,IAAI,CAAC+B,OAAO,CAAC;MACxBM,MAAM,EAAE;KACT,CAAC;EACJ;EAEA,MAAMkB,UAAUA,CAAA;;IACd,OAAM,CAAApC,EAAA,OAAI,CAACM,MAAM,cAAAN,EAAA,uBAAAA,EAAA,CAAEgC,OAAO,EAAE;IAC5B,IAAI,CAAC1B,MAAM,GAAG,IAAI;IAClB1B,kBAAkB,CAAC8D,QAAQ,EAAE;IAC7BrD,cAAc,CAACsD,KAAK,EAAE;IACtB,IAAI,CAACC,IAAI,CAAC,YAAY,EAAEnE,cAAc,CAACwD,QAAQ,CAACY,YAAY,CAAC,8BAA8B,CAAC,CAAC;EAC/F;EAIQ,MAAMhB,sBAAsBA,CAACiB,gBAAkC;IACrE5D,2BAA2B,EAAE;IAC7B,MAAMwB,UAAU,GAAG,MAAMhB,eAAe,CAAC;MACvCc,YAAY,EAAE,IAAI,CAACA,YAAY;MAC/BL,UAAU,EAAE,IAAI,CAACA,UAAU;MAC3BF,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvB6C,gBAAgB;MAChBC,QAAQ,EAAE,IAAI,CAACH,IAAI,CAACI,IAAI,CAAC,IAAI;KAC9B,CAAC;IACF7D,2BAA2B,CAACuB,UAAU,CAAC;IACvC,OAAOA,UAAU;EACnB;EAEQC,UAAUA,CAACD,UAAsB;IACvC,OAAOjB,YAAY,CAAC;MAClBiB,UAAU;MACVT,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBO,YAAY,EAAE,IAAI,CAACA,YAAY;MAC/BuC,QAAQ,EAAE,IAAI,CAACH,IAAI,CAACI,IAAI,CAAC,IAAI;KAC9B,CAAC;EACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}