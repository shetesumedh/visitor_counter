{"ast":null,"code":"// TODO(v3): Remove this.\nimport { getCallsStatus } from '../../../actions/wallet/getCallsStatus.js';\nimport { getCapabilities } from '../../../actions/wallet/getCapabilities.js';\nimport { sendCalls } from '../../../actions/wallet/sendCalls.js';\nimport { showCallsStatus } from '../../../actions/wallet/showCallsStatus.js';\nimport { waitForCallsStatus } from '../../../actions/wallet/waitForCallsStatus.js';\nimport { writeContracts } from '../actions/writeContracts.js';\n/**\n * A suite of EIP-5792 Wallet Actions.\n *\n * - Docs: https://viem.sh/experimental\n *\n * @example\n * import { createPublicClient, createWalletClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { eip5792Actions } from 'viem/experimental'\n *\n * const walletClient = createWalletClient({\n *   chain: mainnet,\n *   transport: http(),\n * }).extend(eip5792Actions())\n *\n * const hash = await walletClient.sendCalls({...})\n */\nexport function eip5792Actions() {\n  return client => {\n    return {\n      getCallsStatus: parameters => getCallsStatus(client, parameters),\n      getCapabilities: parameters => getCapabilities(client, parameters),\n      sendCalls: parameters => sendCalls(client, parameters),\n      showCallsStatus: parameters => showCallsStatus(client, parameters),\n      waitForCallsStatus: parameters => waitForCallsStatus(client, parameters),\n      writeContracts: parameters => writeContracts(client, parameters)\n    };\n  };\n}","map":{"version":3,"names":["getCallsStatus","getCapabilities","sendCalls","showCallsStatus","waitForCallsStatus","writeContracts","eip5792Actions","client","parameters"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/viem/experimental/eip5792/decorators/eip5792.ts"],"sourcesContent":["// TODO(v3): Remove this.\n\nimport {\n  type GetCallsStatusParameters,\n  type GetCallsStatusReturnType,\n  getCallsStatus,\n} from '../../../actions/wallet/getCallsStatus.js'\nimport {\n  type GetCapabilitiesParameters,\n  type GetCapabilitiesReturnType,\n  getCapabilities,\n} from '../../../actions/wallet/getCapabilities.js'\nimport {\n  type SendCallsParameters,\n  type SendCallsReturnType,\n  sendCalls,\n} from '../../../actions/wallet/sendCalls.js'\nimport {\n  type ShowCallsStatusParameters,\n  type ShowCallsStatusReturnType,\n  showCallsStatus,\n} from '../../../actions/wallet/showCallsStatus.js'\nimport {\n  type WaitForCallsStatusParameters,\n  type WaitForCallsStatusReturnType,\n  waitForCallsStatus,\n} from '../../../actions/wallet/waitForCallsStatus.js'\nimport type { Client } from '../../../clients/createClient.js'\nimport type { Transport } from '../../../clients/transports/createTransport.js'\nimport type { Account } from '../../../types/account.js'\nimport type { Chain } from '../../../types/chain.js'\nimport {\n  type WriteContractsParameters,\n  type WriteContractsReturnType,\n  writeContracts,\n} from '../actions/writeContracts.js'\n\nexport type Eip5792Actions<\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n> = {\n  /**\n   * Returns the status of a call batch that was sent via `sendCalls`.\n   *\n   * - Docs: https://viem.sh/experimental/eip5792/getCallsStatus\n   * - JSON-RPC Methods: [`wallet_getCallsStatus`](https://eips.ethereum.org/EIPS/eip-5792)\n   *\n   * @param client - Client to use\n   * @returns Status of the calls. {@link GetCallsStatusReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { eip5792Actions } from 'viem/experimental'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * }).extend(eip5792Actions())\n   *\n   * const { receipts, status } = await client.getCallsStatus({ id: '0xdeadbeef' })\n   */\n  getCallsStatus: (\n    parameters: GetCallsStatusParameters,\n  ) => Promise<GetCallsStatusReturnType>\n  /**\n   * Extract capabilities that a connected wallet supports (e.g. paymasters, session keys, etc).\n   *\n   * - Docs: https://viem.sh/experimental/eip5792/getCapabilities\n   * - JSON-RPC Methods: [`wallet_getCapabilities`](https://eips.ethereum.org/EIPS/eip-5792)\n   *\n   * @param client - Client to use\n   * @returns The wallet's capabilities. {@link GetCapabilitiesReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { eip5792Actions } from 'viem/experimental'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * }).extend(eip5792Actions())\n   *\n   * const capabilities = await client.getCapabilities({\n   *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   * })\n   */\n  getCapabilities: (\n    parameters?: GetCapabilitiesParameters,\n  ) => Promise<GetCapabilitiesReturnType>\n  /**\n   * Requests the connected wallet to send a batch of calls.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/sendCalls\n   * - JSON-RPC Methods: [`wallet_sendCalls`](https://eips.ethereum.org/EIPS/eip-5792)\n   *\n   * @param client - Client to use\n   * @returns Transaction identifier. {@link SendCallsReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { eip5792Actions } from 'viem/experimental'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * }).extend(eip5792Actions())\n   *\n   * const id = await client.sendCalls({\n   *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   *   calls: [\n   *     {\n   *       data: '0xdeadbeef',\n   *       to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n   *     },\n   *     {\n   *       to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n   *       value: 69420n,\n   *     },\n   *   ],\n   * })\n   */\n  sendCalls: <\n    const calls extends readonly unknown[],\n    chainOverride extends Chain | undefined = undefined,\n  >(\n    parameters: SendCallsParameters<chain, account, chainOverride, calls>,\n  ) => Promise<SendCallsReturnType>\n  /**\n   * Requests for the wallet to show information about a call batch\n   * that was sent via `sendCalls`.\n   *\n   * - Docs: https://viem.sh/experimental/eip5792/showCallsStatus\n   * - JSON-RPC Methods: [`wallet_showCallsStatus`](https://eips.ethereum.org/EIPS/eip-5792)\n   *\n   * @param client - Client to use\n   * @returns Displays status of the calls in wallet. {@link ShowCallsStatusReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { eip5792Actions } from 'viem/experimental'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * }).extend(eip5792Actions())\n   *\n   * await client.showCallsStatus({ id: '0xdeadbeef' })\n   */\n  showCallsStatus: (\n    parameters: ShowCallsStatusParameters,\n  ) => Promise<ShowCallsStatusReturnType>\n  /**\n   * Waits for the status & receipts of a call bundle that was sent via `sendCalls`.\n   *\n   * - Docs: https://viem.sh/experimental/eip5792/waitForCallsStatus\n   * - JSON-RPC Methods: [`wallet_getCallsStatus`](https://eips.ethereum.org/EIPS/eip-5792)\n   *\n   * @param client - Client to use\n   * @param parameters - {@link WaitForCallsStatusParameters}\n   * @returns Status & receipts of the call bundle. {@link WaitForCallsStatusReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { waitForCallsStatus } from 'viem/experimental'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   *\n   * const { receipts, status } = await waitForCallsStatus(client, { id: '0xdeadbeef' })\n   */\n  waitForCallsStatus: (\n    parameters: WaitForCallsStatusParameters,\n  ) => Promise<WaitForCallsStatusReturnType>\n  /**\n   * Requests for the wallet to sign and broadcast a batch of write contract calls (transactions) to the network.\n   *\n   * - Docs: https://viem.sh/experimental/eip5792/writeContracts\n   *\n   * @param client - Client to use\n   * @param parameters - {@link WriteContractsParameters}\n   * @returns Unique identifier for the call batch. {@link WriteContractsReturnType}\n   *\n   * @example\n   * import { createPublicClient, http, parseAbi } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { writeContracts } from 'viem/experimental'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const abi = parseAbi([\n   *   'function approve(address, uint256) returns (bool)',\n   *   'function transferFrom(address, address, uint256) returns (bool)',\n   * ])\n   * const id = await client.writeContracts({\n   *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   *   contracts: [\n   *     {\n   *       address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n   *       abi,\n   *       functionName: 'approve',\n   *       args: ['0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC', 100n],\n   *     },\n   *     {\n   *       address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n   *       abi,\n   *       functionName: 'transferFrom',\n   *       args: [\n   *         '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n   *         '0x0000000000000000000000000000000000000000',\n   *         100n\n   *       ],\n   *     },\n   *   ],\n   * })\n   */\n  writeContracts: <\n    const contracts extends readonly unknown[],\n    chainOverride extends Chain | undefined = undefined,\n  >(\n    parameters: WriteContractsParameters<\n      contracts,\n      chain,\n      account,\n      chainOverride\n    >,\n  ) => Promise<WriteContractsReturnType>\n}\n\n/**\n * A suite of EIP-5792 Wallet Actions.\n *\n * - Docs: https://viem.sh/experimental\n *\n * @example\n * import { createPublicClient, createWalletClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { eip5792Actions } from 'viem/experimental'\n *\n * const walletClient = createWalletClient({\n *   chain: mainnet,\n *   transport: http(),\n * }).extend(eip5792Actions())\n *\n * const hash = await walletClient.sendCalls({...})\n */\nexport function eip5792Actions() {\n  return <\n    transport extends Transport,\n    chain extends Chain | undefined = Chain | undefined,\n    account extends Account | undefined = Account | undefined,\n  >(\n    client: Client<transport, chain, account>,\n  ): Eip5792Actions<chain, account> => {\n    return {\n      getCallsStatus: (parameters) => getCallsStatus(client, parameters),\n      getCapabilities: ((parameters: any) =>\n        getCapabilities(client as any, parameters)) as any,\n      sendCalls: (parameters) => sendCalls(client, parameters),\n      showCallsStatus: (parameters) => showCallsStatus(client, parameters),\n      waitForCallsStatus: (parameters) =>\n        waitForCallsStatus(client, parameters),\n      writeContracts: (parameters) => writeContracts(client, parameters),\n    }\n  }\n}\n"],"mappings":"AAAA;AAEA,SAGEA,cAAc,QACT,2CAA2C;AAClD,SAGEC,eAAe,QACV,4CAA4C;AACnD,SAGEC,SAAS,QACJ,sCAAsC;AAC7C,SAGEC,eAAe,QACV,4CAA4C;AACnD,SAGEC,kBAAkB,QACb,+CAA+C;AAKtD,SAGEC,cAAc,QACT,8BAA8B;AA0MrC;;;;;;;;;;;;;;;;;AAiBA,OAAM,SAAUC,cAAcA,CAAA;EAC5B,OAKEC,MAAyC,IACP;IAClC,OAAO;MACLP,cAAc,EAAGQ,UAAU,IAAKR,cAAc,CAACO,MAAM,EAAEC,UAAU,CAAC;MAClEP,eAAe,EAAIO,UAAe,IAChCP,eAAe,CAACM,MAAa,EAAEC,UAAU,CAAS;MACpDN,SAAS,EAAGM,UAAU,IAAKN,SAAS,CAACK,MAAM,EAAEC,UAAU,CAAC;MACxDL,eAAe,EAAGK,UAAU,IAAKL,eAAe,CAACI,MAAM,EAAEC,UAAU,CAAC;MACpEJ,kBAAkB,EAAGI,UAAU,IAC7BJ,kBAAkB,CAACG,MAAM,EAAEC,UAAU,CAAC;MACxCH,cAAc,EAAGG,UAAU,IAAKH,cAAc,CAACE,MAAM,EAAEC,UAAU;KAClE;EACH,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}