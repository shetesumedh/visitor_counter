{"ast":null,"code":"import * as Bytes from './Bytes.js';\nimport * as Hex from './Hex.js';\nimport * as internal from './internal/base58.js';\n/**\n * Encodes a {@link ox#Bytes.Bytes} to a Base58-encoded string.\n *\n * @example\n * ```ts twoslash\n * import { Base58, Bytes } from 'ox'\n *\n * const value = Base58.fromBytes(Bytes.fromString('Hello World!'))\n * // @log: '2NEpo7TZRRrLZSi2U'\n * ```\n *\n * @param value - The byte array to encode.\n * @returns The Base58 encoded string.\n */\nexport function fromBytes(value) {\n  return internal.from(value);\n}\n/**\n * Encodes a {@link ox#Hex.Hex} to a Base58-encoded string.\n *\n * @example\n * ```ts twoslash\n * import { Base58, Hex } from 'ox'\n *\n * const value = Base58.fromHex(Hex.fromString('Hello World!'))\n * // @log: '2NEpo7TZRRrLZSi2U'\n * ```\n *\n * @param value - The byte array to encode.\n * @returns The Base58 encoded string.\n */\nexport function fromHex(value) {\n  return internal.from(value);\n}\n/**\n * Encodes a string to a Base58-encoded string.\n *\n * @example\n * ```ts twoslash\n * import { Base58 } from 'ox'\n *\n * const value = Base58.fromString('Hello World!')\n * // @log: '2NEpo7TZRRrLZSi2U'\n * ```\n *\n * @param value - The string to encode.\n * @returns The Base58 encoded string.\n */\nexport function fromString(value) {\n  return internal.from(Bytes.fromString(value));\n}\n/**\n * Decodes a Base58-encoded string to a {@link ox#Bytes.Bytes}.\n *\n * @example\n * ```ts twoslash\n * import { Base58 } from 'ox'\n *\n * const value = Base58.toBytes('2NEpo7TZRRrLZSi2U')\n * // @log: Uint8Array [ 72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33 ]\n * ```\n *\n * @param value - The Base58 encoded string.\n * @returns The decoded byte array.\n */\nexport function toBytes(value) {\n  return Bytes.fromHex(toHex(value));\n}\n/**\n * Decodes a Base58-encoded string to {@link ox#Hex.Hex}.\n *\n * @example\n * ```ts twoslash\n * import { Base58 } from 'ox'\n *\n * const value = Base58.toHex('2NEpo7TZRRrLZSi2U')\n * // @log: '0x48656c6c6f20576f726c6421'\n * ```\n *\n * @param value - The Base58 encoded string.\n * @returns The decoded hex string.\n */\nexport function toHex(value) {\n  let integer = BigInt(0);\n  let pad = 0;\n  let checkPad = true;\n  for (let i = 0; i < value.length; i++) {\n    const char = value[i];\n    // check for leading 1s\n    if (checkPad && char === '1') pad++;else checkPad = false;\n    // check for invalid characters\n    if (typeof internal.alphabetToInteger[char] !== 'bigint') throw new Error('invalid base58 character: ' + char);\n    integer = integer * 58n;\n    integer = integer + internal.alphabetToInteger[char];\n  }\n  if (!pad) return `0x${integer.toString(16)}`;\n  return `0x${'0'.repeat(pad * 2)}${integer.toString(16)}`;\n}\n/**\n * Decodes a Base58-encoded string to a string.\n *\n * @example\n * ```ts twoslash\n * import { Base58 } from 'ox'\n *\n * const value = Base58.toString('2NEpo7TZRRrLZSi2U')\n * // @log: 'Hello World!'\n * ```\n *\n * @param value - The Base58 encoded string.\n * @returns The decoded string.\n */\nexport function toString(value) {\n  return Hex.toString(toHex(value));\n}","map":{"version":3,"names":["Bytes","Hex","internal","fromBytes","value","from","fromHex","fromString","toBytes","toHex","integer","BigInt","pad","checkPad","i","length","char","alphabetToInteger","Error","toString","repeat"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/ox/core/Base58.ts"],"sourcesContent":["import * as Bytes from './Bytes.js'\nimport type * as Errors from './Errors.js'\nimport * as Hex from './Hex.js'\nimport * as internal from './internal/base58.js'\n\n/**\n * Encodes a {@link ox#Bytes.Bytes} to a Base58-encoded string.\n *\n * @example\n * ```ts twoslash\n * import { Base58, Bytes } from 'ox'\n *\n * const value = Base58.fromBytes(Bytes.fromString('Hello World!'))\n * // @log: '2NEpo7TZRRrLZSi2U'\n * ```\n *\n * @param value - The byte array to encode.\n * @returns The Base58 encoded string.\n */\nexport function fromBytes(value: Bytes.Bytes) {\n  return internal.from(value)\n}\n\nexport declare namespace fromBytes {\n  type ErrorType = internal.from.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Encodes a {@link ox#Hex.Hex} to a Base58-encoded string.\n *\n * @example\n * ```ts twoslash\n * import { Base58, Hex } from 'ox'\n *\n * const value = Base58.fromHex(Hex.fromString('Hello World!'))\n * // @log: '2NEpo7TZRRrLZSi2U'\n * ```\n *\n * @param value - The byte array to encode.\n * @returns The Base58 encoded string.\n */\nexport function fromHex(value: Hex.Hex) {\n  return internal.from(value)\n}\n\nexport declare namespace fromHex {\n  type ErrorType = internal.from.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Encodes a string to a Base58-encoded string.\n *\n * @example\n * ```ts twoslash\n * import { Base58 } from 'ox'\n *\n * const value = Base58.fromString('Hello World!')\n * // @log: '2NEpo7TZRRrLZSi2U'\n * ```\n *\n * @param value - The string to encode.\n * @returns The Base58 encoded string.\n */\nexport function fromString(value: string) {\n  return internal.from(Bytes.fromString(value))\n}\n\nexport declare namespace fromString {\n  type ErrorType = internal.from.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Decodes a Base58-encoded string to a {@link ox#Bytes.Bytes}.\n *\n * @example\n * ```ts twoslash\n * import { Base58 } from 'ox'\n *\n * const value = Base58.toBytes('2NEpo7TZRRrLZSi2U')\n * // @log: Uint8Array [ 72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33 ]\n * ```\n *\n * @param value - The Base58 encoded string.\n * @returns The decoded byte array.\n */\nexport function toBytes(value: string): Bytes.Bytes {\n  return Bytes.fromHex(toHex(value))\n}\n\nexport declare namespace toBytes {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Decodes a Base58-encoded string to {@link ox#Hex.Hex}.\n *\n * @example\n * ```ts twoslash\n * import { Base58 } from 'ox'\n *\n * const value = Base58.toHex('2NEpo7TZRRrLZSi2U')\n * // @log: '0x48656c6c6f20576f726c6421'\n * ```\n *\n * @param value - The Base58 encoded string.\n * @returns The decoded hex string.\n */\nexport function toHex(value: string): Hex.Hex {\n  let integer = BigInt(0)\n  let pad = 0\n  let checkPad = true\n\n  for (let i = 0; i < value.length; i++) {\n    const char = value[i]!\n\n    // check for leading 1s\n    if (checkPad && char === '1') pad++\n    else checkPad = false\n\n    // check for invalid characters\n    if (typeof internal.alphabetToInteger[char] !== 'bigint')\n      throw new Error('invalid base58 character: ' + char)\n\n    integer = integer * 58n\n    integer = integer + internal.alphabetToInteger[char]!\n  }\n\n  if (!pad) return `0x${integer.toString(16)}` as Hex.Hex\n  return `0x${'0'.repeat(pad * 2)}${integer.toString(16)}` as Hex.Hex\n}\n\nexport declare namespace toHex {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Decodes a Base58-encoded string to a string.\n *\n * @example\n * ```ts twoslash\n * import { Base58 } from 'ox'\n *\n * const value = Base58.toString('2NEpo7TZRRrLZSi2U')\n * // @log: 'Hello World!'\n * ```\n *\n * @param value - The Base58 encoded string.\n * @returns The decoded string.\n */\nexport function toString(value: string): string {\n  return Hex.toString(toHex(value))\n}\n\nexport declare namespace toString {\n  type ErrorType = Errors.GlobalErrorType\n}\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,YAAY;AAEnC,OAAO,KAAKC,GAAG,MAAM,UAAU;AAC/B,OAAO,KAAKC,QAAQ,MAAM,sBAAsB;AAEhD;;;;;;;;;;;;;;AAcA,OAAM,SAAUC,SAASA,CAACC,KAAkB;EAC1C,OAAOF,QAAQ,CAACG,IAAI,CAACD,KAAK,CAAC;AAC7B;AAMA;;;;;;;;;;;;;;AAcA,OAAM,SAAUE,OAAOA,CAACF,KAAc;EACpC,OAAOF,QAAQ,CAACG,IAAI,CAACD,KAAK,CAAC;AAC7B;AAMA;;;;;;;;;;;;;;AAcA,OAAM,SAAUG,UAAUA,CAACH,KAAa;EACtC,OAAOF,QAAQ,CAACG,IAAI,CAACL,KAAK,CAACO,UAAU,CAACH,KAAK,CAAC,CAAC;AAC/C;AAMA;;;;;;;;;;;;;;AAcA,OAAM,SAAUI,OAAOA,CAACJ,KAAa;EACnC,OAAOJ,KAAK,CAACM,OAAO,CAACG,KAAK,CAACL,KAAK,CAAC,CAAC;AACpC;AAMA;;;;;;;;;;;;;;AAcA,OAAM,SAAUK,KAAKA,CAACL,KAAa;EACjC,IAAIM,OAAO,GAAGC,MAAM,CAAC,CAAC,CAAC;EACvB,IAAIC,GAAG,GAAG,CAAC;EACX,IAAIC,QAAQ,GAAG,IAAI;EAEnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGV,KAAK,CAACW,MAAM,EAAED,CAAC,EAAE,EAAE;IACrC,MAAME,IAAI,GAAGZ,KAAK,CAACU,CAAC,CAAE;IAEtB;IACA,IAAID,QAAQ,IAAIG,IAAI,KAAK,GAAG,EAAEJ,GAAG,EAAE,MAC9BC,QAAQ,GAAG,KAAK;IAErB;IACA,IAAI,OAAOX,QAAQ,CAACe,iBAAiB,CAACD,IAAI,CAAC,KAAK,QAAQ,EACtD,MAAM,IAAIE,KAAK,CAAC,4BAA4B,GAAGF,IAAI,CAAC;IAEtDN,OAAO,GAAGA,OAAO,GAAG,GAAG;IACvBA,OAAO,GAAGA,OAAO,GAAGR,QAAQ,CAACe,iBAAiB,CAACD,IAAI,CAAE;EACvD;EAEA,IAAI,CAACJ,GAAG,EAAE,OAAO,KAAKF,OAAO,CAACS,QAAQ,CAAC,EAAE,CAAC,EAAa;EACvD,OAAO,KAAK,GAAG,CAACC,MAAM,CAACR,GAAG,GAAG,CAAC,CAAC,GAAGF,OAAO,CAACS,QAAQ,CAAC,EAAE,CAAC,EAAa;AACrE;AAMA;;;;;;;;;;;;;;AAcA,OAAM,SAAUA,QAAQA,CAACf,KAAa;EACpC,OAAOH,GAAG,CAACkB,QAAQ,CAACV,KAAK,CAACL,KAAK,CAAC,CAAC;AACnC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}