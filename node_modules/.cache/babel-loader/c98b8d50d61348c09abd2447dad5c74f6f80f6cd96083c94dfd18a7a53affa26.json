{"ast":null,"code":"/**\n * bls12-381 is pairing-friendly Barreto-Lynn-Scott elliptic curve construction allowing to:\n\n* Construct zk-SNARKs at the ~120-bit security, as per [Barbulescu-Duquesne 2017](https://hal.science/hal-01534101/file/main.pdf)\n* Efficiently verify N aggregate signatures with 1 pairing and N ec additions:\nthe Boneh-Lynn-Shacham signature scheme is orders of magnitude more efficient than Schnorr\n\nBLS can mean 2 different things:\n\n* Barreto-Lynn-Scott: BLS12, a Pairing Friendly Elliptic Curve\n* Boneh-Lynn-Shacham: A Signature Scheme.\n\n### Summary\n\n1. BLS Relies on expensive bilinear pairing\n2. Secret Keys: 32 bytes\n3. Public Keys: 48 OR 96 bytes - big-endian x coordinate of point on G1 OR G2 curve\n4. Signatures: 96 OR 48 bytes - big-endian x coordinate of point on G2 OR G1 curve\n5. The 12 stands for the Embedding degree.\n\nModes of operation:\n\n* Long signatures:  48-byte keys + 96-byte sigs (G1 keys + G2 sigs).\n* Short signatures: 96-byte keys + 48-byte sigs (G2 keys + G1 sigs).\n\n### Formulas\n\n- `P = pk x G` - public keys\n- `S = pk x H(m)` - signing, uses hash-to-curve on m\n- `e(P, H(m)) == e(G, S)` - verification using pairings\n- `e(G, S) = e(G, SUM(n)(Si)) = MUL(n)(e(G, Si))` - signature aggregation\n\n### Curves\n\nG1 is ordinary elliptic curve. G2 is extension field curve, think \"over complex numbers\".\n\n- G1: y² = x³ + 4\n- G2: y² = x³ + 4(u + 1) where u = √−1; r-order subgroup of E'(Fp²), M-type twist\n\n### Towers\n\nPairing G1 + G2 produces element in Fp₁₂, 12-degree polynomial.\nFp₁₂ is usually implemented using tower of lower-degree polynomials for speed.\n\n- Fp₁₂ = Fp₆² => Fp₂³\n- Fp(u) / (u² - β) where β = -1\n- Fp₂(v) / (v³ - ξ) where ξ = u + 1\n- Fp₆(w) / (w² - γ) where γ = v\n- Fp²[u] = Fp/u²+1\n- Fp⁶[v] = Fp²/v³-1-u\n- Fp¹²[w] = Fp⁶/w²-v\n\n### Params\n\n* Embedding degree (k): 12\n* Seed is sometimes named x or t\n* t = -15132376222941642752\n* p = (t-1)² * (t⁴-t²+1)/3 + t\n* r = t⁴-t²+1\n* Ate loop size: X\n\nTo verify curve parameters, see\n[pairing-friendly-curves spec](https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-pairing-friendly-curves-11).\nBasic math is done over finite fields over p.\nMore complicated math is done over polynominal extension fields.\n\n### Compatibility and notes\n1. It is compatible with Algorand, Chia, Dfinity, Ethereum, Filecoin, ZEC.\nFilecoin uses little endian byte arrays for secret keys - make sure to reverse byte order.\n2. Make sure to correctly select mode: \"long signature\" or \"short signature\".\n3. Compatible with specs:\n   RFC 9380,\n   [cfrg-pairing-friendly-curves-11](https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-pairing-friendly-curves-11),\n   [cfrg-bls-signature-05](https://datatracker.ietf.org/doc/draft-irtf-cfrg-bls-signature/).\n\n *\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha2.js';\nimport { bls } from \"./abstract/bls.js\";\nimport { Field } from \"./abstract/modular.js\";\nimport { abytes, bitLen, bitMask, bytesToHex, bytesToNumberBE, concatBytes, ensureBytes, numberToBytesBE } from \"./utils.js\";\n// Types\nimport { isogenyMap } from \"./abstract/hash-to-curve.js\";\nimport { psiFrobenius, tower12 } from \"./abstract/tower.js\";\nimport { mapToCurveSimpleSWU } from \"./abstract/weierstrass.js\";\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0),\n  _1n = BigInt(1),\n  _2n = BigInt(2),\n  _3n = BigInt(3),\n  _4n = BigInt(4);\n// To verify math:\n// https://tools.ietf.org/html/draft-irtf-cfrg-pairing-friendly-curves-11\n// The BLS parameter x (seed) for BLS12-381. NOTE: it is negative!\n// x = -2^63 - 2^62 - 2^60 - 2^57 - 2^48 - 2^16\nconst BLS_X = BigInt('0xd201000000010000');\n// t = x (called differently in different places)\n// const t = -BLS_X;\nconst BLS_X_LEN = bitLen(BLS_X);\n// a=0, b=4\n// P is characteristic of field Fp, in which curve calculations are done.\n// p = (t-1)² * (t⁴-t²+1)/3 + t\n// bls12_381_Fp = (t-1n)**2n * (t**4n - t**2n + 1n) / 3n + t\n// r*h is curve order, amount of points on curve,\n// where r is order of prime subgroup and h is cofactor.\n// r = t⁴-t²+1\n// r = (t**4n - t**2n + 1n)\n// cofactor h of G1: (t - 1)²/3\n// cofactorG1 = (t-1n)**2n/3n\n// x = 3685416753713387016781088315183077757961620795782546409894578378688607592378376318836054947676345821548104185464507\n// y = 1339506544944476473020471379941921221584933875938349620426543736416511423956333506472724655353366534992391756441569\nconst bls12_381_CURVE_G1 = {\n  p: BigInt('0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab'),\n  n: BigInt('0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001'),\n  h: BigInt('0x396c8c005555e1568c00aaab0000aaab'),\n  a: _0n,\n  b: _4n,\n  Gx: BigInt('0x17f1d3a73197d7942695638c4fa9ac0fc3688c4f9774b905a14e3a3f171bac586c55e83ff97a1aeffb3af00adb22c6bb'),\n  Gy: BigInt('0x08b3f481e3aaa0f1a09e30ed741d8ae4fcf5e095d5d00af600db18cb2c04b3edd03cc744a2888ae40caa232946c5e7e1')\n};\n// CURVE FIELDS\nexport const bls12_381_Fr = Field(bls12_381_CURVE_G1.n, {\n  modFromBytes: true,\n  isLE: true\n});\nconst {\n  Fp,\n  Fp2,\n  Fp6,\n  Fp12\n} = tower12({\n  ORDER: bls12_381_CURVE_G1.p,\n  X_LEN: BLS_X_LEN,\n  // Finite extension field over irreducible polynominal.\n  // Fp(u) / (u² - β) where β = -1\n  FP2_NONRESIDUE: [_1n, _1n],\n  Fp2mulByB: ({\n    c0,\n    c1\n  }) => {\n    const t0 = Fp.mul(c0, _4n); // 4 * c0\n    const t1 = Fp.mul(c1, _4n); // 4 * c1\n    // (T0-T1) + (T0+T1)*i\n    return {\n      c0: Fp.sub(t0, t1),\n      c1: Fp.add(t0, t1)\n    };\n  },\n  Fp12finalExponentiate: num => {\n    const x = BLS_X;\n    // this^(q⁶) / this\n    const t0 = Fp12.div(Fp12.frobeniusMap(num, 6), num);\n    // t0^(q²) * t0\n    const t1 = Fp12.mul(Fp12.frobeniusMap(t0, 2), t0);\n    const t2 = Fp12.conjugate(Fp12._cyclotomicExp(t1, x));\n    const t3 = Fp12.mul(Fp12.conjugate(Fp12._cyclotomicSquare(t1)), t2);\n    const t4 = Fp12.conjugate(Fp12._cyclotomicExp(t3, x));\n    const t5 = Fp12.conjugate(Fp12._cyclotomicExp(t4, x));\n    const t6 = Fp12.mul(Fp12.conjugate(Fp12._cyclotomicExp(t5, x)), Fp12._cyclotomicSquare(t2));\n    const t7 = Fp12.conjugate(Fp12._cyclotomicExp(t6, x));\n    const t2_t5_pow_q2 = Fp12.frobeniusMap(Fp12.mul(t2, t5), 2);\n    const t4_t1_pow_q3 = Fp12.frobeniusMap(Fp12.mul(t4, t1), 3);\n    const t6_t1c_pow_q1 = Fp12.frobeniusMap(Fp12.mul(t6, Fp12.conjugate(t1)), 1);\n    const t7_t3c_t1 = Fp12.mul(Fp12.mul(t7, Fp12.conjugate(t3)), t1);\n    // (t2 * t5)^(q²) * (t4 * t1)^(q³) * (t6 * t1.conj)^(q^1) * t7 * t3.conj * t1\n    return Fp12.mul(Fp12.mul(Fp12.mul(t2_t5_pow_q2, t4_t1_pow_q3), t6_t1c_pow_q1), t7_t3c_t1);\n  }\n});\n// GLV endomorphism Ψ(P), for fast cofactor clearing\nconst {\n  G2psi,\n  G2psi2\n} = psiFrobenius(Fp, Fp2, Fp2.div(Fp2.ONE, Fp2.NONRESIDUE)); // 1/(u+1)\n/**\n * Default hash_to_field / hash-to-curve for BLS.\n * m: 1 for G1, 2 for G2\n * k: target security level in bits\n * hash: any function, e.g. BBS+ uses BLAKE2: see [github](https://github.com/hyperledger/aries-framework-go/issues/2247).\n * Parameter values come from [section 8.8.2 of RFC 9380](https://www.rfc-editor.org/rfc/rfc9380#section-8.8.2).\n */\nconst htfDefaults = Object.freeze({\n  DST: 'BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_NUL_',\n  encodeDST: 'BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_NUL_',\n  p: Fp.ORDER,\n  m: 2,\n  k: 128,\n  expand: 'xmd',\n  hash: sha256\n});\n// a=0, b=4\n// cofactor h of G2\n// (t^8 - 4t^7 + 5t^6 - 4t^4 + 6t^3 - 4t^2 - 4t + 13)/9\n// cofactorG2 = (t**8n - 4n*t**7n + 5n*t**6n - 4n*t**4n + 6n*t**3n - 4n*t**2n - 4n*t+13n)/9n\n// x = 3059144344244213709971259814753781636986470325476647558659373206291635324768958432433509563104347017837885763365758*u + 352701069587466618187139116011060144890029952792775240219908644239793785735715026873347600343865175952761926303160\n// y = 927553665492332455747201965776037880757740193453592970025027978793976877002675564980949289727957565575433344219582*u + 1985150602287291935568054521177171638300868978215655730859378665066344726373823718423869104263333984641494340347905\nconst bls12_381_CURVE_G2 = {\n  p: Fp2.ORDER,\n  n: bls12_381_CURVE_G1.n,\n  h: BigInt('0x5d543a95414e7f1091d50792876a202cd91de4547085abaa68a205b2e5a7ddfa628f1cb4d9e82ef21537e293a6691ae1616ec6e786f0c70cf1c38e31c7238e5'),\n  a: Fp2.ZERO,\n  b: Fp2.fromBigTuple([_4n, _4n]),\n  Gx: Fp2.fromBigTuple([BigInt('0x024aa2b2f08f0a91260805272dc51051c6e47ad4fa403b02b4510b647ae3d1770bac0326a805bbefd48056c8c121bdb8'), BigInt('0x13e02b6052719f607dacd3a088274f65596bd0d09920b61ab5da61bbdc7f5049334cf11213945d57e5ac7d055d042b7e')]),\n  Gy: Fp2.fromBigTuple([BigInt('0x0ce5d527727d6e118cc9cdc6da2e351aadfd9baa8cbdd3a76d429a695160d12c923ac9cc3baca289e193548608b82801'), BigInt('0x0606c4a02ea734cc32acd2b02bc28b99cb3e287e85a763af267492ab572e99ab3f370d275cec1da1aaa9075ff05f79be')])\n};\n// Encoding utils\n// Compressed point of infinity\n// Set compressed & point-at-infinity bits\nconst COMPZERO = setMask(Fp.toBytes(_0n), {\n  infinity: true,\n  compressed: true\n});\nfunction parseMask(bytes) {\n  // Copy, so we can remove mask data. It will be removed also later, when Fp.create will call modulo.\n  bytes = bytes.slice();\n  const mask = bytes[0] & 224;\n  const compressed = !!(mask >> 7 & 1); // compression bit (0b1000_0000)\n  const infinity = !!(mask >> 6 & 1); // point at infinity bit (0b0100_0000)\n  const sort = !!(mask >> 5 & 1); // sort bit (0b0010_0000)\n  bytes[0] &= 31; // clear mask (zero first 3 bits)\n  return {\n    compressed,\n    infinity,\n    sort,\n    value: bytes\n  };\n}\nfunction setMask(bytes, mask) {\n  if (bytes[0] & 224) throw new Error('setMask: non-empty mask');\n  if (mask.compressed) bytes[0] |= 128;\n  if (mask.infinity) bytes[0] |= 64;\n  if (mask.sort) bytes[0] |= 32;\n  return bytes;\n}\nfunction pointG1ToBytes(_c, point, isComp) {\n  const {\n    BYTES: L,\n    ORDER: P\n  } = Fp;\n  const is0 = point.is0();\n  const {\n    x,\n    y\n  } = point.toAffine();\n  if (isComp) {\n    if (is0) return COMPZERO.slice();\n    const sort = Boolean(y * _2n / P);\n    return setMask(numberToBytesBE(x, L), {\n      compressed: true,\n      sort\n    });\n  } else {\n    if (is0) {\n      return concatBytes(Uint8Array.of(0x40), new Uint8Array(2 * L - 1));\n    } else {\n      return concatBytes(numberToBytesBE(x, L), numberToBytesBE(y, L));\n    }\n  }\n}\nfunction signatureG1ToBytes(point) {\n  point.assertValidity();\n  const {\n    BYTES: L,\n    ORDER: P\n  } = Fp;\n  const {\n    x,\n    y\n  } = point.toAffine();\n  if (point.is0()) return COMPZERO.slice();\n  const sort = Boolean(y * _2n / P);\n  return setMask(numberToBytesBE(x, L), {\n    compressed: true,\n    sort\n  });\n}\nfunction pointG1FromBytes(bytes) {\n  const {\n    compressed,\n    infinity,\n    sort,\n    value\n  } = parseMask(bytes);\n  const {\n    BYTES: L,\n    ORDER: P\n  } = Fp;\n  if (value.length === 48 && compressed) {\n    const compressedValue = bytesToNumberBE(value);\n    // Zero\n    const x = Fp.create(compressedValue & bitMask(Fp.BITS));\n    if (infinity) {\n      if (x !== _0n) throw new Error('invalid G1 point: non-empty, at infinity, with compression');\n      return {\n        x: _0n,\n        y: _0n\n      };\n    }\n    const right = Fp.add(Fp.pow(x, _3n), Fp.create(bls12_381_CURVE_G1.b)); // y² = x³ + b\n    let y = Fp.sqrt(right);\n    if (!y) throw new Error('invalid G1 point: compressed point');\n    if (y * _2n / P !== BigInt(sort)) y = Fp.neg(y);\n    return {\n      x: Fp.create(x),\n      y: Fp.create(y)\n    };\n  } else if (value.length === 96 && !compressed) {\n    // Check if the infinity flag is set\n    const x = bytesToNumberBE(value.subarray(0, L));\n    const y = bytesToNumberBE(value.subarray(L));\n    if (infinity) {\n      if (x !== _0n || y !== _0n) throw new Error('G1: non-empty point at infinity');\n      return bls12_381.G1.Point.ZERO.toAffine();\n    }\n    return {\n      x: Fp.create(x),\n      y: Fp.create(y)\n    };\n  } else {\n    throw new Error('invalid G1 point: expected 48/96 bytes');\n  }\n}\nfunction signatureG1FromBytes(hex) {\n  const {\n    infinity,\n    sort,\n    value\n  } = parseMask(ensureBytes('signatureHex', hex, 48));\n  const P = Fp.ORDER;\n  const Point = bls12_381.G1.Point;\n  const compressedValue = bytesToNumberBE(value);\n  // Zero\n  if (infinity) return Point.ZERO;\n  const x = Fp.create(compressedValue & bitMask(Fp.BITS));\n  const right = Fp.add(Fp.pow(x, _3n), Fp.create(bls12_381_CURVE_G1.b)); // y² = x³ + b\n  let y = Fp.sqrt(right);\n  if (!y) throw new Error('invalid G1 point: compressed');\n  const aflag = BigInt(sort);\n  if (y * _2n / P !== aflag) y = Fp.neg(y);\n  const point = Point.fromAffine({\n    x,\n    y\n  });\n  point.assertValidity();\n  return point;\n}\nfunction pointG2ToBytes(_c, point, isComp) {\n  const {\n    BYTES: L,\n    ORDER: P\n  } = Fp;\n  const is0 = point.is0();\n  const {\n    x,\n    y\n  } = point.toAffine();\n  if (isComp) {\n    if (is0) return concatBytes(COMPZERO, numberToBytesBE(_0n, L));\n    const flag = Boolean(y.c1 === _0n ? y.c0 * _2n / P : y.c1 * _2n / P);\n    return concatBytes(setMask(numberToBytesBE(x.c1, L), {\n      compressed: true,\n      sort: flag\n    }), numberToBytesBE(x.c0, L));\n  } else {\n    if (is0) return concatBytes(Uint8Array.of(0x40), new Uint8Array(4 * L - 1));\n    const {\n      re: x0,\n      im: x1\n    } = Fp2.reim(x);\n    const {\n      re: y0,\n      im: y1\n    } = Fp2.reim(y);\n    return concatBytes(numberToBytesBE(x1, L), numberToBytesBE(x0, L), numberToBytesBE(y1, L), numberToBytesBE(y0, L));\n  }\n}\nfunction signatureG2ToBytes(point) {\n  point.assertValidity();\n  const {\n    BYTES: L\n  } = Fp;\n  if (point.is0()) return concatBytes(COMPZERO, numberToBytesBE(_0n, L));\n  const {\n    x,\n    y\n  } = point.toAffine();\n  const {\n    re: x0,\n    im: x1\n  } = Fp2.reim(x);\n  const {\n    re: y0,\n    im: y1\n  } = Fp2.reim(y);\n  const tmp = y1 > _0n ? y1 * _2n : y0 * _2n;\n  const sort = Boolean(tmp / Fp.ORDER & _1n);\n  const z2 = x0;\n  return concatBytes(setMask(numberToBytesBE(x1, L), {\n    sort,\n    compressed: true\n  }), numberToBytesBE(z2, L));\n}\nfunction pointG2FromBytes(bytes) {\n  const {\n    BYTES: L,\n    ORDER: P\n  } = Fp;\n  const {\n    compressed,\n    infinity,\n    sort,\n    value\n  } = parseMask(bytes);\n  if (!compressed && !infinity && sort ||\n  // 00100000\n  !compressed && infinity && sort ||\n  // 01100000\n  sort && infinity && compressed // 11100000\n  ) {\n    throw new Error('invalid encoding flag: ' + (bytes[0] & 224));\n  }\n  const slc = (b, from, to) => bytesToNumberBE(b.slice(from, to));\n  if (value.length === 96 && compressed) {\n    if (infinity) {\n      // check that all bytes are 0\n      if (value.reduce((p, c) => p !== 0 ? c + 1 : c, 0) > 0) {\n        throw new Error('invalid G2 point: compressed');\n      }\n      return {\n        x: Fp2.ZERO,\n        y: Fp2.ZERO\n      };\n    }\n    const x_1 = slc(value, 0, L);\n    const x_0 = slc(value, L, 2 * L);\n    const x = Fp2.create({\n      c0: Fp.create(x_0),\n      c1: Fp.create(x_1)\n    });\n    const right = Fp2.add(Fp2.pow(x, _3n), bls12_381_CURVE_G2.b); // y² = x³ + 4 * (u+1) = x³ + b\n    let y = Fp2.sqrt(right);\n    const Y_bit = y.c1 === _0n ? y.c0 * _2n / P : y.c1 * _2n / P ? _1n : _0n;\n    y = sort && Y_bit > 0 ? y : Fp2.neg(y);\n    return {\n      x,\n      y\n    };\n  } else if (value.length === 192 && !compressed) {\n    if (infinity) {\n      if (value.reduce((p, c) => p !== 0 ? c + 1 : c, 0) > 0) {\n        throw new Error('invalid G2 point: uncompressed');\n      }\n      return {\n        x: Fp2.ZERO,\n        y: Fp2.ZERO\n      };\n    }\n    const x1 = slc(value, 0 * L, 1 * L);\n    const x0 = slc(value, 1 * L, 2 * L);\n    const y1 = slc(value, 2 * L, 3 * L);\n    const y0 = slc(value, 3 * L, 4 * L);\n    return {\n      x: Fp2.fromBigTuple([x0, x1]),\n      y: Fp2.fromBigTuple([y0, y1])\n    };\n  } else {\n    throw new Error('invalid G2 point: expected 96/192 bytes');\n  }\n}\nfunction signatureG2FromBytes(hex) {\n  const {\n    ORDER: P\n  } = Fp;\n  // TODO: Optimize, it's very slow because of sqrt.\n  const {\n    infinity,\n    sort,\n    value\n  } = parseMask(ensureBytes('signatureHex', hex));\n  const Point = bls12_381.G2.Point;\n  const half = value.length / 2;\n  if (half !== 48 && half !== 96) throw new Error('invalid compressed signature length, expected 96/192 bytes');\n  const z1 = bytesToNumberBE(value.slice(0, half));\n  const z2 = bytesToNumberBE(value.slice(half));\n  // Indicates the infinity point\n  if (infinity) return Point.ZERO;\n  const x1 = Fp.create(z1 & bitMask(Fp.BITS));\n  const x2 = Fp.create(z2);\n  const x = Fp2.create({\n    c0: x2,\n    c1: x1\n  });\n  const y2 = Fp2.add(Fp2.pow(x, _3n), bls12_381_CURVE_G2.b); // y² = x³ + 4\n  // The slow part\n  let y = Fp2.sqrt(y2);\n  if (!y) throw new Error('Failed to find a square root');\n  // Choose the y whose leftmost bit of the imaginary part is equal to the a_flag1\n  // If y1 happens to be zero, then use the bit of y0\n  const {\n    re: y0,\n    im: y1\n  } = Fp2.reim(y);\n  const aflag1 = BigInt(sort);\n  const isGreater = y1 > _0n && y1 * _2n / P !== aflag1;\n  const is0 = y1 === _0n && y0 * _2n / P !== aflag1;\n  if (isGreater || is0) y = Fp2.neg(y);\n  const point = Point.fromAffine({\n    x,\n    y\n  });\n  point.assertValidity();\n  return point;\n}\n/**\n * bls12-381 pairing-friendly curve.\n * @example\n * import { bls12_381 as bls } from '@noble/curves/bls12-381';\n * // G1 keys, G2 signatures\n * const privateKey = '67d53f170b908cabb9eb326c3c337762d59289a8fec79f7bc9254b584b73265c';\n * const message = '64726e3da8';\n * const publicKey = bls.getPublicKey(privateKey);\n * const signature = bls.sign(message, privateKey);\n * const isValid = bls.verify(signature, message, publicKey);\n */\nexport const bls12_381 = bls({\n  // Fields\n  fields: {\n    Fp,\n    Fp2,\n    Fp6,\n    Fp12,\n    Fr: bls12_381_Fr\n  },\n  // G1: y² = x³ + 4\n  G1: {\n    ...bls12_381_CURVE_G1,\n    Fp,\n    htfDefaults: {\n      ...htfDefaults,\n      m: 1,\n      DST: 'BLS_SIG_BLS12381G1_XMD:SHA-256_SSWU_RO_NUL_'\n    },\n    wrapPrivateKey: true,\n    allowInfinityPoint: true,\n    // Checks is the point resides in prime-order subgroup.\n    // point.isTorsionFree() should return true for valid points\n    // It returns false for shitty points.\n    // https://eprint.iacr.org/2021/1130.pdf\n    isTorsionFree: (c, point) => {\n      // GLV endomorphism ψ(P)\n      const beta = BigInt('0x5f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffefffe');\n      const phi = new c(Fp.mul(point.X, beta), point.Y, point.Z);\n      // TODO: unroll\n      const xP = point.multiplyUnsafe(BLS_X).negate(); // [x]P\n      const u2P = xP.multiplyUnsafe(BLS_X); // [u2]P\n      return u2P.equals(phi);\n    },\n    // Clear cofactor of G1\n    // https://eprint.iacr.org/2019/403\n    clearCofactor: (_c, point) => {\n      // return this.multiplyUnsafe(CURVE.h);\n      return point.multiplyUnsafe(BLS_X).add(point); // x*P + P\n    },\n    mapToCurve: mapToG1,\n    fromBytes: pointG1FromBytes,\n    toBytes: pointG1ToBytes,\n    ShortSignature: {\n      fromBytes(bytes) {\n        abytes(bytes);\n        return signatureG1FromBytes(bytes);\n      },\n      fromHex(hex) {\n        return signatureG1FromBytes(hex);\n      },\n      toBytes(point) {\n        return signatureG1ToBytes(point);\n      },\n      toRawBytes(point) {\n        return signatureG1ToBytes(point);\n      },\n      toHex(point) {\n        return bytesToHex(signatureG1ToBytes(point));\n      }\n    }\n  },\n  G2: {\n    ...bls12_381_CURVE_G2,\n    Fp: Fp2,\n    // https://datatracker.ietf.org/doc/html/rfc9380#name-clearing-the-cofactor\n    // https://datatracker.ietf.org/doc/html/rfc9380#name-cofactor-clearing-for-bls12\n    hEff: BigInt('0xbc69f08f2ee75b3584c6a0ea91b352888e2a8e9145ad7689986ff031508ffe1329c2f178731db956d82bf015d1212b02ec0ec69d7477c1ae954cbc06689f6a359894c0adebbf6b4e8020005aaa95551'),\n    htfDefaults: {\n      ...htfDefaults\n    },\n    wrapPrivateKey: true,\n    allowInfinityPoint: true,\n    mapToCurve: mapToG2,\n    // Checks is the point resides in prime-order subgroup.\n    // point.isTorsionFree() should return true for valid points\n    // It returns false for shitty points.\n    // https://eprint.iacr.org/2021/1130.pdf\n    // Older version: https://eprint.iacr.org/2019/814.pdf\n    isTorsionFree: (c, P) => {\n      return P.multiplyUnsafe(BLS_X).negate().equals(G2psi(c, P)); // ψ(P) == [u](P)\n    },\n    // Maps the point into the prime-order subgroup G2.\n    // clear_cofactor_bls12381_g2 from RFC 9380.\n    // https://eprint.iacr.org/2017/419.pdf\n    // prettier-ignore\n    clearCofactor: (c, P) => {\n      const x = BLS_X;\n      let t1 = P.multiplyUnsafe(x).negate(); // [-x]P\n      let t2 = G2psi(c, P); // Ψ(P)\n      let t3 = P.double(); // 2P\n      t3 = G2psi2(c, t3); // Ψ²(2P)\n      t3 = t3.subtract(t2); // Ψ²(2P) - Ψ(P)\n      t2 = t1.add(t2); // [-x]P + Ψ(P)\n      t2 = t2.multiplyUnsafe(x).negate(); // [x²]P - [x]Ψ(P)\n      t3 = t3.add(t2); // Ψ²(2P) - Ψ(P) + [x²]P - [x]Ψ(P)\n      t3 = t3.subtract(t1); // Ψ²(2P) - Ψ(P) + [x²]P - [x]Ψ(P) + [x]P\n      const Q = t3.subtract(P); // Ψ²(2P) - Ψ(P) + [x²]P - [x]Ψ(P) + [x]P - 1P\n      return Q; // [x²-x-1]P + [x-1]Ψ(P) + Ψ²(2P)\n    },\n    fromBytes: pointG2FromBytes,\n    toBytes: pointG2ToBytes,\n    Signature: {\n      fromBytes(bytes) {\n        abytes(bytes);\n        return signatureG2FromBytes(bytes);\n      },\n      fromHex(hex) {\n        return signatureG2FromBytes(hex);\n      },\n      toBytes(point) {\n        return signatureG2ToBytes(point);\n      },\n      toRawBytes(point) {\n        return signatureG2ToBytes(point);\n      },\n      toHex(point) {\n        return bytesToHex(signatureG2ToBytes(point));\n      }\n    }\n  },\n  params: {\n    ateLoopSize: BLS_X,\n    // The BLS parameter x for BLS12-381\n    r: bls12_381_CURVE_G1.n,\n    // order; z⁴ − z² + 1; CURVE.n from other curves\n    xNegative: true,\n    twistType: 'multiplicative'\n  },\n  htfDefaults,\n  hash: sha256\n});\n// 3-isogeny map from E' to E https://www.rfc-editor.org/rfc/rfc9380#appendix-E.3\nconst isogenyMapG2 = isogenyMap(Fp2, [\n// xNum\n[['0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97d6', '0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97d6'], ['0x0', '0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71a'], ['0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71e', '0x8ab05f8bdd54cde190937e76bc3e447cc27c3d6fbd7063fcd104635a790520c0a395554e5c6aaaa9354ffffffffe38d'], ['0x171d6541fa38ccfaed6dea691f5fb614cb14b4e7f4e810aa22d6108f142b85757098e38d0f671c7188e2aaaaaaaa5ed1', '0x0']],\n// xDen\n[['0x0', '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa63'], ['0xc', '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa9f'], ['0x1', '0x0'] // LAST 1\n],\n// yNum\n[['0x1530477c7ab4113b59a4c18b076d11930f7da5d4a07f649bf54439d87d27e500fc8c25ebf8c92f6812cfc71c71c6d706', '0x1530477c7ab4113b59a4c18b076d11930f7da5d4a07f649bf54439d87d27e500fc8c25ebf8c92f6812cfc71c71c6d706'], ['0x0', '0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97be'], ['0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71c', '0x8ab05f8bdd54cde190937e76bc3e447cc27c3d6fbd7063fcd104635a790520c0a395554e5c6aaaa9354ffffffffe38f'], ['0x124c9ad43b6cf79bfbf7043de3811ad0761b0f37a1e26286b0e977c69aa274524e79097a56dc4bd9e1b371c71c718b10', '0x0']],\n// yDen\n[['0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa8fb', '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa8fb'], ['0x0', '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa9d3'], ['0x12', '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa99'], ['0x1', '0x0'] // LAST 1\n]].map(i => i.map(pair => Fp2.fromBigTuple(pair.map(BigInt)))));\n// 11-isogeny map from E' to E\nconst isogenyMapG1 = isogenyMap(Fp, [\n// xNum\n['0x11a05f2b1e833340b809101dd99815856b303e88a2d7005ff2627b56cdb4e2c85610c2d5f2e62d6eaeac1662734649b7', '0x17294ed3e943ab2f0588bab22147a81c7c17e75b2f6a8417f565e33c70d1e86b4838f2a6f318c356e834eef1b3cb83bb', '0xd54005db97678ec1d1048c5d10a9a1bce032473295983e56878e501ec68e25c958c3e3d2a09729fe0179f9dac9edcb0', '0x1778e7166fcc6db74e0609d307e55412d7f5e4656a8dbf25f1b33289f1b330835336e25ce3107193c5b388641d9b6861', '0xe99726a3199f4436642b4b3e4118e5499db995a1257fb3f086eeb65982fac18985a286f301e77c451154ce9ac8895d9', '0x1630c3250d7313ff01d1201bf7a74ab5db3cb17dd952799b9ed3ab9097e68f90a0870d2dcae73d19cd13c1c66f652983', '0xd6ed6553fe44d296a3726c38ae652bfb11586264f0f8ce19008e218f9c86b2a8da25128c1052ecaddd7f225a139ed84', '0x17b81e7701abdbe2e8743884d1117e53356de5ab275b4db1a682c62ef0f2753339b7c8f8c8f475af9ccb5618e3f0c88e', '0x80d3cf1f9a78fc47b90b33563be990dc43b756ce79f5574a2c596c928c5d1de4fa295f296b74e956d71986a8497e317', '0x169b1f8e1bcfa7c42e0c37515d138f22dd2ecb803a0c5c99676314baf4bb1b7fa3190b2edc0327797f241067be390c9e', '0x10321da079ce07e272d8ec09d2565b0dfa7dccdde6787f96d50af36003b14866f69b771f8c285decca67df3f1605fb7b', '0x6e08c248e260e70bd1e962381edee3d31d79d7e22c837bc23c0bf1bc24c6b68c24b1b80b64d391fa9c8ba2e8ba2d229'],\n// xDen\n['0x8ca8d548cff19ae18b2e62f4bd3fa6f01d5ef4ba35b48ba9c9588617fc8ac62b558d681be343df8993cf9fa40d21b1c', '0x12561a5deb559c4348b4711298e536367041e8ca0cf0800c0126c2588c48bf5713daa8846cb026e9e5c8276ec82b3bff', '0xb2962fe57a3225e8137e629bff2991f6f89416f5a718cd1fca64e00b11aceacd6a3d0967c94fedcfcc239ba5cb83e19', '0x3425581a58ae2fec83aafef7c40eb545b08243f16b1655154cca8abc28d6fd04976d5243eecf5c4130de8938dc62cd8', '0x13a8e162022914a80a6f1d5f43e7a07dffdfc759a12062bb8d6b44e833b306da9bd29ba81f35781d539d395b3532a21e', '0xe7355f8e4e667b955390f7f0506c6e9395735e9ce9cad4d0a43bcef24b8982f7400d24bc4228f11c02df9a29f6304a5', '0x772caacf16936190f3e0c63e0596721570f5799af53a1894e2e073062aede9cea73b3538f0de06cec2574496ee84a3a', '0x14a7ac2a9d64a8b230b3f5b074cf01996e7f63c21bca68a81996e1cdf9822c580fa5b9489d11e2d311f7d99bbdcc5a5e', '0xa10ecf6ada54f825e920b3dafc7a3cce07f8d1d7161366b74100da67f39883503826692abba43704776ec3a79a1d641', '0x95fc13ab9e92ad4476d6e3eb3a56680f682b4ee96f7d03776df533978f31c1593174e4b4b7865002d6384d168ecdd0a', '0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001' // LAST 1\n],\n// yNum\n['0x90d97c81ba24ee0259d1f094980dcfa11ad138e48a869522b52af6c956543d3cd0c7aee9b3ba3c2be9845719707bb33', '0x134996a104ee5811d51036d776fb46831223e96c254f383d0f906343eb67ad34d6c56711962fa8bfe097e75a2e41c696', '0xcc786baa966e66f4a384c86a3b49942552e2d658a31ce2c344be4b91400da7d26d521628b00523b8dfe240c72de1f6', '0x1f86376e8981c217898751ad8746757d42aa7b90eeb791c09e4a3ec03251cf9de405aba9ec61deca6355c77b0e5f4cb', '0x8cc03fdefe0ff135caf4fe2a21529c4195536fbe3ce50b879833fd221351adc2ee7f8dc099040a841b6daecf2e8fedb', '0x16603fca40634b6a2211e11db8f0a6a074a7d0d4afadb7bd76505c3d3ad5544e203f6326c95a807299b23ab13633a5f0', '0x4ab0b9bcfac1bbcb2c977d027796b3ce75bb8ca2be184cb5231413c4d634f3747a87ac2460f415ec961f8855fe9d6f2', '0x987c8d5333ab86fde9926bd2ca6c674170a05bfe3bdd81ffd038da6c26c842642f64550fedfe935a15e4ca31870fb29', '0x9fc4018bd96684be88c9e221e4da1bb8f3abd16679dc26c1e8b6e6a1f20cabe69d65201c78607a360370e577bdba587', '0xe1bba7a1186bdb5223abde7ada14a23c42a0ca7915af6fe06985e7ed1e4d43b9b3f7055dd4eba6f2bafaaebca731c30', '0x19713e47937cd1be0dfd0b8f1d43fb93cd2fcbcb6caf493fd1183e416389e61031bf3a5cce3fbafce813711ad011c132', '0x18b46a908f36f6deb918c143fed2edcc523559b8aaf0c2462e6bfe7f911f643249d9cdf41b44d606ce07c8a4d0074d8e', '0xb182cac101b9399d155096004f53f447aa7b12a3426b08ec02710e807b4633f06c851c1919211f20d4c04f00b971ef8', '0x245a394ad1eca9b72fc00ae7be315dc757b3b080d4c158013e6632d3c40659cc6cf90ad1c232a6442d9d3f5db980133', '0x5c129645e44cf1102a159f748c4a3fc5e673d81d7e86568d9ab0f5d396a7ce46ba1049b6579afb7866b1e715475224b', '0x15e6be4e990f03ce4ea50b3b42df2eb5cb181d8f84965a3957add4fa95af01b2b665027efec01c7704b456be69c8b604'],\n// yDen\n['0x16112c4c3a9c98b252181140fad0eae9601a6de578980be6eec3232b5be72e7a07f3688ef60c206d01479253b03663c1', '0x1962d75c2381201e1a0cbd6c43c348b885c84ff731c4d59ca4a10356f453e01f78a4260763529e3532f6102c2e49a03d', '0x58df3306640da276faaae7d6e8eb15778c4855551ae7f310c35a5dd279cd2eca6757cd636f96f891e2538b53dbf67f2', '0x16b7d288798e5395f20d23bf89edb4d1d115c5dbddbcd30e123da489e726af41727364f2c28297ada8d26d98445f5416', '0xbe0e079545f43e4b00cc912f8228ddcc6d19c9f0f69bbb0542eda0fc9dec916a20b15dc0fd2ededda39142311a5001d', '0x8d9e5297186db2d9fb266eaac783182b70152c65550d881c5ecd87b6f0f5a6449f38db9dfa9cce202c6477faaf9b7ac', '0x166007c08a99db2fc3ba8734ace9824b5eecfdfa8d0cf8ef5dd365bc400a0051d5fa9c01a58b1fb93d1a1399126a775c', '0x16a3ef08be3ea7ea03bcddfabba6ff6ee5a4375efa1f4fd7feb34fd206357132b920f5b00801dee460ee415a15812ed9', '0x1866c8ed336c61231a1be54fd1d74cc4f9fb0ce4c6af5920abc5750c4bf39b4852cfe2f7bb9248836b233d9d55535d4a', '0x167a55cda70a6e1cea820597d94a84903216f763e13d87bb5308592e7ea7d4fbc7385ea3d529b35e346ef48bb8913f55', '0x4d2f259eea405bd48f010a01ad2911d9c6dd039bb61a6290e591b36e636a5c871a5c29f4f83060400f8b49cba8f6aa8', '0xaccbb67481d033ff5852c1e48c50c477f94ff8aefce42d28c0f9a88cea7913516f968986f7ebbea9684b529e2561092', '0xad6b9514c767fe3c3613144b45f1496543346d98adf02267d5ceef9a00d9b8693000763e3b90ac11e99b138573345cc', '0x2660400eb2e4f3b628bdd0d53cd76f2bf565b94e72927c1cb748df27942480e420517bd8714cc80d1fadc1326ed06f7', '0xe0fa1d816ddc03e6b24255e0d7819c171c40f65e273b853324efcd6356caa205ca2f570f13497804415473a1d634b8f', '0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001' // LAST 1\n]].map(i => i.map(j => BigInt(j))));\n// Optimized SWU Map - Fp to G1\nconst G1_SWU = mapToCurveSimpleSWU(Fp, {\n  A: Fp.create(BigInt('0x144698a3b8e9433d693a02c96d4982b0ea985383ee66a8d8e8981aefd881ac98936f8da0e0f97f5cf428082d584c1d')),\n  B: Fp.create(BigInt('0x12e2908d11688030018b12e8753eee3b2016c1f0f24f4070a0b9c14fcef35ef55a23215a316ceaa5d1cc48e98e172be0')),\n  Z: Fp.create(BigInt(11))\n});\n// SWU Map - Fp2 to G2': y² = x³ + 240i * x + 1012 + 1012i\nconst G2_SWU = mapToCurveSimpleSWU(Fp2, {\n  A: Fp2.create({\n    c0: Fp.create(_0n),\n    c1: Fp.create(BigInt(240))\n  }),\n  // A' = 240 * I\n  B: Fp2.create({\n    c0: Fp.create(BigInt(1012)),\n    c1: Fp.create(BigInt(1012))\n  }),\n  // B' = 1012 * (1 + I)\n  Z: Fp2.create({\n    c0: Fp.create(BigInt(-2)),\n    c1: Fp.create(BigInt(-1))\n  }) // Z: -(2 + I)\n});\nfunction mapToG1(scalars) {\n  const {\n    x,\n    y\n  } = G1_SWU(Fp.create(scalars[0]));\n  return isogenyMapG1(x, y);\n}\nfunction mapToG2(scalars) {\n  const {\n    x,\n    y\n  } = G2_SWU(Fp2.fromBigTuple(scalars));\n  return isogenyMapG2(x, y);\n}","map":{"version":3,"names":["sha256","bls","Field","abytes","bitLen","bitMask","bytesToHex","bytesToNumberBE","concatBytes","ensureBytes","numberToBytesBE","isogenyMap","psiFrobenius","tower12","mapToCurveSimpleSWU","_0n","BigInt","_1n","_2n","_3n","_4n","BLS_X","BLS_X_LEN","bls12_381_CURVE_G1","p","n","h","a","b","Gx","Gy","bls12_381_Fr","modFromBytes","isLE","Fp","Fp2","Fp6","Fp12","ORDER","X_LEN","FP2_NONRESIDUE","Fp2mulByB","c0","c1","t0","mul","t1","sub","add","Fp12finalExponentiate","num","x","div","frobeniusMap","t2","conjugate","_cyclotomicExp","t3","_cyclotomicSquare","t4","t5","t6","t7","t2_t5_pow_q2","t4_t1_pow_q3","t6_t1c_pow_q1","t7_t3c_t1","G2psi","G2psi2","ONE","NONRESIDUE","htfDefaults","Object","freeze","DST","encodeDST","m","k","expand","hash","bls12_381_CURVE_G2","ZERO","fromBigTuple","COMPZERO","setMask","toBytes","infinity","compressed","parseMask","bytes","slice","mask","sort","value","Error","pointG1ToBytes","_c","point","isComp","BYTES","L","P","is0","y","toAffine","Boolean","Uint8Array","of","signatureG1ToBytes","assertValidity","pointG1FromBytes","length","compressedValue","create","BITS","right","pow","sqrt","neg","subarray","bls12_381","G1","Point","signatureG1FromBytes","hex","aflag","fromAffine","pointG2ToBytes","flag","re","x0","im","x1","reim","y0","y1","signatureG2ToBytes","tmp","z2","pointG2FromBytes","slc","from","to","reduce","c","x_1","x_0","Y_bit","signatureG2FromBytes","G2","half","z1","x2","y2","aflag1","isGreater","fields","Fr","wrapPrivateKey","allowInfinityPoint","isTorsionFree","beta","phi","X","Y","Z","xP","multiplyUnsafe","negate","u2P","equals","clearCofactor","mapToCurve","mapToG1","fromBytes","ShortSignature","fromHex","toRawBytes","toHex","hEff","mapToG2","double","subtract","Q","Signature","params","ateLoopSize","r","xNegative","twistType","isogenyMapG2","map","i","pair","isogenyMapG1","j","G1_SWU","A","B","G2_SWU","scalars"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/ox/node_modules/@noble/curves/src/bls12-381.ts"],"sourcesContent":["/**\n * bls12-381 is pairing-friendly Barreto-Lynn-Scott elliptic curve construction allowing to:\n\n* Construct zk-SNARKs at the ~120-bit security, as per [Barbulescu-Duquesne 2017](https://hal.science/hal-01534101/file/main.pdf)\n* Efficiently verify N aggregate signatures with 1 pairing and N ec additions:\nthe Boneh-Lynn-Shacham signature scheme is orders of magnitude more efficient than Schnorr\n\nBLS can mean 2 different things:\n\n* Barreto-Lynn-Scott: BLS12, a Pairing Friendly Elliptic Curve\n* Boneh-Lynn-Shacham: A Signature Scheme.\n\n### Summary\n\n1. BLS Relies on expensive bilinear pairing\n2. Secret Keys: 32 bytes\n3. Public Keys: 48 OR 96 bytes - big-endian x coordinate of point on G1 OR G2 curve\n4. Signatures: 96 OR 48 bytes - big-endian x coordinate of point on G2 OR G1 curve\n5. The 12 stands for the Embedding degree.\n\nModes of operation:\n\n* Long signatures:  48-byte keys + 96-byte sigs (G1 keys + G2 sigs).\n* Short signatures: 96-byte keys + 48-byte sigs (G2 keys + G1 sigs).\n\n### Formulas\n\n- `P = pk x G` - public keys\n- `S = pk x H(m)` - signing, uses hash-to-curve on m\n- `e(P, H(m)) == e(G, S)` - verification using pairings\n- `e(G, S) = e(G, SUM(n)(Si)) = MUL(n)(e(G, Si))` - signature aggregation\n\n### Curves\n\nG1 is ordinary elliptic curve. G2 is extension field curve, think \"over complex numbers\".\n\n- G1: y² = x³ + 4\n- G2: y² = x³ + 4(u + 1) where u = √−1; r-order subgroup of E'(Fp²), M-type twist\n\n### Towers\n\nPairing G1 + G2 produces element in Fp₁₂, 12-degree polynomial.\nFp₁₂ is usually implemented using tower of lower-degree polynomials for speed.\n\n- Fp₁₂ = Fp₆² => Fp₂³\n- Fp(u) / (u² - β) where β = -1\n- Fp₂(v) / (v³ - ξ) where ξ = u + 1\n- Fp₆(w) / (w² - γ) where γ = v\n- Fp²[u] = Fp/u²+1\n- Fp⁶[v] = Fp²/v³-1-u\n- Fp¹²[w] = Fp⁶/w²-v\n\n### Params\n\n* Embedding degree (k): 12\n* Seed is sometimes named x or t\n* t = -15132376222941642752\n* p = (t-1)² * (t⁴-t²+1)/3 + t\n* r = t⁴-t²+1\n* Ate loop size: X\n\nTo verify curve parameters, see\n[pairing-friendly-curves spec](https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-pairing-friendly-curves-11).\nBasic math is done over finite fields over p.\nMore complicated math is done over polynominal extension fields.\n\n### Compatibility and notes\n1. It is compatible with Algorand, Chia, Dfinity, Ethereum, Filecoin, ZEC.\nFilecoin uses little endian byte arrays for secret keys - make sure to reverse byte order.\n2. Make sure to correctly select mode: \"long signature\" or \"short signature\".\n3. Compatible with specs:\n   RFC 9380,\n   [cfrg-pairing-friendly-curves-11](https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-pairing-friendly-curves-11),\n   [cfrg-bls-signature-05](https://datatracker.ietf.org/doc/draft-irtf-cfrg-bls-signature/).\n\n *\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha2.js';\nimport { bls, type CurveFn } from './abstract/bls.ts';\nimport { Field, type IField } from './abstract/modular.ts';\nimport {\n  abytes,\n  bitLen,\n  bitMask,\n  bytesToHex,\n  bytesToNumberBE,\n  concatBytes,\n  ensureBytes,\n  numberToBytesBE,\n  type Hex,\n} from './utils.ts';\n// Types\nimport { isogenyMap } from './abstract/hash-to-curve.ts';\nimport type { BigintTuple, Fp, Fp12, Fp2, Fp6 } from './abstract/tower.ts';\nimport { psiFrobenius, tower12 } from './abstract/tower.ts';\nimport {\n  mapToCurveSimpleSWU,\n  type AffinePoint,\n  type WeierstrassOpts,\n  type WeierstrassPoint,\n  type WeierstrassPointCons,\n} from './abstract/weierstrass.ts';\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n\n// To verify math:\n// https://tools.ietf.org/html/draft-irtf-cfrg-pairing-friendly-curves-11\n\n// The BLS parameter x (seed) for BLS12-381. NOTE: it is negative!\n// x = -2^63 - 2^62 - 2^60 - 2^57 - 2^48 - 2^16\nconst BLS_X = BigInt('0xd201000000010000');\n// t = x (called differently in different places)\n// const t = -BLS_X;\nconst BLS_X_LEN = bitLen(BLS_X);\n\n// a=0, b=4\n// P is characteristic of field Fp, in which curve calculations are done.\n// p = (t-1)² * (t⁴-t²+1)/3 + t\n// bls12_381_Fp = (t-1n)**2n * (t**4n - t**2n + 1n) / 3n + t\n// r*h is curve order, amount of points on curve,\n// where r is order of prime subgroup and h is cofactor.\n// r = t⁴-t²+1\n// r = (t**4n - t**2n + 1n)\n// cofactor h of G1: (t - 1)²/3\n// cofactorG1 = (t-1n)**2n/3n\n// x = 3685416753713387016781088315183077757961620795782546409894578378688607592378376318836054947676345821548104185464507\n// y = 1339506544944476473020471379941921221584933875938349620426543736416511423956333506472724655353366534992391756441569\nconst bls12_381_CURVE_G1: WeierstrassOpts<bigint> = {\n  p: BigInt(\n    '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab'\n  ),\n  n: BigInt('0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001'),\n  h: BigInt('0x396c8c005555e1568c00aaab0000aaab'),\n  a: _0n,\n  b: _4n,\n  Gx: BigInt(\n    '0x17f1d3a73197d7942695638c4fa9ac0fc3688c4f9774b905a14e3a3f171bac586c55e83ff97a1aeffb3af00adb22c6bb'\n  ),\n  Gy: BigInt(\n    '0x08b3f481e3aaa0f1a09e30ed741d8ae4fcf5e095d5d00af600db18cb2c04b3edd03cc744a2888ae40caa232946c5e7e1'\n  ),\n};\n\n// CURVE FIELDS\nexport const bls12_381_Fr: IField<bigint> = Field(bls12_381_CURVE_G1.n, {\n  modFromBytes: true,\n  isLE: true,\n});\nconst { Fp, Fp2, Fp6, Fp12 } = tower12({\n  ORDER: bls12_381_CURVE_G1.p,\n  X_LEN: BLS_X_LEN,\n  // Finite extension field over irreducible polynominal.\n  // Fp(u) / (u² - β) where β = -1\n  FP2_NONRESIDUE: [_1n, _1n],\n  Fp2mulByB: ({ c0, c1 }) => {\n    const t0 = Fp.mul(c0, _4n); // 4 * c0\n    const t1 = Fp.mul(c1, _4n); // 4 * c1\n    // (T0-T1) + (T0+T1)*i\n    return { c0: Fp.sub(t0, t1), c1: Fp.add(t0, t1) };\n  },\n  Fp12finalExponentiate: (num) => {\n    const x = BLS_X;\n    // this^(q⁶) / this\n    const t0 = Fp12.div(Fp12.frobeniusMap(num, 6), num);\n    // t0^(q²) * t0\n    const t1 = Fp12.mul(Fp12.frobeniusMap(t0, 2), t0);\n    const t2 = Fp12.conjugate(Fp12._cyclotomicExp(t1, x));\n    const t3 = Fp12.mul(Fp12.conjugate(Fp12._cyclotomicSquare(t1)), t2);\n    const t4 = Fp12.conjugate(Fp12._cyclotomicExp(t3, x));\n    const t5 = Fp12.conjugate(Fp12._cyclotomicExp(t4, x));\n    const t6 = Fp12.mul(Fp12.conjugate(Fp12._cyclotomicExp(t5, x)), Fp12._cyclotomicSquare(t2));\n    const t7 = Fp12.conjugate(Fp12._cyclotomicExp(t6, x));\n    const t2_t5_pow_q2 = Fp12.frobeniusMap(Fp12.mul(t2, t5), 2);\n    const t4_t1_pow_q3 = Fp12.frobeniusMap(Fp12.mul(t4, t1), 3);\n    const t6_t1c_pow_q1 = Fp12.frobeniusMap(Fp12.mul(t6, Fp12.conjugate(t1)), 1);\n    const t7_t3c_t1 = Fp12.mul(Fp12.mul(t7, Fp12.conjugate(t3)), t1);\n    // (t2 * t5)^(q²) * (t4 * t1)^(q³) * (t6 * t1.conj)^(q^1) * t7 * t3.conj * t1\n    return Fp12.mul(Fp12.mul(Fp12.mul(t2_t5_pow_q2, t4_t1_pow_q3), t6_t1c_pow_q1), t7_t3c_t1);\n  },\n});\n\n// GLV endomorphism Ψ(P), for fast cofactor clearing\nconst { G2psi, G2psi2 } = psiFrobenius(Fp, Fp2, Fp2.div(Fp2.ONE, Fp2.NONRESIDUE)); // 1/(u+1)\n\n/**\n * Default hash_to_field / hash-to-curve for BLS.\n * m: 1 for G1, 2 for G2\n * k: target security level in bits\n * hash: any function, e.g. BBS+ uses BLAKE2: see [github](https://github.com/hyperledger/aries-framework-go/issues/2247).\n * Parameter values come from [section 8.8.2 of RFC 9380](https://www.rfc-editor.org/rfc/rfc9380#section-8.8.2).\n */\nconst htfDefaults = Object.freeze({\n  DST: 'BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_NUL_',\n  encodeDST: 'BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_NUL_',\n  p: Fp.ORDER,\n  m: 2,\n  k: 128,\n  expand: 'xmd',\n  hash: sha256,\n});\n\n// a=0, b=4\n// cofactor h of G2\n// (t^8 - 4t^7 + 5t^6 - 4t^4 + 6t^3 - 4t^2 - 4t + 13)/9\n// cofactorG2 = (t**8n - 4n*t**7n + 5n*t**6n - 4n*t**4n + 6n*t**3n - 4n*t**2n - 4n*t+13n)/9n\n// x = 3059144344244213709971259814753781636986470325476647558659373206291635324768958432433509563104347017837885763365758*u + 352701069587466618187139116011060144890029952792775240219908644239793785735715026873347600343865175952761926303160\n// y = 927553665492332455747201965776037880757740193453592970025027978793976877002675564980949289727957565575433344219582*u + 1985150602287291935568054521177171638300868978215655730859378665066344726373823718423869104263333984641494340347905\nconst bls12_381_CURVE_G2 = {\n  p: Fp2.ORDER,\n  n: bls12_381_CURVE_G1.n,\n  h: BigInt(\n    '0x5d543a95414e7f1091d50792876a202cd91de4547085abaa68a205b2e5a7ddfa628f1cb4d9e82ef21537e293a6691ae1616ec6e786f0c70cf1c38e31c7238e5'\n  ),\n  a: Fp2.ZERO,\n  b: Fp2.fromBigTuple([_4n, _4n]),\n  Gx: Fp2.fromBigTuple([\n    BigInt(\n      '0x024aa2b2f08f0a91260805272dc51051c6e47ad4fa403b02b4510b647ae3d1770bac0326a805bbefd48056c8c121bdb8'\n    ),\n    BigInt(\n      '0x13e02b6052719f607dacd3a088274f65596bd0d09920b61ab5da61bbdc7f5049334cf11213945d57e5ac7d055d042b7e'\n    ),\n  ]),\n  Gy: Fp2.fromBigTuple([\n    BigInt(\n      '0x0ce5d527727d6e118cc9cdc6da2e351aadfd9baa8cbdd3a76d429a695160d12c923ac9cc3baca289e193548608b82801'\n    ),\n    BigInt(\n      '0x0606c4a02ea734cc32acd2b02bc28b99cb3e287e85a763af267492ab572e99ab3f370d275cec1da1aaa9075ff05f79be'\n    ),\n  ]),\n};\n\n// Encoding utils\n// Compressed point of infinity\n// Set compressed & point-at-infinity bits\nconst COMPZERO = setMask(Fp.toBytes(_0n), { infinity: true, compressed: true });\n\nfunction parseMask(bytes: Uint8Array) {\n  // Copy, so we can remove mask data. It will be removed also later, when Fp.create will call modulo.\n  bytes = bytes.slice();\n  const mask = bytes[0] & 0b1110_0000;\n  const compressed = !!((mask >> 7) & 1); // compression bit (0b1000_0000)\n  const infinity = !!((mask >> 6) & 1); // point at infinity bit (0b0100_0000)\n  const sort = !!((mask >> 5) & 1); // sort bit (0b0010_0000)\n  bytes[0] &= 0b0001_1111; // clear mask (zero first 3 bits)\n  return { compressed, infinity, sort, value: bytes };\n}\n\nfunction setMask(\n  bytes: Uint8Array,\n  mask: { compressed?: boolean; infinity?: boolean; sort?: boolean }\n) {\n  if (bytes[0] & 0b1110_0000) throw new Error('setMask: non-empty mask');\n  if (mask.compressed) bytes[0] |= 0b1000_0000;\n  if (mask.infinity) bytes[0] |= 0b0100_0000;\n  if (mask.sort) bytes[0] |= 0b0010_0000;\n  return bytes;\n}\n\nfunction pointG1ToBytes(\n  _c: WeierstrassPointCons<Fp>,\n  point: WeierstrassPoint<Fp>,\n  isComp: boolean\n) {\n  const { BYTES: L, ORDER: P } = Fp;\n  const is0 = point.is0();\n  const { x, y } = point.toAffine();\n  if (isComp) {\n    if (is0) return COMPZERO.slice();\n    const sort = Boolean((y * _2n) / P);\n    return setMask(numberToBytesBE(x, L), { compressed: true, sort });\n  } else {\n    if (is0) {\n      return concatBytes(Uint8Array.of(0x40), new Uint8Array(2 * L - 1));\n    } else {\n      return concatBytes(numberToBytesBE(x, L), numberToBytesBE(y, L));\n    }\n  }\n}\n\nfunction signatureG1ToBytes(point: WeierstrassPoint<Fp>) {\n  point.assertValidity();\n  const { BYTES: L, ORDER: P } = Fp;\n  const { x, y } = point.toAffine();\n  if (point.is0()) return COMPZERO.slice();\n  const sort = Boolean((y * _2n) / P);\n  return setMask(numberToBytesBE(x, L), { compressed: true, sort });\n}\n\nfunction pointG1FromBytes(bytes: Uint8Array): AffinePoint<Fp> {\n  const { compressed, infinity, sort, value } = parseMask(bytes);\n  const { BYTES: L, ORDER: P } = Fp;\n  if (value.length === 48 && compressed) {\n    const compressedValue = bytesToNumberBE(value);\n    // Zero\n    const x = Fp.create(compressedValue & bitMask(Fp.BITS));\n    if (infinity) {\n      if (x !== _0n) throw new Error('invalid G1 point: non-empty, at infinity, with compression');\n      return { x: _0n, y: _0n };\n    }\n    const right = Fp.add(Fp.pow(x, _3n), Fp.create(bls12_381_CURVE_G1.b)); // y² = x³ + b\n    let y = Fp.sqrt(right);\n    if (!y) throw new Error('invalid G1 point: compressed point');\n    if ((y * _2n) / P !== BigInt(sort)) y = Fp.neg(y);\n    return { x: Fp.create(x), y: Fp.create(y) };\n  } else if (value.length === 96 && !compressed) {\n    // Check if the infinity flag is set\n    const x = bytesToNumberBE(value.subarray(0, L));\n    const y = bytesToNumberBE(value.subarray(L));\n    if (infinity) {\n      if (x !== _0n || y !== _0n) throw new Error('G1: non-empty point at infinity');\n      return bls12_381.G1.Point.ZERO.toAffine();\n    }\n    return { x: Fp.create(x), y: Fp.create(y) };\n  } else {\n    throw new Error('invalid G1 point: expected 48/96 bytes');\n  }\n}\n\nfunction signatureG1FromBytes(hex: Hex): WeierstrassPoint<Fp> {\n  const { infinity, sort, value } = parseMask(ensureBytes('signatureHex', hex, 48));\n  const P = Fp.ORDER;\n  const Point = bls12_381.G1.Point;\n  const compressedValue = bytesToNumberBE(value);\n  // Zero\n  if (infinity) return Point.ZERO;\n  const x = Fp.create(compressedValue & bitMask(Fp.BITS));\n  const right = Fp.add(Fp.pow(x, _3n), Fp.create(bls12_381_CURVE_G1.b)); // y² = x³ + b\n  let y = Fp.sqrt(right);\n  if (!y) throw new Error('invalid G1 point: compressed');\n  const aflag = BigInt(sort);\n  if ((y * _2n) / P !== aflag) y = Fp.neg(y);\n  const point = Point.fromAffine({ x, y });\n  point.assertValidity();\n  return point;\n}\n\nfunction pointG2ToBytes(\n  _c: WeierstrassPointCons<Fp2>,\n  point: WeierstrassPoint<Fp2>,\n  isComp: boolean\n) {\n  const { BYTES: L, ORDER: P } = Fp;\n  const is0 = point.is0();\n  const { x, y } = point.toAffine();\n  if (isComp) {\n    if (is0) return concatBytes(COMPZERO, numberToBytesBE(_0n, L));\n    const flag = Boolean(y.c1 === _0n ? (y.c0 * _2n) / P : (y.c1 * _2n) / P);\n    return concatBytes(\n      setMask(numberToBytesBE(x.c1, L), { compressed: true, sort: flag }),\n      numberToBytesBE(x.c0, L)\n    );\n  } else {\n    if (is0) return concatBytes(Uint8Array.of(0x40), new Uint8Array(4 * L - 1));\n    const { re: x0, im: x1 } = Fp2.reim(x);\n    const { re: y0, im: y1 } = Fp2.reim(y);\n    return concatBytes(\n      numberToBytesBE(x1, L),\n      numberToBytesBE(x0, L),\n      numberToBytesBE(y1, L),\n      numberToBytesBE(y0, L)\n    );\n  }\n}\n\nfunction signatureG2ToBytes(point: WeierstrassPoint<Fp2>) {\n  point.assertValidity();\n  const { BYTES: L } = Fp;\n  if (point.is0()) return concatBytes(COMPZERO, numberToBytesBE(_0n, L));\n  const { x, y } = point.toAffine();\n  const { re: x0, im: x1 } = Fp2.reim(x);\n  const { re: y0, im: y1 } = Fp2.reim(y);\n  const tmp = y1 > _0n ? y1 * _2n : y0 * _2n;\n  const sort = Boolean((tmp / Fp.ORDER) & _1n);\n  const z2 = x0;\n  return concatBytes(\n    setMask(numberToBytesBE(x1, L), { sort, compressed: true }),\n    numberToBytesBE(z2, L)\n  );\n}\n\nfunction pointG2FromBytes(bytes: Uint8Array): AffinePoint<Fp2> {\n  const { BYTES: L, ORDER: P } = Fp;\n  const { compressed, infinity, sort, value } = parseMask(bytes);\n  if (\n    (!compressed && !infinity && sort) || // 00100000\n    (!compressed && infinity && sort) || // 01100000\n    (sort && infinity && compressed) // 11100000\n  ) {\n    throw new Error('invalid encoding flag: ' + (bytes[0] & 0b1110_0000));\n  }\n  const slc = (b: Uint8Array, from: number, to?: number) => bytesToNumberBE(b.slice(from, to));\n  if (value.length === 96 && compressed) {\n    if (infinity) {\n      // check that all bytes are 0\n      if (value.reduce((p, c) => (p !== 0 ? c + 1 : c), 0) > 0) {\n        throw new Error('invalid G2 point: compressed');\n      }\n      return { x: Fp2.ZERO, y: Fp2.ZERO };\n    }\n    const x_1 = slc(value, 0, L);\n    const x_0 = slc(value, L, 2 * L);\n    const x = Fp2.create({ c0: Fp.create(x_0), c1: Fp.create(x_1) });\n    const right = Fp2.add(Fp2.pow(x, _3n), bls12_381_CURVE_G2.b); // y² = x³ + 4 * (u+1) = x³ + b\n    let y = Fp2.sqrt(right);\n    const Y_bit = y.c1 === _0n ? (y.c0 * _2n) / P : (y.c1 * _2n) / P ? _1n : _0n;\n    y = sort && Y_bit > 0 ? y : Fp2.neg(y);\n    return { x, y };\n  } else if (value.length === 192 && !compressed) {\n    if (infinity) {\n      if (value.reduce((p, c) => (p !== 0 ? c + 1 : c), 0) > 0) {\n        throw new Error('invalid G2 point: uncompressed');\n      }\n      return { x: Fp2.ZERO, y: Fp2.ZERO };\n    }\n    const x1 = slc(value, 0 * L, 1 * L);\n    const x0 = slc(value, 1 * L, 2 * L);\n    const y1 = slc(value, 2 * L, 3 * L);\n    const y0 = slc(value, 3 * L, 4 * L);\n    return { x: Fp2.fromBigTuple([x0, x1]), y: Fp2.fromBigTuple([y0, y1]) };\n  } else {\n    throw new Error('invalid G2 point: expected 96/192 bytes');\n  }\n}\n\nfunction signatureG2FromBytes(hex: Hex) {\n  const { ORDER: P } = Fp;\n  // TODO: Optimize, it's very slow because of sqrt.\n  const { infinity, sort, value } = parseMask(ensureBytes('signatureHex', hex));\n  const Point = bls12_381.G2.Point;\n  const half = value.length / 2;\n  if (half !== 48 && half !== 96)\n    throw new Error('invalid compressed signature length, expected 96/192 bytes');\n  const z1 = bytesToNumberBE(value.slice(0, half));\n  const z2 = bytesToNumberBE(value.slice(half));\n  // Indicates the infinity point\n  if (infinity) return Point.ZERO;\n  const x1 = Fp.create(z1 & bitMask(Fp.BITS));\n  const x2 = Fp.create(z2);\n  const x = Fp2.create({ c0: x2, c1: x1 });\n  const y2 = Fp2.add(Fp2.pow(x, _3n), bls12_381_CURVE_G2.b); // y² = x³ + 4\n  // The slow part\n  let y = Fp2.sqrt(y2);\n  if (!y) throw new Error('Failed to find a square root');\n\n  // Choose the y whose leftmost bit of the imaginary part is equal to the a_flag1\n  // If y1 happens to be zero, then use the bit of y0\n  const { re: y0, im: y1 } = Fp2.reim(y);\n  const aflag1 = BigInt(sort);\n  const isGreater = y1 > _0n && (y1 * _2n) / P !== aflag1;\n  const is0 = y1 === _0n && (y0 * _2n) / P !== aflag1;\n  if (isGreater || is0) y = Fp2.neg(y);\n  const point = Point.fromAffine({ x, y });\n  point.assertValidity();\n  return point;\n}\n\n/**\n * bls12-381 pairing-friendly curve.\n * @example\n * import { bls12_381 as bls } from '@noble/curves/bls12-381';\n * // G1 keys, G2 signatures\n * const privateKey = '67d53f170b908cabb9eb326c3c337762d59289a8fec79f7bc9254b584b73265c';\n * const message = '64726e3da8';\n * const publicKey = bls.getPublicKey(privateKey);\n * const signature = bls.sign(message, privateKey);\n * const isValid = bls.verify(signature, message, publicKey);\n */\nexport const bls12_381: CurveFn = bls({\n  // Fields\n  fields: {\n    Fp,\n    Fp2,\n    Fp6,\n    Fp12,\n    Fr: bls12_381_Fr,\n  },\n  // G1: y² = x³ + 4\n  G1: {\n    ...bls12_381_CURVE_G1,\n    Fp,\n    htfDefaults: { ...htfDefaults, m: 1, DST: 'BLS_SIG_BLS12381G1_XMD:SHA-256_SSWU_RO_NUL_' },\n    wrapPrivateKey: true,\n    allowInfinityPoint: true,\n    // Checks is the point resides in prime-order subgroup.\n    // point.isTorsionFree() should return true for valid points\n    // It returns false for shitty points.\n    // https://eprint.iacr.org/2021/1130.pdf\n    isTorsionFree: (c, point): boolean => {\n      // GLV endomorphism ψ(P)\n      const beta = BigInt(\n        '0x5f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffefffe'\n      );\n      const phi = new c(Fp.mul(point.X, beta), point.Y, point.Z);\n      // TODO: unroll\n      const xP = point.multiplyUnsafe(BLS_X).negate(); // [x]P\n      const u2P = xP.multiplyUnsafe(BLS_X); // [u2]P\n      return u2P.equals(phi);\n    },\n    // Clear cofactor of G1\n    // https://eprint.iacr.org/2019/403\n    clearCofactor: (_c, point) => {\n      // return this.multiplyUnsafe(CURVE.h);\n      return point.multiplyUnsafe(BLS_X).add(point); // x*P + P\n    },\n    mapToCurve: mapToG1,\n    fromBytes: pointG1FromBytes,\n    toBytes: pointG1ToBytes,\n    ShortSignature: {\n      fromBytes(bytes: Uint8Array) {\n        abytes(bytes);\n        return signatureG1FromBytes(bytes);\n      },\n      fromHex(hex: Hex): WeierstrassPoint<Fp> {\n        return signatureG1FromBytes(hex);\n      },\n      toBytes(point: WeierstrassPoint<Fp>) {\n        return signatureG1ToBytes(point);\n      },\n      toRawBytes(point: WeierstrassPoint<Fp>) {\n        return signatureG1ToBytes(point);\n      },\n      toHex(point: WeierstrassPoint<Fp>) {\n        return bytesToHex(signatureG1ToBytes(point));\n      },\n    },\n  },\n  G2: {\n    ...bls12_381_CURVE_G2,\n    Fp: Fp2,\n    // https://datatracker.ietf.org/doc/html/rfc9380#name-clearing-the-cofactor\n    // https://datatracker.ietf.org/doc/html/rfc9380#name-cofactor-clearing-for-bls12\n    hEff: BigInt(\n      '0xbc69f08f2ee75b3584c6a0ea91b352888e2a8e9145ad7689986ff031508ffe1329c2f178731db956d82bf015d1212b02ec0ec69d7477c1ae954cbc06689f6a359894c0adebbf6b4e8020005aaa95551'\n    ),\n    htfDefaults: { ...htfDefaults },\n    wrapPrivateKey: true,\n    allowInfinityPoint: true,\n    mapToCurve: mapToG2,\n    // Checks is the point resides in prime-order subgroup.\n    // point.isTorsionFree() should return true for valid points\n    // It returns false for shitty points.\n    // https://eprint.iacr.org/2021/1130.pdf\n    // Older version: https://eprint.iacr.org/2019/814.pdf\n    isTorsionFree: (c, P): boolean => {\n      return P.multiplyUnsafe(BLS_X).negate().equals(G2psi(c, P)); // ψ(P) == [u](P)\n    },\n    // Maps the point into the prime-order subgroup G2.\n    // clear_cofactor_bls12381_g2 from RFC 9380.\n    // https://eprint.iacr.org/2017/419.pdf\n    // prettier-ignore\n    clearCofactor: (c, P) => {\n      const x = BLS_X;\n      let t1 = P.multiplyUnsafe(x).negate();  // [-x]P\n      let t2 = G2psi(c, P);                   // Ψ(P)\n      let t3 = P.double();                    // 2P\n      t3 = G2psi2(c, t3);                     // Ψ²(2P)\n      t3 = t3.subtract(t2);                   // Ψ²(2P) - Ψ(P)\n      t2 = t1.add(t2);                        // [-x]P + Ψ(P)\n      t2 = t2.multiplyUnsafe(x).negate();     // [x²]P - [x]Ψ(P)\n      t3 = t3.add(t2);                        // Ψ²(2P) - Ψ(P) + [x²]P - [x]Ψ(P)\n      t3 = t3.subtract(t1);                   // Ψ²(2P) - Ψ(P) + [x²]P - [x]Ψ(P) + [x]P\n      const Q = t3.subtract(P);               // Ψ²(2P) - Ψ(P) + [x²]P - [x]Ψ(P) + [x]P - 1P\n      return Q;                               // [x²-x-1]P + [x-1]Ψ(P) + Ψ²(2P)\n    },\n    fromBytes: pointG2FromBytes,\n    toBytes: pointG2ToBytes,\n    Signature: {\n      fromBytes(bytes: Uint8Array): WeierstrassPoint<Fp2> {\n        abytes(bytes);\n        return signatureG2FromBytes(bytes);\n      },\n      fromHex(hex: Hex): WeierstrassPoint<Fp2> {\n        return signatureG2FromBytes(hex);\n      },\n      toBytes(point: WeierstrassPoint<Fp2>) {\n        return signatureG2ToBytes(point);\n      },\n      toRawBytes(point: WeierstrassPoint<Fp2>) {\n        return signatureG2ToBytes(point);\n      },\n      toHex(point: WeierstrassPoint<Fp2>) {\n        return bytesToHex(signatureG2ToBytes(point));\n      },\n    },\n  },\n  params: {\n    ateLoopSize: BLS_X, // The BLS parameter x for BLS12-381\n    r: bls12_381_CURVE_G1.n, // order; z⁴ − z² + 1; CURVE.n from other curves\n    xNegative: true,\n    twistType: 'multiplicative',\n  },\n  htfDefaults,\n  hash: sha256,\n});\n\n// 3-isogeny map from E' to E https://www.rfc-editor.org/rfc/rfc9380#appendix-E.3\nconst isogenyMapG2 = isogenyMap(\n  Fp2,\n  [\n    // xNum\n    [\n      [\n        '0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97d6',\n        '0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97d6',\n      ],\n      [\n        '0x0',\n        '0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71a',\n      ],\n      [\n        '0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71e',\n        '0x8ab05f8bdd54cde190937e76bc3e447cc27c3d6fbd7063fcd104635a790520c0a395554e5c6aaaa9354ffffffffe38d',\n      ],\n      [\n        '0x171d6541fa38ccfaed6dea691f5fb614cb14b4e7f4e810aa22d6108f142b85757098e38d0f671c7188e2aaaaaaaa5ed1',\n        '0x0',\n      ],\n    ],\n    // xDen\n    [\n      [\n        '0x0',\n        '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa63',\n      ],\n      [\n        '0xc',\n        '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa9f',\n      ],\n      ['0x1', '0x0'], // LAST 1\n    ],\n    // yNum\n    [\n      [\n        '0x1530477c7ab4113b59a4c18b076d11930f7da5d4a07f649bf54439d87d27e500fc8c25ebf8c92f6812cfc71c71c6d706',\n        '0x1530477c7ab4113b59a4c18b076d11930f7da5d4a07f649bf54439d87d27e500fc8c25ebf8c92f6812cfc71c71c6d706',\n      ],\n      [\n        '0x0',\n        '0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97be',\n      ],\n      [\n        '0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71c',\n        '0x8ab05f8bdd54cde190937e76bc3e447cc27c3d6fbd7063fcd104635a790520c0a395554e5c6aaaa9354ffffffffe38f',\n      ],\n      [\n        '0x124c9ad43b6cf79bfbf7043de3811ad0761b0f37a1e26286b0e977c69aa274524e79097a56dc4bd9e1b371c71c718b10',\n        '0x0',\n      ],\n    ],\n    // yDen\n    [\n      [\n        '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa8fb',\n        '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa8fb',\n      ],\n      [\n        '0x0',\n        '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa9d3',\n      ],\n      [\n        '0x12',\n        '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa99',\n      ],\n      ['0x1', '0x0'], // LAST 1\n    ],\n  ].map((i) => i.map((pair) => Fp2.fromBigTuple(pair.map(BigInt) as BigintTuple))) as [\n    Fp2[],\n    Fp2[],\n    Fp2[],\n    Fp2[],\n  ]\n);\n// 11-isogeny map from E' to E\nconst isogenyMapG1 = isogenyMap(\n  Fp,\n  [\n    // xNum\n    [\n      '0x11a05f2b1e833340b809101dd99815856b303e88a2d7005ff2627b56cdb4e2c85610c2d5f2e62d6eaeac1662734649b7',\n      '0x17294ed3e943ab2f0588bab22147a81c7c17e75b2f6a8417f565e33c70d1e86b4838f2a6f318c356e834eef1b3cb83bb',\n      '0xd54005db97678ec1d1048c5d10a9a1bce032473295983e56878e501ec68e25c958c3e3d2a09729fe0179f9dac9edcb0',\n      '0x1778e7166fcc6db74e0609d307e55412d7f5e4656a8dbf25f1b33289f1b330835336e25ce3107193c5b388641d9b6861',\n      '0xe99726a3199f4436642b4b3e4118e5499db995a1257fb3f086eeb65982fac18985a286f301e77c451154ce9ac8895d9',\n      '0x1630c3250d7313ff01d1201bf7a74ab5db3cb17dd952799b9ed3ab9097e68f90a0870d2dcae73d19cd13c1c66f652983',\n      '0xd6ed6553fe44d296a3726c38ae652bfb11586264f0f8ce19008e218f9c86b2a8da25128c1052ecaddd7f225a139ed84',\n      '0x17b81e7701abdbe2e8743884d1117e53356de5ab275b4db1a682c62ef0f2753339b7c8f8c8f475af9ccb5618e3f0c88e',\n      '0x80d3cf1f9a78fc47b90b33563be990dc43b756ce79f5574a2c596c928c5d1de4fa295f296b74e956d71986a8497e317',\n      '0x169b1f8e1bcfa7c42e0c37515d138f22dd2ecb803a0c5c99676314baf4bb1b7fa3190b2edc0327797f241067be390c9e',\n      '0x10321da079ce07e272d8ec09d2565b0dfa7dccdde6787f96d50af36003b14866f69b771f8c285decca67df3f1605fb7b',\n      '0x6e08c248e260e70bd1e962381edee3d31d79d7e22c837bc23c0bf1bc24c6b68c24b1b80b64d391fa9c8ba2e8ba2d229',\n    ],\n    // xDen\n    [\n      '0x8ca8d548cff19ae18b2e62f4bd3fa6f01d5ef4ba35b48ba9c9588617fc8ac62b558d681be343df8993cf9fa40d21b1c',\n      '0x12561a5deb559c4348b4711298e536367041e8ca0cf0800c0126c2588c48bf5713daa8846cb026e9e5c8276ec82b3bff',\n      '0xb2962fe57a3225e8137e629bff2991f6f89416f5a718cd1fca64e00b11aceacd6a3d0967c94fedcfcc239ba5cb83e19',\n      '0x3425581a58ae2fec83aafef7c40eb545b08243f16b1655154cca8abc28d6fd04976d5243eecf5c4130de8938dc62cd8',\n      '0x13a8e162022914a80a6f1d5f43e7a07dffdfc759a12062bb8d6b44e833b306da9bd29ba81f35781d539d395b3532a21e',\n      '0xe7355f8e4e667b955390f7f0506c6e9395735e9ce9cad4d0a43bcef24b8982f7400d24bc4228f11c02df9a29f6304a5',\n      '0x772caacf16936190f3e0c63e0596721570f5799af53a1894e2e073062aede9cea73b3538f0de06cec2574496ee84a3a',\n      '0x14a7ac2a9d64a8b230b3f5b074cf01996e7f63c21bca68a81996e1cdf9822c580fa5b9489d11e2d311f7d99bbdcc5a5e',\n      '0xa10ecf6ada54f825e920b3dafc7a3cce07f8d1d7161366b74100da67f39883503826692abba43704776ec3a79a1d641',\n      '0x95fc13ab9e92ad4476d6e3eb3a56680f682b4ee96f7d03776df533978f31c1593174e4b4b7865002d6384d168ecdd0a',\n      '0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n    // yNum\n    [\n      '0x90d97c81ba24ee0259d1f094980dcfa11ad138e48a869522b52af6c956543d3cd0c7aee9b3ba3c2be9845719707bb33',\n      '0x134996a104ee5811d51036d776fb46831223e96c254f383d0f906343eb67ad34d6c56711962fa8bfe097e75a2e41c696',\n      '0xcc786baa966e66f4a384c86a3b49942552e2d658a31ce2c344be4b91400da7d26d521628b00523b8dfe240c72de1f6',\n      '0x1f86376e8981c217898751ad8746757d42aa7b90eeb791c09e4a3ec03251cf9de405aba9ec61deca6355c77b0e5f4cb',\n      '0x8cc03fdefe0ff135caf4fe2a21529c4195536fbe3ce50b879833fd221351adc2ee7f8dc099040a841b6daecf2e8fedb',\n      '0x16603fca40634b6a2211e11db8f0a6a074a7d0d4afadb7bd76505c3d3ad5544e203f6326c95a807299b23ab13633a5f0',\n      '0x4ab0b9bcfac1bbcb2c977d027796b3ce75bb8ca2be184cb5231413c4d634f3747a87ac2460f415ec961f8855fe9d6f2',\n      '0x987c8d5333ab86fde9926bd2ca6c674170a05bfe3bdd81ffd038da6c26c842642f64550fedfe935a15e4ca31870fb29',\n      '0x9fc4018bd96684be88c9e221e4da1bb8f3abd16679dc26c1e8b6e6a1f20cabe69d65201c78607a360370e577bdba587',\n      '0xe1bba7a1186bdb5223abde7ada14a23c42a0ca7915af6fe06985e7ed1e4d43b9b3f7055dd4eba6f2bafaaebca731c30',\n      '0x19713e47937cd1be0dfd0b8f1d43fb93cd2fcbcb6caf493fd1183e416389e61031bf3a5cce3fbafce813711ad011c132',\n      '0x18b46a908f36f6deb918c143fed2edcc523559b8aaf0c2462e6bfe7f911f643249d9cdf41b44d606ce07c8a4d0074d8e',\n      '0xb182cac101b9399d155096004f53f447aa7b12a3426b08ec02710e807b4633f06c851c1919211f20d4c04f00b971ef8',\n      '0x245a394ad1eca9b72fc00ae7be315dc757b3b080d4c158013e6632d3c40659cc6cf90ad1c232a6442d9d3f5db980133',\n      '0x5c129645e44cf1102a159f748c4a3fc5e673d81d7e86568d9ab0f5d396a7ce46ba1049b6579afb7866b1e715475224b',\n      '0x15e6be4e990f03ce4ea50b3b42df2eb5cb181d8f84965a3957add4fa95af01b2b665027efec01c7704b456be69c8b604',\n    ],\n    // yDen\n    [\n      '0x16112c4c3a9c98b252181140fad0eae9601a6de578980be6eec3232b5be72e7a07f3688ef60c206d01479253b03663c1',\n      '0x1962d75c2381201e1a0cbd6c43c348b885c84ff731c4d59ca4a10356f453e01f78a4260763529e3532f6102c2e49a03d',\n      '0x58df3306640da276faaae7d6e8eb15778c4855551ae7f310c35a5dd279cd2eca6757cd636f96f891e2538b53dbf67f2',\n      '0x16b7d288798e5395f20d23bf89edb4d1d115c5dbddbcd30e123da489e726af41727364f2c28297ada8d26d98445f5416',\n      '0xbe0e079545f43e4b00cc912f8228ddcc6d19c9f0f69bbb0542eda0fc9dec916a20b15dc0fd2ededda39142311a5001d',\n      '0x8d9e5297186db2d9fb266eaac783182b70152c65550d881c5ecd87b6f0f5a6449f38db9dfa9cce202c6477faaf9b7ac',\n      '0x166007c08a99db2fc3ba8734ace9824b5eecfdfa8d0cf8ef5dd365bc400a0051d5fa9c01a58b1fb93d1a1399126a775c',\n      '0x16a3ef08be3ea7ea03bcddfabba6ff6ee5a4375efa1f4fd7feb34fd206357132b920f5b00801dee460ee415a15812ed9',\n      '0x1866c8ed336c61231a1be54fd1d74cc4f9fb0ce4c6af5920abc5750c4bf39b4852cfe2f7bb9248836b233d9d55535d4a',\n      '0x167a55cda70a6e1cea820597d94a84903216f763e13d87bb5308592e7ea7d4fbc7385ea3d529b35e346ef48bb8913f55',\n      '0x4d2f259eea405bd48f010a01ad2911d9c6dd039bb61a6290e591b36e636a5c871a5c29f4f83060400f8b49cba8f6aa8',\n      '0xaccbb67481d033ff5852c1e48c50c477f94ff8aefce42d28c0f9a88cea7913516f968986f7ebbea9684b529e2561092',\n      '0xad6b9514c767fe3c3613144b45f1496543346d98adf02267d5ceef9a00d9b8693000763e3b90ac11e99b138573345cc',\n      '0x2660400eb2e4f3b628bdd0d53cd76f2bf565b94e72927c1cb748df27942480e420517bd8714cc80d1fadc1326ed06f7',\n      '0xe0fa1d816ddc03e6b24255e0d7819c171c40f65e273b853324efcd6356caa205ca2f570f13497804415473a1d634b8f',\n      '0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n  ].map((i) => i.map((j) => BigInt(j))) as [Fp[], Fp[], Fp[], Fp[]]\n);\n\n// Optimized SWU Map - Fp to G1\nconst G1_SWU = mapToCurveSimpleSWU(Fp, {\n  A: Fp.create(\n    BigInt(\n      '0x144698a3b8e9433d693a02c96d4982b0ea985383ee66a8d8e8981aefd881ac98936f8da0e0f97f5cf428082d584c1d'\n    )\n  ),\n  B: Fp.create(\n    BigInt(\n      '0x12e2908d11688030018b12e8753eee3b2016c1f0f24f4070a0b9c14fcef35ef55a23215a316ceaa5d1cc48e98e172be0'\n    )\n  ),\n  Z: Fp.create(BigInt(11)),\n});\n// SWU Map - Fp2 to G2': y² = x³ + 240i * x + 1012 + 1012i\nconst G2_SWU = mapToCurveSimpleSWU(Fp2, {\n  A: Fp2.create({ c0: Fp.create(_0n), c1: Fp.create(BigInt(240)) }), // A' = 240 * I\n  B: Fp2.create({ c0: Fp.create(BigInt(1012)), c1: Fp.create(BigInt(1012)) }), // B' = 1012 * (1 + I)\n  Z: Fp2.create({ c0: Fp.create(BigInt(-2)), c1: Fp.create(BigInt(-1)) }), // Z: -(2 + I)\n});\n\nfunction mapToG1(scalars: bigint[]) {\n  const { x, y } = G1_SWU(Fp.create(scalars[0]));\n  return isogenyMapG1(x, y);\n}\nfunction mapToG2(scalars: bigint[]) {\n  const { x, y } = G2_SWU(Fp2.fromBigTuple(scalars as BigintTuple));\n  return isogenyMapG2(x, y);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}