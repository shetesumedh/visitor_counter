{"ast":null,"code":"'use client';\n\nimport { useMutation } from '@tanstack/react-query';\nimport { connectMutationOptions } from '@wagmi/core/query';\nimport { useEffect } from 'react';\nimport { useConfig } from './useConfig.js';\nimport { useConnectors } from './useConnectors.js';\n/** https://wagmi.sh/react/api/hooks/useConnect */\nexport function useConnect(parameters = {}) {\n  const {\n    mutation\n  } = parameters;\n  const config = useConfig(parameters);\n  const mutationOptions = connectMutationOptions(config);\n  const {\n    mutate,\n    mutateAsync,\n    ...result\n  } = useMutation({\n    ...mutation,\n    ...mutationOptions\n  });\n  // Reset mutation back to an idle state when the connector disconnects.\n  useEffect(() => {\n    return config.subscribe(({\n      status\n    }) => status, (status, previousStatus) => {\n      if (previousStatus === 'connected' && status === 'disconnected') result.reset();\n    });\n  }, [config, result.reset]);\n  return {\n    ...result,\n    connect: mutate,\n    connectAsync: mutateAsync,\n    connectors: useConnectors({\n      config\n    })\n  };\n}","map":{"version":3,"names":["useMutation","connectMutationOptions","useEffect","useConfig","useConnectors","useConnect","parameters","mutation","config","mutationOptions","mutate","mutateAsync","result","subscribe","status","previousStatus","reset","connect","connectAsync","connectors"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/wagmi/src/hooks/useConnect.ts"],"sourcesContent":["'use client'\n\nimport { useMutation } from '@tanstack/react-query'\nimport type { Config, ConnectErrorType, ResolvedRegister } from '@wagmi/core'\nimport type { Compute } from '@wagmi/core/internal'\nimport {\n  type ConnectData,\n  type ConnectMutate,\n  type ConnectMutateAsync,\n  type ConnectVariables,\n  connectMutationOptions,\n} from '@wagmi/core/query'\nimport { useEffect } from 'react'\n\nimport type { ConfigParameter } from '../types/properties.js'\nimport type {\n  UseMutationParameters,\n  UseMutationReturnType,\n} from '../utils/query.js'\nimport { useConfig } from './useConfig.js'\nimport { type UseConnectorsReturnType, useConnectors } from './useConnectors.js'\n\nexport type UseConnectParameters<\n  config extends Config = Config,\n  context = unknown,\n> = Compute<\n  ConfigParameter<config> & {\n    mutation?:\n      | UseMutationParameters<\n          ConnectData<config>,\n          ConnectErrorType,\n          ConnectVariables<config, config['connectors'][number]>,\n          context\n        >\n      | undefined\n  }\n>\n\nexport type UseConnectReturnType<\n  config extends Config = Config,\n  context = unknown,\n> = Compute<\n  UseMutationReturnType<\n    ConnectData<config>,\n    ConnectErrorType,\n    ConnectVariables<config, config['connectors'][number]>,\n    context\n  > & {\n    connect: ConnectMutate<config, context>\n    connectAsync: ConnectMutateAsync<config, context>\n    connectors: Compute<UseConnectorsReturnType> | config['connectors']\n  }\n>\n\n/** https://wagmi.sh/react/api/hooks/useConnect */\nexport function useConnect<\n  config extends Config = ResolvedRegister['config'],\n  context = unknown,\n>(\n  parameters: UseConnectParameters<config, context> = {},\n): UseConnectReturnType<config, context> {\n  const { mutation } = parameters\n\n  const config = useConfig(parameters)\n\n  const mutationOptions = connectMutationOptions(config)\n  const { mutate, mutateAsync, ...result } = useMutation({\n    ...mutation,\n    ...mutationOptions,\n  })\n\n  // Reset mutation back to an idle state when the connector disconnects.\n  useEffect(() => {\n    return config.subscribe(\n      ({ status }) => status,\n      (status, previousStatus) => {\n        if (previousStatus === 'connected' && status === 'disconnected')\n          result.reset()\n      },\n    )\n  }, [config, result.reset])\n\n  type Return = UseConnectReturnType<config, context>\n  return {\n    ...(result as Return),\n    connect: mutate as Return['connect'],\n    connectAsync: mutateAsync as Return['connectAsync'],\n    connectors: useConnectors({ config }),\n  }\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,SAASA,WAAW,QAAQ,uBAAuB;AAGnD,SAKEC,sBAAsB,QACjB,mBAAmB;AAC1B,SAASC,SAAS,QAAQ,OAAO;AAOjC,SAASC,SAAS,QAAQ,gBAAgB;AAC1C,SAAuCC,aAAa,QAAQ,oBAAoB;AAkChF;AACA,OAAM,SAAUC,UAAUA,CAIxBC,UAAA,GAAoD,EAAE;EAEtD,MAAM;IAAEC;EAAQ,CAAE,GAAGD,UAAU;EAE/B,MAAME,MAAM,GAAGL,SAAS,CAACG,UAAU,CAAC;EAEpC,MAAMG,eAAe,GAAGR,sBAAsB,CAACO,MAAM,CAAC;EACtD,MAAM;IAAEE,MAAM;IAAEC,WAAW;IAAE,GAAGC;EAAM,CAAE,GAAGZ,WAAW,CAAC;IACrD,GAAGO,QAAQ;IACX,GAAGE;GACJ,CAAC;EAEF;EACAP,SAAS,CAAC,MAAK;IACb,OAAOM,MAAM,CAACK,SAAS,CACrB,CAAC;MAAEC;IAAM,CAAE,KAAKA,MAAM,EACtB,CAACA,MAAM,EAAEC,cAAc,KAAI;MACzB,IAAIA,cAAc,KAAK,WAAW,IAAID,MAAM,KAAK,cAAc,EAC7DF,MAAM,CAACI,KAAK,EAAE;IAClB,CAAC,CACF;EACH,CAAC,EAAE,CAACR,MAAM,EAAEI,MAAM,CAACI,KAAK,CAAC,CAAC;EAG1B,OAAO;IACL,GAAIJ,MAAiB;IACrBK,OAAO,EAAEP,MAA2B;IACpCQ,YAAY,EAAEP,WAAqC;IACnDQ,UAAU,EAAEf,aAAa,CAAC;MAAEI;IAAM,CAAE;GACrC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}