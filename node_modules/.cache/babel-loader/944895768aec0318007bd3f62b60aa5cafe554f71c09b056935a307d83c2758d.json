{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.http = http;\nconst request_js_1 = require(\"../../errors/request.js\");\nconst transport_js_1 = require(\"../../errors/transport.js\");\nconst createBatchScheduler_js_1 = require(\"../../utils/promise/createBatchScheduler.js\");\nconst http_js_1 = require(\"../../utils/rpc/http.js\");\nconst createTransport_js_1 = require(\"./createTransport.js\");\nfunction http(url, config = {}) {\n  const {\n    batch,\n    fetchOptions,\n    key = 'http',\n    methods,\n    name = 'HTTP JSON-RPC',\n    onFetchRequest,\n    onFetchResponse,\n    retryDelay,\n    raw\n  } = config;\n  return ({\n    chain,\n    retryCount: retryCount_,\n    timeout: timeout_\n  }) => {\n    const {\n      batchSize = 1000,\n      wait = 0\n    } = typeof batch === 'object' ? batch : {};\n    const retryCount = config.retryCount ?? retryCount_;\n    const timeout = timeout_ ?? config.timeout ?? 10_000;\n    const url_ = url || chain?.rpcUrls.default.http[0];\n    if (!url_) throw new transport_js_1.UrlRequiredError();\n    const rpcClient = (0, http_js_1.getHttpRpcClient)(url_, {\n      fetchOptions,\n      onRequest: onFetchRequest,\n      onResponse: onFetchResponse,\n      timeout\n    });\n    return (0, createTransport_js_1.createTransport)({\n      key,\n      methods,\n      name,\n      async request({\n        method,\n        params\n      }) {\n        const body = {\n          method,\n          params\n        };\n        const {\n          schedule\n        } = (0, createBatchScheduler_js_1.createBatchScheduler)({\n          id: url_,\n          wait,\n          shouldSplitBatch(requests) {\n            return requests.length > batchSize;\n          },\n          fn: body => rpcClient.request({\n            body\n          }),\n          sort: (a, b) => a.id - b.id\n        });\n        const fn = async body => batch ? schedule(body) : [await rpcClient.request({\n          body\n        })];\n        const [{\n          error,\n          result\n        }] = await fn(body);\n        if (raw) return {\n          error,\n          result\n        };\n        if (error) throw new request_js_1.RpcRequestError({\n          body,\n          error,\n          url: url_\n        });\n        return result;\n      },\n      retryCount,\n      retryDelay,\n      timeout,\n      type: 'http'\n    }, {\n      fetchOptions,\n      url: url_\n    });\n  };\n}","map":{"version":3,"names":["exports","http","request_js_1","require","transport_js_1","createBatchScheduler_js_1","http_js_1","createTransport_js_1","url","config","batch","fetchOptions","key","methods","name","onFetchRequest","onFetchResponse","retryDelay","raw","chain","retryCount","retryCount_","timeout","timeout_","batchSize","wait","url_","rpcUrls","default","UrlRequiredError","rpcClient","getHttpRpcClient","onRequest","onResponse","createTransport","request","method","params","body","schedule","createBatchScheduler","id","shouldSplitBatch","requests","length","fn","sort","a","b","error","result","RpcRequestError","type"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/viem/clients/transports/http.ts"],"sourcesContent":["import { RpcRequestError } from '../../errors/request.js'\nimport {\n  UrlRequiredError,\n  type UrlRequiredErrorType,\n} from '../../errors/transport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { EIP1193RequestFn, RpcSchema } from '../../types/eip1193.js'\nimport type { RpcRequest } from '../../types/rpc.js'\nimport { createBatchScheduler } from '../../utils/promise/createBatchScheduler.js'\nimport {\n  type HttpRpcClientOptions,\n  getHttpRpcClient,\n} from '../../utils/rpc/http.js'\n\nimport {\n  type CreateTransportErrorType,\n  type Transport,\n  type TransportConfig,\n  createTransport,\n} from './createTransport.js'\n\nexport type HttpTransportConfig<\n  rpcSchema extends RpcSchema | undefined = undefined,\n  raw extends boolean = false,\n> = {\n  /**\n   * Whether to enable Batch JSON-RPC.\n   * @link https://www.jsonrpc.org/specification#batch\n   */\n  batch?:\n    | boolean\n    | {\n        /** The maximum number of JSON-RPC requests to send in a batch. @default 1_000 */\n        batchSize?: number | undefined\n        /** The maximum number of milliseconds to wait before sending a batch. @default 0 */\n        wait?: number | undefined\n      }\n    | undefined\n  /**\n   * Request configuration to pass to `fetch`.\n   * @link https://developer.mozilla.org/en-US/docs/Web/API/fetch\n   */\n  fetchOptions?: HttpRpcClientOptions['fetchOptions'] | undefined\n  /** A callback to handle the response from `fetch`. */\n  onFetchRequest?: HttpRpcClientOptions['onRequest'] | undefined\n  /** A callback to handle the response from `fetch`. */\n  onFetchResponse?: HttpRpcClientOptions['onResponse'] | undefined\n  /** The key of the HTTP transport. */\n  key?: TransportConfig['key'] | undefined\n  /** Methods to include or exclude from executing RPC requests. */\n  methods?: TransportConfig['methods'] | undefined\n  /** The name of the HTTP transport. */\n  name?: TransportConfig['name'] | undefined\n  /** Whether to return JSON RPC errors as responses instead of throwing. */\n  raw?: raw | boolean | undefined\n  /** The max number of times to retry. */\n  retryCount?: TransportConfig['retryCount'] | undefined\n  /** The base delay (in ms) between retries. */\n  retryDelay?: TransportConfig['retryDelay'] | undefined\n  /** Typed JSON-RPC schema for the transport. */\n  rpcSchema?: rpcSchema | RpcSchema | undefined\n  /** The timeout (in ms) for the HTTP request. Default: 10_000 */\n  timeout?: TransportConfig['timeout'] | undefined\n}\n\nexport type HttpTransport<\n  rpcSchema extends RpcSchema | undefined = undefined,\n  raw extends boolean = false,\n> = Transport<\n  'http',\n  {\n    fetchOptions?: HttpTransportConfig['fetchOptions'] | undefined\n    url?: string | undefined\n  },\n  EIP1193RequestFn<rpcSchema, raw>\n>\n\nexport type HttpTransportErrorType =\n  | CreateTransportErrorType\n  | UrlRequiredErrorType\n  | ErrorType\n\n/**\n * @description Creates a HTTP transport that connects to a JSON-RPC API.\n */\nexport function http<\n  rpcSchema extends RpcSchema | undefined = undefined,\n  raw extends boolean = false,\n>(\n  /** URL of the JSON-RPC API. Defaults to the chain's public RPC URL. */\n  url?: string | undefined,\n  config: HttpTransportConfig<rpcSchema, raw> = {},\n): HttpTransport<rpcSchema, raw> {\n  const {\n    batch,\n    fetchOptions,\n    key = 'http',\n    methods,\n    name = 'HTTP JSON-RPC',\n    onFetchRequest,\n    onFetchResponse,\n    retryDelay,\n    raw,\n  } = config\n  return ({ chain, retryCount: retryCount_, timeout: timeout_ }) => {\n    const { batchSize = 1000, wait = 0 } =\n      typeof batch === 'object' ? batch : {}\n    const retryCount = config.retryCount ?? retryCount_\n    const timeout = timeout_ ?? config.timeout ?? 10_000\n    const url_ = url || chain?.rpcUrls.default.http[0]\n    if (!url_) throw new UrlRequiredError()\n\n    const rpcClient = getHttpRpcClient(url_, {\n      fetchOptions,\n      onRequest: onFetchRequest,\n      onResponse: onFetchResponse,\n      timeout,\n    })\n\n    return createTransport(\n      {\n        key,\n        methods,\n        name,\n        async request({ method, params }) {\n          const body = { method, params }\n\n          const { schedule } = createBatchScheduler({\n            id: url_,\n            wait,\n            shouldSplitBatch(requests) {\n              return requests.length > batchSize\n            },\n            fn: (body: RpcRequest[]) =>\n              rpcClient.request({\n                body,\n              }),\n            sort: (a, b) => a.id - b.id,\n          })\n\n          const fn = async (body: RpcRequest) =>\n            batch\n              ? schedule(body)\n              : [\n                  await rpcClient.request({\n                    body,\n                  }),\n                ]\n\n          const [{ error, result }] = await fn(body)\n\n          if (raw) return { error, result }\n          if (error)\n            throw new RpcRequestError({\n              body,\n              error,\n              url: url_,\n            })\n          return result\n        },\n        retryCount,\n        retryDelay,\n        timeout,\n        type: 'http',\n      },\n      {\n        fetchOptions,\n        url: url_,\n      },\n    )\n  }\n}\n"],"mappings":";;;;;AAqFAA,OAAA,CAAAC,IAAA,GAAAA,IAAA;AArFA,MAAAC,YAAA,GAAAC,OAAA;AACA,MAAAC,cAAA,GAAAD,OAAA;AAOA,MAAAE,yBAAA,GAAAF,OAAA;AACA,MAAAG,SAAA,GAAAH,OAAA;AAKA,MAAAI,oBAAA,GAAAJ,OAAA;AAuEA,SAAgBF,IAAIA,CAKlBO,GAAwB,EACxBC,MAAA,GAA8C,EAAE;EAEhD,MAAM;IACJC,KAAK;IACLC,YAAY;IACZC,GAAG,GAAG,MAAM;IACZC,OAAO;IACPC,IAAI,GAAG,eAAe;IACtBC,cAAc;IACdC,eAAe;IACfC,UAAU;IACVC;EAAG,CACJ,GAAGT,MAAM;EACV,OAAO,CAAC;IAAEU,KAAK;IAAEC,UAAU,EAAEC,WAAW;IAAEC,OAAO,EAAEC;EAAQ,CAAE,KAAI;IAC/D,MAAM;MAAEC,SAAS,GAAG,IAAI;MAAEC,IAAI,GAAG;IAAC,CAAE,GAClC,OAAOf,KAAK,KAAK,QAAQ,GAAGA,KAAK,GAAG,EAAE;IACxC,MAAMU,UAAU,GAAGX,MAAM,CAACW,UAAU,IAAIC,WAAW;IACnD,MAAMC,OAAO,GAAGC,QAAQ,IAAId,MAAM,CAACa,OAAO,IAAI,MAAM;IACpD,MAAMI,IAAI,GAAGlB,GAAG,IAAIW,KAAK,EAAEQ,OAAO,CAACC,OAAO,CAAC3B,IAAI,CAAC,CAAC,CAAC;IAClD,IAAI,CAACyB,IAAI,EAAE,MAAM,IAAItB,cAAA,CAAAyB,gBAAgB,EAAE;IAEvC,MAAMC,SAAS,GAAG,IAAAxB,SAAA,CAAAyB,gBAAgB,EAACL,IAAI,EAAE;MACvCf,YAAY;MACZqB,SAAS,EAAEjB,cAAc;MACzBkB,UAAU,EAAEjB,eAAe;MAC3BM;KACD,CAAC;IAEF,OAAO,IAAAf,oBAAA,CAAA2B,eAAe,EACpB;MACEtB,GAAG;MACHC,OAAO;MACPC,IAAI;MACJ,MAAMqB,OAAOA,CAAC;QAAEC,MAAM;QAAEC;MAAM,CAAE;QAC9B,MAAMC,IAAI,GAAG;UAAEF,MAAM;UAAEC;QAAM,CAAE;QAE/B,MAAM;UAAEE;QAAQ,CAAE,GAAG,IAAAlC,yBAAA,CAAAmC,oBAAoB,EAAC;UACxCC,EAAE,EAAEf,IAAI;UACRD,IAAI;UACJiB,gBAAgBA,CAACC,QAAQ;YACvB,OAAOA,QAAQ,CAACC,MAAM,GAAGpB,SAAS;UACpC,CAAC;UACDqB,EAAE,EAAGP,IAAkB,IACrBR,SAAS,CAACK,OAAO,CAAC;YAChBG;WACD,CAAC;UACJQ,IAAI,EAAEA,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACN,EAAE,GAAGO,CAAC,CAACP;SAC1B,CAAC;QAEF,MAAMI,EAAE,GAAG,MAAOP,IAAgB,IAChC5B,KAAK,GACD6B,QAAQ,CAACD,IAAI,CAAC,GACd,CACE,MAAMR,SAAS,CAACK,OAAO,CAAC;UACtBG;SACD,CAAC,CACH;QAEP,MAAM,CAAC;UAAEW,KAAK;UAAEC;QAAM,CAAE,CAAC,GAAG,MAAML,EAAE,CAACP,IAAI,CAAC;QAE1C,IAAIpB,GAAG,EAAE,OAAO;UAAE+B,KAAK;UAAEC;QAAM,CAAE;QACjC,IAAID,KAAK,EACP,MAAM,IAAI/C,YAAA,CAAAiD,eAAe,CAAC;UACxBb,IAAI;UACJW,KAAK;UACLzC,GAAG,EAAEkB;SACN,CAAC;QACJ,OAAOwB,MAAM;MACf,CAAC;MACD9B,UAAU;MACVH,UAAU;MACVK,OAAO;MACP8B,IAAI,EAAE;KACP,EACD;MACEzC,YAAY;MACZH,GAAG,EAAEkB;KACN,CACF;EACH,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}