{"ast":null,"code":"import { secp256k1 } from '@noble/curves/secp256k1';\nimport { toHex } from '../utils/encoding/toHex.js';\nimport { toAccount } from './toAccount.js';\nimport { publicKeyToAddress } from './utils/publicKeyToAddress.js';\nimport { sign } from './utils/sign.js';\nimport { signAuthorization } from './utils/signAuthorization.js';\nimport { signMessage } from './utils/signMessage.js';\nimport { signTransaction } from './utils/signTransaction.js';\nimport { signTypedData } from './utils/signTypedData.js';\n/**\n * @description Creates an Account from a private key.\n *\n * @returns A Private Key Account.\n */\nexport function privateKeyToAccount(privateKey, options = {}) {\n  const {\n    nonceManager\n  } = options;\n  const publicKey = toHex(secp256k1.getPublicKey(privateKey.slice(2), false));\n  const address = publicKeyToAddress(publicKey);\n  const account = toAccount({\n    address,\n    nonceManager,\n    async sign({\n      hash\n    }) {\n      return sign({\n        hash,\n        privateKey,\n        to: 'hex'\n      });\n    },\n    async signAuthorization(authorization) {\n      return signAuthorization({\n        ...authorization,\n        privateKey\n      });\n    },\n    async signMessage({\n      message\n    }) {\n      return signMessage({\n        message,\n        privateKey\n      });\n    },\n    async signTransaction(transaction, {\n      serializer\n    } = {}) {\n      return signTransaction({\n        privateKey,\n        transaction,\n        serializer\n      });\n    },\n    async signTypedData(typedData) {\n      return signTypedData({\n        ...typedData,\n        privateKey\n      });\n    }\n  });\n  return {\n    ...account,\n    publicKey,\n    source: 'privateKey'\n  };\n}","map":{"version":3,"names":["secp256k1","toHex","toAccount","publicKeyToAddress","sign","signAuthorization","signMessage","signTransaction","signTypedData","privateKeyToAccount","privateKey","options","nonceManager","publicKey","getPublicKey","slice","address","account","hash","to","authorization","message","transaction","serializer","typedData","source"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/viem/accounts/privateKeyToAccount.ts"],"sourcesContent":["import { secp256k1 } from '@noble/curves/secp256k1'\n\nimport type { Hex } from '../types/misc.js'\nimport { type ToHexErrorType, toHex } from '../utils/encoding/toHex.js'\n\nimport type { ErrorType } from '../errors/utils.js'\nimport type { NonceManager } from '../utils/nonceManager.js'\nimport { type ToAccountErrorType, toAccount } from './toAccount.js'\nimport type { PrivateKeyAccount } from './types.js'\nimport {\n  type PublicKeyToAddressErrorType,\n  publicKeyToAddress,\n} from './utils/publicKeyToAddress.js'\nimport { type SignErrorType, sign } from './utils/sign.js'\nimport { signAuthorization } from './utils/signAuthorization.js'\nimport { type SignMessageErrorType, signMessage } from './utils/signMessage.js'\nimport {\n  type SignTransactionErrorType,\n  signTransaction,\n} from './utils/signTransaction.js'\nimport {\n  type SignTypedDataErrorType,\n  signTypedData,\n} from './utils/signTypedData.js'\n\nexport type PrivateKeyToAccountOptions = {\n  nonceManager?: NonceManager | undefined\n}\n\nexport type PrivateKeyToAccountErrorType =\n  | ToAccountErrorType\n  | ToHexErrorType\n  | PublicKeyToAddressErrorType\n  | SignErrorType\n  | SignMessageErrorType\n  | SignTransactionErrorType\n  | SignTypedDataErrorType\n  | ErrorType\n\n/**\n * @description Creates an Account from a private key.\n *\n * @returns A Private Key Account.\n */\nexport function privateKeyToAccount(\n  privateKey: Hex,\n  options: PrivateKeyToAccountOptions = {},\n): PrivateKeyAccount {\n  const { nonceManager } = options\n  const publicKey = toHex(secp256k1.getPublicKey(privateKey.slice(2), false))\n  const address = publicKeyToAddress(publicKey)\n\n  const account = toAccount({\n    address,\n    nonceManager,\n    async sign({ hash }) {\n      return sign({ hash, privateKey, to: 'hex' })\n    },\n    async signAuthorization(authorization) {\n      return signAuthorization({ ...authorization, privateKey })\n    },\n    async signMessage({ message }) {\n      return signMessage({ message, privateKey })\n    },\n    async signTransaction(transaction, { serializer } = {}) {\n      return signTransaction({ privateKey, transaction, serializer })\n    },\n    async signTypedData(typedData) {\n      return signTypedData({ ...typedData, privateKey } as any)\n    },\n  })\n\n  return {\n    ...account,\n    publicKey,\n    source: 'privateKey',\n  } as PrivateKeyAccount\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,yBAAyB;AAGnD,SAA8BC,KAAK,QAAQ,4BAA4B;AAIvE,SAAkCC,SAAS,QAAQ,gBAAgB;AAEnE,SAEEC,kBAAkB,QACb,+BAA+B;AACtC,SAA6BC,IAAI,QAAQ,iBAAiB;AAC1D,SAASC,iBAAiB,QAAQ,8BAA8B;AAChE,SAAoCC,WAAW,QAAQ,wBAAwB;AAC/E,SAEEC,eAAe,QACV,4BAA4B;AACnC,SAEEC,aAAa,QACR,0BAA0B;AAgBjC;;;;;AAKA,OAAM,SAAUC,mBAAmBA,CACjCC,UAAe,EACfC,OAAA,GAAsC,EAAE;EAExC,MAAM;IAAEC;EAAY,CAAE,GAAGD,OAAO;EAChC,MAAME,SAAS,GAAGZ,KAAK,CAACD,SAAS,CAACc,YAAY,CAACJ,UAAU,CAACK,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;EAC3E,MAAMC,OAAO,GAAGb,kBAAkB,CAACU,SAAS,CAAC;EAE7C,MAAMI,OAAO,GAAGf,SAAS,CAAC;IACxBc,OAAO;IACPJ,YAAY;IACZ,MAAMR,IAAIA,CAAC;MAAEc;IAAI,CAAE;MACjB,OAAOd,IAAI,CAAC;QAAEc,IAAI;QAAER,UAAU;QAAES,EAAE,EAAE;MAAK,CAAE,CAAC;IAC9C,CAAC;IACD,MAAMd,iBAAiBA,CAACe,aAAa;MACnC,OAAOf,iBAAiB,CAAC;QAAE,GAAGe,aAAa;QAAEV;MAAU,CAAE,CAAC;IAC5D,CAAC;IACD,MAAMJ,WAAWA,CAAC;MAAEe;IAAO,CAAE;MAC3B,OAAOf,WAAW,CAAC;QAAEe,OAAO;QAAEX;MAAU,CAAE,CAAC;IAC7C,CAAC;IACD,MAAMH,eAAeA,CAACe,WAAW,EAAE;MAAEC;IAAU,CAAE,GAAG,EAAE;MACpD,OAAOhB,eAAe,CAAC;QAAEG,UAAU;QAAEY,WAAW;QAAEC;MAAU,CAAE,CAAC;IACjE,CAAC;IACD,MAAMf,aAAaA,CAACgB,SAAS;MAC3B,OAAOhB,aAAa,CAAC;QAAE,GAAGgB,SAAS;QAAEd;MAAU,CAAS,CAAC;IAC3D;GACD,CAAC;EAEF,OAAO;IACL,GAAGO,OAAO;IACVJ,SAAS;IACTY,MAAM,EAAE;GACY;AACxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}