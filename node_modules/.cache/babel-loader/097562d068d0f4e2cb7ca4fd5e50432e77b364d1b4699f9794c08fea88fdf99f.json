{"ast":null,"code":"import { encodeFunctionData, parseUnits } from 'viem';\nimport { CHAIN_IDS, ERC20_TRANSFER_ABI, TOKENS } from '../constants.js';\n/**\n * Encodes an ERC20 transfer call\n * @param recipient - The recipient address\n * @param amount - The amount in USDC (will be converted to 6 decimals)\n * @returns The encoded function data\n */\nexport function encodeTransferCall(recipient, amount) {\n  const amountInUnits = parseUnits(amount, TOKENS.USDC.decimals);\n  // Encode the transfer function call\n  return encodeFunctionData({\n    abi: ERC20_TRANSFER_ABI,\n    functionName: 'transfer',\n    args: [recipient, amountInUnits]\n  });\n}\n/**\n * Builds the wallet_sendCalls request parameters\n * @param transferData - The encoded transfer call data\n * @param testnet - Whether to use testnet\n * @param payerInfo - Optional payer information configuration for data callbacks\n * @returns The request parameters for wallet_sendCalls\n */\nexport function buildSendCallsRequest(transferData, testnet, payerInfo) {\n  const network = testnet ? 'baseSepolia' : 'base';\n  const chainId = CHAIN_IDS[network];\n  const usdcAddress = TOKENS.USDC.addresses[network];\n  // Build the call object\n  const call = {\n    to: usdcAddress,\n    data: transferData,\n    value: '0x0' // No ETH value for ERC20 transfer\n  };\n  // Build the capabilities object\n  const capabilities = {};\n  // Add dataCallback capability if payerInfo is provided\n  if (payerInfo && payerInfo.requests.length > 0) {\n    capabilities.dataCallback = {\n      requests: payerInfo.requests.map(request => {\n        var _a;\n        return {\n          type: request.type,\n          optional: (_a = request.optional) !== null && _a !== void 0 ? _a : false\n        };\n      }),\n      callbackURL: payerInfo.callbackURL\n    };\n  }\n  // Build the request parameters\n  const requestParams = {\n    version: '1.0',\n    chainId: chainId,\n    calls: [call],\n    capabilities\n  };\n  return requestParams;\n}\n/**\n * Translates payment options into a wallet_sendCalls request\n * @param recipient - The recipient address\n * @param amount - The amount to send\n * @param testnet - Whether to use testnet\n * @param payerInfo - Optional payer information configuration for data callbacks\n * @returns The complete request parameters\n */\nexport function translatePaymentToSendCalls(recipient, amount, testnet, payerInfo) {\n  // Encode the transfer call\n  const transferData = encodeTransferCall(recipient, amount);\n  // Build and return the sendCalls request\n  return buildSendCallsRequest(transferData, testnet, payerInfo);\n}","map":{"version":3,"names":["encodeFunctionData","parseUnits","CHAIN_IDS","ERC20_TRANSFER_ABI","TOKENS","encodeTransferCall","recipient","amount","amountInUnits","USDC","decimals","abi","functionName","args","buildSendCallsRequest","transferData","testnet","payerInfo","network","chainId","usdcAddress","addresses","call","to","data","value","capabilities","requests","length","dataCallback","map","request","type","optional","_a","callbackURL","requestParams","version","calls","translatePaymentToSendCalls"],"sources":["../../../../src/interface/payment/utils/translatePayment.ts"],"sourcesContent":[null],"mappings":"AAAA,SAASA,kBAAkB,EAAEC,UAAU,QAAgC,MAAM;AAC7E,SAASC,SAAS,EAAEC,kBAAkB,EAAEC,MAAM,QAAQ,iBAAiB;AAGvE;;;;;;AAMA,OAAM,SAAUC,kBAAkBA,CAACC,SAAiB,EAAEC,MAAc;EAClE,MAAMC,aAAa,GAAGP,UAAU,CAACM,MAAM,EAAEH,MAAM,CAACK,IAAI,CAACC,QAAQ,CAAC;EAE9D;EACA,OAAOV,kBAAkB,CAAC;IACxBW,GAAG,EAAER,kBAAkB;IACvBS,YAAY,EAAE,UAAU;IACxBC,IAAI,EAAE,CAACP,SAAoB,EAAEE,aAAa;GAC3C,CAAC;AACJ;AAEA;;;;;;;AAOA,OAAM,SAAUM,qBAAqBA,CAACC,YAAiB,EAAEC,OAAgB,EAAEC,SAAqB;EAC9F,MAAMC,OAAO,GAAGF,OAAO,GAAG,aAAa,GAAG,MAAM;EAChD,MAAMG,OAAO,GAAGjB,SAAS,CAACgB,OAAO,CAAC;EAClC,MAAME,WAAW,GAAGhB,MAAM,CAACK,IAAI,CAACY,SAAS,CAACH,OAAO,CAAC;EAElD;EACA,MAAMI,IAAI,GAAG;IACXC,EAAE,EAAEH,WAAsB;IAC1BI,IAAI,EAAET,YAAY;IAClBU,KAAK,EAAE,KAAY,CAAE;GACtB;EAED;EACA,MAAMC,YAAY,GAA4B,EAAE;EAEhD;EACA,IAAIT,SAAS,IAAIA,SAAS,CAACU,QAAQ,CAACC,MAAM,GAAG,CAAC,EAAE;IAC9CF,YAAY,CAACG,YAAY,GAAG;MAC1BF,QAAQ,EAAEV,SAAS,CAACU,QAAQ,CAACG,GAAG,CAACC,OAAO,IAAG;;QAAC,OAAC;UAC3CC,IAAI,EAAED,OAAO,CAACC,IAAI;UAClBC,QAAQ,EAAE,CAAAC,EAAA,GAAAH,OAAO,CAACE,QAAQ,cAAAC,EAAA,cAAAA,EAAA,GAAI;SAC/B;OAAC,CAAC;MACHC,WAAW,EAAElB,SAAS,CAACkB;KACxB;EACH;EAEA;EACA,MAAMC,aAAa,GAAG;IACpBC,OAAO,EAAE,KAAK;IACdlB,OAAO,EAAEA,OAAO;IAChBmB,KAAK,EAAE,CAAChB,IAAI,CAAC;IACbI;GACD;EAED,OAAOU,aAAa;AACtB;AAEA;;;;;;;;AAQA,OAAM,SAAUG,2BAA2BA,CAACjC,SAAiB,EAAEC,MAAc,EAAES,OAAgB,EAAEC,SAAqB;EACpH;EACA,MAAMF,YAAY,GAAGV,kBAAkB,CAACC,SAAS,EAAEC,MAAM,CAAC;EAE1D;EACA,OAAOO,qBAAqB,CAACC,YAAY,EAAEC,OAAO,EAAEC,SAAS,CAAC;AAChE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}