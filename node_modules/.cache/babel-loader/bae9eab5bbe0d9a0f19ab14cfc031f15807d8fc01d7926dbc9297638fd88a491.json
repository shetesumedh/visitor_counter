{"ast":null,"code":"import { PACKAGE_VERSION } from '../constants.js';\nimport { standardErrorCodes } from './constants.js';\nimport { serialize } from './utils.js';\n/**\n * Serializes an error to a format that is compatible with the Ethereum JSON RPC error format.\n * See https://docs.cloud.coinbase.com/wallet-sdk/docs/errors\n * for more information.\n */\nexport function serializeError(error) {\n  const serialized = serialize(getErrorObject(error), {\n    shouldIncludeStack: true\n  });\n  const docUrl = new URL('https://docs.cloud.coinbase.com/wallet-sdk/docs/errors');\n  docUrl.searchParams.set('version', PACKAGE_VERSION);\n  docUrl.searchParams.set('code', serialized.code.toString());\n  docUrl.searchParams.set('message', serialized.message);\n  return Object.assign(Object.assign({}, serialized), {\n    docUrl: docUrl.href\n  });\n}\nfunction isErrorResponse(response) {\n  return response.errorMessage !== undefined;\n}\n/**\n * Converts an error to a serializable object.\n */\nfunction getErrorObject(error) {\n  var _a;\n  if (typeof error === 'string') {\n    return {\n      message: error,\n      code: standardErrorCodes.rpc.internal\n    };\n  }\n  if (isErrorResponse(error)) {\n    const message = error.errorMessage;\n    const code = (_a = error.errorCode) !== null && _a !== void 0 ? _a : message.match(/(denied|rejected)/i) ? standardErrorCodes.provider.userRejectedRequest : undefined;\n    return Object.assign(Object.assign({}, error), {\n      message,\n      code,\n      data: {\n        method: error.method\n      }\n    });\n  }\n  return error;\n}","map":{"version":3,"names":["PACKAGE_VERSION","standardErrorCodes","serialize","serializeError","error","serialized","getErrorObject","shouldIncludeStack","docUrl","URL","searchParams","set","code","toString","message","Object","assign","href","isErrorResponse","response","errorMessage","undefined","rpc","internal","_a","errorCode","match","provider","userRejectedRequest","data","method"],"sources":["../../../src/core/error/serialize.ts"],"sourcesContent":[null],"mappings":"AAAA,SAASA,eAAe,QAAQ;AAChC,SAASC,kBAAkB,QAAQ,gBAAgB;AACnD,SAASC,SAAS,QAAQ,YAAY;AAEtC;;;;;AAKA,OAAM,SAAUC,cAAcA,CAACC,KAAc;EAC3C,MAAMC,UAAU,GAAGH,SAAS,CAACI,cAAc,CAACF,KAAK,CAAC,EAAE;IAClDG,kBAAkB,EAAE;GACrB,CAAC;EAEF,MAAMC,MAAM,GAAG,IAAIC,GAAG,CAAC,wDAAwD,CAAC;EAChFD,MAAM,CAACE,YAAY,CAACC,GAAG,CAAC,SAAS,EAAEX,eAAe,CAAC;EACnDQ,MAAM,CAACE,YAAY,CAACC,GAAG,CAAC,MAAM,EAAEN,UAAU,CAACO,IAAI,CAACC,QAAQ,EAAE,CAAC;EAC3DL,MAAM,CAACE,YAAY,CAACC,GAAG,CAAC,SAAS,EAAEN,UAAU,CAACS,OAAO,CAAC;EAEtD,OAAAC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACKX,UAAU;IACbG,MAAM,EAAEA,MAAM,CAACS;EAAI;AAEvB;AAQA,SAASC,eAAeA,CAACC,QAAiB;EACxC,OAAQA,QAA0B,CAACC,YAAY,KAAKC,SAAS;AAC/D;AAEA;;;AAGA,SAASf,cAAcA,CAACF,KAAuC;;EAC7D,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC7B,OAAO;MACLU,OAAO,EAAEV,KAAK;MACdQ,IAAI,EAAEX,kBAAkB,CAACqB,GAAG,CAACC;KAC9B;EACH;EACA,IAAIL,eAAe,CAACd,KAAK,CAAC,EAAE;IAC1B,MAAMU,OAAO,GAAGV,KAAK,CAACgB,YAAY;IAClC,MAAMR,IAAI,GACR,CAAAY,EAAA,GAAApB,KAAK,CAACqB,SAAS,cAAAD,EAAA,cAAAA,EAAA,GACdV,OAAO,CAACY,KAAK,CAAC,oBAAoB,CAAC,GAChCzB,kBAAkB,CAAC0B,QAAQ,CAACC,mBAAmB,GAC/CP,SAAU;IAEhB,OAAAN,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACKZ,KAAK;MACRU,OAAO;MACPF,IAAI;MACJiB,IAAI,EAAE;QAAEC,MAAM,EAAE1B,KAAK,CAAC0B;MAAM;IAAE;EAElC;EACA,OAAO1B,KAAK;AACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}