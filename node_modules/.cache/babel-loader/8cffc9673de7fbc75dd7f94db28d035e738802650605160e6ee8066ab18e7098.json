{"ast":null,"code":"import * as Errors from './Errors.js';\nimport * as Value from './Value.js';\n/**\n * Thrown when a fee cap is too high.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip1559 } from 'ox'\n *\n * TransactionEnvelopeEip1559.assert({\n *   maxFeePerGas: 2n ** 256n - 1n + 1n,\n *   chainId: 1,\n * })\n * // @error: TransactionEnvelope.FeeCapTooHighError: The fee cap (`maxFeePerGas`/`maxPriorityFeePerGas` = 115792089237316195423570985008687907853269984665640564039457584007913.129639936 gwei) cannot be higher than the maximum allowed value (2^256-1).\n * ```\n */\nexport class FeeCapTooHighError extends Errors.BaseError {\n  constructor({\n    feeCap\n  } = {}) {\n    super(`The fee cap (\\`maxFeePerGas\\`/\\`maxPriorityFeePerGas\\`${feeCap ? ` = ${Value.formatGwei(feeCap)} gwei` : ''}) cannot be higher than the maximum allowed value (2^256-1).`);\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'TransactionEnvelope.FeeCapTooHighError'\n    });\n  }\n}\n/**\n * Thrown when a gas price is too high.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeLegacy } from 'ox'\n *\n * TransactionEnvelopeLegacy.assert({\n *   gasPrice: 2n ** 256n - 1n + 1n,\n *   chainId: 1,\n * })\n * // @error: TransactionEnvelope.GasPriceTooHighError: The gas price (`gasPrice` = 115792089237316195423570985008687907853269984665640564039457584007913.129639936 gwei) cannot be higher than the maximum allowed value (2^256-1).\n * ```\n */\nexport class GasPriceTooHighError extends Errors.BaseError {\n  constructor({\n    gasPrice\n  } = {}) {\n    super(`The gas price (\\`gasPrice\\`${gasPrice ? ` = ${Value.formatGwei(gasPrice)} gwei` : ''}) cannot be higher than the maximum allowed value (2^256-1).`);\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'TransactionEnvelope.GasPriceTooHighError'\n    });\n  }\n}\n/**\n * Thrown when a chain ID is invalid.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip1559 } from 'ox'\n *\n * TransactionEnvelopeEip1559.assert({ chainId: 0 })\n * // @error: TransactionEnvelope.InvalidChainIdError: Chain ID \"0\" is invalid.\n * ```\n */\nexport class InvalidChainIdError extends Errors.BaseError {\n  constructor({\n    chainId\n  }) {\n    super(typeof chainId !== 'undefined' ? `Chain ID \"${chainId}\" is invalid.` : 'Chain ID is invalid.');\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'TransactionEnvelope.InvalidChainIdError'\n    });\n  }\n}\n/**\n * Thrown when a serialized transaction is invalid.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip1559 } from 'ox'\n *\n * TransactionEnvelopeEip1559.deserialize('0x02c0')\n * // @error: TransactionEnvelope.InvalidSerializedError: Invalid serialized transaction of type \"eip1559\" was provided.\n * // @error: Serialized Transaction: \"0x02c0\"\n * // @error: Missing Attributes: chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gas, to, value, data, accessList\n * ```\n */\nexport class InvalidSerializedError extends Errors.BaseError {\n  constructor({\n    attributes,\n    serialized,\n    type\n  }) {\n    const missing = Object.entries(attributes).map(([key, value]) => typeof value === 'undefined' ? key : undefined).filter(Boolean);\n    super(`Invalid serialized transaction of type \"${type}\" was provided.`, {\n      metaMessages: [`Serialized Transaction: \"${serialized}\"`, missing.length > 0 ? `Missing Attributes: ${missing.join(', ')}` : ''].filter(Boolean)\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'TransactionEnvelope.InvalidSerializedError'\n    });\n  }\n}\n/**\n * Thrown when a tip is higher than a fee cap.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip1559 } from 'ox'\n *\n * TransactionEnvelopeEip1559.assert({\n *   chainId: 1,\n *   maxFeePerGas: 10n,\n *   maxPriorityFeePerGas: 11n,\n * })\n * // @error: TransactionEnvelope.TipAboveFeeCapError: The provided tip (`maxPriorityFeePerGas` = 11 gwei) cannot be higher than the fee cap (`maxFeePerGas` = 10 gwei).\n * ```\n */\nexport class TipAboveFeeCapError extends Errors.BaseError {\n  constructor({\n    maxPriorityFeePerGas,\n    maxFeePerGas\n  } = {}) {\n    super([`The provided tip (\\`maxPriorityFeePerGas\\`${maxPriorityFeePerGas ? ` = ${Value.formatGwei(maxPriorityFeePerGas)} gwei` : ''}) cannot be higher than the fee cap (\\`maxFeePerGas\\`${maxFeePerGas ? ` = ${Value.formatGwei(maxFeePerGas)} gwei` : ''}).`].join('\\n'));\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'TransactionEnvelope.TipAboveFeeCapError'\n    });\n  }\n}","map":{"version":3,"names":["Errors","Value","FeeCapTooHighError","BaseError","constructor","feeCap","formatGwei","Object","defineProperty","GasPriceTooHighError","gasPrice","InvalidChainIdError","chainId","InvalidSerializedError","attributes","serialized","type","missing","entries","map","key","value","undefined","filter","Boolean","metaMessages","length","join","TipAboveFeeCapError","maxPriorityFeePerGas","maxFeePerGas"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/ox/core/TransactionEnvelope.ts"],"sourcesContent":["import type * as Address from './Address.js'\nimport * as Errors from './Errors.js'\nimport type * as Hex from './Hex.js'\nimport * as Value from './Value.js'\nimport type { Compute } from './internal/types.js'\n\n/** Base type for a Transaction Envelope. Transaction Envelopes inherit this type. */\nexport type Base<\n  type extends string = string,\n  signed extends boolean = boolean,\n  bigintType = bigint,\n  numberType = number,\n> = Compute<\n  {\n    /** EIP-155 Chain ID. */\n    chainId: numberType\n    /** Contract code or a hashed method call with encoded args */\n    data?: Hex.Hex | undefined\n    /** @alias `data` â€“ added for TransactionEnvelope - Transaction compatibility. */\n    input?: Hex.Hex | undefined\n    /** Sender of the transaction. */\n    from?: Address.Address | undefined\n    /** Gas provided for transaction execution */\n    gas?: bigintType | undefined\n    /** Unique number identifying this transaction */\n    nonce?: bigintType | undefined\n    /** Transaction recipient */\n    to?: Address.Address | null | undefined\n    /** Transaction type */\n    type: type\n    /** Value in wei sent with this transaction */\n    value?: bigintType | undefined\n    /** ECDSA signature r. */\n    r?: bigintType | undefined\n    /** ECDSA signature s. */\n    s?: bigintType | undefined\n    /** ECDSA signature yParity. */\n    yParity?: numberType | undefined\n    /** @deprecated ECDSA signature v (for backwards compatibility). */\n    v?: numberType | undefined\n  } & (signed extends true ? { r: bigintType; s: bigintType } : {})\n>\n\n/** RPC representation of a {@link ox#(TransactionEnvelope:namespace).Base}. */\nexport type BaseRpc<\n  type extends string = string,\n  signed extends boolean = boolean,\n> = Base<type, signed, Hex.Hex, Hex.Hex>\n\n/** Signed representation of a {@link ox#(TransactionEnvelope:namespace).Base}. */\nexport type BaseSigned<type extends string = string> = Base<type, true>\n\n/**\n * Thrown when a fee cap is too high.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip1559 } from 'ox'\n *\n * TransactionEnvelopeEip1559.assert({\n *   maxFeePerGas: 2n ** 256n - 1n + 1n,\n *   chainId: 1,\n * })\n * // @error: TransactionEnvelope.FeeCapTooHighError: The fee cap (`maxFeePerGas`/`maxPriorityFeePerGas` = 115792089237316195423570985008687907853269984665640564039457584007913.129639936 gwei) cannot be higher than the maximum allowed value (2^256-1).\n * ```\n */\nexport class FeeCapTooHighError extends Errors.BaseError {\n  override readonly name = 'TransactionEnvelope.FeeCapTooHighError'\n  constructor({\n    feeCap,\n  }: {\n    feeCap?: bigint | undefined\n  } = {}) {\n    super(\n      `The fee cap (\\`maxFeePerGas\\`/\\`maxPriorityFeePerGas\\`${\n        feeCap ? ` = ${Value.formatGwei(feeCap)} gwei` : ''\n      }) cannot be higher than the maximum allowed value (2^256-1).`,\n    )\n  }\n}\n\n/**\n * Thrown when a gas price is too high.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeLegacy } from 'ox'\n *\n * TransactionEnvelopeLegacy.assert({\n *   gasPrice: 2n ** 256n - 1n + 1n,\n *   chainId: 1,\n * })\n * // @error: TransactionEnvelope.GasPriceTooHighError: The gas price (`gasPrice` = 115792089237316195423570985008687907853269984665640564039457584007913.129639936 gwei) cannot be higher than the maximum allowed value (2^256-1).\n * ```\n */\nexport class GasPriceTooHighError extends Errors.BaseError {\n  override readonly name = 'TransactionEnvelope.GasPriceTooHighError'\n  constructor({\n    gasPrice,\n  }: {\n    gasPrice?: bigint | undefined\n  } = {}) {\n    super(\n      `The gas price (\\`gasPrice\\`${\n        gasPrice ? ` = ${Value.formatGwei(gasPrice)} gwei` : ''\n      }) cannot be higher than the maximum allowed value (2^256-1).`,\n    )\n  }\n}\n\n/**\n * Thrown when a chain ID is invalid.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip1559 } from 'ox'\n *\n * TransactionEnvelopeEip1559.assert({ chainId: 0 })\n * // @error: TransactionEnvelope.InvalidChainIdError: Chain ID \"0\" is invalid.\n * ```\n */\nexport class InvalidChainIdError extends Errors.BaseError {\n  override readonly name = 'TransactionEnvelope.InvalidChainIdError'\n  constructor({ chainId }: { chainId?: number | undefined }) {\n    super(\n      typeof chainId !== 'undefined'\n        ? `Chain ID \"${chainId}\" is invalid.`\n        : 'Chain ID is invalid.',\n    )\n  }\n}\n\n/**\n * Thrown when a serialized transaction is invalid.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip1559 } from 'ox'\n *\n * TransactionEnvelopeEip1559.deserialize('0x02c0')\n * // @error: TransactionEnvelope.InvalidSerializedError: Invalid serialized transaction of type \"eip1559\" was provided.\n * // @error: Serialized Transaction: \"0x02c0\"\n * // @error: Missing Attributes: chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gas, to, value, data, accessList\n * ```\n */\nexport class InvalidSerializedError extends Errors.BaseError {\n  override readonly name = 'TransactionEnvelope.InvalidSerializedError'\n  constructor({\n    attributes,\n    serialized,\n    type,\n  }: {\n    attributes: Record<string, unknown>\n    serialized: Hex.Hex\n    type: string\n  }) {\n    const missing = Object.entries(attributes)\n      .map(([key, value]) => (typeof value === 'undefined' ? key : undefined))\n      .filter(Boolean)\n    super(`Invalid serialized transaction of type \"${type}\" was provided.`, {\n      metaMessages: [\n        `Serialized Transaction: \"${serialized}\"`,\n        missing.length > 0 ? `Missing Attributes: ${missing.join(', ')}` : '',\n      ].filter(Boolean),\n    })\n  }\n}\n\n/**\n * Thrown when a tip is higher than a fee cap.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip1559 } from 'ox'\n *\n * TransactionEnvelopeEip1559.assert({\n *   chainId: 1,\n *   maxFeePerGas: 10n,\n *   maxPriorityFeePerGas: 11n,\n * })\n * // @error: TransactionEnvelope.TipAboveFeeCapError: The provided tip (`maxPriorityFeePerGas` = 11 gwei) cannot be higher than the fee cap (`maxFeePerGas` = 10 gwei).\n * ```\n */\nexport class TipAboveFeeCapError extends Errors.BaseError {\n  override readonly name = 'TransactionEnvelope.TipAboveFeeCapError'\n  constructor({\n    maxPriorityFeePerGas,\n    maxFeePerGas,\n  }: {\n    maxPriorityFeePerGas?: bigint | undefined\n    maxFeePerGas?: bigint | undefined\n  } = {}) {\n    super(\n      [\n        `The provided tip (\\`maxPriorityFeePerGas\\`${\n          maxPriorityFeePerGas\n            ? ` = ${Value.formatGwei(maxPriorityFeePerGas)} gwei`\n            : ''\n        }) cannot be higher than the fee cap (\\`maxFeePerGas\\`${\n          maxFeePerGas ? ` = ${Value.formatGwei(maxFeePerGas)} gwei` : ''\n        }).`,\n      ].join('\\n'),\n    )\n  }\n}\n"],"mappings":"AACA,OAAO,KAAKA,MAAM,MAAM,aAAa;AAErC,OAAO,KAAKC,KAAK,MAAM,YAAY;AAiDnC;;;;;;;;;;;;;;AAcA,OAAM,MAAOC,kBAAmB,SAAQF,MAAM,CAACG,SAAS;EAEtDC,YAAY;IACVC;EAAM,IAGJ,EAAE;IACJ,KAAK,CACH,yDACEA,MAAM,GAAG,MAAMJ,KAAK,CAACK,UAAU,CAACD,MAAM,CAAC,OAAO,GAAG,EACnD,8DAA8D,CAC/D;IAVeE,MAAA,CAAAC,cAAA;;;;aAAO;;EAWzB;;AAGF;;;;;;;;;;;;;;AAcA,OAAM,MAAOC,oBAAqB,SAAQT,MAAM,CAACG,SAAS;EAExDC,YAAY;IACVM;EAAQ,IAGN,EAAE;IACJ,KAAK,CACH,8BACEA,QAAQ,GAAG,MAAMT,KAAK,CAACK,UAAU,CAACI,QAAQ,CAAC,OAAO,GAAG,EACvD,8DAA8D,CAC/D;IAVeH,MAAA,CAAAC,cAAA;;;;aAAO;;EAWzB;;AAGF;;;;;;;;;;;AAWA,OAAM,MAAOG,mBAAoB,SAAQX,MAAM,CAACG,SAAS;EAEvDC,YAAY;IAAEQ;EAAO,CAAoC;IACvD,KAAK,CACH,OAAOA,OAAO,KAAK,WAAW,GAC1B,aAAaA,OAAO,eAAe,GACnC,sBAAsB,CAC3B;IANeL,MAAA,CAAAC,cAAA;;;;aAAO;;EAOzB;;AAGF;;;;;;;;;;;;;AAaA,OAAM,MAAOK,sBAAuB,SAAQb,MAAM,CAACG,SAAS;EAE1DC,YAAY;IACVU,UAAU;IACVC,UAAU;IACVC;EAAI,CAKL;IACC,MAAMC,OAAO,GAAGV,MAAM,CAACW,OAAO,CAACJ,UAAU,CAAC,CACvCK,GAAG,CAAC,CAAC,CAACC,GAAG,EAAEC,KAAK,CAAC,KAAM,OAAOA,KAAK,KAAK,WAAW,GAAGD,GAAG,GAAGE,SAAU,CAAC,CACvEC,MAAM,CAACC,OAAO,CAAC;IAClB,KAAK,CAAC,2CAA2CR,IAAI,iBAAiB,EAAE;MACtES,YAAY,EAAE,CACZ,4BAA4BV,UAAU,GAAG,EACzCE,OAAO,CAACS,MAAM,GAAG,CAAC,GAAG,uBAAuBT,OAAO,CAACU,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,CACtE,CAACJ,MAAM,CAACC,OAAO;KACjB,CAAC;IAlBcjB,MAAA,CAAAC,cAAA;;;;aAAO;;EAmBzB;;AAGF;;;;;;;;;;;;;;;AAeA,OAAM,MAAOoB,mBAAoB,SAAQ5B,MAAM,CAACG,SAAS;EAEvDC,YAAY;IACVyB,oBAAoB;IACpBC;EAAY,IAIV,EAAE;IACJ,KAAK,CACH,CACE,6CACED,oBAAoB,GAChB,MAAM5B,KAAK,CAACK,UAAU,CAACuB,oBAAoB,CAAC,OAAO,GACnD,EACN,wDACEC,YAAY,GAAG,MAAM7B,KAAK,CAACK,UAAU,CAACwB,YAAY,CAAC,OAAO,GAAG,EAC/D,IAAI,CACL,CAACH,IAAI,CAAC,IAAI,CAAC,CACb;IAlBepB,MAAA,CAAAC,cAAA;;;;aAAO;;EAmBzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}