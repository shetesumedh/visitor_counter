{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.watchBlocks = watchBlocks;\nconst getAction_js_1 = require(\"../../utils/getAction.js\");\nconst observe_js_1 = require(\"../../utils/observe.js\");\nconst poll_js_1 = require(\"../../utils/poll.js\");\nconst stringify_js_1 = require(\"../../utils/stringify.js\");\nconst getBlock_js_1 = require(\"./getBlock.js\");\nfunction watchBlocks(client, {\n  blockTag = client.experimental_blockTag ?? 'latest',\n  emitMissed = false,\n  emitOnBegin = false,\n  onBlock,\n  onError,\n  includeTransactions: includeTransactions_,\n  poll: poll_,\n  pollingInterval = client.pollingInterval\n}) {\n  const enablePolling = (() => {\n    if (typeof poll_ !== 'undefined') return poll_;\n    if (client.transport.type === 'webSocket' || client.transport.type === 'ipc') return false;\n    if (client.transport.type === 'fallback' && (client.transport.transports[0].config.type === 'webSocket' || client.transport.transports[0].config.type === 'ipc')) return false;\n    return true;\n  })();\n  const includeTransactions = includeTransactions_ ?? false;\n  let prevBlock;\n  const pollBlocks = () => {\n    const observerId = (0, stringify_js_1.stringify)(['watchBlocks', client.uid, blockTag, emitMissed, emitOnBegin, includeTransactions, pollingInterval]);\n    return (0, observe_js_1.observe)(observerId, {\n      onBlock,\n      onError\n    }, emit => (0, poll_js_1.poll)(async () => {\n      try {\n        const block = await (0, getAction_js_1.getAction)(client, getBlock_js_1.getBlock, 'getBlock')({\n          blockTag,\n          includeTransactions\n        });\n        if (block.number !== null && prevBlock?.number != null) {\n          if (block.number === prevBlock.number) return;\n          if (block.number - prevBlock.number > 1 && emitMissed) {\n            for (let i = prevBlock?.number + 1n; i < block.number; i++) {\n              const block = await (0, getAction_js_1.getAction)(client, getBlock_js_1.getBlock, 'getBlock')({\n                blockNumber: i,\n                includeTransactions\n              });\n              emit.onBlock(block, prevBlock);\n              prevBlock = block;\n            }\n          }\n        }\n        if (prevBlock?.number == null || blockTag === 'pending' && block?.number == null || block.number !== null && block.number > prevBlock.number) {\n          emit.onBlock(block, prevBlock);\n          prevBlock = block;\n        }\n      } catch (err) {\n        emit.onError?.(err);\n      }\n    }, {\n      emitOnBegin,\n      interval: pollingInterval\n    }));\n  };\n  const subscribeBlocks = () => {\n    let active = true;\n    let emitFetched = true;\n    let unsubscribe = () => active = false;\n    (async () => {\n      try {\n        if (emitOnBegin) {\n          (0, getAction_js_1.getAction)(client, getBlock_js_1.getBlock, 'getBlock')({\n            blockTag,\n            includeTransactions\n          }).then(block => {\n            if (!active) return;\n            if (!emitFetched) return;\n            onBlock(block, undefined);\n            emitFetched = false;\n          }).catch(onError);\n        }\n        const transport = (() => {\n          if (client.transport.type === 'fallback') {\n            const transport = client.transport.transports.find(transport => transport.config.type === 'webSocket' || transport.config.type === 'ipc');\n            if (!transport) return client.transport;\n            return transport.value;\n          }\n          return client.transport;\n        })();\n        const {\n          unsubscribe: unsubscribe_\n        } = await transport.subscribe({\n          params: ['newHeads'],\n          async onData(data) {\n            if (!active) return;\n            const block = await (0, getAction_js_1.getAction)(client, getBlock_js_1.getBlock, 'getBlock')({\n              blockNumber: data.result?.number,\n              includeTransactions\n            }).catch(() => {});\n            if (!active) return;\n            onBlock(block, prevBlock);\n            emitFetched = false;\n            prevBlock = block;\n          },\n          onError(error) {\n            onError?.(error);\n          }\n        });\n        unsubscribe = unsubscribe_;\n        if (!active) unsubscribe();\n      } catch (err) {\n        onError?.(err);\n      }\n    })();\n    return () => unsubscribe();\n  };\n  return enablePolling ? pollBlocks() : subscribeBlocks();\n}","map":{"version":3,"names":["exports","watchBlocks","getAction_js_1","require","observe_js_1","poll_js_1","stringify_js_1","getBlock_js_1","client","blockTag","experimental_blockTag","emitMissed","emitOnBegin","onBlock","onError","includeTransactions","includeTransactions_","poll","poll_","pollingInterval","enablePolling","transport","type","transports","config","prevBlock","pollBlocks","observerId","stringify","uid","observe","emit","block","getAction","getBlock","number","i","blockNumber","err","interval","subscribeBlocks","active","emitFetched","unsubscribe","then","undefined","catch","find","value","unsubscribe_","subscribe","params","onData","data","result","error"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/viem/actions/public/watchBlocks.ts"],"sourcesContent":["import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { HasTransportType } from '../../types/transport.js'\nimport { getAction } from '../../utils/getAction.js'\nimport { observe } from '../../utils/observe.js'\nimport { type PollErrorType, poll } from '../../utils/poll.js'\nimport { type StringifyErrorType, stringify } from '../../utils/stringify.js'\n\nimport { type GetBlockReturnType, getBlock } from './getBlock.js'\n\nexport type OnBlockParameter<\n  chain extends Chain | undefined = Chain,\n  includeTransactions extends boolean = false,\n  blockTag extends BlockTag = 'latest',\n> = GetBlockReturnType<chain, includeTransactions, blockTag>\n\nexport type OnBlock<\n  chain extends Chain | undefined = Chain,\n  includeTransactions extends boolean = false,\n  blockTag extends BlockTag = 'latest',\n> = (\n  block: OnBlockParameter<chain, includeTransactions, blockTag>,\n  prevBlock: OnBlockParameter<chain, includeTransactions, blockTag> | undefined,\n) => void\n\nexport type WatchBlocksParameters<\n  transport extends Transport = Transport,\n  chain extends Chain | undefined = Chain,\n  includeTransactions extends boolean = false,\n  blockTag extends BlockTag = 'latest',\n> = {\n  /** The callback to call when a new block is received. */\n  onBlock: OnBlock<chain, includeTransactions, blockTag>\n  /** The callback to call when an error occurred when trying to get for a new block. */\n  onError?: ((error: Error) => void) | undefined\n} & (\n  | (HasTransportType<transport, 'webSocket' | 'ipc'> extends true\n      ? {\n          blockTag?: undefined\n          emitMissed?: undefined\n          emitOnBegin?: undefined\n          includeTransactions?: undefined\n          /** Whether or not the WebSocket Transport should poll the JSON-RPC, rather than using `eth_subscribe`. */\n          poll?: false | undefined\n          pollingInterval?: undefined\n        }\n      : never)\n  | {\n      /** The block tag. Defaults to \"latest\". */\n      blockTag?: blockTag | BlockTag | undefined\n      /** Whether or not to emit the missed blocks to the callback. */\n      emitMissed?: boolean | undefined\n      /** Whether or not to emit the block to the callback when the subscription opens. */\n      emitOnBegin?: boolean | undefined\n      /** Whether or not to include transaction data in the response. */\n      includeTransactions?: includeTransactions | undefined\n      poll?: true | undefined\n      /** Polling frequency (in ms). Defaults to the client's pollingInterval config. */\n      pollingInterval?: number | undefined\n    }\n)\n\nexport type WatchBlocksReturnType = () => void\n\nexport type WatchBlocksErrorType =\n  | StringifyErrorType\n  | PollErrorType\n  | ErrorType\n\n/**\n * Watches and returns information for incoming blocks.\n *\n * - Docs: https://viem.sh/docs/actions/public/watchBlocks\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/blocks_watching-blocks\n * - JSON-RPC Methods:\n *   - When `poll: true`, calls [`eth_getBlockByNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getBlockByNumber) on a polling interval.\n *   - When `poll: false` & WebSocket Transport, uses a WebSocket subscription via [`eth_subscribe`](https://docs.alchemy.com/reference/eth-subscribe-polygon) and the `\"newHeads\"` event.\n *\n * @param client - Client to use\n * @param parameters - {@link WatchBlocksParameters}\n * @returns A function that can be invoked to stop watching for new block numbers. {@link WatchBlocksReturnType}\n *\n * @example\n * import { createPublicClient, watchBlocks, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const unwatch = watchBlocks(client, {\n *   onBlock: (block) => console.log(block),\n * })\n */\nexport function watchBlocks<\n  transport extends Transport,\n  chain extends Chain | undefined,\n  includeTransactions extends boolean = false,\n  blockTag extends BlockTag = 'latest',\n>(\n  client: Client<transport, chain>,\n  {\n    blockTag = client.experimental_blockTag ?? 'latest',\n    emitMissed = false,\n    emitOnBegin = false,\n    onBlock,\n    onError,\n    includeTransactions: includeTransactions_,\n    poll: poll_,\n    pollingInterval = client.pollingInterval,\n  }: WatchBlocksParameters<transport, chain, includeTransactions, blockTag>,\n): WatchBlocksReturnType {\n  const enablePolling = (() => {\n    if (typeof poll_ !== 'undefined') return poll_\n    if (\n      client.transport.type === 'webSocket' ||\n      client.transport.type === 'ipc'\n    )\n      return false\n    if (\n      client.transport.type === 'fallback' &&\n      (client.transport.transports[0].config.type === 'webSocket' ||\n        client.transport.transports[0].config.type === 'ipc')\n    )\n      return false\n    return true\n  })()\n  const includeTransactions = includeTransactions_ ?? false\n\n  let prevBlock:\n    | GetBlockReturnType<chain, false | includeTransactions, 'latest'>\n    | undefined\n\n  const pollBlocks = () => {\n    const observerId = stringify([\n      'watchBlocks',\n      client.uid,\n      blockTag,\n      emitMissed,\n      emitOnBegin,\n      includeTransactions,\n      pollingInterval,\n    ])\n\n    return observe(observerId, { onBlock, onError }, (emit) =>\n      poll(\n        async () => {\n          try {\n            const block = await getAction(\n              client,\n              getBlock,\n              'getBlock',\n            )({\n              blockTag,\n              includeTransactions,\n            })\n            if (block.number !== null && prevBlock?.number != null) {\n              // If the current block number is the same as the previous,\n              // we can skip.\n              if (block.number === prevBlock.number) return\n\n              // If we have missed out on some previous blocks, and the\n              // `emitMissed` flag is truthy, let's emit those blocks.\n              if (block.number - prevBlock.number > 1 && emitMissed) {\n                for (let i = prevBlock?.number + 1n; i < block.number; i++) {\n                  const block = (await getAction(\n                    client,\n                    getBlock,\n                    'getBlock',\n                  )({\n                    blockNumber: i,\n                    includeTransactions,\n                  })) as GetBlockReturnType<chain>\n                  emit.onBlock(block as any, prevBlock as any)\n                  prevBlock = block\n                }\n              }\n            }\n\n            if (\n              // If no previous block exists, emit.\n              prevBlock?.number == null ||\n              // If the block tag is \"pending\" with no block number, emit.\n              (blockTag === 'pending' && block?.number == null) ||\n              // If the next block number is greater than the previous block number, emit.\n              // We don't want to emit blocks in the past.\n              (block.number !== null && block.number > prevBlock.number)\n            ) {\n              emit.onBlock(block as any, prevBlock as any)\n              prevBlock = block as any\n            }\n          } catch (err) {\n            emit.onError?.(err as Error)\n          }\n        },\n        {\n          emitOnBegin,\n          interval: pollingInterval,\n        },\n      ),\n    )\n  }\n\n  const subscribeBlocks = () => {\n    let active = true\n    let emitFetched = true\n    let unsubscribe = () => (active = false)\n    ;(async () => {\n      try {\n        if (emitOnBegin) {\n          getAction(\n            client,\n            getBlock,\n            'getBlock',\n          )({\n            blockTag,\n            includeTransactions,\n          })\n            .then((block) => {\n              if (!active) return\n              if (!emitFetched) return\n              onBlock(block as any, undefined)\n              emitFetched = false\n            })\n            .catch(onError)\n        }\n\n        const transport = (() => {\n          if (client.transport.type === 'fallback') {\n            const transport = client.transport.transports.find(\n              (transport: ReturnType<Transport>) =>\n                transport.config.type === 'webSocket' ||\n                transport.config.type === 'ipc',\n            )\n            if (!transport) return client.transport\n            return transport.value\n          }\n          return client.transport\n        })()\n\n        const { unsubscribe: unsubscribe_ } = await transport.subscribe({\n          params: ['newHeads'],\n          async onData(data: any) {\n            if (!active) return\n            const block = (await getAction(\n              client,\n              getBlock,\n              'getBlock',\n            )({\n              blockNumber: data.result?.number,\n              includeTransactions,\n            }).catch(() => {})) as GetBlockReturnType<chain>\n            if (!active) return\n            onBlock(block as any, prevBlock as any)\n            emitFetched = false\n            prevBlock = block\n          },\n          onError(error: Error) {\n            onError?.(error)\n          },\n        })\n        unsubscribe = unsubscribe_\n        if (!active) unsubscribe()\n      } catch (err) {\n        onError?.(err as Error)\n      }\n    })()\n    return () => unsubscribe()\n  }\n\n  return enablePolling ? pollBlocks() : subscribeBlocks()\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}