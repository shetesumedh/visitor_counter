{"ast":null,"code":"import UniversalProvider from '@walletconnect/universal-provider';\nimport { ConstantsUtil, NetworkUtil, ParseUtil } from '@reown/appkit-common';\nimport { AccountController, AlertController, ApiController, AssetUtil, BlockchainApiController, ChainController, ConnectionController, ConnectorController, ConstantsUtil as CoreConstantsUtil, CoreHelperUtil, EnsController, EventsController, ModalController, OnRampController, OptionsController, PublicStateController, RouterController, SIWXUtil, SendController, SnackController, StorageUtil, ThemeController } from '@reown/appkit-controllers';\nimport { getChainsToDisconnect } from '@reown/appkit-controllers/utils';\nimport { WalletUtil } from '@reown/appkit-scaffold-ui/utils';\nimport { setColorTheme, setThemeVariables } from '@reown/appkit-ui';\nimport { CaipNetworksUtil, ErrorUtil, HelpersUtil, LoggerUtil, ConstantsUtil as UtilConstantsUtil } from '@reown/appkit-utils';\nimport { ProviderUtil } from '@reown/appkit-utils';\nimport { UniversalAdapter } from '../universal-adapter/client.js';\nimport { ConfigUtil } from '../utils/ConfigUtil.js';\nimport { WcConstantsUtil, WcHelpersUtil } from '../utils/index.js';\nexport class AppKitBaseClient {\n  constructor(options) {\n    this.chainNamespaces = [];\n    this.remoteFeatures = {};\n    this.reportedAlertErrors = {};\n    // -- Public Internal ---------------------------------------------------\n    this.getCaipNetwork = (chainNamespace, id) => {\n      if (chainNamespace) {\n        const caipNetworkWithId = ChainController.getNetworkData(chainNamespace)?.requestedCaipNetworks?.find(c => c.id === id);\n        if (caipNetworkWithId) {\n          return caipNetworkWithId;\n        }\n        const namespaceCaipNetwork = ChainController.getNetworkData(chainNamespace)?.caipNetwork;\n        if (namespaceCaipNetwork) {\n          return namespaceCaipNetwork;\n        }\n        const requestedCaipNetworks = ChainController.getRequestedCaipNetworks(chainNamespace);\n        return requestedCaipNetworks.filter(c => c.chainNamespace === chainNamespace)?.[0];\n      }\n      return ChainController.state.activeCaipNetwork || this.defaultCaipNetwork;\n    };\n    this.getCaipNetworkId = () => {\n      const network = this.getCaipNetwork();\n      if (network) {\n        return network.id;\n      }\n      return undefined;\n    };\n    this.getCaipNetworks = namespace => ChainController.getCaipNetworks(namespace);\n    this.getActiveChainNamespace = () => ChainController.state.activeChain;\n    this.setRequestedCaipNetworks = (requestedCaipNetworks, chain) => {\n      ChainController.setRequestedCaipNetworks(requestedCaipNetworks, chain);\n    };\n    this.getApprovedCaipNetworkIds = () => ChainController.getAllApprovedCaipNetworkIds();\n    this.getCaipAddress = chainNamespace => {\n      if (ChainController.state.activeChain === chainNamespace || !chainNamespace) {\n        return ChainController.state.activeCaipAddress;\n      }\n      return ChainController.getAccountProp('caipAddress', chainNamespace);\n    };\n    this.setClientId = clientId => {\n      BlockchainApiController.setClientId(clientId);\n    };\n    this.getProvider = namespace => ProviderUtil.getProvider(namespace);\n    this.getProviderType = namespace => ProviderUtil.getProviderId(namespace);\n    this.getPreferredAccountType = namespace => AccountController.state.preferredAccountTypes?.[namespace];\n    this.setCaipAddress = (caipAddress, chain) => {\n      AccountController.setCaipAddress(caipAddress, chain);\n      /**\n       * For the embedded use cases (Demo app), we should call close() when the user is connected to redirect them to Account View.\n       */\n      if (caipAddress && OptionsController.state.enableEmbedded) {\n        this.close();\n      }\n    };\n    this.setBalance = (balance, balanceSymbol, chain) => {\n      AccountController.setBalance(balance, balanceSymbol, chain);\n    };\n    this.setProfileName = (profileName, chain) => {\n      AccountController.setProfileName(profileName, chain);\n    };\n    this.setProfileImage = (profileImage, chain) => {\n      AccountController.setProfileImage(profileImage, chain);\n    };\n    this.setUser = (user, chain) => {\n      AccountController.setUser(user, chain);\n    };\n    this.resetAccount = chain => {\n      AccountController.resetAccount(chain);\n    };\n    this.setCaipNetwork = caipNetwork => {\n      ChainController.setActiveCaipNetwork(caipNetwork);\n    };\n    this.setCaipNetworkOfNamespace = (caipNetwork, chainNamespace) => {\n      ChainController.setChainNetworkData(chainNamespace, {\n        caipNetwork\n      });\n    };\n    this.setAllAccounts = (addresses, chain) => {\n      AccountController.setAllAccounts(addresses, chain);\n      OptionsController.setHasMultipleAddresses(addresses?.length > 1);\n    };\n    this.setStatus = (status, chain) => {\n      AccountController.setStatus(status, chain);\n      // If at least one namespace is connected, set the connection status\n      if (ConnectorController.isConnected()) {\n        StorageUtil.setConnectionStatus('connected');\n      } else {\n        StorageUtil.setConnectionStatus('disconnected');\n      }\n    };\n    this.getAddressByChainNamespace = chainNamespace => ChainController.getAccountProp('address', chainNamespace);\n    this.setConnectors = connectors => {\n      const allConnectors = [...ConnectorController.state.allConnectors, ...connectors];\n      ConnectorController.setConnectors(allConnectors);\n    };\n    this.setConnections = (connections, chainNamespace) => {\n      ConnectionController.setConnections(connections, chainNamespace);\n    };\n    this.fetchIdentity = request => BlockchainApiController.fetchIdentity(request);\n    this.getReownName = address => EnsController.getNamesForAddress(address);\n    this.getConnectors = () => ConnectorController.getConnectors();\n    this.getConnectorImage = connector => AssetUtil.getConnectorImage(connector);\n    this.setConnectedWalletInfo = (connectedWalletInfo, chain) => {\n      const type = ProviderUtil.getProviderId(chain);\n      const walletInfo = connectedWalletInfo ? {\n        ...connectedWalletInfo,\n        type\n      } : undefined;\n      AccountController.setConnectedWalletInfo(walletInfo, chain);\n    };\n    this.getIsConnectedState = () => Boolean(ChainController.state.activeCaipAddress);\n    this.addAddressLabel = (address, label, chain) => {\n      AccountController.addAddressLabel(address, label, chain);\n    };\n    this.removeAddressLabel = (address, chain) => {\n      AccountController.removeAddressLabel(address, chain);\n    };\n    this.getAddress = chainNamespace => {\n      if (ChainController.state.activeChain === chainNamespace || !chainNamespace) {\n        return AccountController.state.address;\n      }\n      return ChainController.getAccountProp('address', chainNamespace);\n    };\n    this.setApprovedCaipNetworksData = namespace => ChainController.setApprovedCaipNetworksData(namespace);\n    this.resetNetwork = namespace => {\n      ChainController.resetNetwork(namespace);\n    };\n    this.addConnector = connector => {\n      ConnectorController.addConnector(connector);\n    };\n    this.resetWcConnection = () => {\n      ConnectionController.resetWcConnection();\n    };\n    this.setAddressExplorerUrl = (addressExplorerUrl, chain) => {\n      AccountController.setAddressExplorerUrl(addressExplorerUrl, chain);\n    };\n    this.setSmartAccountDeployed = (isDeployed, chain) => {\n      AccountController.setSmartAccountDeployed(isDeployed, chain);\n    };\n    this.setSmartAccountEnabledNetworks = (smartAccountEnabledNetworks, chain) => {\n      ChainController.setSmartAccountEnabledNetworks(smartAccountEnabledNetworks, chain);\n    };\n    this.setPreferredAccountType = (preferredAccountType, chain) => {\n      AccountController.setPreferredAccountType(preferredAccountType, chain);\n    };\n    this.setEIP6963Enabled = enabled => {\n      OptionsController.setEIP6963Enabled(enabled);\n    };\n    this.handleUnsafeRPCRequest = () => {\n      if (this.isOpen()) {\n        // If we are on the modal but there is no transaction stack, close the modal\n        if (this.isTransactionStackEmpty()) {\n          return;\n        }\n        // Check if we need to replace or redirect\n        this.redirect('ApproveTransaction');\n      } else {\n        // If called from outside the modal, open ApproveTransaction\n        this.open({\n          view: 'ApproveTransaction'\n        });\n      }\n    };\n    this.options = options;\n    this.version = options.sdkVersion;\n    this.caipNetworks = this.extendCaipNetworks(options);\n    this.chainNamespaces = this.getChainNamespacesSet(options.adapters, this.caipNetworks);\n    this.defaultCaipNetwork = this.extendDefaultCaipNetwork(options);\n    this.chainAdapters = this.createAdapters(options.adapters);\n    this.readyPromise = this.initialize(options);\n  }\n  getChainNamespacesSet(adapters, caipNetworks) {\n    const adapterNamespaces = adapters?.map(adapter => adapter.namespace).filter(namespace => Boolean(namespace));\n    if (adapterNamespaces?.length) {\n      return [...new Set(adapterNamespaces)];\n    }\n    const networkNamespaces = caipNetworks?.map(network => network.chainNamespace);\n    return [...new Set(networkNamespaces)];\n  }\n  async initialize(options) {\n    this.initializeProjectSettings(options);\n    this.initControllers(options);\n    await this.initChainAdapters();\n    this.sendInitializeEvent(options);\n    await this.syncExistingConnection();\n    this.remoteFeatures = await ConfigUtil.fetchRemoteFeatures(options);\n    OptionsController.setRemoteFeatures(this.remoteFeatures);\n    if (this.remoteFeatures.onramp) {\n      OnRampController.setOnrampProviders(this.remoteFeatures.onramp);\n    }\n    // Check allowed origins only if email or social features are enabled\n    if (OptionsController.state.remoteFeatures?.email || Array.isArray(OptionsController.state.remoteFeatures?.socials) && OptionsController.state.remoteFeatures?.socials.length > 0) {\n      await this.checkAllowedOrigins();\n    }\n  }\n  async checkAllowedOrigins() {\n    const allowedOrigins = await ApiController.fetchAllowedOrigins();\n    if (allowedOrigins && CoreHelperUtil.isClient()) {\n      const currentOrigin = window.location.origin;\n      const isOriginAllowed = WcHelpersUtil.isOriginAllowed(currentOrigin, allowedOrigins, WcConstantsUtil.DEFAULT_ALLOWED_ANCESTORS);\n      if (!isOriginAllowed) {\n        AlertController.open(ErrorUtil.ALERT_ERRORS.INVALID_APP_CONFIGURATION, 'error');\n      }\n    } else {\n      AlertController.open(ErrorUtil.ALERT_ERRORS.PROJECT_ID_NOT_CONFIGURED, 'error');\n    }\n  }\n  sendInitializeEvent(options) {\n    const {\n      ...optionsCopy\n    } = options;\n    delete optionsCopy.adapters;\n    delete optionsCopy.universalProvider;\n    EventsController.sendEvent({\n      type: 'track',\n      event: 'INITIALIZE',\n      properties: {\n        ...optionsCopy,\n        networks: options.networks.map(n => n.id),\n        siweConfig: {\n          options: options.siweConfig?.options || {}\n        }\n      }\n    });\n  }\n  // -- Controllers initialization ---------------------------------------------------\n  initControllers(options) {\n    this.initializeOptionsController(options);\n    this.initializeChainController(options);\n    this.initializeThemeController(options);\n    this.initializeConnectionController(options);\n    this.initializeConnectorController();\n  }\n  initializeThemeController(options) {\n    if (options.themeMode) {\n      ThemeController.setThemeMode(options.themeMode);\n    }\n    if (options.themeVariables) {\n      ThemeController.setThemeVariables(options.themeVariables);\n    }\n  }\n  initializeChainController(options) {\n    if (!this.connectionControllerClient || !this.networkControllerClient) {\n      throw new Error('ConnectionControllerClient and NetworkControllerClient must be set');\n    }\n    ChainController.initialize(options.adapters ?? [], this.caipNetworks, {\n      connectionControllerClient: this.connectionControllerClient,\n      networkControllerClient: this.networkControllerClient\n    });\n    const network = this.getDefaultNetwork();\n    if (network) {\n      ChainController.setActiveCaipNetwork(network);\n    }\n  }\n  initializeConnectionController(options) {\n    ConnectionController.setWcBasic(options.basic ?? false);\n  }\n  initializeConnectorController() {\n    ConnectorController.initialize(this.chainNamespaces);\n  }\n  initializeProjectSettings(options) {\n    OptionsController.setProjectId(options.projectId);\n    OptionsController.setSdkVersion(options.sdkVersion);\n  }\n  initializeOptionsController(options) {\n    OptionsController.setDebug(options.debug !== false);\n    // On by default\n    OptionsController.setEnableWalletConnect(options.enableWalletConnect !== false);\n    OptionsController.setEnableWalletGuide(options.enableWalletGuide !== false);\n    OptionsController.setEnableWallets(options.enableWallets !== false);\n    OptionsController.setEIP6963Enabled(options.enableEIP6963 !== false);\n    OptionsController.setEnableNetworkSwitch(options.enableNetworkSwitch !== false);\n    OptionsController.setEnableAuthLogger(options.enableAuthLogger !== false);\n    OptionsController.setCustomRpcUrls(options.customRpcUrls);\n    OptionsController.setEnableEmbedded(options.enableEmbedded);\n    OptionsController.setAllWallets(options.allWallets);\n    OptionsController.setIncludeWalletIds(options.includeWalletIds);\n    OptionsController.setExcludeWalletIds(options.excludeWalletIds);\n    OptionsController.setFeaturedWalletIds(options.featuredWalletIds);\n    OptionsController.setTokens(options.tokens);\n    OptionsController.setTermsConditionsUrl(options.termsConditionsUrl);\n    OptionsController.setPrivacyPolicyUrl(options.privacyPolicyUrl);\n    OptionsController.setCustomWallets(options.customWallets);\n    OptionsController.setFeatures(options.features);\n    OptionsController.setAllowUnsupportedChain(options.allowUnsupportedChain);\n    OptionsController.setUniversalProviderConfigOverride(options.universalProviderConfigOverride);\n    OptionsController.setPreferUniversalLinks(options.experimental_preferUniversalLinks);\n    // Save option in controller\n    OptionsController.setDefaultAccountTypes(options.defaultAccountTypes);\n    // Get stored account types\n    const storedAccountTypes = StorageUtil.getPreferredAccountTypes() || {};\n    const defaultTypes = {\n      ...OptionsController.state.defaultAccountTypes,\n      ...storedAccountTypes\n    };\n    AccountController.setPreferredAccountTypes(defaultTypes);\n    const defaultMetaData = this.getDefaultMetaData();\n    if (!options.metadata && defaultMetaData) {\n      options.metadata = defaultMetaData;\n    }\n    OptionsController.setMetadata(options.metadata);\n    OptionsController.setDisableAppend(options.disableAppend);\n    OptionsController.setEnableEmbedded(options.enableEmbedded);\n    OptionsController.setSIWX(options.siwx);\n    if (!options.projectId) {\n      AlertController.open(ErrorUtil.ALERT_ERRORS.PROJECT_ID_NOT_CONFIGURED, 'error');\n      return;\n    }\n    const evmAdapter = options.adapters?.find(adapter => adapter.namespace === ConstantsUtil.CHAIN.EVM);\n    // Set the SIWE client for EVM chains\n    if (evmAdapter) {\n      if (options.siweConfig) {\n        if (options.siwx) {\n          throw new Error('Cannot set both `siweConfig` and `siwx` options');\n        }\n        OptionsController.setSIWX(options.siweConfig.mapToSIWX());\n      }\n    }\n  }\n  getDefaultMetaData() {\n    if (CoreHelperUtil.isClient()) {\n      return {\n        name: document.getElementsByTagName('title')?.[0]?.textContent || '',\n        description: document.querySelector('meta[property=\"og:description\"]')?.content || '',\n        url: window.location.origin,\n        icons: [document.querySelector('link[rel~=\"icon\"]')?.href || '']\n      };\n    }\n    return null;\n  }\n  // -- Network Initialization ---------------------------------------------------\n  setUnsupportedNetwork(chainId) {\n    const namespace = this.getActiveChainNamespace();\n    if (namespace) {\n      const unsupportedNetwork = CaipNetworksUtil.getUnsupportedNetwork(`${namespace}:${chainId}`);\n      ChainController.setActiveCaipNetwork(unsupportedNetwork);\n    }\n  }\n  getDefaultNetwork() {\n    return CaipNetworksUtil.getCaipNetworkFromStorage(this.defaultCaipNetwork);\n  }\n  extendCaipNetwork(network, options) {\n    const extendedNetwork = CaipNetworksUtil.extendCaipNetwork(network, {\n      customNetworkImageUrls: options.chainImages,\n      projectId: options.projectId\n    });\n    return extendedNetwork;\n  }\n  extendCaipNetworks(options) {\n    const extendedNetworks = CaipNetworksUtil.extendCaipNetworks(options.networks, {\n      customNetworkImageUrls: options.chainImages,\n      customRpcUrls: options.customRpcUrls,\n      projectId: options.projectId\n    });\n    return extendedNetworks;\n  }\n  extendDefaultCaipNetwork(options) {\n    const defaultNetwork = options.networks.find(n => n.id === options.defaultNetwork?.id);\n    const extendedNetwork = defaultNetwork ? CaipNetworksUtil.extendCaipNetwork(defaultNetwork, {\n      customNetworkImageUrls: options.chainImages,\n      customRpcUrls: options.customRpcUrls,\n      projectId: options.projectId\n    }) : undefined;\n    return extendedNetwork;\n  }\n  async disconnectNamespace(namespace) {\n    try {\n      const adapter = this.getAdapter(namespace);\n      const provider = ProviderUtil.getProvider(namespace);\n      const providerType = ProviderUtil.getProviderId(namespace);\n      const {\n        caipAddress\n      } = ChainController.getAccountData(namespace) || {};\n      this.setLoading(true, namespace);\n      if (caipAddress && adapter?.disconnect) {\n        await adapter.disconnect({\n          provider,\n          providerType\n        });\n      }\n      StorageUtil.removeConnectedNamespace(namespace);\n      ProviderUtil.resetChain(namespace);\n      this.setUser(undefined, namespace);\n      this.setStatus('disconnected', namespace);\n      this.setConnectedWalletInfo(undefined, namespace);\n      ConnectorController.removeConnectorId(namespace);\n      ChainController.resetAccount(namespace);\n      ChainController.resetNetwork(namespace);\n      this.setLoading(false, namespace);\n    } catch (error) {\n      this.setLoading(false, namespace);\n      throw new Error(`Failed to disconnect chain ${namespace}: ${error.message}`);\n    }\n  }\n  // -- Client Initialization ---------------------------------------------------\n  createClients() {\n    this.connectionControllerClient = {\n      connectWalletConnect: async () => {\n        const activeChain = ChainController.state.activeChain;\n        const adapter = this.getAdapter(activeChain);\n        const chainId = this.getCaipNetwork(activeChain)?.id;\n        if (!adapter) {\n          throw new Error('Adapter not found');\n        }\n        const result = await adapter.connectWalletConnect(chainId);\n        this.close();\n        this.setClientId(result?.clientId || null);\n        StorageUtil.setConnectedNamespaces([...ChainController.state.chains.keys()]);\n        this.chainNamespaces.forEach(namespace => {\n          ConnectorController.setConnectorId(UtilConstantsUtil.CONNECTOR_TYPE_WALLET_CONNECT, namespace);\n        });\n        await this.syncWalletConnectAccount();\n      },\n      connectExternal: async ({\n        id,\n        info,\n        type,\n        provider,\n        chain,\n        caipNetwork,\n        socialUri\n      }) => {\n        const activeChain = ChainController.state.activeChain;\n        const chainToUse = chain || activeChain;\n        const adapter = this.getAdapter(chainToUse);\n        if (chain && chain !== activeChain && !caipNetwork) {\n          const toConnectNetwork = this.getCaipNetworks().find(network => network.chainNamespace === chain);\n          if (toConnectNetwork) {\n            this.setCaipNetwork(toConnectNetwork);\n          }\n        }\n        if (!adapter) {\n          throw new Error('Adapter not found');\n        }\n        const fallbackCaipNetwork = this.getCaipNetwork(chainToUse);\n        const res = await adapter.connect({\n          id,\n          info,\n          type,\n          provider,\n          socialUri,\n          chainId: caipNetwork?.id || fallbackCaipNetwork?.id,\n          rpcUrl: caipNetwork?.rpcUrls?.default?.http?.[0] || fallbackCaipNetwork?.rpcUrls?.default?.http?.[0]\n        });\n        if (!res) {\n          return;\n        }\n        StorageUtil.addConnectedNamespace(chainToUse);\n        this.syncProvider({\n          ...res,\n          chainNamespace: chainToUse\n        });\n        /*\n         * SyncAllAccounts already set the accounts in the state\n         * and its more efficient to use the stored accounts rather than fetching them again\n         */\n        const syncedAccounts = AccountController.state.allAccounts;\n        const {\n          accounts\n        } = syncedAccounts?.length > 0 ?\n        // eslint-disable-next-line line-comment-position\n        // Using new array else the accounts will have the same reference and react will not re-render\n        {\n          accounts: [...syncedAccounts]\n        } : await adapter.getAccounts({\n          namespace: chainToUse,\n          id\n        });\n        this.setAllAccounts(accounts, chainToUse);\n        this.setStatus('connected', chainToUse);\n        this.syncConnectedWalletInfo(chainToUse);\n      },\n      reconnectExternal: async ({\n        id,\n        info,\n        type,\n        provider\n      }) => {\n        const namespace = ChainController.state.activeChain;\n        const adapter = this.getAdapter(namespace);\n        if (adapter?.reconnect) {\n          await adapter?.reconnect({\n            id,\n            info,\n            type,\n            provider,\n            chainId: this.getCaipNetwork()?.id\n          });\n          StorageUtil.addConnectedNamespace(namespace);\n          this.syncConnectedWalletInfo(namespace);\n        }\n      },\n      disconnect: async chainNamespace => {\n        const chainsToDisconnect = getChainsToDisconnect(chainNamespace);\n        try {\n          // Reset send state when disconnecting\n          const disconnectResults = await Promise.allSettled(chainsToDisconnect.map(async ([ns]) => this.disconnectNamespace(ns)));\n          SendController.resetSend();\n          ConnectionController.resetWcConnection();\n          await SIWXUtil.clearSessions();\n          ConnectorController.setFilterByNamespace(undefined);\n          const failures = disconnectResults.filter(result => result.status === 'rejected');\n          if (failures.length > 0) {\n            throw new Error(failures.map(f => f.reason.message).join(', '));\n          }\n          StorageUtil.deleteConnectedSocialProvider();\n          EventsController.sendEvent({\n            type: 'track',\n            event: 'DISCONNECT_SUCCESS',\n            properties: {\n              namespace: chainNamespace || 'all'\n            }\n          });\n        } catch (error) {\n          throw new Error(`Failed to disconnect chains: ${error.message}`);\n        }\n      },\n      checkInstalled: ids => {\n        if (!ids) {\n          return Boolean(window.ethereum);\n        }\n        return ids.some(id => Boolean(window.ethereum?.[String(id)]));\n      },\n      signMessage: async message => {\n        const adapter = this.getAdapter(ChainController.state.activeChain);\n        const result = await adapter?.signMessage({\n          message,\n          address: AccountController.state.address,\n          provider: ProviderUtil.getProvider(ChainController.state.activeChain)\n        });\n        return result?.signature || '';\n      },\n      sendTransaction: async args => {\n        const namespace = args.chainNamespace;\n        if (CoreConstantsUtil.SEND_SUPPORTED_NAMESPACES.includes(namespace)) {\n          const adapter = this.getAdapter(ChainController.state.activeChain);\n          const provider = ProviderUtil.getProvider(namespace);\n          const result = await adapter?.sendTransaction({\n            ...args,\n            caipNetwork: this.getCaipNetwork(),\n            provider\n          });\n          return result?.hash || '';\n        }\n        return '';\n      },\n      estimateGas: async args => {\n        if (args.chainNamespace === ConstantsUtil.CHAIN.EVM) {\n          const adapter = this.getAdapter(ChainController.state.activeChain);\n          const provider = ProviderUtil.getProvider(ChainController.state.activeChain);\n          const caipNetwork = this.getCaipNetwork();\n          if (!caipNetwork) {\n            throw new Error('CaipNetwork is undefined');\n          }\n          const result = await adapter?.estimateGas({\n            ...args,\n            provider,\n            caipNetwork\n          });\n          return result?.gas || 0n;\n        }\n        return 0n;\n      },\n      getEnsAvatar: async () => {\n        await this.syncIdentity({\n          address: AccountController.state.address,\n          chainId: Number(this.getCaipNetwork()?.id),\n          chainNamespace: ChainController.state.activeChain\n        });\n        return AccountController.state.profileImage || false;\n      },\n      getEnsAddress: async name => await WcHelpersUtil.resolveReownName(name),\n      writeContract: async args => {\n        const adapter = this.getAdapter(ChainController.state.activeChain);\n        const caipNetwork = this.getCaipNetwork();\n        const caipAddress = this.getCaipAddress();\n        const provider = ProviderUtil.getProvider(ChainController.state.activeChain);\n        if (!caipNetwork || !caipAddress) {\n          throw new Error('CaipNetwork or CaipAddress is undefined');\n        }\n        const result = await adapter?.writeContract({\n          ...args,\n          caipNetwork,\n          provider,\n          caipAddress\n        });\n        return result?.hash;\n      },\n      parseUnits: (value, decimals) => {\n        const adapter = this.getAdapter(ChainController.state.activeChain);\n        return adapter?.parseUnits({\n          value,\n          decimals\n        }) ?? 0n;\n      },\n      formatUnits: (value, decimals) => {\n        const adapter = this.getAdapter(ChainController.state.activeChain);\n        return adapter?.formatUnits({\n          value,\n          decimals\n        }) ?? '0';\n      },\n      getCapabilities: async params => {\n        const adapter = this.getAdapter(ChainController.state.activeChain);\n        return await adapter?.getCapabilities(params);\n      },\n      grantPermissions: async params => {\n        const adapter = this.getAdapter(ChainController.state.activeChain);\n        return await adapter?.grantPermissions(params);\n      },\n      revokePermissions: async params => {\n        const adapter = this.getAdapter(ChainController.state.activeChain);\n        if (adapter?.revokePermissions) {\n          return await adapter.revokePermissions(params);\n        }\n        return '0x';\n      },\n      walletGetAssets: async params => {\n        const adapter = this.getAdapter(ChainController.state.activeChain);\n        return (await adapter?.walletGetAssets(params)) ?? {};\n      },\n      updateBalance: namespace => {\n        const caipNetwork = this.getCaipNetwork(namespace);\n        if (!caipNetwork || !AccountController.state.address) {\n          return;\n        }\n        this.updateNativeBalance(AccountController.state.address, caipNetwork?.id, namespace);\n      }\n    };\n    this.networkControllerClient = {\n      switchCaipNetwork: async caipNetwork => await this.switchCaipNetwork(caipNetwork),\n      // eslint-disable-next-line @typescript-eslint/require-await\n      getApprovedCaipNetworksData: async () => this.getApprovedCaipNetworksData()\n    };\n    ConnectionController.setClient(this.connectionControllerClient);\n  }\n  getApprovedCaipNetworksData() {\n    const providerType = ProviderUtil.getProviderId(ChainController.state.activeChain);\n    if (providerType === UtilConstantsUtil.CONNECTOR_TYPE_WALLET_CONNECT) {\n      const namespaces = this.universalProvider?.session?.namespaces;\n      return {\n        /*\n         * MetaMask Wallet only returns 1 namespace in the session object. This makes it imposible\n         * to switch to other networks. Setting supportsAllNetworks to true for MetaMask Wallet\n         * will make it possible to switch to other networks.\n         */\n        supportsAllNetworks: this.universalProvider?.session?.peer?.metadata.name === 'MetaMask Wallet',\n        approvedCaipNetworkIds: this.getChainsFromNamespaces(namespaces)\n      };\n    }\n    return {\n      supportsAllNetworks: true,\n      approvedCaipNetworkIds: []\n    };\n  }\n  async switchCaipNetwork(caipNetwork) {\n    if (!caipNetwork) {\n      return;\n    }\n    const networkNamespace = caipNetwork.chainNamespace;\n    const namespaceAddress = this.getAddressByChainNamespace(caipNetwork.chainNamespace);\n    if (namespaceAddress) {\n      const provider = ProviderUtil.getProvider(networkNamespace);\n      const providerType = ProviderUtil.getProviderId(networkNamespace);\n      if (caipNetwork.chainNamespace === ChainController.state.activeChain) {\n        const adapter = this.getAdapter(networkNamespace);\n        await adapter?.switchNetwork({\n          caipNetwork,\n          provider,\n          providerType\n        });\n      } else {\n        this.setCaipNetwork(caipNetwork);\n        if (providerType === UtilConstantsUtil.CONNECTOR_TYPE_WALLET_CONNECT) {\n          this.syncWalletConnectAccount();\n        } else {\n          const address = this.getAddressByChainNamespace(networkNamespace);\n          if (address) {\n            this.syncAccount({\n              address,\n              chainId: caipNetwork.id,\n              chainNamespace: networkNamespace\n            });\n          }\n        }\n      }\n    } else {\n      this.setCaipNetwork(caipNetwork);\n    }\n  }\n  getChainsFromNamespaces(namespaces = {}) {\n    return Object.values(namespaces).flatMap(namespace => {\n      const chains = namespace.chains || [];\n      const accountsChains = namespace.accounts.map(account => {\n        const {\n          chainId,\n          chainNamespace\n        } = ParseUtil.parseCaipAddress(account);\n        return `${chainNamespace}:${chainId}`;\n      });\n      return Array.from(new Set([...chains, ...accountsChains]));\n    });\n  }\n  // -- Adapter Initialization ---------------------------------------------------\n  createAdapters(blueprints) {\n    this.createClients();\n    return this.chainNamespaces.reduce((adapters, namespace) => {\n      const blueprint = blueprints?.find(b => b.namespace === namespace);\n      if (blueprint) {\n        blueprint.construct({\n          namespace,\n          projectId: this.options?.projectId,\n          networks: this.getCaipNetworks()\n        });\n        adapters[namespace] = blueprint;\n      } else {\n        adapters[namespace] = new UniversalAdapter({\n          namespace: namespace,\n          networks: this.getCaipNetworks()\n        });\n      }\n      return adapters;\n      // eslint-disable-next-line @typescript-eslint/prefer-reduce-type-parameter\n    }, {});\n  }\n  async initChainAdapter(namespace) {\n    this.onConnectors(namespace);\n    this.listenAdapter(namespace);\n    await this.chainAdapters?.[namespace].syncConnectors(this.options, this);\n    await this.createUniversalProviderForAdapter(namespace);\n  }\n  async initChainAdapters() {\n    await Promise.all(this.chainNamespaces.map(async namespace => {\n      await this.initChainAdapter(namespace);\n    }));\n  }\n  onConnectors(chainNamespace) {\n    const adapter = this.getAdapter(chainNamespace);\n    adapter?.on('connectors', this.setConnectors.bind(this));\n  }\n  listenAdapter(chainNamespace) {\n    const adapter = this.getAdapter(chainNamespace);\n    if (!adapter) {\n      return;\n    }\n    const connectionStatus = StorageUtil.getConnectionStatus();\n    if (connectionStatus === 'connected') {\n      this.setStatus('connecting', chainNamespace);\n    } else if (connectionStatus === 'disconnected') {\n      /*\n       * Address cache is kept after disconnecting from the wallet\n       * but should be cleared if appkit is launched in disconnected state\n       */\n      StorageUtil.clearAddressCache();\n      this.setStatus(connectionStatus, chainNamespace);\n    } else {\n      this.setStatus(connectionStatus, chainNamespace);\n    }\n    adapter.on('switchNetwork', ({\n      address,\n      chainId\n    }) => {\n      const caipNetwork = this.getCaipNetworks().find(n => n.id === chainId || n.caipNetworkId === chainId);\n      const isSameNamespace = ChainController.state.activeChain === chainNamespace;\n      const accountAddress = ChainController.getAccountProp('address', chainNamespace);\n      if (caipNetwork) {\n        const account = isSameNamespace && address ? address : accountAddress;\n        if (account) {\n          this.syncAccount({\n            address: account,\n            chainId: caipNetwork.id,\n            chainNamespace\n          });\n        }\n      } else {\n        this.setUnsupportedNetwork(chainId);\n      }\n    });\n    adapter.on('disconnect', this.disconnect.bind(this, chainNamespace));\n    adapter.on('connections', connections => {\n      this.setConnections(connections, chainNamespace);\n    });\n    adapter.on('pendingTransactions', () => {\n      const address = AccountController.state.address;\n      const activeCaipNetwork = ChainController.state.activeCaipNetwork;\n      if (!address || !activeCaipNetwork?.id) {\n        return;\n      }\n      this.updateNativeBalance(address, activeCaipNetwork.id, activeCaipNetwork.chainNamespace);\n    });\n    adapter.on('accountChanged', ({\n      address,\n      chainId\n    }) => {\n      const isActiveChain = ChainController.state.activeChain === chainNamespace;\n      if (isActiveChain && chainId) {\n        this.syncAccount({\n          address,\n          chainId,\n          chainNamespace\n        });\n      } else if (isActiveChain && ChainController.state.activeCaipNetwork?.id) {\n        this.syncAccount({\n          address,\n          chainId: ChainController.state.activeCaipNetwork?.id,\n          chainNamespace\n        });\n      } else {\n        this.syncAccountInfo(address, chainId, chainNamespace);\n      }\n      this.syncAllAccounts(chainNamespace);\n    });\n  }\n  async createUniversalProviderForAdapter(chainNamespace) {\n    await this.getUniversalProvider();\n    if (this.universalProvider) {\n      this.chainAdapters?.[chainNamespace]?.setUniversalProvider?.(this.universalProvider);\n    }\n  }\n  // -- Connection Sync ---------------------------------------------------\n  async syncExistingConnection() {\n    await Promise.allSettled(this.chainNamespaces.map(namespace => this.syncNamespaceConnection(namespace)));\n  }\n  async syncNamespaceConnection(namespace) {\n    try {\n      if (namespace === ConstantsUtil.CHAIN.EVM && CoreHelperUtil.isSafeApp()) {\n        ConnectorController.setConnectorId(ConstantsUtil.CONNECTOR_ID.SAFE, namespace);\n      }\n      const connectorId = ConnectorController.getConnectorId(namespace);\n      this.setStatus('connecting', namespace);\n      switch (connectorId) {\n        case ConstantsUtil.CONNECTOR_ID.WALLET_CONNECT:\n          await this.syncWalletConnectAccount();\n          break;\n        case ConstantsUtil.CONNECTOR_ID.AUTH:\n          // Handled during initialization of adapters' auth provider\n          break;\n        default:\n          await this.syncAdapterConnection(namespace);\n      }\n    } catch (err) {\n      console.warn(\"AppKit couldn't sync existing connection\", err);\n      this.setStatus('disconnected', namespace);\n    }\n  }\n  async syncAdapterConnection(namespace) {\n    const adapter = this.getAdapter(namespace);\n    const connectorId = ConnectorController.getConnectorId(namespace);\n    const caipNetwork = this.getCaipNetwork(namespace);\n    const connectors = ConnectorController.getConnectors(namespace);\n    const connector = connectors.find(c => c.id === connectorId);\n    try {\n      if (!adapter || !connector) {\n        throw new Error(`Adapter or connector not found for namespace ${namespace}`);\n      }\n      if (!caipNetwork?.id) {\n        throw new Error('CaipNetwork not found');\n      }\n      const connection = await adapter?.syncConnection({\n        namespace,\n        id: connector.id,\n        chainId: caipNetwork.id,\n        rpcUrl: caipNetwork?.rpcUrls?.default?.http?.[0]\n      });\n      if (connection) {\n        const accounts = await adapter?.getAccounts({\n          namespace,\n          id: connector.id\n        });\n        if (accounts && accounts.accounts.length > 0) {\n          this.setAllAccounts(accounts.accounts, namespace);\n        } else {\n          this.setAllAccounts([CoreHelperUtil.createAccount(namespace, connection.address, 'eoa')], namespace);\n        }\n        this.syncProvider({\n          ...connection,\n          chainNamespace: namespace\n        });\n        await this.syncAccount({\n          ...connection,\n          chainNamespace: namespace\n        });\n        this.setStatus('connected', namespace);\n      } else {\n        this.setStatus('disconnected', namespace);\n      }\n    } catch (e) {\n      this.setStatus('disconnected', namespace);\n    }\n  }\n  async syncWalletConnectAccount() {\n    const syncTasks = this.chainNamespaces.map(async chainNamespace => {\n      const adapter = this.getAdapter(chainNamespace);\n      const namespaceAccounts = this.universalProvider?.session?.namespaces?.[chainNamespace]?.accounts || [];\n      // We try and find the address for this network in the session object.\n      const activeChainId = ChainController.state.activeCaipNetwork?.id;\n      const sessionAddress = namespaceAccounts.find(account => {\n        const {\n          chainId\n        } = ParseUtil.parseCaipAddress(account);\n        return chainId === activeChainId?.toString();\n      }) || namespaceAccounts[0];\n      if (sessionAddress) {\n        const caipAddress = ParseUtil.validateCaipAddress(sessionAddress);\n        const {\n          chainId,\n          address\n        } = ParseUtil.parseCaipAddress(caipAddress);\n        ProviderUtil.setProviderId(chainNamespace, UtilConstantsUtil.CONNECTOR_TYPE_WALLET_CONNECT);\n        if (this.caipNetworks && ChainController.state.activeCaipNetwork && adapter?.namespace !== ConstantsUtil.CHAIN.EVM) {\n          const provider = adapter?.getWalletConnectProvider({\n            caipNetworks: this.getCaipNetworks(),\n            provider: this.universalProvider,\n            activeCaipNetwork: ChainController.state.activeCaipNetwork\n          });\n          ProviderUtil.setProvider(chainNamespace, provider);\n        } else {\n          ProviderUtil.setProvider(chainNamespace, this.universalProvider);\n        }\n        ConnectorController.setConnectorId(ConstantsUtil.CONNECTOR_ID.WALLET_CONNECT, chainNamespace);\n        StorageUtil.addConnectedNamespace(chainNamespace);\n        this.syncWalletConnectAccounts(chainNamespace);\n        await this.syncAccount({\n          address,\n          chainId,\n          chainNamespace\n        });\n      } else {\n        this.setStatus('disconnected', chainNamespace);\n      }\n      this.syncConnectedWalletInfo(chainNamespace);\n      await ChainController.setApprovedCaipNetworksData(chainNamespace);\n    });\n    await Promise.all(syncTasks);\n  }\n  syncWalletConnectAccounts(chainNamespace) {\n    const addresses = this.universalProvider?.session?.namespaces?.[chainNamespace]?.accounts?.map(account => {\n      const {\n        address\n      } = ParseUtil.parseCaipAddress(account);\n      return address;\n    }).filter((address, index, self) => self.indexOf(address) === index);\n    if (addresses) {\n      this.setAllAccounts(addresses.map(address => CoreHelperUtil.createAccount(chainNamespace, address, chainNamespace === 'bip122' ? 'payment' : 'eoa')), chainNamespace);\n    }\n  }\n  syncProvider({\n    type,\n    provider,\n    id,\n    chainNamespace\n  }) {\n    ProviderUtil.setProviderId(chainNamespace, type);\n    ProviderUtil.setProvider(chainNamespace, provider);\n    ConnectorController.setConnectorId(id, chainNamespace);\n  }\n  async syncAllAccounts(namespace) {\n    const connectorId = ConnectorController.getConnectorId(namespace);\n    if (!connectorId) {\n      return;\n    }\n    const adapter = this.getAdapter(namespace);\n    const accounts = await adapter?.getAccounts({\n      namespace,\n      id: connectorId\n    });\n    if (accounts && accounts.accounts.length > 0) {\n      this.setAllAccounts(accounts.accounts, namespace);\n    }\n  }\n  async syncAccount(params) {\n    const isActiveNamespace = params.chainNamespace === ChainController.state.activeChain;\n    const networkOfChain = ChainController.getCaipNetworkByNamespace(params.chainNamespace, params.chainId);\n    const {\n      address,\n      chainId,\n      chainNamespace\n    } = params;\n    const {\n      chainId: activeChainId\n    } = StorageUtil.getActiveNetworkProps();\n    const chainIdToUse = chainId || activeChainId;\n    const isUnsupportedNetwork = ChainController.state.activeCaipNetwork?.name === ConstantsUtil.UNSUPPORTED_NETWORK_NAME;\n    const shouldSupportAllNetworks = ChainController.getNetworkProp('supportsAllNetworks', chainNamespace);\n    this.setStatus('connected', chainNamespace);\n    if (isUnsupportedNetwork && !shouldSupportAllNetworks) {\n      return;\n    }\n    if (chainIdToUse) {\n      let caipNetwork = this.getCaipNetworks().find(n => n.id.toString() === chainIdToUse.toString());\n      let fallbackCaipNetwork = this.getCaipNetworks().find(n => n.chainNamespace === chainNamespace);\n      // If doesn't support all networks, we need to use approved networks\n      if (!shouldSupportAllNetworks && !caipNetwork && !fallbackCaipNetwork) {\n        // Connection can be requested for a chain that is not supported by the wallet so we need to use approved networks here\n        const caipNetworkIds = this.getApprovedCaipNetworkIds() || [];\n        const caipNetworkId = caipNetworkIds.find(id => ParseUtil.parseCaipNetworkId(id)?.chainId === chainIdToUse.toString());\n        const fallBackCaipNetworkId = caipNetworkIds.find(id => ParseUtil.parseCaipNetworkId(id)?.chainNamespace === chainNamespace);\n        caipNetwork = this.getCaipNetworks().find(n => n.caipNetworkId === caipNetworkId);\n        fallbackCaipNetwork = this.getCaipNetworks().find(n => n.caipNetworkId === fallBackCaipNetworkId ||\n        // This is a workaround used in Solana network to support deprecated caipNetworkId\n        'deprecatedCaipNetworkId' in n && n.deprecatedCaipNetworkId === fallBackCaipNetworkId);\n      }\n      const network = caipNetwork || fallbackCaipNetwork;\n      if (network?.chainNamespace === ChainController.state.activeChain) {\n        // If the network is unsupported and the user doesn't allow unsupported chains, we show the unsupported chain UI\n        if (OptionsController.state.enableNetworkSwitch && !OptionsController.state.allowUnsupportedChain && ChainController.state.activeCaipNetwork?.name === ConstantsUtil.UNSUPPORTED_NETWORK_NAME) {\n          ChainController.showUnsupportedChainUI();\n        } else {\n          this.setCaipNetwork(network);\n        }\n      } else if (!isActiveNamespace) {\n        if (networkOfChain) {\n          this.setCaipNetworkOfNamespace(networkOfChain, chainNamespace);\n        }\n      }\n      this.syncConnectedWalletInfo(chainNamespace);\n      if (!HelpersUtil.isLowerCaseMatch(address, AccountController.state.address)) {\n        this.syncAccountInfo(address, network?.id, chainNamespace);\n      }\n      if (isActiveNamespace) {\n        await this.syncBalance({\n          address,\n          chainId: network?.id,\n          chainNamespace\n        });\n      } else {\n        await this.syncBalance({\n          address,\n          chainId: networkOfChain?.id,\n          chainNamespace\n        });\n      }\n    }\n  }\n  async syncAccountInfo(address, chainId, chainNamespace) {\n    const caipAddress = this.getCaipAddress(chainNamespace);\n    const newChainId = chainId || caipAddress?.split(':')[1];\n    if (!newChainId) {\n      return;\n    }\n    const newCaipAddress = `${chainNamespace}:${newChainId}:${address}`;\n    this.setCaipAddress(newCaipAddress, chainNamespace);\n    await this.syncIdentity({\n      address,\n      chainId: newChainId,\n      chainNamespace\n    });\n  }\n  async syncReownName(address, chainNamespace) {\n    try {\n      const registeredWcNames = await this.getReownName(address);\n      if (registeredWcNames[0]) {\n        const wcName = registeredWcNames[0];\n        this.setProfileName(wcName.name, chainNamespace);\n      } else {\n        this.setProfileName(null, chainNamespace);\n      }\n    } catch {\n      this.setProfileName(null, chainNamespace);\n    }\n  }\n  syncConnectedWalletInfo(chainNamespace) {\n    const connectorId = ConnectorController.getConnectorId(chainNamespace);\n    const providerType = ProviderUtil.getProviderId(chainNamespace);\n    if (providerType === UtilConstantsUtil.CONNECTOR_TYPE_ANNOUNCED || providerType === UtilConstantsUtil.CONNECTOR_TYPE_INJECTED) {\n      if (connectorId) {\n        const connector = this.getConnectors().find(c => c.id === connectorId);\n        if (connector) {\n          const {\n            info,\n            name,\n            imageUrl\n          } = connector;\n          const icon = imageUrl || this.getConnectorImage(connector);\n          this.setConnectedWalletInfo({\n            name,\n            icon,\n            ...info\n          }, chainNamespace);\n        }\n      }\n    } else if (providerType === UtilConstantsUtil.CONNECTOR_TYPE_WALLET_CONNECT) {\n      const provider = ProviderUtil.getProvider(chainNamespace);\n      if (provider?.session) {\n        this.setConnectedWalletInfo({\n          ...provider.session.peer.metadata,\n          name: provider.session.peer.metadata.name,\n          icon: provider.session.peer.metadata.icons?.[0]\n        }, chainNamespace);\n      }\n    } else if (connectorId) {\n      if (connectorId === ConstantsUtil.CONNECTOR_ID.COINBASE) {\n        const connector = this.getConnectors().find(c => c.id === ConstantsUtil.CONNECTOR_ID.COINBASE);\n        this.setConnectedWalletInfo({\n          name: 'Coinbase Wallet',\n          icon: this.getConnectorImage(connector)\n        }, chainNamespace);\n      }\n    }\n  }\n  async syncBalance(params) {\n    const caipNetwork = NetworkUtil.getNetworksByNamespace(this.getCaipNetworks(), params.chainNamespace).find(n => n.id.toString() === params.chainId?.toString());\n    if (!caipNetwork || !params.chainId) {\n      return;\n    }\n    await this.updateNativeBalance(params.address, params.chainId, params.chainNamespace);\n  }\n  async ready() {\n    await this.readyPromise;\n  }\n  async updateNativeBalance(address, chainId, namespace) {\n    const adapter = this.getAdapter(namespace);\n    const caipNetwork = ChainController.getCaipNetworkByNamespace(namespace, chainId);\n    if (adapter) {\n      const balance = await adapter.getBalance({\n        address,\n        chainId,\n        caipNetwork,\n        tokens: this.options.tokens\n      });\n      this.setBalance(balance.balance, balance.symbol, namespace);\n      return balance;\n    }\n    return undefined;\n  }\n  // -- Universal Provider ---------------------------------------------------\n  async initializeUniversalAdapter() {\n    const logger = LoggerUtil.createLogger((error, ...args) => {\n      if (error) {\n        this.handleAlertError(error);\n      }\n      // eslint-disable-next-line no-console\n      console.error(...args);\n    });\n    const universalProviderOptions = {\n      projectId: this.options?.projectId,\n      metadata: {\n        name: this.options?.metadata ? this.options?.metadata.name : '',\n        description: this.options?.metadata ? this.options?.metadata.description : '',\n        url: this.options?.metadata ? this.options?.metadata.url : '',\n        icons: this.options?.metadata ? this.options?.metadata.icons : ['']\n      },\n      logger\n    };\n    OptionsController.setManualWCControl(Boolean(this.options?.manualWCControl));\n    this.universalProvider = this.options.universalProvider ?? (await UniversalProvider.init(universalProviderOptions));\n    this.listenWalletConnect();\n  }\n  listenWalletConnect() {\n    if (this.universalProvider) {\n      this.universalProvider.on('display_uri', uri => {\n        ConnectionController.setUri(uri);\n      });\n      this.universalProvider.on('connect', ConnectionController.finalizeWcConnection);\n      this.universalProvider.on('disconnect', () => {\n        this.chainNamespaces.forEach(namespace => {\n          this.resetAccount(namespace);\n        });\n        ConnectionController.resetWcConnection();\n      });\n      this.universalProvider.on('chainChanged', chainId => {\n        // eslint-disable-next-line eqeqeq\n        const caipNetwork = this.getCaipNetworks().find(c => c.id == chainId);\n        const currentCaipNetwork = this.getCaipNetwork();\n        if (!caipNetwork) {\n          this.setUnsupportedNetwork(chainId);\n          return;\n        }\n        if (currentCaipNetwork?.id !== caipNetwork?.id) {\n          this.setCaipNetwork(caipNetwork);\n        }\n      });\n      this.universalProvider.on('session_event', callbackData => {\n        if (WcHelpersUtil.isSessionEventData(callbackData)) {\n          const {\n            name,\n            data\n          } = callbackData.params.event;\n          if (name === 'accountsChanged' && Array.isArray(data) && CoreHelperUtil.isCaipAddress(data[0])) {\n            this.syncAccount(ParseUtil.parseCaipAddress(data[0]));\n          }\n        }\n      });\n    }\n  }\n  createUniversalProvider() {\n    if (!this.universalProviderInitPromise && CoreHelperUtil.isClient() && this.options?.projectId) {\n      this.universalProviderInitPromise = this.initializeUniversalAdapter();\n    }\n    return this.universalProviderInitPromise;\n  }\n  async getUniversalProvider() {\n    if (!this.universalProvider) {\n      try {\n        await this.createUniversalProvider();\n      } catch (err) {\n        EventsController.sendEvent({\n          type: 'error',\n          event: 'INTERNAL_SDK_ERROR',\n          properties: {\n            errorType: 'UniversalProviderInitError',\n            errorMessage: err instanceof Error ? err.message : 'Unknown',\n            uncaught: false\n          }\n        });\n        // eslint-disable-next-line no-console\n        console.error('AppKit:getUniversalProvider - Cannot create provider', err);\n      }\n    }\n    return this.universalProvider;\n  }\n  // - Utils -------------------------------------------------------------------\n  handleAlertError(error) {\n    const matchedUniversalProviderError = Object.entries(ErrorUtil.UniversalProviderErrors).find(([, {\n      message\n    }]) => error.message.includes(message));\n    const [errorKey, errorValue] = matchedUniversalProviderError ?? [];\n    const {\n      message,\n      alertErrorKey\n    } = errorValue ?? {};\n    if (errorKey && message && !this.reportedAlertErrors[errorKey]) {\n      const alertError = ErrorUtil.ALERT_ERRORS[alertErrorKey];\n      if (alertError) {\n        AlertController.open(alertError, 'error');\n        this.reportedAlertErrors[errorKey] = true;\n      }\n    }\n  }\n  getAdapter(namespace) {\n    if (!namespace) {\n      return undefined;\n    }\n    return this.chainAdapters?.[namespace];\n  }\n  createAdapter(blueprint) {\n    if (!blueprint) {\n      return;\n    }\n    const namespace = blueprint.namespace;\n    if (!namespace) {\n      return;\n    }\n    this.createClients();\n    const adapterBlueprint = blueprint;\n    adapterBlueprint.namespace = namespace;\n    adapterBlueprint.construct({\n      namespace,\n      projectId: this.options?.projectId,\n      networks: this.getCaipNetworks()\n    });\n    if (!this.chainNamespaces.includes(namespace)) {\n      this.chainNamespaces.push(namespace);\n    }\n    if (this.chainAdapters) {\n      this.chainAdapters[namespace] = adapterBlueprint;\n    }\n  }\n  // -- Public -------------------------------------------------------------------\n  async open(options) {\n    await this.injectModalUi();\n    if (options?.uri) {\n      ConnectionController.setUri(options.uri);\n    }\n    if (options?.arguments) {\n      switch (options?.view) {\n        case 'Swap':\n          return ModalController.open({\n            ...options,\n            data: {\n              swap: options.arguments\n            }\n          });\n        default:\n      }\n    }\n    return ModalController.open(options);\n  }\n  async close() {\n    await this.injectModalUi();\n    ModalController.close();\n  }\n  setLoading(loading, namespace) {\n    ModalController.setLoading(loading, namespace);\n  }\n  async disconnect(chainNamespace) {\n    await ConnectionController.disconnect(chainNamespace);\n  }\n  getSIWX() {\n    return OptionsController.state.siwx;\n  }\n  // -- review these -------------------------------------------------------------------\n  getError() {\n    return '';\n  }\n  getChainId() {\n    return ChainController.state.activeCaipNetwork?.id;\n  }\n  async switchNetwork(appKitNetwork) {\n    const network = this.getCaipNetworks().find(n => n.id === appKitNetwork.id);\n    if (!network) {\n      AlertController.open(ErrorUtil.ALERT_ERRORS.SWITCH_NETWORK_NOT_FOUND, 'error');\n      return;\n    }\n    await ChainController.switchActiveNetwork(network);\n  }\n  getWalletProvider() {\n    return ChainController.state.activeChain ? ProviderUtil.state.providers[ChainController.state.activeChain] : null;\n  }\n  getWalletProviderType() {\n    return ProviderUtil.getProviderId(ChainController.state.activeChain);\n  }\n  subscribeProviders(callback) {\n    return ProviderUtil.subscribeProviders(callback);\n  }\n  getThemeMode() {\n    return ThemeController.state.themeMode;\n  }\n  getThemeVariables() {\n    return ThemeController.state.themeVariables;\n  }\n  setThemeMode(themeMode) {\n    ThemeController.setThemeMode(themeMode);\n    setColorTheme(ThemeController.state.themeMode);\n  }\n  setTermsConditionsUrl(termsConditionsUrl) {\n    OptionsController.setTermsConditionsUrl(termsConditionsUrl);\n  }\n  setPrivacyPolicyUrl(privacyPolicyUrl) {\n    OptionsController.setPrivacyPolicyUrl(privacyPolicyUrl);\n  }\n  setThemeVariables(themeVariables) {\n    ThemeController.setThemeVariables(themeVariables);\n    setThemeVariables(ThemeController.state.themeVariables);\n  }\n  subscribeTheme(callback) {\n    return ThemeController.subscribe(callback);\n  }\n  getWalletInfo() {\n    return AccountController.state.connectedWalletInfo;\n  }\n  getAccount(namespace) {\n    const authConnector = ConnectorController.getAuthConnector(namespace);\n    const accountState = ChainController.getAccountData(namespace);\n    const activeChain = ChainController.state.activeChain;\n    const activeConnectorId = StorageUtil.getConnectedConnectorId(namespace || activeChain);\n    if (!accountState) {\n      return undefined;\n    }\n    return {\n      allAccounts: accountState.allAccounts,\n      caipAddress: accountState.caipAddress,\n      address: CoreHelperUtil.getPlainAddress(accountState.caipAddress),\n      isConnected: Boolean(accountState.caipAddress),\n      status: accountState.status,\n      embeddedWalletInfo: authConnector && activeConnectorId === ConstantsUtil.CONNECTOR_ID.AUTH ? {\n        user: accountState.user ? {\n          ...accountState.user,\n          /*\n           * Getting the username from the chain controller works well for social logins,\n           * but Farcaster uses a different connection flow and doesn't emit the username via events.\n           * Since the username is stored in local storage before the chain controller updates,\n           * it's safe to use the local storage value here.\n           */\n          username: StorageUtil.getConnectedSocialUsername()\n        } : undefined,\n        authProvider: accountState.socialProvider || 'email',\n        accountType: accountState.preferredAccountTypes?.[namespace || activeChain],\n        isSmartAccountDeployed: Boolean(accountState.smartAccountDeployed)\n      } : undefined\n    };\n  }\n  subscribeAccount(callback, namespace) {\n    const updateVal = () => {\n      const account = this.getAccount(namespace);\n      if (!account) {\n        return;\n      }\n      callback(account);\n    };\n    if (namespace) {\n      ChainController.subscribeChainProp('accountState', updateVal, namespace);\n    } else {\n      ChainController.subscribe(updateVal);\n    }\n    ConnectorController.subscribe(updateVal);\n  }\n  subscribeNetwork(callback) {\n    return ChainController.subscribe(({\n      activeCaipNetwork\n    }) => {\n      callback({\n        caipNetwork: activeCaipNetwork,\n        chainId: activeCaipNetwork?.id,\n        caipNetworkId: activeCaipNetwork?.caipNetworkId\n      });\n    });\n  }\n  subscribeWalletInfo(callback) {\n    return AccountController.subscribeKey('connectedWalletInfo', callback);\n  }\n  subscribeShouldUpdateToAddress(callback) {\n    AccountController.subscribeKey('shouldUpdateToAddress', callback);\n  }\n  subscribeCaipNetworkChange(callback) {\n    ChainController.subscribeKey('activeCaipNetwork', callback);\n  }\n  getState() {\n    return PublicStateController.state;\n  }\n  subscribeState(callback) {\n    return PublicStateController.subscribe(callback);\n  }\n  showErrorMessage(message) {\n    SnackController.showError(message);\n  }\n  showSuccessMessage(message) {\n    SnackController.showSuccess(message);\n  }\n  getEvent() {\n    return {\n      ...EventsController.state\n    };\n  }\n  subscribeEvents(callback) {\n    return EventsController.subscribe(callback);\n  }\n  replace(route) {\n    RouterController.replace(route);\n  }\n  redirect(route) {\n    RouterController.push(route);\n  }\n  popTransactionStack(status) {\n    RouterController.popTransactionStack(status);\n  }\n  isOpen() {\n    return ModalController.state.open;\n  }\n  isTransactionStackEmpty() {\n    return RouterController.state.transactionStack.length === 0;\n  }\n  static getInstance() {\n    return this.instance;\n  }\n  updateFeatures(newFeatures) {\n    OptionsController.setFeatures(newFeatures);\n  }\n  updateRemoteFeatures(newRemoteFeatures) {\n    OptionsController.setRemoteFeatures(newRemoteFeatures);\n  }\n  updateOptions(newOptions) {\n    const currentOptions = OptionsController.state || {};\n    const updatedOptions = {\n      ...currentOptions,\n      ...newOptions\n    };\n    OptionsController.setOptions(updatedOptions);\n  }\n  setConnectMethodsOrder(connectMethodsOrder) {\n    OptionsController.setConnectMethodsOrder(connectMethodsOrder);\n  }\n  setWalletFeaturesOrder(walletFeaturesOrder) {\n    OptionsController.setWalletFeaturesOrder(walletFeaturesOrder);\n  }\n  setCollapseWallets(collapseWallets) {\n    OptionsController.setCollapseWallets(collapseWallets);\n  }\n  setSocialsOrder(socialsOrder) {\n    OptionsController.setSocialsOrder(socialsOrder);\n  }\n  getConnectMethodsOrder() {\n    return WalletUtil.getConnectOrderMethod(OptionsController.state.features, ConnectorController.getConnectors());\n  }\n  /**\n   * Adds a network to an existing adapter in AppKit.\n   * @param namespace - The chain namespace to add the network to (e.g. 'eip155', 'solana')\n   * @param network - The network configuration to add\n   * @throws Error if adapter for namespace doesn't exist\n   */\n  addNetwork(namespace, network) {\n    if (this.chainAdapters && !this.chainAdapters[namespace]) {\n      throw new Error(`Adapter for namespace ${namespace} doesn't exist`);\n    }\n    const extendedNetwork = this.extendCaipNetwork(network, this.options);\n    if (!this.getCaipNetworks().find(n => n.id === extendedNetwork.id)) {\n      ChainController.addNetwork(extendedNetwork);\n    }\n  }\n  /**\n   * Removes a network from an existing adapter in AppKit.\n   * @param namespace - The chain namespace the network belongs to\n   * @param networkId - The network ID to remove\n   * @throws Error if adapter for namespace doesn't exist or if removing last network\n   */\n  removeNetwork(namespace, networkId) {\n    if (this.chainAdapters && !this.chainAdapters[namespace]) {\n      throw new Error(`Adapter for namespace ${namespace} doesn't exist`);\n    }\n    const networkToRemove = this.getCaipNetworks().find(n => n.id === networkId);\n    if (!networkToRemove) {\n      return;\n    }\n    ChainController.removeNetwork(namespace, networkId);\n  }\n}","map":{"version":3,"names":["UniversalProvider","ConstantsUtil","NetworkUtil","ParseUtil","AccountController","AlertController","ApiController","AssetUtil","BlockchainApiController","ChainController","ConnectionController","ConnectorController","CoreConstantsUtil","CoreHelperUtil","EnsController","EventsController","ModalController","OnRampController","OptionsController","PublicStateController","RouterController","SIWXUtil","SendController","SnackController","StorageUtil","ThemeController","getChainsToDisconnect","WalletUtil","setColorTheme","setThemeVariables","CaipNetworksUtil","ErrorUtil","HelpersUtil","LoggerUtil","UtilConstantsUtil","ProviderUtil","UniversalAdapter","ConfigUtil","WcConstantsUtil","WcHelpersUtil","AppKitBaseClient","constructor","options","chainNamespaces","remoteFeatures","reportedAlertErrors","getCaipNetwork","chainNamespace","id","caipNetworkWithId","getNetworkData","requestedCaipNetworks","find","c","namespaceCaipNetwork","caipNetwork","getRequestedCaipNetworks","filter","state","activeCaipNetwork","defaultCaipNetwork","getCaipNetworkId","network","undefined","getCaipNetworks","namespace","getActiveChainNamespace","activeChain","setRequestedCaipNetworks","chain","getApprovedCaipNetworkIds","getAllApprovedCaipNetworkIds","getCaipAddress","activeCaipAddress","getAccountProp","setClientId","clientId","getProvider","getProviderType","getProviderId","getPreferredAccountType","preferredAccountTypes","setCaipAddress","caipAddress","enableEmbedded","close","setBalance","balance","balanceSymbol","setProfileName","profileName","setProfileImage","profileImage","setUser","user","resetAccount","setCaipNetwork","setActiveCaipNetwork","setCaipNetworkOfNamespace","setChainNetworkData","setAllAccounts","addresses","setHasMultipleAddresses","length","setStatus","status","isConnected","setConnectionStatus","getAddressByChainNamespace","setConnectors","connectors","allConnectors","setConnections","connections","fetchIdentity","request","getReownName","address","getNamesForAddress","getConnectors","getConnectorImage","connector","setConnectedWalletInfo","connectedWalletInfo","type","walletInfo","getIsConnectedState","Boolean","addAddressLabel","label","removeAddressLabel","getAddress","setApprovedCaipNetworksData","resetNetwork","addConnector","resetWcConnection","setAddressExplorerUrl","addressExplorerUrl","setSmartAccountDeployed","isDeployed","setSmartAccountEnabledNetworks","smartAccountEnabledNetworks","setPreferredAccountType","preferredAccountType","setEIP6963Enabled","enabled","handleUnsafeRPCRequest","isOpen","isTransactionStackEmpty","redirect","open","view","version","sdkVersion","caipNetworks","extendCaipNetworks","getChainNamespacesSet","adapters","extendDefaultCaipNetwork","chainAdapters","createAdapters","readyPromise","initialize","adapterNamespaces","map","adapter","Set","networkNamespaces","initializeProjectSettings","initControllers","initChainAdapters","sendInitializeEvent","syncExistingConnection","fetchRemoteFeatures","setRemoteFeatures","onramp","setOnrampProviders","email","Array","isArray","socials","checkAllowedOrigins","allowedOrigins","fetchAllowedOrigins","isClient","currentOrigin","window","location","origin","isOriginAllowed","DEFAULT_ALLOWED_ANCESTORS","ALERT_ERRORS","INVALID_APP_CONFIGURATION","PROJECT_ID_NOT_CONFIGURED","optionsCopy","universalProvider","sendEvent","event","properties","networks","n","siweConfig","initializeOptionsController","initializeChainController","initializeThemeController","initializeConnectionController","initializeConnectorController","themeMode","setThemeMode","themeVariables","connectionControllerClient","networkControllerClient","Error","getDefaultNetwork","setWcBasic","basic","setProjectId","projectId","setSdkVersion","setDebug","debug","setEnableWalletConnect","enableWalletConnect","setEnableWalletGuide","enableWalletGuide","setEnableWallets","enableWallets","enableEIP6963","setEnableNetworkSwitch","enableNetworkSwitch","setEnableAuthLogger","enableAuthLogger","setCustomRpcUrls","customRpcUrls","setEnableEmbedded","setAllWallets","allWallets","setIncludeWalletIds","includeWalletIds","setExcludeWalletIds","excludeWalletIds","setFeaturedWalletIds","featuredWalletIds","setTokens","tokens","setTermsConditionsUrl","termsConditionsUrl","setPrivacyPolicyUrl","privacyPolicyUrl","setCustomWallets","customWallets","setFeatures","features","setAllowUnsupportedChain","allowUnsupportedChain","setUniversalProviderConfigOverride","universalProviderConfigOverride","setPreferUniversalLinks","experimental_preferUniversalLinks","setDefaultAccountTypes","defaultAccountTypes","storedAccountTypes","getPreferredAccountTypes","defaultTypes","setPreferredAccountTypes","defaultMetaData","getDefaultMetaData","metadata","setMetadata","setDisableAppend","disableAppend","setSIWX","siwx","evmAdapter","CHAIN","EVM","mapToSIWX","name","document","getElementsByTagName","textContent","description","querySelector","content","url","icons","href","setUnsupportedNetwork","chainId","unsupportedNetwork","getUnsupportedNetwork","getCaipNetworkFromStorage","extendCaipNetwork","extendedNetwork","customNetworkImageUrls","chainImages","extendedNetworks","defaultNetwork","disconnectNamespace","getAdapter","provider","providerType","getAccountData","setLoading","disconnect","removeConnectedNamespace","resetChain","removeConnectorId","error","message","createClients","connectWalletConnect","result","setConnectedNamespaces","chains","keys","forEach","setConnectorId","CONNECTOR_TYPE_WALLET_CONNECT","syncWalletConnectAccount","connectExternal","info","socialUri","chainToUse","toConnectNetwork","fallbackCaipNetwork","res","connect","rpcUrl","rpcUrls","default","http","addConnectedNamespace","syncProvider","syncedAccounts","allAccounts","accounts","getAccounts","syncConnectedWalletInfo","reconnectExternal","reconnect","chainsToDisconnect","disconnectResults","Promise","allSettled","ns","resetSend","clearSessions","setFilterByNamespace","failures","f","reason","join","deleteConnectedSocialProvider","checkInstalled","ids","ethereum","some","String","signMessage","signature","sendTransaction","args","SEND_SUPPORTED_NAMESPACES","includes","hash","estimateGas","gas","getEnsAvatar","syncIdentity","Number","getEnsAddress","resolveReownName","writeContract","parseUnits","value","decimals","formatUnits","getCapabilities","params","grantPermissions","revokePermissions","walletGetAssets","updateBalance","updateNativeBalance","switchCaipNetwork","getApprovedCaipNetworksData","setClient","namespaces","session","supportsAllNetworks","peer","approvedCaipNetworkIds","getChainsFromNamespaces","networkNamespace","namespaceAddress","switchNetwork","syncAccount","Object","values","flatMap","accountsChains","account","parseCaipAddress","from","blueprints","reduce","blueprint","b","construct","initChainAdapter","onConnectors","listenAdapter","syncConnectors","createUniversalProviderForAdapter","all","on","bind","connectionStatus","getConnectionStatus","clearAddressCache","caipNetworkId","isSameNamespace","accountAddress","isActiveChain","syncAccountInfo","syncAllAccounts","getUniversalProvider","setUniversalProvider","syncNamespaceConnection","isSafeApp","CONNECTOR_ID","SAFE","connectorId","getConnectorId","WALLET_CONNECT","AUTH","syncAdapterConnection","err","console","warn","connection","syncConnection","createAccount","e","syncTasks","namespaceAccounts","activeChainId","sessionAddress","toString","validateCaipAddress","setProviderId","getWalletConnectProvider","setProvider","syncWalletConnectAccounts","index","self","indexOf","isActiveNamespace","networkOfChain","getCaipNetworkByNamespace","getActiveNetworkProps","chainIdToUse","isUnsupportedNetwork","UNSUPPORTED_NETWORK_NAME","shouldSupportAllNetworks","getNetworkProp","caipNetworkIds","parseCaipNetworkId","fallBackCaipNetworkId","deprecatedCaipNetworkId","showUnsupportedChainUI","isLowerCaseMatch","syncBalance","newChainId","split","newCaipAddress","syncReownName","registeredWcNames","wcName","CONNECTOR_TYPE_ANNOUNCED","CONNECTOR_TYPE_INJECTED","imageUrl","icon","COINBASE","getNetworksByNamespace","ready","getBalance","symbol","initializeUniversalAdapter","logger","createLogger","handleAlertError","universalProviderOptions","setManualWCControl","manualWCControl","init","listenWalletConnect","uri","setUri","finalizeWcConnection","currentCaipNetwork","callbackData","isSessionEventData","data","isCaipAddress","createUniversalProvider","universalProviderInitPromise","errorType","errorMessage","uncaught","matchedUniversalProviderError","entries","UniversalProviderErrors","errorKey","errorValue","alertErrorKey","alertError","createAdapter","adapterBlueprint","push","injectModalUi","arguments","swap","loading","getSIWX","getError","getChainId","appKitNetwork","SWITCH_NETWORK_NOT_FOUND","switchActiveNetwork","getWalletProvider","providers","getWalletProviderType","subscribeProviders","callback","getThemeMode","getThemeVariables","subscribeTheme","subscribe","getWalletInfo","getAccount","authConnector","getAuthConnector","accountState","activeConnectorId","getConnectedConnectorId","getPlainAddress","embeddedWalletInfo","username","getConnectedSocialUsername","authProvider","socialProvider","accountType","isSmartAccountDeployed","smartAccountDeployed","subscribeAccount","updateVal","subscribeChainProp","subscribeNetwork","subscribeWalletInfo","subscribeKey","subscribeShouldUpdateToAddress","subscribeCaipNetworkChange","getState","subscribeState","showErrorMessage","showError","showSuccessMessage","showSuccess","getEvent","subscribeEvents","replace","route","popTransactionStack","transactionStack","getInstance","instance","updateFeatures","newFeatures","updateRemoteFeatures","newRemoteFeatures","updateOptions","newOptions","currentOptions","updatedOptions","setOptions","setConnectMethodsOrder","connectMethodsOrder","setWalletFeaturesOrder","walletFeaturesOrder","setCollapseWallets","collapseWallets","setSocialsOrder","socialsOrder","getConnectMethodsOrder","getConnectOrderMethod","addNetwork","removeNetwork","networkId","networkToRemove"],"sources":["../../../../src/client/appkit-base-client.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}