{"ast":null,"code":"// eslint-disable-next-line jsdoc/require-jsdoc\nexport function from(response, options = {}) {\n  const {\n    request\n  } = options;\n  return {\n    ...response,\n    id: response.id ?? request?.id,\n    jsonrpc: response.jsonrpc ?? request.jsonrpc\n  };\n}\n/**\n * A type-safe interface to parse a JSON-RPC response object as per the [JSON-RPC 2.0 specification](https://www.jsonrpc.org/specification#response_object), and extract the result.\n *\n * @example\n * ```ts twoslash\n * import { RpcRequest, RpcResponse } from 'ox'\n *\n * // 1. Create a request store.\n * const store = RpcRequest.createStore()\n *\n * // 2. Get a request object.\n * const request = store.prepare({\n *   method: 'eth_getBlockByNumber',\n *   params: ['0x1', false],\n * })\n *\n * // 3. Send the JSON-RPC request via HTTP.\n * const block = await fetch('https://1.rpc.thirdweb.com', {\n *   body: JSON.stringify(request),\n *   headers: {\n *     'Content-Type': 'application/json',\n *   },\n *   method: 'POST',\n * })\n *  .then((response) => response.json())\n *  // 4. Parse the JSON-RPC response into a type-safe result. // [!code focus]\n *  .then((response) => RpcResponse.parse(response, { request })) // [!code focus]\n *\n * block // [!code focus]\n * // ^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * :::tip\n *\n * If you don't need the return type, you can omit the options entirely.\n *\n * ```ts twoslash\n * // @noErrors\n * import { RpcResponse } from 'ox'\n *\n * const block = await fetch('https://1.rpc.thirdweb.com', {})\n *  .then((response) => response.json())\n *  .then((response) => RpcResponse.parse(response, { request })) // [!code --]\n *  .then(RpcResponse.parse) // [!code ++]\n * ```\n * :::\n *\n * @example\n * ### Raw Mode\n *\n * If `raw` is `true`, the response will be returned as an object with `result` and `error` properties instead of returning the `result` directly and throwing errors.\n *\n * ```ts twoslash\n * import { RpcRequest, RpcResponse } from 'ox'\n *\n * const store = RpcRequest.createStore()\n *\n * const request = store.prepare({\n *   method: 'eth_blockNumber',\n * })\n *\n * const response = RpcResponse.parse({}, {\n *   request,\n *   raw: true, // [!code hl]\n * })\n *\n * response.result\n * //       ^?\n *\n *\n * response.error\n * //       ^?\n *\n *\n * ```\n *\n * @param response - Opaque JSON-RPC response object.\n * @param options - Parsing options.\n * @returns Typed JSON-RPC result, or response object (if `raw` is `true`).\n */\nexport function parse(response, options = {}) {\n  const {\n    raw = false\n  } = options;\n  const response_ = response;\n  if (raw) return response;\n  if (response_.error) throw parseError(response_.error);\n  return response_.result;\n}\n/**\n * Parses a JSON-RPC error object into an error instance.\n *\n * @example\n * ```ts twoslash\n * import { RpcResponse } from 'ox'\n *\n * const error = RpcResponse.parseError({ code: -32000, message: 'unsupported method' })\n *\n * error\n * // ^?\n *\n * ```\n *\n * @param errorObject - JSON-RPC error object.\n * @returns Error instance.\n */\nexport function parseError(errorObject) {\n  const errorObject_ = errorObject;\n  const {\n    code\n  } = errorObject_;\n  if (code === InternalError.code) return new InternalError(errorObject_);\n  if (code === InvalidInputError.code) return new InvalidInputError(errorObject_);\n  if (code === InvalidParamsError.code) return new InvalidParamsError(errorObject_);\n  if (code === InvalidRequestError.code) return new InvalidRequestError(errorObject_);\n  if (code === LimitExceededError.code) return new LimitExceededError(errorObject_);\n  if (code === MethodNotFoundError.code) return new MethodNotFoundError(errorObject_);\n  if (code === MethodNotSupportedError.code) return new MethodNotSupportedError(errorObject_);\n  if (code === ParseError.code) return new ParseError(errorObject_);\n  if (code === ResourceNotFoundError.code) return new ResourceNotFoundError(errorObject_);\n  if (code === ResourceUnavailableError.code) return new ResourceUnavailableError(errorObject_);\n  if (code === TransactionRejectedError.code) return new TransactionRejectedError(errorObject_);\n  if (code === VersionNotSupportedError.code) return new VersionNotSupportedError(errorObject_);\n  return new InternalError({\n    data: errorObject_,\n    message: errorObject_.message\n  });\n}\n/** Thrown when a JSON-RPC error has occurred. */\nexport class BaseError extends Error {\n  constructor(errorObject) {\n    const {\n      code,\n      message,\n      data\n    } = errorObject;\n    super(message);\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'RpcResponse.BaseError'\n    });\n    Object.defineProperty(this, \"code\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"data\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.code = code;\n    this.data = data;\n  }\n}\n/** Thrown when the input to a JSON-RPC method is invalid. */\nexport class InvalidInputError extends BaseError {\n  constructor(parameters = {}) {\n    super({\n      code: InvalidInputError.code,\n      data: parameters.data,\n      message: parameters.message ?? 'Missing or invalid parameters.'\n    });\n    Object.defineProperty(this, \"code\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: -32000\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'RpcResponse.InvalidInputError'\n    });\n  }\n}\nObject.defineProperty(InvalidInputError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32000\n});\n/** Thrown when a JSON-RPC resource is not found. */\nexport class ResourceNotFoundError extends BaseError {\n  constructor(parameters = {}) {\n    super({\n      code: ResourceNotFoundError.code,\n      data: parameters.data,\n      message: parameters.message ?? 'Requested resource not found.'\n    });\n    Object.defineProperty(this, \"code\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: -32001\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'RpcResponse.ResourceNotFoundError'\n    });\n  }\n}\nObject.defineProperty(ResourceNotFoundError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32001\n});\n/** Thrown when a JSON-RPC resource is unavailable. */\nexport class ResourceUnavailableError extends BaseError {\n  constructor(parameters = {}) {\n    super({\n      code: ResourceUnavailableError.code,\n      data: parameters.data,\n      message: parameters.message ?? 'Requested resource not available.'\n    });\n    Object.defineProperty(this, \"code\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: -32002\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'RpcResponse.ResourceUnavailableError'\n    });\n  }\n}\nObject.defineProperty(ResourceUnavailableError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32002\n});\n/** Thrown when a JSON-RPC transaction is rejected. */\nexport class TransactionRejectedError extends BaseError {\n  constructor(parameters = {}) {\n    super({\n      code: TransactionRejectedError.code,\n      data: parameters.data,\n      message: parameters.message ?? 'Transaction creation failed.'\n    });\n    Object.defineProperty(this, \"code\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: -32003\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'RpcResponse.TransactionRejectedError'\n    });\n  }\n}\nObject.defineProperty(TransactionRejectedError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32003\n});\n/** Thrown when a JSON-RPC method is not supported. */\nexport class MethodNotSupportedError extends BaseError {\n  constructor(parameters = {}) {\n    super({\n      code: MethodNotSupportedError.code,\n      data: parameters.data,\n      message: parameters.message ?? 'Method is not implemented.'\n    });\n    Object.defineProperty(this, \"code\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: -32004\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'RpcResponse.MethodNotSupportedError'\n    });\n  }\n}\nObject.defineProperty(MethodNotSupportedError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32004\n});\n/** Thrown when a rate-limit is exceeded. */\nexport class LimitExceededError extends BaseError {\n  constructor(parameters = {}) {\n    super({\n      code: LimitExceededError.code,\n      data: parameters.data,\n      message: parameters.message ?? 'Rate limit exceeded.'\n    });\n    Object.defineProperty(this, \"code\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: -32005\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'RpcResponse.LimitExceededError'\n    });\n  }\n}\nObject.defineProperty(LimitExceededError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32005\n});\n/** Thrown when a JSON-RPC version is not supported. */\nexport class VersionNotSupportedError extends BaseError {\n  constructor(parameters = {}) {\n    super({\n      code: VersionNotSupportedError.code,\n      data: parameters.data,\n      message: parameters.message ?? 'JSON-RPC version not supported.'\n    });\n    Object.defineProperty(this, \"code\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: -32006\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'RpcResponse.VersionNotSupportedError'\n    });\n  }\n}\nObject.defineProperty(VersionNotSupportedError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32006\n});\n/** Thrown when a JSON-RPC request is invalid. */\nexport class InvalidRequestError extends BaseError {\n  constructor(parameters = {}) {\n    super({\n      code: InvalidRequestError.code,\n      data: parameters.data,\n      message: parameters.message ?? 'Input is not a valid JSON-RPC request.'\n    });\n    Object.defineProperty(this, \"code\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: -32600\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'RpcResponse.InvalidRequestError'\n    });\n  }\n}\nObject.defineProperty(InvalidRequestError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32600\n});\n/** Thrown when a JSON-RPC method is not found. */\nexport class MethodNotFoundError extends BaseError {\n  constructor(parameters = {}) {\n    super({\n      code: MethodNotFoundError.code,\n      data: parameters.data,\n      message: parameters.message ?? 'Method does not exist.'\n    });\n    Object.defineProperty(this, \"code\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: -32601\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'RpcResponse.MethodNotFoundError'\n    });\n  }\n}\nObject.defineProperty(MethodNotFoundError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32601\n});\n/** Thrown when the parameters to a JSON-RPC method are invalid. */\nexport class InvalidParamsError extends BaseError {\n  constructor(parameters = {}) {\n    super({\n      code: InvalidParamsError.code,\n      data: parameters.data,\n      message: parameters.message ?? 'Invalid method parameters.'\n    });\n    Object.defineProperty(this, \"code\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: -32602\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'RpcResponse.InvalidParamsError'\n    });\n  }\n}\nObject.defineProperty(InvalidParamsError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32602\n});\n/** Thrown when an internal JSON-RPC error has occurred. */\nexport class InternalError extends BaseError {\n  constructor(parameters = {}) {\n    super({\n      code: InternalError.code,\n      data: parameters.data,\n      message: parameters.message ?? 'Internal JSON-RPC error.'\n    });\n    Object.defineProperty(this, \"code\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: -32603\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'RpcResponse.InternalError'\n    });\n  }\n}\nObject.defineProperty(InternalError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32603\n});\n/** Thrown when a JSON-RPC response is invalid. */\nexport class ParseError extends BaseError {\n  constructor(parameters = {}) {\n    super({\n      code: ParseError.code,\n      data: parameters.data,\n      message: parameters.message ?? 'Failed to parse JSON-RPC response.'\n    });\n    Object.defineProperty(this, \"code\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: -32700\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'RpcResponse.ParseError'\n    });\n  }\n}\nObject.defineProperty(ParseError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32700\n});","map":{"version":3,"names":["from","response","options","request","id","jsonrpc","parse","raw","response_","error","parseError","result","errorObject","errorObject_","code","InternalError","InvalidInputError","InvalidParamsError","InvalidRequestError","LimitExceededError","MethodNotFoundError","MethodNotSupportedError","ParseError","ResourceNotFoundError","ResourceUnavailableError","TransactionRejectedError","VersionNotSupportedError","data","message","BaseError","Error","constructor","Object","defineProperty","parameters"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/ox/core/RpcResponse.ts"],"sourcesContent":["import type { Errors, RpcRequest } from '../index.js'\nimport type {\n  Compute,\n  IsNarrowable,\n  IsNever,\n  OneOf,\n  UnionPartialBy,\n} from './internal/types.js'\n\n/** A JSON-RPC response object as per the [JSON-RPC 2.0 specification](https://www.jsonrpc.org/specification#request_object). */\nexport type RpcResponse<\n  result = unknown,\n  error extends ErrorObject = ErrorObject,\n> = Compute<\n  {\n    id: number\n    jsonrpc: '2.0'\n  } & OneOf<{ result: result } | { error: error }>\n>\n\n/** JSON-RPC error object as per the [JSON-RPC 2.0 specification](https://www.jsonrpc.org/specification#error_object). */\nexport type ErrorObject = {\n  code: number\n  message: string\n  data?: unknown | undefined\n}\n\n/**\n * A type-safe interface to instantiate a JSON-RPC response object as per the [JSON-RPC 2.0 specification](https://www.jsonrpc.org/specification#response_object).\n *\n * @example\n * ### Instantiating a Response Object\n *\n * ```ts twoslash\n * import { RpcResponse } from 'ox'\n *\n * const response = RpcResponse.from({\n *   id: 0,\n *   jsonrpc: '2.0',\n *   result: '0x69420',\n * })\n * ```\n *\n * @example\n * ### Type-safe Instantiation\n *\n * If you have a JSON-RPC request object, you can use it to strongly-type the response. If a `request` is provided,\n * then the `id` and `jsonrpc` properties will be overridden with the values from the request.\n *\n * ```ts twoslash\n * import { RpcRequest, RpcResponse } from 'ox'\n *\n * const request = RpcRequest.from({ id: 0, method: 'eth_blockNumber' })\n *\n * const response = RpcResponse.from(\n *   { result: '0x69420' },\n *   { request },\n * )\n * ```\n *\n * @param response - Opaque JSON-RPC response object.\n * @param options - Parsing options.\n * @returns Typed JSON-RPC result, or response object (if `raw` is `true`).\n */\nexport function from<\n  request extends RpcRequest.RpcRequest | undefined = undefined,\n  const response =\n    | (request extends RpcRequest.RpcRequest\n        ? request['_returnType']\n        : RpcResponse)\n    | unknown,\n>(\n  response: from.Response<request, response>,\n  options?: from.Options<request>,\n): Compute<from.ReturnType<response>>\n// eslint-disable-next-line jsdoc/require-jsdoc\nexport function from(response: RpcResponse, options: any = {}): RpcResponse {\n  const { request } = options\n  return {\n    ...response,\n    id: response.id ?? request?.id,\n    jsonrpc: response.jsonrpc ?? request.jsonrpc,\n  }\n}\n\nexport declare namespace from {\n  type Response<\n    request extends RpcRequest.RpcRequest | undefined = undefined,\n    response = unknown,\n  > = response &\n    (request extends RpcRequest.RpcRequest\n      ? UnionPartialBy<RpcResponse<request['_returnType']>, 'id' | 'jsonrpc'>\n      : RpcResponse)\n\n  type Options<\n    request extends RpcRequest.RpcRequest | undefined =\n      | RpcRequest.RpcRequest\n      | undefined,\n  > = {\n    request?: request | RpcRequest.RpcRequest | undefined\n  }\n\n  type ReturnType<response> = IsNarrowable<response, RpcResponse> extends true\n    ? RpcResponse\n    : response & Readonly<{ id: number; jsonrpc: '2.0' }>\n}\n\n/**\n * A type-safe interface to parse a JSON-RPC response object as per the [JSON-RPC 2.0 specification](https://www.jsonrpc.org/specification#response_object), and extract the result.\n *\n * @example\n * ```ts twoslash\n * import { RpcRequest, RpcResponse } from 'ox'\n *\n * // 1. Create a request store.\n * const store = RpcRequest.createStore()\n *\n * // 2. Get a request object.\n * const request = store.prepare({\n *   method: 'eth_getBlockByNumber',\n *   params: ['0x1', false],\n * })\n *\n * // 3. Send the JSON-RPC request via HTTP.\n * const block = await fetch('https://1.rpc.thirdweb.com', {\n *   body: JSON.stringify(request),\n *   headers: {\n *     'Content-Type': 'application/json',\n *   },\n *   method: 'POST',\n * })\n *  .then((response) => response.json())\n *  // 4. Parse the JSON-RPC response into a type-safe result. // [!code focus]\n *  .then((response) => RpcResponse.parse(response, { request })) // [!code focus]\n *\n * block // [!code focus]\n * // ^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * :::tip\n *\n * If you don't need the return type, you can omit the options entirely.\n *\n * ```ts twoslash\n * // @noErrors\n * import { RpcResponse } from 'ox'\n *\n * const block = await fetch('https://1.rpc.thirdweb.com', {})\n *  .then((response) => response.json())\n *  .then((response) => RpcResponse.parse(response, { request })) // [!code --]\n *  .then(RpcResponse.parse) // [!code ++]\n * ```\n * :::\n *\n * @example\n * ### Raw Mode\n *\n * If `raw` is `true`, the response will be returned as an object with `result` and `error` properties instead of returning the `result` directly and throwing errors.\n *\n * ```ts twoslash\n * import { RpcRequest, RpcResponse } from 'ox'\n *\n * const store = RpcRequest.createStore()\n *\n * const request = store.prepare({\n *   method: 'eth_blockNumber',\n * })\n *\n * const response = RpcResponse.parse({}, {\n *   request,\n *   raw: true, // [!code hl]\n * })\n *\n * response.result\n * //       ^?\n *\n *\n * response.error\n * //       ^?\n *\n *\n * ```\n *\n * @param response - Opaque JSON-RPC response object.\n * @param options - Parsing options.\n * @returns Typed JSON-RPC result, or response object (if `raw` is `true`).\n */\nexport function parse<\n  const response extends RpcResponse | unknown,\n  returnType,\n  raw extends boolean = false,\n>(\n  response: response,\n  options: parse.Options<returnType, raw> = {},\n): parse.ReturnType<\n  unknown extends response\n    ? returnType\n    : response extends RpcResponse\n      ? response extends { result: infer result }\n        ? result\n        : never\n      : returnType,\n  raw\n> {\n  const { raw = false } = options\n  const response_ = response as RpcResponse\n  if (raw) return response as never\n  if (response_.error) throw parseError(response_.error)\n  return response_.result as never\n}\n\nexport declare namespace parse {\n  type Options<returnType, raw extends boolean = false> = {\n    /**\n     * JSON-RPC Method that was used to make the request. Used for typing the response.\n     */\n    request?:\n      | {\n          _returnType: returnType\n        }\n      | RpcRequest.RpcRequest\n      | undefined\n    /**\n     * Enables raw mode – responses will return an object with `result` and `error` properties instead of returning the `result` directly and throwing errors.\n     *\n     * - `true`: a JSON-RPC response object will be returned with `result` and `error` properties.\n     * - `false`: the JSON-RPC response object's `result` property will be returned directly, and JSON-RPC Errors will be thrown.\n     *\n     * @default false\n     */\n    raw?: raw | boolean | undefined\n  }\n\n  type ReturnType<returnType, raw extends boolean = false> = Compute<\n    raw extends true ? RpcResponse<returnType> : returnType\n  >\n\n  type ErrorType =\n    | ParseError\n    | InvalidInputError\n    | ResourceNotFoundError\n    | ResourceUnavailableError\n    | TransactionRejectedError\n    | MethodNotSupportedError\n    | LimitExceededError\n    | VersionNotSupportedError\n    | InvalidRequestError\n    | MethodNotFoundError\n    | InvalidParamsError\n    | InternalError\n    | BaseErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Parses a JSON-RPC error object into an error instance.\n *\n * @example\n * ```ts twoslash\n * import { RpcResponse } from 'ox'\n *\n * const error = RpcResponse.parseError({ code: -32000, message: 'unsupported method' })\n *\n * error\n * // ^?\n *\n * ```\n *\n * @param errorObject - JSON-RPC error object.\n * @returns Error instance.\n */\nexport function parseError<const errorObject extends ErrorObject | unknown>(\n  errorObject: errorObject | ErrorObject,\n): parseError.ReturnType<errorObject> {\n  const errorObject_ = errorObject as ErrorObject\n  const { code } = errorObject_\n  if (code === InternalError.code)\n    return new InternalError(errorObject_) as never\n  if (code === InvalidInputError.code)\n    return new InvalidInputError(errorObject_) as never\n  if (code === InvalidParamsError.code)\n    return new InvalidParamsError(errorObject_) as never\n  if (code === InvalidRequestError.code)\n    return new InvalidRequestError(errorObject_) as never\n  if (code === LimitExceededError.code)\n    return new LimitExceededError(errorObject_) as never\n  if (code === MethodNotFoundError.code)\n    return new MethodNotFoundError(errorObject_) as never\n  if (code === MethodNotSupportedError.code)\n    return new MethodNotSupportedError(errorObject_) as never\n  if (code === ParseError.code) return new ParseError(errorObject_) as never\n  if (code === ResourceNotFoundError.code)\n    return new ResourceNotFoundError(errorObject_) as never\n  if (code === ResourceUnavailableError.code)\n    return new ResourceUnavailableError(errorObject_) as never\n  if (code === TransactionRejectedError.code)\n    return new TransactionRejectedError(errorObject_) as never\n  if (code === VersionNotSupportedError.code)\n    return new VersionNotSupportedError(errorObject_) as never\n  return new InternalError({\n    data: errorObject_,\n    message: errorObject_.message,\n  }) as never\n}\n\nexport declare namespace parseError {\n  type ReturnType<\n    errorObject extends ErrorObject | unknown,\n    //\n    error = errorObject extends ErrorObject\n      ?\n          | (errorObject['code'] extends InternalError['code']\n              ? InternalError\n              : never)\n          | (IsNarrowable<errorObject['code'], number> extends false\n              ? InternalError\n              : never)\n          | (errorObject['code'] extends InvalidInputError['code']\n              ? InvalidInputError\n              : never)\n          | (IsNarrowable<errorObject['code'], number> extends false\n              ? InvalidInputError\n              : never)\n          | (errorObject['code'] extends ResourceNotFoundError['code']\n              ? ResourceNotFoundError\n              : never)\n          | (IsNarrowable<errorObject['code'], number> extends false\n              ? ResourceNotFoundError\n              : never)\n          | (errorObject['code'] extends ResourceUnavailableError['code']\n              ? ResourceUnavailableError\n              : never)\n          | (IsNarrowable<errorObject['code'], number> extends false\n              ? ResourceUnavailableError\n              : never)\n          | (errorObject['code'] extends TransactionRejectedError['code']\n              ? TransactionRejectedError\n              : never)\n          | (IsNarrowable<errorObject['code'], number> extends false\n              ? TransactionRejectedError\n              : never)\n          | (errorObject['code'] extends ParseError['code']\n              ? ParseError\n              : never)\n          | (IsNarrowable<errorObject['code'], number> extends false\n              ? ParseError\n              : never)\n          | (errorObject['code'] extends MethodNotSupportedError['code']\n              ? MethodNotSupportedError\n              : never)\n          | (IsNarrowable<errorObject['code'], number> extends false\n              ? MethodNotSupportedError\n              : never)\n          | (errorObject['code'] extends LimitExceededError['code']\n              ? LimitExceededError\n              : never)\n          | (IsNarrowable<errorObject['code'], number> extends false\n              ? LimitExceededError\n              : never)\n          | (errorObject['code'] extends VersionNotSupportedError['code']\n              ? VersionNotSupportedError\n              : never)\n          | (IsNarrowable<errorObject['code'], number> extends false\n              ? VersionNotSupportedError\n              : never)\n          | (errorObject['code'] extends InvalidRequestError['code']\n              ? InvalidRequestError\n              : never)\n          | (IsNarrowable<errorObject['code'], number> extends false\n              ? InvalidRequestError\n              : never)\n          | (errorObject['code'] extends MethodNotFoundError['code']\n              ? MethodNotFoundError\n              : never)\n          | (IsNarrowable<errorObject['code'], number> extends false\n              ? MethodNotFoundError\n              : never)\n          | (errorObject['code'] extends InvalidParamsError['code']\n              ? InvalidParamsError\n              : never)\n          | (IsNarrowable<errorObject['code'], number> extends false\n              ? InvalidParamsError\n              : never)\n          | (IsNarrowable<errorObject['code'], number> extends false\n              ? BaseError\n              : never)\n      : parseError.ReturnType<ErrorObject>,\n  > = IsNever<error> extends true ? BaseError : error\n}\n\nexport type BaseErrorType = BaseError & { name: 'BaseError' }\n\n/** Thrown when a JSON-RPC error has occurred. */\nexport class BaseError extends Error {\n  override name = 'RpcResponse.BaseError'\n\n  readonly code: number\n  readonly data?: unknown | undefined\n\n  constructor(errorObject: ErrorObject) {\n    const { code, message, data } = errorObject\n    super(message)\n    this.code = code\n    this.data = data\n  }\n}\n\n/** Thrown when the input to a JSON-RPC method is invalid. */\nexport class InvalidInputError extends BaseError {\n  static readonly code = -32000\n  override readonly code = -32000\n  override readonly name = 'RpcResponse.InvalidInputError'\n\n  constructor(parameters: Partial<Omit<ErrorObject, 'code'>> = {}) {\n    super({\n      code: InvalidInputError.code,\n      data: parameters.data,\n      message: parameters.message ?? 'Missing or invalid parameters.',\n    })\n  }\n}\n\n/** Thrown when a JSON-RPC resource is not found. */\nexport class ResourceNotFoundError extends BaseError {\n  static readonly code = -32001\n  override readonly code = -32001\n  override readonly name = 'RpcResponse.ResourceNotFoundError'\n\n  constructor(parameters: Partial<Omit<ErrorObject, 'code'>> = {}) {\n    super({\n      code: ResourceNotFoundError.code,\n      data: parameters.data,\n      message: parameters.message ?? 'Requested resource not found.',\n    })\n  }\n}\n\n/** Thrown when a JSON-RPC resource is unavailable. */\nexport class ResourceUnavailableError extends BaseError {\n  static readonly code = -32002\n  override readonly code = -32002\n  override readonly name = 'RpcResponse.ResourceUnavailableError'\n\n  constructor(parameters: Partial<Omit<ErrorObject, 'code'>> = {}) {\n    super({\n      code: ResourceUnavailableError.code,\n      data: parameters.data,\n      message: parameters.message ?? 'Requested resource not available.',\n    })\n  }\n}\n\n/** Thrown when a JSON-RPC transaction is rejected. */\nexport class TransactionRejectedError extends BaseError {\n  static readonly code = -32003\n  override readonly code = -32003\n  override readonly name = 'RpcResponse.TransactionRejectedError'\n\n  constructor(parameters: Partial<Omit<ErrorObject, 'code'>> = {}) {\n    super({\n      code: TransactionRejectedError.code,\n      data: parameters.data,\n      message: parameters.message ?? 'Transaction creation failed.',\n    })\n  }\n}\n\n/** Thrown when a JSON-RPC method is not supported. */\nexport class MethodNotSupportedError extends BaseError {\n  static readonly code = -32004\n  override readonly code = -32004\n  override readonly name = 'RpcResponse.MethodNotSupportedError'\n\n  constructor(parameters: Partial<Omit<ErrorObject, 'code'>> = {}) {\n    super({\n      code: MethodNotSupportedError.code,\n      data: parameters.data,\n      message: parameters.message ?? 'Method is not implemented.',\n    })\n  }\n}\n\n/** Thrown when a rate-limit is exceeded. */\nexport class LimitExceededError extends BaseError {\n  static readonly code = -32005\n  override readonly code = -32005\n  override readonly name = 'RpcResponse.LimitExceededError'\n\n  constructor(parameters: Partial<Omit<ErrorObject, 'code'>> = {}) {\n    super({\n      code: LimitExceededError.code,\n      data: parameters.data,\n      message: parameters.message ?? 'Rate limit exceeded.',\n    })\n  }\n}\n\n/** Thrown when a JSON-RPC version is not supported. */\nexport class VersionNotSupportedError extends BaseError {\n  static readonly code = -32006\n  override readonly code = -32006\n  override readonly name = 'RpcResponse.VersionNotSupportedError'\n\n  constructor(parameters: Partial<Omit<ErrorObject, 'code'>> = {}) {\n    super({\n      code: VersionNotSupportedError.code,\n      data: parameters.data,\n      message: parameters.message ?? 'JSON-RPC version not supported.',\n    })\n  }\n}\n\n/** Thrown when a JSON-RPC request is invalid. */\nexport class InvalidRequestError extends BaseError {\n  static readonly code = -32600\n  override readonly code = -32600\n  override readonly name = 'RpcResponse.InvalidRequestError'\n\n  constructor(parameters: Partial<Omit<ErrorObject, 'code'>> = {}) {\n    super({\n      code: InvalidRequestError.code,\n      data: parameters.data,\n      message: parameters.message ?? 'Input is not a valid JSON-RPC request.',\n    })\n  }\n}\n\n/** Thrown when a JSON-RPC method is not found. */\nexport class MethodNotFoundError extends BaseError {\n  static readonly code = -32601\n  override readonly code = -32601\n  override readonly name = 'RpcResponse.MethodNotFoundError'\n\n  constructor(parameters: Partial<Omit<ErrorObject, 'code'>> = {}) {\n    super({\n      code: MethodNotFoundError.code,\n      data: parameters.data,\n      message: parameters.message ?? 'Method does not exist.',\n    })\n  }\n}\n\n/** Thrown when the parameters to a JSON-RPC method are invalid. */\nexport class InvalidParamsError extends BaseError {\n  static readonly code = -32602\n  override readonly code = -32602\n  override readonly name = 'RpcResponse.InvalidParamsError'\n\n  constructor(parameters: Partial<Omit<ErrorObject, 'code'>> = {}) {\n    super({\n      code: InvalidParamsError.code,\n      data: parameters.data,\n      message: parameters.message ?? 'Invalid method parameters.',\n    })\n  }\n}\n\n/** Thrown when an internal JSON-RPC error has occurred. */\nexport class InternalError extends BaseError {\n  static readonly code = -32603\n  override readonly code = -32603\n  override readonly name = 'RpcResponse.InternalError'\n\n  constructor(parameters: Partial<Omit<ErrorObject, 'code'>> = {}) {\n    super({\n      code: InternalError.code,\n      data: parameters.data,\n      message: parameters.message ?? 'Internal JSON-RPC error.',\n    })\n  }\n}\n\n/** Thrown when a JSON-RPC response is invalid. */\nexport class ParseError extends BaseError {\n  static readonly code = -32700\n  override readonly code = -32700\n  override readonly name = 'RpcResponse.ParseError'\n\n  constructor(parameters: Partial<Omit<ErrorObject, 'code'>> = {}) {\n    super({\n      code: ParseError.code,\n      data: parameters.data,\n      message: parameters.message ?? 'Failed to parse JSON-RPC response.',\n    })\n  }\n}\n"],"mappings":"AA2EA;AACA,OAAM,SAAUA,IAAIA,CAACC,QAAqB,EAAEC,OAAA,GAAe,EAAE;EAC3D,MAAM;IAAEC;EAAO,CAAE,GAAGD,OAAO;EAC3B,OAAO;IACL,GAAGD,QAAQ;IACXG,EAAE,EAAEH,QAAQ,CAACG,EAAE,IAAID,OAAO,EAAEC,EAAE;IAC9BC,OAAO,EAAEJ,QAAQ,CAACI,OAAO,IAAIF,OAAO,CAACE;GACtC;AACH;AAwBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2FA,OAAM,SAAUC,KAAKA,CAKnBL,QAAkB,EAClBC,OAAA,GAA0C,EAAE;EAW5C,MAAM;IAAEK,GAAG,GAAG;EAAK,CAAE,GAAGL,OAAO;EAC/B,MAAMM,SAAS,GAAGP,QAAuB;EACzC,IAAIM,GAAG,EAAE,OAAON,QAAiB;EACjC,IAAIO,SAAS,CAACC,KAAK,EAAE,MAAMC,UAAU,CAACF,SAAS,CAACC,KAAK,CAAC;EACtD,OAAOD,SAAS,CAACG,MAAe;AAClC;AA6CA;;;;;;;;;;;;;;;;;AAiBA,OAAM,SAAUD,UAAUA,CACxBE,WAAsC;EAEtC,MAAMC,YAAY,GAAGD,WAA0B;EAC/C,MAAM;IAAEE;EAAI,CAAE,GAAGD,YAAY;EAC7B,IAAIC,IAAI,KAAKC,aAAa,CAACD,IAAI,EAC7B,OAAO,IAAIC,aAAa,CAACF,YAAY,CAAU;EACjD,IAAIC,IAAI,KAAKE,iBAAiB,CAACF,IAAI,EACjC,OAAO,IAAIE,iBAAiB,CAACH,YAAY,CAAU;EACrD,IAAIC,IAAI,KAAKG,kBAAkB,CAACH,IAAI,EAClC,OAAO,IAAIG,kBAAkB,CAACJ,YAAY,CAAU;EACtD,IAAIC,IAAI,KAAKI,mBAAmB,CAACJ,IAAI,EACnC,OAAO,IAAII,mBAAmB,CAACL,YAAY,CAAU;EACvD,IAAIC,IAAI,KAAKK,kBAAkB,CAACL,IAAI,EAClC,OAAO,IAAIK,kBAAkB,CAACN,YAAY,CAAU;EACtD,IAAIC,IAAI,KAAKM,mBAAmB,CAACN,IAAI,EACnC,OAAO,IAAIM,mBAAmB,CAACP,YAAY,CAAU;EACvD,IAAIC,IAAI,KAAKO,uBAAuB,CAACP,IAAI,EACvC,OAAO,IAAIO,uBAAuB,CAACR,YAAY,CAAU;EAC3D,IAAIC,IAAI,KAAKQ,UAAU,CAACR,IAAI,EAAE,OAAO,IAAIQ,UAAU,CAACT,YAAY,CAAU;EAC1E,IAAIC,IAAI,KAAKS,qBAAqB,CAACT,IAAI,EACrC,OAAO,IAAIS,qBAAqB,CAACV,YAAY,CAAU;EACzD,IAAIC,IAAI,KAAKU,wBAAwB,CAACV,IAAI,EACxC,OAAO,IAAIU,wBAAwB,CAACX,YAAY,CAAU;EAC5D,IAAIC,IAAI,KAAKW,wBAAwB,CAACX,IAAI,EACxC,OAAO,IAAIW,wBAAwB,CAACZ,YAAY,CAAU;EAC5D,IAAIC,IAAI,KAAKY,wBAAwB,CAACZ,IAAI,EACxC,OAAO,IAAIY,wBAAwB,CAACb,YAAY,CAAU;EAC5D,OAAO,IAAIE,aAAa,CAAC;IACvBY,IAAI,EAAEd,YAAY;IAClBe,OAAO,EAAEf,YAAY,CAACe;GACvB,CAAU;AACb;AAyFA;AACA,OAAM,MAAOC,SAAU,SAAQC,KAAK;EAMlCC,YAAYnB,WAAwB;IAClC,MAAM;MAAEE,IAAI;MAAEc,OAAO;MAAED;IAAI,CAAE,GAAGf,WAAW;IAC3C,KAAK,CAACgB,OAAO,CAAC;IAPPI,MAAA,CAAAC,cAAA;;;;aAAO;;IAEPD,MAAA,CAAAC,cAAA;;;;;;IACAD,MAAA,CAAAC,cAAA;;;;;;IAKP,IAAI,CAACnB,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACa,IAAI,GAAGA,IAAI;EAClB;;AAGF;AACA,OAAM,MAAOX,iBAAkB,SAAQa,SAAS;EAK9CE,YAAYG,UAAA,GAAiD,EAAE;IAC7D,KAAK,CAAC;MACJpB,IAAI,EAAEE,iBAAiB,CAACF,IAAI;MAC5Ba,IAAI,EAAEO,UAAU,CAACP,IAAI;MACrBC,OAAO,EAAEM,UAAU,CAACN,OAAO,IAAI;KAChC,CAAC;IARcI,MAAA,CAAAC,cAAA;;;;aAAO,CAAC;;IACRD,MAAA,CAAAC,cAAA;;;;aAAO;;EAQzB;;AAVgBD,MAAA,CAAAC,cAAA,CAAAjB,iBAAA;;;;SAAO,CAAC;EAAJ;AAatB;AACA,OAAM,MAAOO,qBAAsB,SAAQM,SAAS;EAKlDE,YAAYG,UAAA,GAAiD,EAAE;IAC7D,KAAK,CAAC;MACJpB,IAAI,EAAES,qBAAqB,CAACT,IAAI;MAChCa,IAAI,EAAEO,UAAU,CAACP,IAAI;MACrBC,OAAO,EAAEM,UAAU,CAACN,OAAO,IAAI;KAChC,CAAC;IARcI,MAAA,CAAAC,cAAA;;;;aAAO,CAAC;;IACRD,MAAA,CAAAC,cAAA;;;;aAAO;;EAQzB;;AAVgBD,MAAA,CAAAC,cAAA,CAAAV,qBAAA;;;;SAAO,CAAC;EAAJ;AAatB;AACA,OAAM,MAAOC,wBAAyB,SAAQK,SAAS;EAKrDE,YAAYG,UAAA,GAAiD,EAAE;IAC7D,KAAK,CAAC;MACJpB,IAAI,EAAEU,wBAAwB,CAACV,IAAI;MACnCa,IAAI,EAAEO,UAAU,CAACP,IAAI;MACrBC,OAAO,EAAEM,UAAU,CAACN,OAAO,IAAI;KAChC,CAAC;IARcI,MAAA,CAAAC,cAAA;;;;aAAO,CAAC;;IACRD,MAAA,CAAAC,cAAA;;;;aAAO;;EAQzB;;AAVgBD,MAAA,CAAAC,cAAA,CAAAT,wBAAA;;;;SAAO,CAAC;EAAJ;AAatB;AACA,OAAM,MAAOC,wBAAyB,SAAQI,SAAS;EAKrDE,YAAYG,UAAA,GAAiD,EAAE;IAC7D,KAAK,CAAC;MACJpB,IAAI,EAAEW,wBAAwB,CAACX,IAAI;MACnCa,IAAI,EAAEO,UAAU,CAACP,IAAI;MACrBC,OAAO,EAAEM,UAAU,CAACN,OAAO,IAAI;KAChC,CAAC;IARcI,MAAA,CAAAC,cAAA;;;;aAAO,CAAC;;IACRD,MAAA,CAAAC,cAAA;;;;aAAO;;EAQzB;;AAVgBD,MAAA,CAAAC,cAAA,CAAAR,wBAAA;;;;SAAO,CAAC;EAAJ;AAatB;AACA,OAAM,MAAOJ,uBAAwB,SAAQQ,SAAS;EAKpDE,YAAYG,UAAA,GAAiD,EAAE;IAC7D,KAAK,CAAC;MACJpB,IAAI,EAAEO,uBAAuB,CAACP,IAAI;MAClCa,IAAI,EAAEO,UAAU,CAACP,IAAI;MACrBC,OAAO,EAAEM,UAAU,CAACN,OAAO,IAAI;KAChC,CAAC;IARcI,MAAA,CAAAC,cAAA;;;;aAAO,CAAC;;IACRD,MAAA,CAAAC,cAAA;;;;aAAO;;EAQzB;;AAVgBD,MAAA,CAAAC,cAAA,CAAAZ,uBAAA;;;;SAAO,CAAC;EAAJ;AAatB;AACA,OAAM,MAAOF,kBAAmB,SAAQU,SAAS;EAK/CE,YAAYG,UAAA,GAAiD,EAAE;IAC7D,KAAK,CAAC;MACJpB,IAAI,EAAEK,kBAAkB,CAACL,IAAI;MAC7Ba,IAAI,EAAEO,UAAU,CAACP,IAAI;MACrBC,OAAO,EAAEM,UAAU,CAACN,OAAO,IAAI;KAChC,CAAC;IARcI,MAAA,CAAAC,cAAA;;;;aAAO,CAAC;;IACRD,MAAA,CAAAC,cAAA;;;;aAAO;;EAQzB;;AAVgBD,MAAA,CAAAC,cAAA,CAAAd,kBAAA;;;;SAAO,CAAC;EAAJ;AAatB;AACA,OAAM,MAAOO,wBAAyB,SAAQG,SAAS;EAKrDE,YAAYG,UAAA,GAAiD,EAAE;IAC7D,KAAK,CAAC;MACJpB,IAAI,EAAEY,wBAAwB,CAACZ,IAAI;MACnCa,IAAI,EAAEO,UAAU,CAACP,IAAI;MACrBC,OAAO,EAAEM,UAAU,CAACN,OAAO,IAAI;KAChC,CAAC;IARcI,MAAA,CAAAC,cAAA;;;;aAAO,CAAC;;IACRD,MAAA,CAAAC,cAAA;;;;aAAO;;EAQzB;;AAVgBD,MAAA,CAAAC,cAAA,CAAAP,wBAAA;;;;SAAO,CAAC;EAAJ;AAatB;AACA,OAAM,MAAOR,mBAAoB,SAAQW,SAAS;EAKhDE,YAAYG,UAAA,GAAiD,EAAE;IAC7D,KAAK,CAAC;MACJpB,IAAI,EAAEI,mBAAmB,CAACJ,IAAI;MAC9Ba,IAAI,EAAEO,UAAU,CAACP,IAAI;MACrBC,OAAO,EAAEM,UAAU,CAACN,OAAO,IAAI;KAChC,CAAC;IARcI,MAAA,CAAAC,cAAA;;;;aAAO,CAAC;;IACRD,MAAA,CAAAC,cAAA;;;;aAAO;;EAQzB;;AAVgBD,MAAA,CAAAC,cAAA,CAAAf,mBAAA;;;;SAAO,CAAC;EAAJ;AAatB;AACA,OAAM,MAAOE,mBAAoB,SAAQS,SAAS;EAKhDE,YAAYG,UAAA,GAAiD,EAAE;IAC7D,KAAK,CAAC;MACJpB,IAAI,EAAEM,mBAAmB,CAACN,IAAI;MAC9Ba,IAAI,EAAEO,UAAU,CAACP,IAAI;MACrBC,OAAO,EAAEM,UAAU,CAACN,OAAO,IAAI;KAChC,CAAC;IARcI,MAAA,CAAAC,cAAA;;;;aAAO,CAAC;;IACRD,MAAA,CAAAC,cAAA;;;;aAAO;;EAQzB;;AAVgBD,MAAA,CAAAC,cAAA,CAAAb,mBAAA;;;;SAAO,CAAC;EAAJ;AAatB;AACA,OAAM,MAAOH,kBAAmB,SAAQY,SAAS;EAK/CE,YAAYG,UAAA,GAAiD,EAAE;IAC7D,KAAK,CAAC;MACJpB,IAAI,EAAEG,kBAAkB,CAACH,IAAI;MAC7Ba,IAAI,EAAEO,UAAU,CAACP,IAAI;MACrBC,OAAO,EAAEM,UAAU,CAACN,OAAO,IAAI;KAChC,CAAC;IARcI,MAAA,CAAAC,cAAA;;;;aAAO,CAAC;;IACRD,MAAA,CAAAC,cAAA;;;;aAAO;;EAQzB;;AAVgBD,MAAA,CAAAC,cAAA,CAAAhB,kBAAA;;;;SAAO,CAAC;EAAJ;AAatB;AACA,OAAM,MAAOF,aAAc,SAAQc,SAAS;EAK1CE,YAAYG,UAAA,GAAiD,EAAE;IAC7D,KAAK,CAAC;MACJpB,IAAI,EAAEC,aAAa,CAACD,IAAI;MACxBa,IAAI,EAAEO,UAAU,CAACP,IAAI;MACrBC,OAAO,EAAEM,UAAU,CAACN,OAAO,IAAI;KAChC,CAAC;IARcI,MAAA,CAAAC,cAAA;;;;aAAO,CAAC;;IACRD,MAAA,CAAAC,cAAA;;;;aAAO;;EAQzB;;AAVgBD,MAAA,CAAAC,cAAA,CAAAlB,aAAA;;;;SAAO,CAAC;EAAJ;AAatB;AACA,OAAM,MAAOO,UAAW,SAAQO,SAAS;EAKvCE,YAAYG,UAAA,GAAiD,EAAE;IAC7D,KAAK,CAAC;MACJpB,IAAI,EAAEQ,UAAU,CAACR,IAAI;MACrBa,IAAI,EAAEO,UAAU,CAACP,IAAI;MACrBC,OAAO,EAAEM,UAAU,CAACN,OAAO,IAAI;KAChC,CAAC;IARcI,MAAA,CAAAC,cAAA;;;;aAAO,CAAC;;IACRD,MAAA,CAAAC,cAAA;;;;aAAO;;EAQzB;;AAVgBD,MAAA,CAAAC,cAAA,CAAAX,UAAA;;;;SAAO,CAAC;EAAJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}