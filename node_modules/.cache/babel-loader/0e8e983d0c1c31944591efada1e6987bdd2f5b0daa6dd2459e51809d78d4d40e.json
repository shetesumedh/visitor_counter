{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.blobsToProofs = blobsToProofs;\nconst toBytes_js_1 = require(\"../encoding/toBytes.js\");\nconst toHex_js_1 = require(\"../encoding/toHex.js\");\nfunction blobsToProofs(parameters) {\n  const {\n    kzg\n  } = parameters;\n  const to = parameters.to ?? (typeof parameters.blobs[0] === 'string' ? 'hex' : 'bytes');\n  const blobs = typeof parameters.blobs[0] === 'string' ? parameters.blobs.map(x => (0, toBytes_js_1.hexToBytes)(x)) : parameters.blobs;\n  const commitments = typeof parameters.commitments[0] === 'string' ? parameters.commitments.map(x => (0, toBytes_js_1.hexToBytes)(x)) : parameters.commitments;\n  const proofs = [];\n  for (let i = 0; i < blobs.length; i++) {\n    const blob = blobs[i];\n    const commitment = commitments[i];\n    proofs.push(Uint8Array.from(kzg.computeBlobKzgProof(blob, commitment)));\n  }\n  return to === 'bytes' ? proofs : proofs.map(x => (0, toHex_js_1.bytesToHex)(x));\n}","map":{"version":3,"names":["exports","blobsToProofs","toBytes_js_1","require","toHex_js_1","parameters","kzg","to","blobs","map","x","hexToBytes","commitments","proofs","i","length","blob","commitment","push","Uint8Array","from","computeBlobKzgProof","bytesToHex"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/viem/utils/blob/blobsToProofs.ts"],"sourcesContent":["import type { ErrorType } from '../../errors/utils.js'\nimport type { Kzg } from '../../types/kzg.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type HexToBytesErrorType, hexToBytes } from '../encoding/toBytes.js'\nimport { type BytesToHexErrorType, bytesToHex } from '../encoding/toHex.js'\n\ntype To = 'hex' | 'bytes'\n\nexport type blobsToProofsParameters<\n  blobs extends readonly ByteArray[] | readonly Hex[],\n  commitments extends readonly ByteArray[] | readonly Hex[],\n  to extends To =\n    | (blobs extends readonly Hex[] ? 'hex' : never)\n    | (blobs extends readonly ByteArray[] ? 'bytes' : never),\n  ///\n  _blobsType =\n    | (blobs extends readonly Hex[] ? readonly Hex[] : never)\n    | (blobs extends readonly ByteArray[] ? readonly ByteArray[] : never),\n> = {\n  /** Blobs to transform into proofs. */\n  blobs: blobs\n  /** Commitments for the blobs. */\n  commitments: commitments &\n    (commitments extends _blobsType\n      ? {}\n      : `commitments must be the same type as blobs`)\n  /** KZG implementation. */\n  kzg: Pick<Kzg, 'computeBlobKzgProof'>\n  /** Return type. */\n  to?: to | To | undefined\n}\n\nexport type blobsToProofsReturnType<to extends To> =\n  | (to extends 'bytes' ? ByteArray[] : never)\n  | (to extends 'hex' ? Hex[] : never)\n\nexport type blobsToProofsErrorType =\n  | BytesToHexErrorType\n  | HexToBytesErrorType\n  | ErrorType\n\n/**\n * Compute the proofs for a list of blobs and their commitments.\n *\n * @example\n * ```ts\n * import {\n *   blobsToCommitments,\n *   toBlobs\n * } from 'viem'\n * import { kzg } from './kzg'\n *\n * const blobs = toBlobs({ data: '0x1234' })\n * const commitments = blobsToCommitments({ blobs, kzg })\n * const proofs = blobsToProofs({ blobs, commitments, kzg })\n * ```\n */\nexport function blobsToProofs<\n  const blobs extends readonly ByteArray[] | readonly Hex[],\n  const commitments extends readonly ByteArray[] | readonly Hex[],\n  to extends To =\n    | (blobs extends readonly Hex[] ? 'hex' : never)\n    | (blobs extends readonly ByteArray[] ? 'bytes' : never),\n>(\n  parameters: blobsToProofsParameters<blobs, commitments, to>,\n): blobsToProofsReturnType<to> {\n  const { kzg } = parameters\n\n  const to =\n    parameters.to ?? (typeof parameters.blobs[0] === 'string' ? 'hex' : 'bytes')\n\n  const blobs = (\n    typeof parameters.blobs[0] === 'string'\n      ? parameters.blobs.map((x) => hexToBytes(x as any))\n      : parameters.blobs\n  ) as ByteArray[]\n  const commitments = (\n    typeof parameters.commitments[0] === 'string'\n      ? parameters.commitments.map((x) => hexToBytes(x as any))\n      : parameters.commitments\n  ) as ByteArray[]\n\n  const proofs: ByteArray[] = []\n  for (let i = 0; i < blobs.length; i++) {\n    const blob = blobs[i]\n    const commitment = commitments[i]\n    proofs.push(Uint8Array.from(kzg.computeBlobKzgProof(blob, commitment)))\n  }\n\n  return (to === 'bytes'\n    ? proofs\n    : proofs.map((x) => bytesToHex(x))) as {} as blobsToProofsReturnType<to>\n}\n"],"mappings":";;;;;AAyDAA,OAAA,CAAAC,aAAA,GAAAA,aAAA;AAtDA,MAAAC,YAAA,GAAAC,OAAA;AACA,MAAAC,UAAA,GAAAD,OAAA;AAqDA,SAAgBF,aAAaA,CAO3BI,UAA2D;EAE3D,MAAM;IAAEC;EAAG,CAAE,GAAGD,UAAU;EAE1B,MAAME,EAAE,GACNF,UAAU,CAACE,EAAE,KAAK,OAAOF,UAAU,CAACG,KAAK,CAAC,CAAC,CAAC,KAAK,QAAQ,GAAG,KAAK,GAAG,OAAO,CAAC;EAE9E,MAAMA,KAAK,GACT,OAAOH,UAAU,CAACG,KAAK,CAAC,CAAC,CAAC,KAAK,QAAQ,GACnCH,UAAU,CAACG,KAAK,CAACC,GAAG,CAAEC,CAAC,IAAK,IAAAR,YAAA,CAAAS,UAAU,EAACD,CAAQ,CAAC,CAAC,GACjDL,UAAU,CAACG,KACD;EAChB,MAAMI,WAAW,GACf,OAAOP,UAAU,CAACO,WAAW,CAAC,CAAC,CAAC,KAAK,QAAQ,GACzCP,UAAU,CAACO,WAAW,CAACH,GAAG,CAAEC,CAAC,IAAK,IAAAR,YAAA,CAAAS,UAAU,EAACD,CAAQ,CAAC,CAAC,GACvDL,UAAU,CAACO,WACD;EAEhB,MAAMC,MAAM,GAAgB,EAAE;EAC9B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,KAAK,CAACO,MAAM,EAAED,CAAC,EAAE,EAAE;IACrC,MAAME,IAAI,GAAGR,KAAK,CAACM,CAAC,CAAC;IACrB,MAAMG,UAAU,GAAGL,WAAW,CAACE,CAAC,CAAC;IACjCD,MAAM,CAACK,IAAI,CAACC,UAAU,CAACC,IAAI,CAACd,GAAG,CAACe,mBAAmB,CAACL,IAAI,EAAEC,UAAU,CAAC,CAAC,CAAC;EACzE;EAEA,OAAQV,EAAE,KAAK,OAAO,GAClBM,MAAM,GACNA,MAAM,CAACJ,GAAG,CAAEC,CAAC,IAAK,IAAAN,UAAA,CAAAkB,UAAU,EAACZ,CAAC,CAAC,CAAC;AACtC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}