{"ast":null,"code":"'use client';\n\nimport { getFeeHistoryQueryOptions } from '@wagmi/core/query';\nimport { useQuery } from '../utils/query.js';\nimport { useChainId } from './useChainId.js';\nimport { useConfig } from './useConfig.js';\n/** https://wagmi.sh/react/api/hooks/useFeeHistory */\nexport function useFeeHistory(parameters = {}) {\n  const {\n    blockCount,\n    rewardPercentiles,\n    query = {}\n  } = parameters;\n  const config = useConfig(parameters);\n  const chainId = useChainId({\n    config\n  });\n  const options = getFeeHistoryQueryOptions(config, {\n    ...parameters,\n    chainId: parameters.chainId ?? chainId\n  });\n  const enabled = Boolean(blockCount && rewardPercentiles && (query.enabled ?? true));\n  return useQuery({\n    ...query,\n    ...options,\n    enabled\n  });\n}","map":{"version":3,"names":["getFeeHistoryQueryOptions","useQuery","useChainId","useConfig","useFeeHistory","parameters","blockCount","rewardPercentiles","query","config","chainId","options","enabled","Boolean"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/wagmi/src/hooks/useFeeHistory.ts"],"sourcesContent":["'use client'\n\nimport type {\n  Config,\n  GetFeeHistoryErrorType,\n  ResolvedRegister,\n} from '@wagmi/core'\nimport type { Compute } from '@wagmi/core/internal'\nimport {\n  type GetFeeHistoryData,\n  type GetFeeHistoryOptions,\n  type GetFeeHistoryQueryFnData,\n  type GetFeeHistoryQueryKey,\n  getFeeHistoryQueryOptions,\n} from '@wagmi/core/query'\n\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseFeeHistoryParameters<\n  config extends Config = Config,\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n  selectData = GetFeeHistoryData,\n> = Compute<\n  GetFeeHistoryOptions<config, chainId> &\n    ConfigParameter<config> &\n    QueryParameter<\n      GetFeeHistoryQueryFnData,\n      GetFeeHistoryErrorType,\n      selectData,\n      GetFeeHistoryQueryKey<config, chainId>\n    >\n>\n\nexport type UseFeeHistoryReturnType<selectData = GetFeeHistoryData> =\n  UseQueryReturnType<selectData, GetFeeHistoryErrorType>\n\n/** https://wagmi.sh/react/api/hooks/useFeeHistory */\nexport function useFeeHistory<\n  config extends Config = ResolvedRegister['config'],\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n  selectData = GetFeeHistoryData,\n>(\n  parameters: UseFeeHistoryParameters<config, chainId, selectData> = {},\n): UseFeeHistoryReturnType<selectData> {\n  const { blockCount, rewardPercentiles, query = {} } = parameters\n\n  const config = useConfig(parameters)\n  const chainId = useChainId({ config })\n\n  const options = getFeeHistoryQueryOptions(config, {\n    ...parameters,\n    chainId: parameters.chainId ?? chainId,\n  })\n  const enabled = Boolean(\n    blockCount && rewardPercentiles && (query.enabled ?? true),\n  )\n\n  return useQuery({ ...query, ...options, enabled })\n}\n"],"mappings":"AAAA,YAAY;;AAQZ,SAKEA,yBAAyB,QACpB,mBAAmB;AAG1B,SAAkCC,QAAQ,QAAQ,mBAAmB;AACrE,SAASC,UAAU,QAAQ,iBAAiB;AAC5C,SAASC,SAAS,QAAQ,gBAAgB;AAqB1C;AACA,OAAM,SAAUC,aAAaA,CAM3BC,UAAA,GAAmE,EAAE;EAErE,MAAM;IAAEC,UAAU;IAAEC,iBAAiB;IAAEC,KAAK,GAAG;EAAE,CAAE,GAAGH,UAAU;EAEhE,MAAMI,MAAM,GAAGN,SAAS,CAACE,UAAU,CAAC;EACpC,MAAMK,OAAO,GAAGR,UAAU,CAAC;IAAEO;EAAM,CAAE,CAAC;EAEtC,MAAME,OAAO,GAAGX,yBAAyB,CAACS,MAAM,EAAE;IAChD,GAAGJ,UAAU;IACbK,OAAO,EAAEL,UAAU,CAACK,OAAO,IAAIA;GAChC,CAAC;EACF,MAAME,OAAO,GAAGC,OAAO,CACrBP,UAAU,IAAIC,iBAAiB,KAAKC,KAAK,CAACI,OAAO,IAAI,IAAI,CAAC,CAC3D;EAED,OAAOX,QAAQ,CAAC;IAAE,GAAGO,KAAK;IAAE,GAAGG,OAAO;IAAEC;EAAO,CAAE,CAAC;AACpD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}