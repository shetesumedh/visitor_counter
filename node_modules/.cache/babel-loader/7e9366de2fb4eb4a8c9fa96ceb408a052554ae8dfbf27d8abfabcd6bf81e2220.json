{"ast":null,"code":"import { simulateContract as viem_simulateContract } from 'viem/actions';\nimport { getAction } from '../utils/getAction.js';\nimport { getConnectorClient } from './getConnectorClient.js';\n/** https://wagmi.sh/core/api/actions/simulateContract */\nexport async function simulateContract(config, parameters) {\n  const {\n    abi,\n    chainId,\n    connector,\n    ...rest\n  } = parameters;\n  let account;\n  if (parameters.account) account = parameters.account;else {\n    const connectorClient = await getConnectorClient(config, {\n      chainId,\n      connector\n    });\n    account = connectorClient.account;\n  }\n  const client = config.getClient({\n    chainId\n  });\n  const action = getAction(client, viem_simulateContract, 'simulateContract');\n  const {\n    result,\n    request\n  } = await action({\n    ...rest,\n    abi,\n    account\n  });\n  return {\n    chainId: client.chain.id,\n    result,\n    request: {\n      ...request,\n      chainId\n    }\n  };\n}","map":{"version":3,"names":["simulateContract","viem_simulateContract","getAction","getConnectorClient","config","parameters","abi","chainId","connector","rest","account","connectorClient","client","getClient","action","result","request","chain","id"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/@wagmi/core/src/actions/simulateContract.ts"],"sourcesContent":["import type {\n  Abi,\n  Account,\n  Address,\n  Chain,\n  ContractFunctionArgs,\n  ContractFunctionName,\n} from 'viem'\nimport {\n  type SimulateContractErrorType as viem_SimulateContractErrorType,\n  type SimulateContractParameters as viem_SimulateContractParameters,\n  type SimulateContractReturnType as viem_SimulateContractReturnType,\n  simulateContract as viem_simulateContract,\n} from 'viem/actions'\n\nimport type { Config } from '../createConfig.js'\nimport type { BaseErrorType, ErrorType } from '../errors/base.js'\nimport type { SelectChains } from '../types/chain.js'\nimport type {\n  ChainIdParameter,\n  ConnectorParameter,\n} from '../types/properties.js'\nimport type {\n  Compute,\n  PartialBy,\n  UnionCompute,\n  UnionStrictOmit,\n} from '../types/utils.js'\nimport { getAction } from '../utils/getAction.js'\nimport {\n  type GetConnectorClientErrorType,\n  getConnectorClient,\n} from './getConnectorClient.js'\n\nexport type SimulateContractParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  functionName extends ContractFunctionName<\n    abi,\n    'nonpayable' | 'payable'\n  > = ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n  args extends ContractFunctionArgs<\n    abi,\n    'nonpayable' | 'payable',\n    functionName\n  > = ContractFunctionArgs<abi, 'nonpayable' | 'payable', functionName>,\n  config extends Config = Config,\n  chainId extends\n    | config['chains'][number]['id']\n    | undefined = config['chains'][number]['id'],\n  ///\n  chains extends readonly Chain[] = SelectChains<config, chainId>,\n> = {\n  [key in keyof chains]: UnionCompute<\n    UnionStrictOmit<\n      viem_SimulateContractParameters<\n        abi,\n        functionName,\n        args,\n        chains[key],\n        chains[key],\n        Account | Address\n      >,\n      'chain'\n    >\n  > &\n    ChainIdParameter<config, chainId> &\n    ConnectorParameter\n}[number]\n\nexport type SimulateContractReturnType<\n  abi extends Abi | readonly unknown[] = Abi,\n  functionName extends ContractFunctionName<\n    abi,\n    'nonpayable' | 'payable'\n  > = ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n  args extends ContractFunctionArgs<\n    abi,\n    'nonpayable' | 'payable',\n    functionName\n  > = ContractFunctionArgs<abi, 'nonpayable' | 'payable', functionName>,\n  config extends Config = Config,\n  chainId extends\n    | config['chains'][number]['id']\n    | undefined = config['chains'][number]['id'],\n  ///\n  chains extends readonly Chain[] = SelectChains<config, chainId>,\n> = {\n  [key in keyof chains]: viem_SimulateContractReturnType<\n    abi,\n    functionName,\n    args,\n    chains[key],\n    Account,\n    chains[key]\n  > & {\n    chainId: chains[key]['id']\n    request: Compute<\n      PartialBy<\n        { chainId: chainId; chain: chains[key] },\n        chainId extends config['chains'][number]['id'] ? never : 'chainId'\n      >\n    >\n  }\n}[number]\n\nexport type SimulateContractErrorType =\n  // getConnectorClient()\n  | GetConnectorClientErrorType\n  // base\n  | BaseErrorType\n  | ErrorType\n  // viem\n  | viem_SimulateContractErrorType\n\n/** https://wagmi.sh/core/api/actions/simulateContract */\nexport async function simulateContract<\n  config extends Config,\n  const abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n  args extends ContractFunctionArgs<\n    abi,\n    'nonpayable' | 'payable',\n    functionName\n  >,\n  chainId extends config['chains'][number]['id'] | undefined = undefined,\n>(\n  config: config,\n  parameters: SimulateContractParameters<\n    abi,\n    functionName,\n    args,\n    config,\n    chainId\n  >,\n): Promise<\n  SimulateContractReturnType<abi, functionName, args, config, chainId>\n> {\n  const { abi, chainId, connector, ...rest } =\n    parameters as SimulateContractParameters\n\n  let account: Address | Account\n  if (parameters.account) account = parameters.account\n  else {\n    const connectorClient = await getConnectorClient(config, {\n      chainId,\n      connector,\n    })\n    account = connectorClient.account\n  }\n\n  const client = config.getClient({ chainId })\n  const action = getAction(client, viem_simulateContract, 'simulateContract')\n  const { result, request } = await action({ ...rest, abi, account })\n\n  return {\n    chainId: client.chain.id,\n    result,\n    request: { ...request, chainId },\n  } as unknown as SimulateContractReturnType<\n    abi,\n    functionName,\n    args,\n    config,\n    chainId\n  >\n}\n"],"mappings":"AAQA,SAIEA,gBAAgB,IAAIC,qBAAqB,QACpC,cAAc;AAerB,SAASC,SAAS,QAAQ,uBAAuB;AACjD,SAEEC,kBAAkB,QACb,yBAAyB;AAkFhC;AACA,OAAO,eAAeH,gBAAgBA,CAWpCI,MAAc,EACdC,UAMC;EAID,MAAM;IAAEC,GAAG;IAAEC,OAAO;IAAEC,SAAS;IAAE,GAAGC;EAAI,CAAE,GACxCJ,UAAwC;EAE1C,IAAIK,OAA0B;EAC9B,IAAIL,UAAU,CAACK,OAAO,EAAEA,OAAO,GAAGL,UAAU,CAACK,OAAO,MAC/C;IACH,MAAMC,eAAe,GAAG,MAAMR,kBAAkB,CAACC,MAAM,EAAE;MACvDG,OAAO;MACPC;KACD,CAAC;IACFE,OAAO,GAAGC,eAAe,CAACD,OAAO;EACnC;EAEA,MAAME,MAAM,GAAGR,MAAM,CAACS,SAAS,CAAC;IAAEN;EAAO,CAAE,CAAC;EAC5C,MAAMO,MAAM,GAAGZ,SAAS,CAACU,MAAM,EAAEX,qBAAqB,EAAE,kBAAkB,CAAC;EAC3E,MAAM;IAAEc,MAAM;IAAEC;EAAO,CAAE,GAAG,MAAMF,MAAM,CAAC;IAAE,GAAGL,IAAI;IAAEH,GAAG;IAAEI;EAAO,CAAE,CAAC;EAEnE,OAAO;IACLH,OAAO,EAAEK,MAAM,CAACK,KAAK,CAACC,EAAE;IACxBH,MAAM;IACNC,OAAO,EAAE;MAAE,GAAGA,OAAO;MAAET;IAAO;GAO/B;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}