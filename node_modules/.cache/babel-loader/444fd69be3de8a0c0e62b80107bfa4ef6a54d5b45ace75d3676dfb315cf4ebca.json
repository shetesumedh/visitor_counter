{"ast":null,"code":"import { getStorageAt } from '../actions/getStorageAt.js';\nimport { filterQueryOptions } from './utils.js';\nexport function getStorageAtQueryOptions(config, options = {}) {\n  return {\n    queryFn({\n      queryKey\n    }) {\n      const {\n        address,\n        slot,\n        scopeKey: _,\n        ...parameters\n      } = queryKey[1];\n      if (!address || !slot) throw new Error('address and slot are required');\n      return getStorageAt(config, {\n        ...parameters,\n        address,\n        slot\n      });\n    },\n    queryKey: getStorageAtQueryKey(options)\n  };\n}\nexport function getStorageAtQueryKey(options) {\n  return ['getStorageAt', filterQueryOptions(options)];\n}","map":{"version":3,"names":["getStorageAt","filterQueryOptions","getStorageAtQueryOptions","config","options","queryFn","queryKey","address","slot","scopeKey","_","parameters","Error","getStorageAtQueryKey"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/@wagmi/core/src/query/getStorageAt.ts"],"sourcesContent":["import type { QueryOptions } from '@tanstack/query-core'\n\nimport {\n  type GetStorageAtErrorType,\n  type GetStorageAtParameters,\n  type GetStorageAtReturnType,\n  getStorageAt,\n} from '../actions/getStorageAt.js'\nimport type { Config } from '../createConfig.js'\nimport type { ScopeKeyParameter } from '../types/properties.js'\nimport type { Compute, ExactPartial } from '../types/utils.js'\nimport { filterQueryOptions } from './utils.js'\n\nexport type GetStorageAtOptions<config extends Config> = Compute<\n  ExactPartial<GetStorageAtParameters<config>> & ScopeKeyParameter\n>\n\nexport function getStorageAtQueryOptions<config extends Config>(\n  config: config,\n  options: GetStorageAtOptions<config> = {},\n) {\n  return {\n    queryFn({ queryKey }) {\n      const { address, slot, scopeKey: _, ...parameters } = queryKey[1]\n      if (!address || !slot) throw new Error('address and slot are required')\n      return getStorageAt(config, { ...parameters, address, slot })\n    },\n    queryKey: getStorageAtQueryKey(options),\n  } as const satisfies QueryOptions<\n    GetStorageAtQueryFnData,\n    GetStorageAtErrorType,\n    GetStorageAtData,\n    GetStorageAtQueryKey<config>\n  >\n}\n\nexport type GetStorageAtQueryFnData = GetStorageAtReturnType\n\nexport type GetStorageAtData = GetStorageAtQueryFnData\n\nexport function getStorageAtQueryKey<config extends Config>(\n  options: GetStorageAtOptions<config>,\n) {\n  return ['getStorageAt', filterQueryOptions(options)] as const\n}\n\nexport type GetStorageAtQueryKey<config extends Config> = ReturnType<\n  typeof getStorageAtQueryKey<config>\n>\n"],"mappings":"AAEA,SAIEA,YAAY,QACP,4BAA4B;AAInC,SAASC,kBAAkB,QAAQ,YAAY;AAM/C,OAAM,SAAUC,wBAAwBA,CACtCC,MAAc,EACdC,OAAA,GAAuC,EAAE;EAEzC,OAAO;IACLC,OAAOA,CAAC;MAAEC;IAAQ,CAAE;MAClB,MAAM;QAAEC,OAAO;QAAEC,IAAI;QAAEC,QAAQ,EAAEC,CAAC;QAAE,GAAGC;MAAU,CAAE,GAAGL,QAAQ,CAAC,CAAC,CAAC;MACjE,IAAI,CAACC,OAAO,IAAI,CAACC,IAAI,EAAE,MAAM,IAAII,KAAK,CAAC,+BAA+B,CAAC;MACvE,OAAOZ,YAAY,CAACG,MAAM,EAAE;QAAE,GAAGQ,UAAU;QAAEJ,OAAO;QAAEC;MAAI,CAAE,CAAC;IAC/D,CAAC;IACDF,QAAQ,EAAEO,oBAAoB,CAACT,OAAO;GAMvC;AACH;AAMA,OAAM,SAAUS,oBAAoBA,CAClCT,OAAoC;EAEpC,OAAO,CAAC,cAAc,EAAEH,kBAAkB,CAACG,OAAO,CAAC,CAAU;AAC/D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}