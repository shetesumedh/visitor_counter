{"ast":null,"code":"'use client';\n\nimport { getStorageAtQueryOptions } from '@wagmi/core/query';\nimport { useQuery } from '../utils/query.js';\nimport { useChainId } from './useChainId.js';\nimport { useConfig } from './useConfig.js';\n/** https://wagmi.sh/react/api/hooks/useStorageAt */\nexport function useStorageAt(parameters = {}) {\n  const {\n    address,\n    slot,\n    query = {}\n  } = parameters;\n  const config = useConfig(parameters);\n  const chainId = useChainId({\n    config\n  });\n  const options = getStorageAtQueryOptions(config, {\n    ...parameters,\n    chainId: parameters.chainId ?? chainId\n  });\n  const enabled = Boolean(address && slot && (query.enabled ?? true));\n  return useQuery({\n    ...query,\n    ...options,\n    enabled\n  });\n}","map":{"version":3,"names":["getStorageAtQueryOptions","useQuery","useChainId","useConfig","useStorageAt","parameters","address","slot","query","config","chainId","options","enabled","Boolean"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/wagmi/src/hooks/useStorageAt.ts"],"sourcesContent":["'use client'\n\nimport type {\n  Config,\n  GetStorageAtErrorType,\n  ResolvedRegister,\n} from '@wagmi/core'\nimport type { Compute } from '@wagmi/core/internal'\nimport {\n  type GetStorageAtData,\n  type GetStorageAtOptions,\n  type GetStorageAtQueryKey,\n  getStorageAtQueryOptions,\n} from '@wagmi/core/query'\nimport type { GetStorageAtQueryFnData } from '@wagmi/core/query'\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseStorageAtParameters<\n  config extends Config = Config,\n  selectData = GetStorageAtData,\n> = Compute<\n  GetStorageAtOptions<config> &\n    ConfigParameter<config> &\n    QueryParameter<\n      GetStorageAtQueryFnData,\n      GetStorageAtErrorType,\n      selectData,\n      GetStorageAtQueryKey<config>\n    >\n>\n\nexport type UseStorageAtReturnType<selectData = GetStorageAtData> =\n  UseQueryReturnType<selectData, GetStorageAtErrorType>\n\n/** https://wagmi.sh/react/api/hooks/useStorageAt */\nexport function useStorageAt<\n  config extends Config = ResolvedRegister['config'],\n  selectData = GetStorageAtData,\n>(\n  parameters: UseStorageAtParameters<config, selectData> = {},\n): UseStorageAtReturnType<selectData> {\n  const { address, slot, query = {} } = parameters\n\n  const config = useConfig(parameters)\n  const chainId = useChainId({ config })\n\n  const options = getStorageAtQueryOptions(config, {\n    ...parameters,\n    chainId: parameters.chainId ?? chainId,\n  })\n  const enabled = Boolean(address && slot && (query.enabled ?? true))\n\n  return useQuery({ ...query, ...options, enabled })\n}\n"],"mappings":"AAAA,YAAY;;AAQZ,SAIEA,wBAAwB,QACnB,mBAAmB;AAG1B,SAAkCC,QAAQ,QAAQ,mBAAmB;AACrE,SAASC,UAAU,QAAQ,iBAAiB;AAC5C,SAASC,SAAS,QAAQ,gBAAgB;AAmB1C;AACA,OAAM,SAAUC,YAAYA,CAI1BC,UAAA,GAAyD,EAAE;EAE3D,MAAM;IAAEC,OAAO;IAAEC,IAAI;IAAEC,KAAK,GAAG;EAAE,CAAE,GAAGH,UAAU;EAEhD,MAAMI,MAAM,GAAGN,SAAS,CAACE,UAAU,CAAC;EACpC,MAAMK,OAAO,GAAGR,UAAU,CAAC;IAAEO;EAAM,CAAE,CAAC;EAEtC,MAAME,OAAO,GAAGX,wBAAwB,CAACS,MAAM,EAAE;IAC/C,GAAGJ,UAAU;IACbK,OAAO,EAAEL,UAAU,CAACK,OAAO,IAAIA;GAChC,CAAC;EACF,MAAME,OAAO,GAAGC,OAAO,CAACP,OAAO,IAAIC,IAAI,KAAKC,KAAK,CAACI,OAAO,IAAI,IAAI,CAAC,CAAC;EAEnE,OAAOX,QAAQ,CAAC;IAAE,GAAGO,KAAK;IAAE,GAAGG,OAAO;IAAEC;EAAO,CAAE,CAAC;AACpD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}