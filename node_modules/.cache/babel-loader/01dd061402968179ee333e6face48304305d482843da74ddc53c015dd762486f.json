{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.writeContract = writeContract;\nconst parseAccount_js_1 = require(\"../../accounts/utils/parseAccount.js\");\nconst account_js_1 = require(\"../../errors/account.js\");\nconst encodeFunctionData_js_1 = require(\"../../utils/abi/encodeFunctionData.js\");\nconst getContractError_js_1 = require(\"../../utils/errors/getContractError.js\");\nconst getAction_js_1 = require(\"../../utils/getAction.js\");\nconst sendTransaction_js_1 = require(\"./sendTransaction.js\");\nasync function writeContract(client, parameters) {\n  const {\n    abi,\n    account: account_ = client.account,\n    address,\n    args,\n    dataSuffix,\n    functionName,\n    ...request\n  } = parameters;\n  if (typeof account_ === 'undefined') throw new account_js_1.AccountNotFoundError({\n    docsPath: '/docs/contract/writeContract'\n  });\n  const account = account_ ? (0, parseAccount_js_1.parseAccount)(account_) : null;\n  const data = (0, encodeFunctionData_js_1.encodeFunctionData)({\n    abi,\n    args,\n    functionName\n  });\n  try {\n    return await (0, getAction_js_1.getAction)(client, sendTransaction_js_1.sendTransaction, 'sendTransaction')({\n      data: `${data}${dataSuffix ? dataSuffix.replace('0x', '') : ''}`,\n      to: address,\n      account,\n      ...request\n    });\n  } catch (error) {\n    throw (0, getContractError_js_1.getContractError)(error, {\n      abi,\n      address,\n      args,\n      docsPath: '/docs/contract/writeContract',\n      functionName,\n      sender: account?.address\n    });\n  }\n}","map":{"version":3,"names":["exports","writeContract","parseAccount_js_1","require","account_js_1","encodeFunctionData_js_1","getContractError_js_1","getAction_js_1","sendTransaction_js_1","client","parameters","abi","account","account_","address","args","dataSuffix","functionName","request","AccountNotFoundError","docsPath","parseAccount","data","encodeFunctionData","getAction","sendTransaction","replace","to","error","getContractError","sender"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/viem/actions/wallet/writeContract.ts"],"sourcesContent":["import type { Abi, Address } from 'abitype'\n\nimport type { Account } from '../../accounts/types.js'\nimport {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../../accounts/utils/parseAccount.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport {\n  AccountNotFoundError,\n  type AccountNotFoundErrorType,\n} from '../../errors/account.js'\nimport type { BaseError } from '../../errors/base.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { GetAccountParameter } from '../../types/account.js'\nimport type {\n  Chain,\n  DeriveChain,\n  GetChainParameter,\n} from '../../types/chain.js'\nimport type {\n  ContractFunctionArgs,\n  ContractFunctionName,\n  ContractFunctionParameters,\n} from '../../types/contract.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { Prettify, UnionEvaluate, UnionOmit } from '../../types/utils.js'\nimport {\n  type EncodeFunctionDataErrorType,\n  type EncodeFunctionDataParameters,\n  encodeFunctionData,\n} from '../../utils/abi/encodeFunctionData.js'\nimport {\n  type GetContractErrorReturnType,\n  getContractError,\n} from '../../utils/errors/getContractError.js'\nimport type { FormattedTransactionRequest } from '../../utils/formatters/transactionRequest.js'\nimport { getAction } from '../../utils/getAction.js'\nimport type { GetMutabilityAwareValue } from '../public/simulateContract.js'\nimport {\n  type SendTransactionErrorType,\n  type SendTransactionReturnType,\n  sendTransaction,\n} from './sendTransaction.js'\n\nexport type WriteContractParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  functionName extends ContractFunctionName<\n    abi,\n    'nonpayable' | 'payable'\n  > = ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n  args extends ContractFunctionArgs<\n    abi,\n    'nonpayable' | 'payable',\n    functionName\n  > = ContractFunctionArgs<abi, 'nonpayable' | 'payable', functionName>,\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n  chainOverride extends Chain | undefined = Chain | undefined,\n  ///\n  allFunctionNames = ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n  derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>,\n> = ContractFunctionParameters<\n  abi,\n  'nonpayable' | 'payable',\n  functionName,\n  args,\n  false,\n  allFunctionNames\n> &\n  GetChainParameter<chain, chainOverride> &\n  Prettify<\n    GetAccountParameter<account, Account | Address, true, true> &\n      GetMutabilityAwareValue<\n        abi,\n        'nonpayable' | 'payable',\n        functionName,\n        FormattedTransactionRequest<derivedChain>['value'],\n        args\n      > & {\n        /** Data to append to the end of the calldata. Useful for adding a [\"domain\" tag](https://opensea.notion.site/opensea/Seaport-Order-Attributions-ec2d69bf455041a5baa490941aad307f). */\n        dataSuffix?: Hex | undefined\n      }\n  > &\n  UnionEvaluate<\n    UnionOmit<\n      FormattedTransactionRequest<derivedChain>,\n      'data' | 'from' | 'to' | 'value'\n    >\n  >\n\nexport type WriteContractReturnType = SendTransactionReturnType\n\nexport type WriteContractErrorType =\n  | EncodeFunctionDataErrorType\n  | AccountNotFoundErrorType\n  | ParseAccountErrorType\n  | GetContractErrorReturnType<SendTransactionErrorType>\n  | ErrorType\n\n/**\n * Executes a write function on a contract.\n *\n * - Docs: https://viem.sh/docs/contract/writeContract\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts_writing-to-contracts\n *\n * A \"write\" function on a Solidity contract modifies the state of the blockchain. These types of functions require gas to be executed, and hence a [Transaction](https://viem.sh/docs/glossary/terms) is needed to be broadcast in order to change the state.\n *\n * Internally, uses a [Wallet Client](https://viem.sh/docs/clients/wallet) to call the [`sendTransaction` action](https://viem.sh/docs/actions/wallet/sendTransaction) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\n *\n * __Warning: The `write` internally sends a transaction â€“ it does not validate if the contract write will succeed (the contract may throw an error). It is highly recommended to [simulate the contract write with `contract.simulate`](https://viem.sh/docs/contract/writeContract#usage) before you execute it.__\n *\n * @param client - Client to use\n * @param parameters - {@link WriteContractParameters}\n * @returns A [Transaction Hash](https://viem.sh/docs/glossary/terms#hash). {@link WriteContractReturnType}\n *\n * @example\n * import { createWalletClient, custom, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { writeContract } from 'viem/contract'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const hash = await writeContract(client, {\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *   abi: parseAbi(['function mint(uint32 tokenId) nonpayable']),\n *   functionName: 'mint',\n *   args: [69420],\n * })\n *\n * @example\n * // With Validation\n * import { createWalletClient, http, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { simulateContract, writeContract } from 'viem/contract'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const { request } = await simulateContract(client, {\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *   abi: parseAbi(['function mint(uint32 tokenId) nonpayable']),\n *   functionName: 'mint',\n *   args: [69420],\n * }\n * const hash = await writeContract(client, request)\n */\nexport async function writeContract<\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n  const abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n  args extends ContractFunctionArgs<\n    abi,\n    'nonpayable' | 'payable',\n    functionName\n  >,\n  chainOverride extends Chain | undefined,\n>(\n  client: Client<Transport, chain, account>,\n  parameters: WriteContractParameters<\n    abi,\n    functionName,\n    args,\n    chain,\n    account,\n    chainOverride\n  >,\n): Promise<WriteContractReturnType> {\n  const {\n    abi,\n    account: account_ = client.account,\n    address,\n    args,\n    dataSuffix,\n    functionName,\n    ...request\n  } = parameters as WriteContractParameters\n\n  if (typeof account_ === 'undefined')\n    throw new AccountNotFoundError({\n      docsPath: '/docs/contract/writeContract',\n    })\n  const account = account_ ? parseAccount(account_) : null\n\n  const data = encodeFunctionData({\n    abi,\n    args,\n    functionName,\n  } as EncodeFunctionDataParameters)\n\n  try {\n    return await getAction(\n      client,\n      sendTransaction,\n      'sendTransaction',\n    )({\n      data: `${data}${dataSuffix ? dataSuffix.replace('0x', '') : ''}`,\n      to: address,\n      account,\n      ...request,\n    })\n  } catch (error) {\n    throw getContractError(error as BaseError, {\n      abi,\n      address,\n      args,\n      docsPath: '/docs/contract/writeContract',\n      functionName,\n      sender: account?.address,\n    })\n  }\n}\n"],"mappings":";;;;;AAuJAA,OAAA,CAAAC,aAAA,GAAAA,aAAA;AApJA,MAAAC,iBAAA,GAAAC,OAAA;AAMA,MAAAC,YAAA,GAAAD,OAAA;AAmBA,MAAAE,uBAAA,GAAAF,OAAA;AAKA,MAAAG,qBAAA,GAAAH,OAAA;AAKA,MAAAI,cAAA,GAAAJ,OAAA;AAEA,MAAAK,oBAAA,GAAAL,OAAA;AA+GO,eAAeF,aAAaA,CAYjCQ,MAAyC,EACzCC,UAOC;EAED,MAAM;IACJC,GAAG;IACHC,OAAO,EAAEC,QAAQ,GAAGJ,MAAM,CAACG,OAAO;IAClCE,OAAO;IACPC,IAAI;IACJC,UAAU;IACVC,YAAY;IACZ,GAAGC;EAAO,CACX,GAAGR,UAAqC;EAEzC,IAAI,OAAOG,QAAQ,KAAK,WAAW,EACjC,MAAM,IAAIT,YAAA,CAAAe,oBAAoB,CAAC;IAC7BC,QAAQ,EAAE;GACX,CAAC;EACJ,MAAMR,OAAO,GAAGC,QAAQ,GAAG,IAAAX,iBAAA,CAAAmB,YAAY,EAACR,QAAQ,CAAC,GAAG,IAAI;EAExD,MAAMS,IAAI,GAAG,IAAAjB,uBAAA,CAAAkB,kBAAkB,EAAC;IAC9BZ,GAAG;IACHI,IAAI;IACJE;GAC+B,CAAC;EAElC,IAAI;IACF,OAAO,MAAM,IAAAV,cAAA,CAAAiB,SAAS,EACpBf,MAAM,EACND,oBAAA,CAAAiB,eAAe,EACf,iBAAiB,CAClB,CAAC;MACAH,IAAI,EAAE,GAAGA,IAAI,GAAGN,UAAU,GAAGA,UAAU,CAACU,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE;MAChEC,EAAE,EAAEb,OAAO;MACXF,OAAO;MACP,GAAGM;KACJ,CAAC;EACJ,CAAC,CAAC,OAAOU,KAAK,EAAE;IACd,MAAM,IAAAtB,qBAAA,CAAAuB,gBAAgB,EAACD,KAAkB,EAAE;MACzCjB,GAAG;MACHG,OAAO;MACPC,IAAI;MACJK,QAAQ,EAAE,8BAA8B;MACxCH,YAAY;MACZa,MAAM,EAAElB,OAAO,EAAEE;KAClB,CAAC;EACJ;AACF","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}