{"ast":null,"code":"import { signTypedData as viem_signTypedData } from 'viem/actions';\nimport { getAction } from '../utils/getAction.js';\nimport { getConnectorClient } from './getConnectorClient.js';\n/** https://wagmi.sh/core/api/actions/signTypedData */\nexport async function signTypedData(config, parameters) {\n  const {\n    account,\n    connector,\n    ...rest\n  } = parameters;\n  let client;\n  if (typeof account === 'object' && account.type === 'local') client = config.getClient();else client = await getConnectorClient(config, {\n    account,\n    connector\n  });\n  const action = getAction(client, viem_signTypedData, 'signTypedData');\n  return action({\n    ...rest,\n    ...(account ? {\n      account\n    } : {})\n  });\n}","map":{"version":3,"names":["signTypedData","viem_signTypedData","getAction","getConnectorClient","config","parameters","account","connector","rest","client","type","getClient","action"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/@wagmi/core/src/actions/signTypedData.ts"],"sourcesContent":["import type { Account, Client, TypedData } from 'viem'\nimport {\n  type SignMessageErrorType as viem_SignMessageErrorType,\n  type SignTypedDataParameters as viem_SignTypedDataParameters,\n  type SignTypedDataReturnType as viem_SignTypedDataReturnType,\n  signTypedData as viem_signTypedData,\n} from 'viem/actions'\n\nimport type { Config } from '../createConfig.js'\nimport type { BaseErrorType, ErrorType } from '../errors/base.js'\nimport type { ConnectorParameter } from '../types/properties.js'\nimport type { UnionCompute } from '../types/utils.js'\nimport { getAction } from '../utils/getAction.js'\nimport {\n  type GetConnectorClientErrorType,\n  getConnectorClient,\n} from './getConnectorClient.js'\n\nexport type SignTypedDataParameters<\n  typedData extends TypedData | Record<string, unknown> = TypedData,\n  primaryType extends keyof typedData | 'EIP712Domain' = keyof typedData,\n  ///\n  primaryTypes = typedData extends TypedData ? keyof typedData : string,\n> = UnionCompute<\n  viem_SignTypedDataParameters<typedData, primaryType, Account, primaryTypes> &\n    ConnectorParameter\n>\n\nexport type SignTypedDataReturnType = viem_SignTypedDataReturnType\n\nexport type SignTypedDataErrorType =\n  // getConnectorClient()\n  | GetConnectorClientErrorType\n  // base\n  | BaseErrorType\n  | ErrorType\n  // viem\n  | viem_SignMessageErrorType\n\n/** https://wagmi.sh/core/api/actions/signTypedData */\nexport async function signTypedData<\n  const typedData extends TypedData | Record<string, unknown>,\n  primaryType extends keyof typedData | 'EIP712Domain',\n>(\n  config: Config,\n  parameters: SignTypedDataParameters<typedData, primaryType>,\n): Promise<SignTypedDataReturnType> {\n  const { account, connector, ...rest } = parameters\n\n  let client: Client\n  if (typeof account === 'object' && account.type === 'local')\n    client = config.getClient()\n  else client = await getConnectorClient(config, { account, connector })\n\n  const action = getAction(client, viem_signTypedData, 'signTypedData')\n  return action({\n    ...rest,\n    ...(account ? { account } : {}),\n  } as unknown as viem_SignTypedDataParameters)\n}\n"],"mappings":"AACA,SAIEA,aAAa,IAAIC,kBAAkB,QAC9B,cAAc;AAMrB,SAASC,SAAS,QAAQ,uBAAuB;AACjD,SAEEC,kBAAkB,QACb,yBAAyB;AAuBhC;AACA,OAAO,eAAeH,aAAaA,CAIjCI,MAAc,EACdC,UAA2D;EAE3D,MAAM;IAAEC,OAAO;IAAEC,SAAS;IAAE,GAAGC;EAAI,CAAE,GAAGH,UAAU;EAElD,IAAII,MAAc;EAClB,IAAI,OAAOH,OAAO,KAAK,QAAQ,IAAIA,OAAO,CAACI,IAAI,KAAK,OAAO,EACzDD,MAAM,GAAGL,MAAM,CAACO,SAAS,EAAE,MACxBF,MAAM,GAAG,MAAMN,kBAAkB,CAACC,MAAM,EAAE;IAAEE,OAAO;IAAEC;EAAS,CAAE,CAAC;EAEtE,MAAMK,MAAM,GAAGV,SAAS,CAACO,MAAM,EAAER,kBAAkB,EAAE,eAAe,CAAC;EACrE,OAAOW,MAAM,CAAC;IACZ,GAAGJ,IAAI;IACP,IAAIF,OAAO,GAAG;MAAEA;IAAO,CAAE,GAAG,EAAE;GACY,CAAC;AAC/C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}