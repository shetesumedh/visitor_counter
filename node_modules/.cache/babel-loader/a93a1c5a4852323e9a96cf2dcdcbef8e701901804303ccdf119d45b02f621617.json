{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { Communicator } from '../../../core/communicator/Communicator.js';\nimport { CB_WALLET_RPC_URL } from '../../../core/constants.js';\nimport { standardErrorCodes } from '../../../core/error/constants.js';\nimport { standardErrors } from '../../../core/error/errors.js';\nimport { serializeError } from '../../../core/error/serialize.js';\nimport { ProviderEventEmitter } from '../../../core/provider/interface.js';\nimport { logRequestError, logRequestResponded, logRequestStarted } from '../../../core/telemetry/events/provider.js';\nimport { hexStringFromNumber } from '../../../core/type/util.js';\nimport { Signer } from '../../../sign/base-account/Signer.js';\nimport { initSubAccountConfig } from '../../../sign/base-account/utils.js';\nimport { correlationIds } from '../../../store/correlation-ids/store.js';\nimport { store } from '../../../store/store.js';\nimport { checkErrorForInvalidRequestArgs, fetchRPCRequest } from '../../../util/provider.js';\nexport class BaseAccountProvider extends ProviderEventEmitter {\n  constructor(_a) {\n    var {\n        metadata\n      } = _a,\n      _b = _a.preference,\n      {\n        walletUrl\n      } = _b,\n      preference = __rest(_b, [\"walletUrl\"]);\n    super();\n    this.isBaseAccount = true;\n    this.communicator = new Communicator({\n      url: walletUrl,\n      metadata,\n      preference\n    });\n    this.signer = new Signer({\n      metadata,\n      communicator: this.communicator,\n      callback: this.emit.bind(this)\n    });\n  }\n  async request(args) {\n    // correlation id across the entire request lifecycle\n    const correlationId = crypto.randomUUID();\n    correlationIds.set(args, correlationId);\n    logRequestStarted({\n      method: args.method,\n      correlationId\n    });\n    try {\n      const result = await this._request(args);\n      logRequestResponded({\n        method: args.method,\n        correlationId\n      });\n      return result;\n    } catch (error) {\n      logRequestError({\n        method: args.method,\n        correlationId,\n        errorMessage: error instanceof Error ? error.message : ''\n      });\n      throw error;\n    } finally {\n      correlationIds.delete(args);\n    }\n  }\n  async _request(args) {\n    var _a, _b;\n    try {\n      checkErrorForInvalidRequestArgs(args);\n      if (!this.signer.isConnected) {\n        switch (args.method) {\n          case 'eth_requestAccounts':\n            {\n              await this.signer.handshake({\n                method: 'handshake'\n              });\n              // We are translating eth_requestAccounts to wallet_connect always\n              await initSubAccountConfig();\n              await this.signer.request({\n                method: 'wallet_connect',\n                params: [{\n                  version: '1',\n                  capabilities: Object.assign({}, (_b = (_a = store.subAccountsConfig.get()) === null || _a === void 0 ? void 0 : _a.capabilities) !== null && _b !== void 0 ? _b : {})\n                }]\n              });\n              // wallet_connect will retrieve and save the account info in the store\n              // continue to requesting it again at L130 for emitting the connect event +\n              // returning the accounts\n              break;\n            }\n          case 'wallet_connect':\n            {\n              await this.signer.handshake({\n                method: 'handshake'\n              }); // exchange session keys\n              const result = await this.signer.request(args); // send diffie-hellman encrypted request\n              return result;\n            }\n          case 'wallet_sendCalls':\n          case 'wallet_sign':\n            {\n              try {\n                await this.signer.handshake({\n                  method: 'handshake'\n                }); // exchange session keys\n                const result = await this.signer.request(args); // send diffie-hellman encrypted request\n                return result;\n              } finally {\n                await this.signer.cleanup(); // clean up (rotate) the ephemeral session keys\n              }\n            }\n          case 'wallet_getCallsStatus':\n            {\n              const result = await fetchRPCRequest(args, CB_WALLET_RPC_URL);\n              return result;\n            }\n          case 'eth_accounts':\n            {\n              return [];\n            }\n          case 'net_version':\n            {\n              const result = 1; // default value\n              return result;\n            }\n          case 'eth_chainId':\n            {\n              const result = hexStringFromNumber(1); // default value\n              return result;\n            }\n          default:\n            {\n              throw standardErrors.provider.unauthorized(\"Must call 'eth_requestAccounts' before other methods\");\n            }\n        }\n      }\n      const result = await this.signer.request(args);\n      return result;\n    } catch (error) {\n      const {\n        code\n      } = error;\n      if (code === standardErrorCodes.provider.unauthorized) {\n        await this.disconnect();\n      }\n      return Promise.reject(serializeError(error));\n    }\n  }\n  async disconnect() {\n    await this.signer.cleanup();\n    correlationIds.clear();\n    this.emit('disconnect', standardErrors.provider.disconnected('User initiated disconnection'));\n  }\n}","map":{"version":3,"names":["Communicator","CB_WALLET_RPC_URL","standardErrorCodes","standardErrors","serializeError","ProviderEventEmitter","logRequestError","logRequestResponded","logRequestStarted","hexStringFromNumber","Signer","initSubAccountConfig","correlationIds","store","checkErrorForInvalidRequestArgs","fetchRPCRequest","BaseAccountProvider","constructor","_a","metadata","_b","preference","walletUrl","__rest","isBaseAccount","communicator","url","signer","callback","emit","bind","request","args","correlationId","crypto","randomUUID","set","method","result","_request","error","errorMessage","Error","message","delete","isConnected","handshake","params","version","capabilities","Object","assign","subAccountsConfig","get","cleanup","provider","unauthorized","code","disconnect","Promise","reject","clear","disconnected"],"sources":["../../../../src/interface/builder/core/BaseAccountProvider.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}