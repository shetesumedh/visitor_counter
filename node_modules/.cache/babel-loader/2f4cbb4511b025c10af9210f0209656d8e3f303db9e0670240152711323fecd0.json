{"ast":null,"code":"import { proxy, subscribe as sub } from 'valtio/vanilla';\nimport { subscribeKey as subKey } from 'valtio/vanilla/utils';\nimport { EnsUtil } from '../utils/EnsUtil.js';\nimport { StorageUtil } from '../utils/StorageUtil.js';\nimport { withErrorBoundary } from '../utils/withErrorBoundary.js';\nimport { AccountController } from './AccountController.js';\nimport { BlockchainApiController } from './BlockchainApiController.js';\nimport { ChainController } from './ChainController.js';\nimport { ConnectionController } from './ConnectionController.js';\nimport { ConnectorController } from './ConnectorController.js';\nimport { RouterController } from './RouterController.js';\n// -- State --------------------------------------------- //\nconst state = proxy({\n  suggestions: [],\n  loading: false\n});\n// -- Controller ---------------------------------------- //\nconst controller = {\n  state,\n  subscribe(callback) {\n    return sub(state, () => callback(state));\n  },\n  subscribeKey(key, callback) {\n    return subKey(state, key, callback);\n  },\n  async resolveName(name) {\n    try {\n      return await BlockchainApiController.lookupEnsName(name);\n    } catch (e) {\n      const error = e;\n      throw new Error(error?.reasons?.[0]?.description || 'Error resolving name');\n    }\n  },\n  async isNameRegistered(name) {\n    try {\n      await BlockchainApiController.lookupEnsName(name);\n      return true;\n    } catch {\n      return false;\n    }\n  },\n  async getSuggestions(value) {\n    try {\n      state.loading = true;\n      state.suggestions = [];\n      const response = await BlockchainApiController.getEnsNameSuggestions(value);\n      state.suggestions = response.suggestions.map(suggestion => ({\n        ...suggestion,\n        name: suggestion.name\n      })) || [];\n      return state.suggestions;\n    } catch (e) {\n      const errorMessage = EnsController.parseEnsApiError(e, 'Error fetching name suggestions');\n      throw new Error(errorMessage);\n    } finally {\n      state.loading = false;\n    }\n  },\n  async getNamesForAddress(address) {\n    try {\n      const network = ChainController.state.activeCaipNetwork;\n      if (!network) {\n        return [];\n      }\n      const cachedEns = StorageUtil.getEnsFromCacheForAddress(address);\n      if (cachedEns) {\n        return cachedEns;\n      }\n      const response = await BlockchainApiController.reverseLookupEnsName({\n        address\n      });\n      StorageUtil.updateEnsCache({\n        address,\n        ens: response,\n        timestamp: Date.now()\n      });\n      return response;\n    } catch (e) {\n      const errorMessage = EnsController.parseEnsApiError(e, 'Error fetching names for address');\n      throw new Error(errorMessage);\n    }\n  },\n  async registerName(name) {\n    const network = ChainController.state.activeCaipNetwork;\n    if (!network) {\n      throw new Error('Network not found');\n    }\n    const address = AccountController.state.address;\n    const emailConnector = ConnectorController.getAuthConnector();\n    if (!address || !emailConnector) {\n      throw new Error('Address or auth connector not found');\n    }\n    state.loading = true;\n    try {\n      const message = JSON.stringify({\n        name,\n        attributes: {},\n        // Unix timestamp\n        timestamp: Math.floor(Date.now() / 1000)\n      });\n      RouterController.pushTransactionStack({\n        onCancel() {\n          RouterController.replace('RegisterAccountName');\n        }\n      });\n      const signature = await ConnectionController.signMessage(message);\n      state.loading = false;\n      const networkId = network.id;\n      if (!networkId) {\n        throw new Error('Network not found');\n      }\n      const coinType = EnsUtil.convertEVMChainIdToCoinType(Number(networkId));\n      await BlockchainApiController.registerEnsName({\n        coinType,\n        address: address,\n        signature: signature,\n        message\n      });\n      AccountController.setProfileName(name, network.chainNamespace);\n      RouterController.replace('RegisterAccountNameSuccess');\n    } catch (e) {\n      const errorMessage = EnsController.parseEnsApiError(e, `Error registering name ${name}`);\n      RouterController.replace('RegisterAccountName');\n      throw new Error(errorMessage);\n    } finally {\n      state.loading = false;\n    }\n  },\n  validateName(name) {\n    return /^[a-zA-Z0-9-]{4,}$/u.test(name);\n  },\n  parseEnsApiError(error, defaultError) {\n    const ensError = error;\n    return ensError?.reasons?.[0]?.description || defaultError;\n  }\n};\n// Export the controller wrapped with our error boundary\nexport const EnsController = withErrorBoundary(controller);","map":{"version":3,"names":["proxy","subscribe","sub","subscribeKey","subKey","EnsUtil","StorageUtil","withErrorBoundary","AccountController","BlockchainApiController","ChainController","ConnectionController","ConnectorController","RouterController","state","suggestions","loading","controller","callback","key","resolveName","name","lookupEnsName","e","error","Error","reasons","description","isNameRegistered","getSuggestions","value","response","getEnsNameSuggestions","map","suggestion","errorMessage","EnsController","parseEnsApiError","getNamesForAddress","address","network","activeCaipNetwork","cachedEns","getEnsFromCacheForAddress","reverseLookupEnsName","updateEnsCache","ens","timestamp","Date","now","registerName","emailConnector","getAuthConnector","message","JSON","stringify","attributes","Math","floor","pushTransactionStack","onCancel","replace","signature","signMessage","networkId","id","coinType","convertEVMChainIdToCoinType","Number","registerEnsName","setProfileName","chainNamespace","validateName","test","defaultError","ensError"],"sources":["../../../../src/controllers/EnsController.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}