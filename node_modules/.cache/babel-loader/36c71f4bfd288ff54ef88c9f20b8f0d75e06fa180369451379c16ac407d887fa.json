{"ast":null,"code":"import * as Errors from '../Errors.js';\n/** @internal */\nexport function withTimeout(fn, options) {\n  const {\n    errorInstance = new TimeoutError(),\n    timeout,\n    signal\n  } = options;\n  return new Promise((resolve, reject) => {\n    ;\n    (async () => {\n      let timeoutId;\n      try {\n        const controller = new AbortController();\n        if (timeout > 0) timeoutId = setTimeout(() => {\n          if (signal) {\n            controller.abort();\n          } else {\n            reject(errorInstance);\n          }\n        }, timeout);\n        resolve(await fn({\n          signal: controller.signal\n        }));\n      } catch (err) {\n        if (err?.name === 'AbortError') reject(errorInstance);\n        reject(err);\n      } finally {\n        clearTimeout(timeoutId);\n      }\n    })();\n  });\n}\n/** @internal */\n/**\n * Thrown when an operation times out.\n * @internal\n */\nexport class TimeoutError extends Errors.BaseError {\n  constructor() {\n    super('Operation timed out.');\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'Promise.TimeoutError'\n    });\n  }\n}","map":{"version":3,"names":["Errors","withTimeout","fn","options","errorInstance","TimeoutError","timeout","signal","Promise","resolve","reject","timeoutId","controller","AbortController","setTimeout","abort","err","name","clearTimeout","BaseError","constructor","Object","defineProperty"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/ox/core/internal/promise.ts"],"sourcesContent":["import * as Errors from '../Errors.js'\n\n/** @internal */\nexport function withTimeout<data>(\n  fn: withTimeout.Fn<data>,\n  options: withTimeout.Options,\n): Promise<data> {\n  const { errorInstance = new TimeoutError(), timeout, signal } = options\n  return new Promise((resolve, reject) => {\n    ;(async () => {\n      let timeoutId: any\n      try {\n        const controller = new AbortController()\n        if (timeout > 0)\n          timeoutId = setTimeout(() => {\n            if (signal) {\n              controller.abort()\n            } else {\n              reject(errorInstance)\n            }\n          }, timeout) as any\n        resolve(await fn({ signal: controller.signal }))\n      } catch (err) {\n        if ((err as Error)?.name === 'AbortError') reject(errorInstance)\n        reject(err)\n      } finally {\n        clearTimeout(timeoutId)\n      }\n    })()\n  })\n}\n\n/** @internal */\nexport declare namespace withTimeout {\n  type Fn<data> = ({\n    signal,\n  }: { signal: AbortController['signal'] | null }) => Promise<data>\n\n  type Options = {\n    // The error instance to throw when the timeout is reached.\n    errorInstance?: Error | undefined\n    // The timeout (in ms).\n    timeout: number\n    // Whether or not the timeout should use an abort signal.\n    signal?: boolean | undefined\n  }\n\n  type ErrorType = TimeoutError | Errors.GlobalErrorType\n}\n\n/** @internal */\n\n/**\n * Thrown when an operation times out.\n * @internal\n */\nexport class TimeoutError extends Errors.BaseError {\n  override readonly name = 'Promise.TimeoutError'\n\n  constructor() {\n    super('Operation timed out.')\n  }\n}\n"],"mappings":"AAAA,OAAO,KAAKA,MAAM,MAAM,cAAc;AAEtC;AACA,OAAM,SAAUC,WAAWA,CACzBC,EAAwB,EACxBC,OAA4B;EAE5B,MAAM;IAAEC,aAAa,GAAG,IAAIC,YAAY,EAAE;IAAEC,OAAO;IAAEC;EAAM,CAAE,GAAGJ,OAAO;EACvE,OAAO,IAAIK,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;IACrC;IAAC,CAAC,YAAW;MACX,IAAIC,SAAc;MAClB,IAAI;QACF,MAAMC,UAAU,GAAG,IAAIC,eAAe,EAAE;QACxC,IAAIP,OAAO,GAAG,CAAC,EACbK,SAAS,GAAGG,UAAU,CAAC,MAAK;UAC1B,IAAIP,MAAM,EAAE;YACVK,UAAU,CAACG,KAAK,EAAE;UACpB,CAAC,MAAM;YACLL,MAAM,CAACN,aAAa,CAAC;UACvB;QACF,CAAC,EAAEE,OAAO,CAAQ;QACpBG,OAAO,CAAC,MAAMP,EAAE,CAAC;UAAEK,MAAM,EAAEK,UAAU,CAACL;QAAM,CAAE,CAAC,CAAC;MAClD,CAAC,CAAC,OAAOS,GAAG,EAAE;QACZ,IAAKA,GAAa,EAAEC,IAAI,KAAK,YAAY,EAAEP,MAAM,CAACN,aAAa,CAAC;QAChEM,MAAM,CAACM,GAAG,CAAC;MACb,CAAC,SAAS;QACRE,YAAY,CAACP,SAAS,CAAC;MACzB;IACF,CAAC,EAAC,CAAE;EACN,CAAC,CAAC;AACJ;AAoBA;AAEA;;;;AAIA,OAAM,MAAON,YAAa,SAAQL,MAAM,CAACmB,SAAS;EAGhDC,YAAA;IACE,KAAK,CAAC,sBAAsB,CAAC;IAHbC,MAAA,CAAAC,cAAA;;;;aAAO;;EAIzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}