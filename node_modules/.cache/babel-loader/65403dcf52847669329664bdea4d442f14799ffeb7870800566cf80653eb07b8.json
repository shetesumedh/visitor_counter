{"ast":null,"code":"import { keccak256 } from '../../utils/hash/keccak256.js';\nimport { serializeTransaction } from '../../utils/transaction/serializeTransaction.js';\nimport { sign } from './sign.js';\nexport async function signTransaction(parameters) {\n  const {\n    privateKey,\n    transaction,\n    serializer = serializeTransaction\n  } = parameters;\n  const signableTransaction = (() => {\n    // For EIP-4844 Transactions, we want to sign the transaction payload body (tx_payload_body) without the sidecars (ie. without the network wrapper).\n    // See: https://github.com/ethereum/EIPs/blob/e00f4daa66bd56e2dbd5f1d36d09fd613811a48b/EIPS/eip-4844.md#networking\n    if (transaction.type === 'eip4844') return {\n      ...transaction,\n      sidecars: false\n    };\n    return transaction;\n  })();\n  const signature = await sign({\n    hash: keccak256(serializer(signableTransaction)),\n    privateKey\n  });\n  return serializer(transaction, signature);\n}","map":{"version":3,"names":["keccak256","serializeTransaction","sign","signTransaction","parameters","privateKey","transaction","serializer","signableTransaction","type","sidecars","signature","hash"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/viem/accounts/utils/signTransaction.ts"],"sourcesContent":["import type { ErrorType } from '../../errors/utils.js'\nimport type { Hex } from '../../types/misc.js'\nimport type {\n  TransactionSerializable,\n  TransactionSerialized,\n} from '../../types/transaction.js'\nimport {\n  type Keccak256ErrorType,\n  keccak256,\n} from '../../utils/hash/keccak256.js'\nimport type { GetTransactionType } from '../../utils/transaction/getTransactionType.js'\nimport {\n  type SerializeTransactionFn,\n  serializeTransaction,\n} from '../../utils/transaction/serializeTransaction.js'\n\nimport { type SignErrorType, sign } from './sign.js'\n\nexport type SignTransactionParameters<\n  serializer extends\n    SerializeTransactionFn<TransactionSerializable> = SerializeTransactionFn<TransactionSerializable>,\n  transaction extends Parameters<serializer>[0] = Parameters<serializer>[0],\n> = {\n  privateKey: Hex\n  transaction: transaction\n  serializer?: serializer | undefined\n}\n\nexport type SignTransactionReturnType<\n  serializer extends\n    SerializeTransactionFn<TransactionSerializable> = SerializeTransactionFn<TransactionSerializable>,\n  transaction extends Parameters<serializer>[0] = Parameters<serializer>[0],\n> = TransactionSerialized<GetTransactionType<transaction>>\n\nexport type SignTransactionErrorType =\n  | Keccak256ErrorType\n  | SignErrorType\n  | ErrorType\n\nexport async function signTransaction<\n  serializer extends\n    SerializeTransactionFn<TransactionSerializable> = SerializeTransactionFn<TransactionSerializable>,\n  transaction extends Parameters<serializer>[0] = Parameters<serializer>[0],\n>(\n  parameters: SignTransactionParameters<serializer, transaction>,\n): Promise<SignTransactionReturnType<serializer, transaction>> {\n  const {\n    privateKey,\n    transaction,\n    serializer = serializeTransaction,\n  } = parameters\n\n  const signableTransaction = (() => {\n    // For EIP-4844 Transactions, we want to sign the transaction payload body (tx_payload_body) without the sidecars (ie. without the network wrapper).\n    // See: https://github.com/ethereum/EIPs/blob/e00f4daa66bd56e2dbd5f1d36d09fd613811a48b/EIPS/eip-4844.md#networking\n    if (transaction.type === 'eip4844')\n      return {\n        ...transaction,\n        sidecars: false,\n      }\n    return transaction\n  })()\n\n  const signature = await sign({\n    hash: keccak256(serializer(signableTransaction)),\n    privateKey,\n  })\n  return serializer(transaction, signature) as SignTransactionReturnType<\n    serializer,\n    transaction\n  >\n}\n"],"mappings":"AAMA,SAEEA,SAAS,QACJ,+BAA+B;AAEtC,SAEEC,oBAAoB,QACf,iDAAiD;AAExD,SAA6BC,IAAI,QAAQ,WAAW;AAuBpD,OAAO,eAAeC,eAAeA,CAKnCC,UAA8D;EAE9D,MAAM;IACJC,UAAU;IACVC,WAAW;IACXC,UAAU,GAAGN;EAAoB,CAClC,GAAGG,UAAU;EAEd,MAAMI,mBAAmB,GAAG,CAAC,MAAK;IAChC;IACA;IACA,IAAIF,WAAW,CAACG,IAAI,KAAK,SAAS,EAChC,OAAO;MACL,GAAGH,WAAW;MACdI,QAAQ,EAAE;KACX;IACH,OAAOJ,WAAW;EACpB,CAAC,EAAC,CAAE;EAEJ,MAAMK,SAAS,GAAG,MAAMT,IAAI,CAAC;IAC3BU,IAAI,EAAEZ,SAAS,CAACO,UAAU,CAACC,mBAAmB,CAAC,CAAC;IAChDH;GACD,CAAC;EACF,OAAOE,UAAU,CAACD,WAAW,EAAEK,SAAS,CAGvC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}