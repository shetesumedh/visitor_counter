{"ast":null,"code":"import * as Hex from './Hex.js';\n/**\n * Converts an {@link ox#StateOverrides.Rpc} to an {@link ox#StateOverrides.StateOverrides}.\n *\n * @example\n * ```ts twoslash\n * import { StateOverrides } from 'ox'\n *\n * const stateOverrides = StateOverrides.fromRpc({\n *   '0x0000000000000000000000000000000000000000': {\n *     balance: '0x1',\n *   },\n * })\n * ```\n *\n * @param rpcStateOverrides - The RPC state overrides to convert.\n * @returns An instantiated {@link ox#StateOverrides.StateOverrides}.\n */\nexport function fromRpc(rpcStateOverrides) {\n  const stateOverrides = {};\n  for (const [address, accountOverridesRpc] of Object.entries(rpcStateOverrides)) {\n    const accountOverrides = {};\n    if (accountOverridesRpc.balance) accountOverrides.balance = BigInt(accountOverridesRpc.balance);\n    if (accountOverridesRpc.code) accountOverrides.code = accountOverridesRpc.code;\n    if (accountOverridesRpc.movePrecompileToAddress) accountOverrides.movePrecompileToAddress = accountOverridesRpc.movePrecompileToAddress;\n    if (accountOverridesRpc.nonce) accountOverrides.nonce = BigInt(accountOverridesRpc.nonce);\n    if (accountOverridesRpc.state) accountOverrides.state = accountOverridesRpc.state;\n    if (accountOverridesRpc.stateDiff) accountOverrides.stateDiff = accountOverridesRpc.stateDiff;\n    stateOverrides[address] = accountOverrides;\n  }\n  return stateOverrides;\n}\n/**\n * Converts an {@link ox#StateOverrides.StateOverrides} to an {@link ox#StateOverrides.Rpc}.\n *\n * @example\n * ```ts twoslash\n * import { StateOverrides } from 'ox'\n *\n * const stateOverrides = StateOverrides.toRpc({\n *   '0x0000000000000000000000000000000000000000': {\n *     balance: 1n,\n *   },\n * })\n * ```\n *\n * @param stateOverrides - The state overrides to convert.\n * @returns An instantiated {@link ox#StateOverrides.Rpc}.\n */\nexport function toRpc(stateOverrides) {\n  const rpcStateOverrides = {};\n  for (const [address, accountOverrides] of Object.entries(stateOverrides)) {\n    const accountOverridesRpc = {};\n    if (typeof accountOverrides.balance === 'bigint') accountOverridesRpc.balance = Hex.fromNumber(accountOverrides.balance);\n    if (accountOverrides.code) accountOverridesRpc.code = accountOverrides.code;\n    if (accountOverrides.movePrecompileToAddress) accountOverridesRpc.movePrecompileToAddress = accountOverrides.movePrecompileToAddress;\n    if (typeof accountOverrides.nonce === 'bigint') accountOverridesRpc.nonce = Hex.fromNumber(accountOverrides.nonce);\n    if (accountOverrides.state) accountOverridesRpc.state = accountOverrides.state;\n    if (accountOverrides.stateDiff) accountOverridesRpc.stateDiff = accountOverrides.stateDiff;\n    rpcStateOverrides[address] = accountOverridesRpc;\n  }\n  return rpcStateOverrides;\n}","map":{"version":3,"names":["Hex","fromRpc","rpcStateOverrides","stateOverrides","address","accountOverridesRpc","Object","entries","accountOverrides","balance","BigInt","code","movePrecompileToAddress","nonce","state","stateDiff","toRpc","fromNumber"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/ox/core/StateOverrides.ts"],"sourcesContent":["import type * as Address from './Address.js'\nimport * as Hex from './Hex.js'\nimport type { Compute, OneOf } from './internal/types.js'\n\n/**\n * State override set to specify state to be ephemerally overridden prior to executing a call.\n */\nexport type StateOverrides<bigintType = bigint> = Compute<{\n  [address: Address.Address]: AccountOverrides<bigintType>\n}>\n\n/**\n * RPC state overrides.\n */\nexport type Rpc = StateOverrides<Hex.Hex>\n\n/**\n * Details of an account to be overridden.\n */\nexport type AccountOverrides<bigintType = bigint> = Compute<\n  {\n    /** Balance to set for the account. */\n    balance?: bigintType | undefined\n    /** Code to set for the account. */\n    code?: Hex.Hex | undefined\n    /** Address to move the precompile to. */\n    movePrecompileToAddress?: Address.Address | undefined\n    /** Nonce to set for the account. */\n    nonce?: bigintType | undefined\n  } & OneOf<\n    | {\n        /** Key-value mapping to override all slots in the account storage. */\n        state?: AccountStorage | undefined\n      }\n    | {\n        /** Key-value mapping to override individual slots in the account storage. */\n        stateDiff?: AccountStorage | undefined\n      }\n  >\n>\n\n/**\n * RPC account overrides.\n */\nexport type RpcAccountOverrides = AccountOverrides<Hex.Hex>\n\n/**\n * Key-value mapping to override all slots in the account storage before executing the call.\n */\nexport type AccountStorage = Compute<{\n  [slot: Hex.Hex]: Hex.Hex\n}>\n\n/**\n * Converts an {@link ox#StateOverrides.Rpc} to an {@link ox#StateOverrides.StateOverrides}.\n *\n * @example\n * ```ts twoslash\n * import { StateOverrides } from 'ox'\n *\n * const stateOverrides = StateOverrides.fromRpc({\n *   '0x0000000000000000000000000000000000000000': {\n *     balance: '0x1',\n *   },\n * })\n * ```\n *\n * @param rpcStateOverrides - The RPC state overrides to convert.\n * @returns An instantiated {@link ox#StateOverrides.StateOverrides}.\n */\nexport function fromRpc(rpcStateOverrides: Rpc): StateOverrides {\n  const stateOverrides: StateOverrides = {}\n  for (const [address, accountOverridesRpc] of Object.entries(\n    rpcStateOverrides,\n  )) {\n    const accountOverrides: AccountOverrides = {}\n    if (accountOverridesRpc.balance)\n      accountOverrides.balance = BigInt(accountOverridesRpc.balance)\n    if (accountOverridesRpc.code)\n      accountOverrides.code = accountOverridesRpc.code\n    if (accountOverridesRpc.movePrecompileToAddress)\n      accountOverrides.movePrecompileToAddress =\n        accountOverridesRpc.movePrecompileToAddress\n    if (accountOverridesRpc.nonce)\n      accountOverrides.nonce = BigInt(accountOverridesRpc.nonce)\n    if (accountOverridesRpc.state)\n      accountOverrides.state = accountOverridesRpc.state\n    if (accountOverridesRpc.stateDiff)\n      accountOverrides.stateDiff = accountOverridesRpc.stateDiff\n    ;(stateOverrides as any)[address] = accountOverrides\n  }\n  return stateOverrides\n}\n\n/**\n * Converts an {@link ox#StateOverrides.StateOverrides} to an {@link ox#StateOverrides.Rpc}.\n *\n * @example\n * ```ts twoslash\n * import { StateOverrides } from 'ox'\n *\n * const stateOverrides = StateOverrides.toRpc({\n *   '0x0000000000000000000000000000000000000000': {\n *     balance: 1n,\n *   },\n * })\n * ```\n *\n * @param stateOverrides - The state overrides to convert.\n * @returns An instantiated {@link ox#StateOverrides.Rpc}.\n */\nexport function toRpc(stateOverrides: StateOverrides): Rpc {\n  const rpcStateOverrides: Rpc = {}\n  for (const [address, accountOverrides] of Object.entries(stateOverrides)) {\n    const accountOverridesRpc: RpcAccountOverrides = {}\n    if (typeof accountOverrides.balance === 'bigint')\n      accountOverridesRpc.balance = Hex.fromNumber(accountOverrides.balance)\n    if (accountOverrides.code) accountOverridesRpc.code = accountOverrides.code\n    if (accountOverrides.movePrecompileToAddress)\n      accountOverridesRpc.movePrecompileToAddress =\n        accountOverrides.movePrecompileToAddress\n    if (typeof accountOverrides.nonce === 'bigint')\n      accountOverridesRpc.nonce = Hex.fromNumber(accountOverrides.nonce)\n    if (accountOverrides.state)\n      accountOverridesRpc.state = accountOverrides.state\n    if (accountOverrides.stateDiff)\n      accountOverridesRpc.stateDiff = accountOverrides.stateDiff\n    ;(rpcStateOverrides as any)[address] = accountOverridesRpc\n  }\n  return rpcStateOverrides\n}\n"],"mappings":"AACA,OAAO,KAAKA,GAAG,MAAM,UAAU;AAoD/B;;;;;;;;;;;;;;;;;AAiBA,OAAM,SAAUC,OAAOA,CAACC,iBAAsB;EAC5C,MAAMC,cAAc,GAAmB,EAAE;EACzC,KAAK,MAAM,CAACC,OAAO,EAAEC,mBAAmB,CAAC,IAAIC,MAAM,CAACC,OAAO,CACzDL,iBAAiB,CAClB,EAAE;IACD,MAAMM,gBAAgB,GAAqB,EAAE;IAC7C,IAAIH,mBAAmB,CAACI,OAAO,EAC7BD,gBAAgB,CAACC,OAAO,GAAGC,MAAM,CAACL,mBAAmB,CAACI,OAAO,CAAC;IAChE,IAAIJ,mBAAmB,CAACM,IAAI,EAC1BH,gBAAgB,CAACG,IAAI,GAAGN,mBAAmB,CAACM,IAAI;IAClD,IAAIN,mBAAmB,CAACO,uBAAuB,EAC7CJ,gBAAgB,CAACI,uBAAuB,GACtCP,mBAAmB,CAACO,uBAAuB;IAC/C,IAAIP,mBAAmB,CAACQ,KAAK,EAC3BL,gBAAgB,CAACK,KAAK,GAAGH,MAAM,CAACL,mBAAmB,CAACQ,KAAK,CAAC;IAC5D,IAAIR,mBAAmB,CAACS,KAAK,EAC3BN,gBAAgB,CAACM,KAAK,GAAGT,mBAAmB,CAACS,KAAK;IACpD,IAAIT,mBAAmB,CAACU,SAAS,EAC/BP,gBAAgB,CAACO,SAAS,GAAGV,mBAAmB,CAACU,SAAS;IAC1DZ,cAAsB,CAACC,OAAO,CAAC,GAAGI,gBAAgB;EACtD;EACA,OAAOL,cAAc;AACvB;AAEA;;;;;;;;;;;;;;;;;AAiBA,OAAM,SAAUa,KAAKA,CAACb,cAA8B;EAClD,MAAMD,iBAAiB,GAAQ,EAAE;EACjC,KAAK,MAAM,CAACE,OAAO,EAAEI,gBAAgB,CAAC,IAAIF,MAAM,CAACC,OAAO,CAACJ,cAAc,CAAC,EAAE;IACxE,MAAME,mBAAmB,GAAwB,EAAE;IACnD,IAAI,OAAOG,gBAAgB,CAACC,OAAO,KAAK,QAAQ,EAC9CJ,mBAAmB,CAACI,OAAO,GAAGT,GAAG,CAACiB,UAAU,CAACT,gBAAgB,CAACC,OAAO,CAAC;IACxE,IAAID,gBAAgB,CAACG,IAAI,EAAEN,mBAAmB,CAACM,IAAI,GAAGH,gBAAgB,CAACG,IAAI;IAC3E,IAAIH,gBAAgB,CAACI,uBAAuB,EAC1CP,mBAAmB,CAACO,uBAAuB,GACzCJ,gBAAgB,CAACI,uBAAuB;IAC5C,IAAI,OAAOJ,gBAAgB,CAACK,KAAK,KAAK,QAAQ,EAC5CR,mBAAmB,CAACQ,KAAK,GAAGb,GAAG,CAACiB,UAAU,CAACT,gBAAgB,CAACK,KAAK,CAAC;IACpE,IAAIL,gBAAgB,CAACM,KAAK,EACxBT,mBAAmB,CAACS,KAAK,GAAGN,gBAAgB,CAACM,KAAK;IACpD,IAAIN,gBAAgB,CAACO,SAAS,EAC5BV,mBAAmB,CAACU,SAAS,GAAGP,gBAAgB,CAACO,SAAS;IAC1Db,iBAAyB,CAACE,OAAO,CAAC,GAAGC,mBAAmB;EAC5D;EACA,OAAOH,iBAAiB;AAC1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}