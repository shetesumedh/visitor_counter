{"ast":null,"code":"import { requestProviders } from './utils.js';\nexport function createStore() {\n  const listeners = new Set();\n  let providerDetails = [];\n  const request = () => requestProviders(providerDetail => {\n    if (providerDetails.some(({\n      info\n    }) => info.uuid === providerDetail.info.uuid)) return;\n    providerDetails = [...providerDetails, providerDetail];\n    listeners.forEach(listener => listener(providerDetails, {\n      added: [providerDetail]\n    }));\n  });\n  let unwatch = request();\n  return {\n    _listeners() {\n      return listeners;\n    },\n    clear() {\n      listeners.forEach(listener => listener([], {\n        removed: [...providerDetails]\n      }));\n      providerDetails = [];\n    },\n    destroy() {\n      this.clear();\n      listeners.clear();\n      unwatch?.();\n    },\n    findProvider({\n      rdns\n    }) {\n      return providerDetails.find(providerDetail => providerDetail.info.rdns === rdns);\n    },\n    getProviders() {\n      return providerDetails;\n    },\n    reset() {\n      this.clear();\n      unwatch?.();\n      unwatch = request();\n    },\n    subscribe(listener, {\n      emitImmediately\n    } = {}) {\n      listeners.add(listener);\n      if (emitImmediately) listener(providerDetails, {\n        added: providerDetails\n      });\n      return () => listeners.delete(listener);\n    }\n  };\n}","map":{"version":3,"names":["requestProviders","createStore","listeners","Set","providerDetails","request","providerDetail","some","info","uuid","forEach","listener","added","unwatch","_listeners","clear","removed","destroy","findProvider","rdns","find","getProviders","reset","subscribe","emitImmediately","add","delete"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/mipd/src/store.ts"],"sourcesContent":["import type { Rdns } from './register.js'\nimport type { EIP6963ProviderDetail } from './types.js'\nimport { requestProviders } from './utils.js'\n\nexport type Listener = (\n  providerDetails: readonly EIP6963ProviderDetail[],\n  meta?:\n    | {\n        added?: readonly EIP6963ProviderDetail[] | undefined\n        removed?: readonly EIP6963ProviderDetail[] | undefined\n      }\n    | undefined,\n) => void\n\nexport type Store = {\n  /**\n   * Clears the store, including all provider details.\n   */\n  clear(): void\n  /**\n   * Destroys the store, including all provider details and listeners.\n   */\n  destroy(): void\n  /**\n   * Finds a provider detail by its RDNS (Reverse Domain Name Identifier).\n   */\n  findProvider(args: { rdns: Rdns }): EIP6963ProviderDetail | undefined\n  /**\n   * Returns all provider details that have been emitted.\n   */\n  getProviders(): readonly EIP6963ProviderDetail[]\n  /**\n   * Resets the store, and emits an event to request provider details.\n   */\n  reset(): void\n  /**\n   * Subscribes to emitted provider details.\n   */\n  subscribe(\n    listener: Listener,\n    args?: { emitImmediately?: boolean | undefined } | undefined,\n  ): () => void\n\n  /**\n   * @internal\n   * Current state of listening listeners.\n   */\n  _listeners(): Set<Listener>\n}\n\nexport function createStore(): Store {\n  const listeners: Set<Listener> = new Set()\n  let providerDetails: readonly EIP6963ProviderDetail[] = []\n\n  const request = () =>\n    requestProviders((providerDetail) => {\n      if (\n        providerDetails.some(\n          ({ info }) => info.uuid === providerDetail.info.uuid,\n        )\n      )\n        return\n\n      providerDetails = [...providerDetails, providerDetail]\n      listeners.forEach((listener) =>\n        listener(providerDetails, { added: [providerDetail] }),\n      )\n    })\n  let unwatch = request()\n\n  return {\n    _listeners() {\n      return listeners\n    },\n    clear() {\n      listeners.forEach((listener) =>\n        listener([], { removed: [...providerDetails] }),\n      )\n      providerDetails = []\n    },\n    destroy() {\n      this.clear()\n      listeners.clear()\n      unwatch?.()\n    },\n    findProvider({ rdns }) {\n      return providerDetails.find(\n        (providerDetail) => providerDetail.info.rdns === rdns,\n      )\n    },\n    getProviders() {\n      return providerDetails\n    },\n    reset() {\n      this.clear()\n      unwatch?.()\n      unwatch = request()\n    },\n    subscribe(listener, { emitImmediately } = {}) {\n      listeners.add(listener)\n      if (emitImmediately) listener(providerDetails, { added: providerDetails })\n      return () => listeners.delete(listener)\n    },\n  }\n}\n"],"mappings":"AAEA,SAASA,gBAAgB,QAAQ,YAAY;AAgD7C,OAAM,SAAUC,WAAWA,CAAA;EACzB,MAAMC,SAAS,GAAkB,IAAIC,GAAG,EAAE;EAC1C,IAAIC,eAAe,GAAqC,EAAE;EAE1D,MAAMC,OAAO,GAAGA,CAAA,KACdL,gBAAgB,CAAEM,cAAc,IAAI;IAClC,IACEF,eAAe,CAACG,IAAI,CAClB,CAAC;MAAEC;IAAI,CAAE,KAAKA,IAAI,CAACC,IAAI,KAAKH,cAAc,CAACE,IAAI,CAACC,IAAI,CACrD,EAED;IAEFL,eAAe,GAAG,CAAC,GAAGA,eAAe,EAAEE,cAAc,CAAC;IACtDJ,SAAS,CAACQ,OAAO,CAAEC,QAAQ,IACzBA,QAAQ,CAACP,eAAe,EAAE;MAAEQ,KAAK,EAAE,CAACN,cAAc;IAAC,CAAE,CAAC,CACvD;EACH,CAAC,CAAC;EACJ,IAAIO,OAAO,GAAGR,OAAO,EAAE;EAEvB,OAAO;IACLS,UAAUA,CAAA;MACR,OAAOZ,SAAS;IAClB,CAAC;IACDa,KAAKA,CAAA;MACHb,SAAS,CAACQ,OAAO,CAAEC,QAAQ,IACzBA,QAAQ,CAAC,EAAE,EAAE;QAAEK,OAAO,EAAE,CAAC,GAAGZ,eAAe;MAAC,CAAE,CAAC,CAChD;MACDA,eAAe,GAAG,EAAE;IACtB,CAAC;IACDa,OAAOA,CAAA;MACL,IAAI,CAACF,KAAK,EAAE;MACZb,SAAS,CAACa,KAAK,EAAE;MACjBF,OAAO,GAAE,CAAE;IACb,CAAC;IACDK,YAAYA,CAAC;MAAEC;IAAI,CAAE;MACnB,OAAOf,eAAe,CAACgB,IAAI,CACxBd,cAAc,IAAKA,cAAc,CAACE,IAAI,CAACW,IAAI,KAAKA,IAAI,CACtD;IACH,CAAC;IACDE,YAAYA,CAAA;MACV,OAAOjB,eAAe;IACxB,CAAC;IACDkB,KAAKA,CAAA;MACH,IAAI,CAACP,KAAK,EAAE;MACZF,OAAO,GAAE,CAAE;MACXA,OAAO,GAAGR,OAAO,EAAE;IACrB,CAAC;IACDkB,SAASA,CAACZ,QAAQ,EAAE;MAAEa;IAAe,CAAE,GAAG,EAAE;MAC1CtB,SAAS,CAACuB,GAAG,CAACd,QAAQ,CAAC;MACvB,IAAIa,eAAe,EAAEb,QAAQ,CAACP,eAAe,EAAE;QAAEQ,KAAK,EAAER;MAAe,CAAE,CAAC;MAC1E,OAAO,MAAMF,SAAS,CAACwB,MAAM,CAACf,QAAQ,CAAC;IACzC;GACD;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}