{"ast":null,"code":"import { getTransactionCount } from '../actions/getTransactionCount.js';\nimport { filterQueryOptions } from './utils.js';\nexport function getTransactionCountQueryOptions(config, options = {}) {\n  return {\n    async queryFn({\n      queryKey\n    }) {\n      const {\n        address,\n        scopeKey: _,\n        ...parameters\n      } = queryKey[1];\n      if (!address) throw new Error('address is required');\n      const transactionCount = await getTransactionCount(config, {\n        ...parameters,\n        address\n      });\n      return transactionCount ?? null;\n    },\n    queryKey: getTransactionCountQueryKey(options)\n  };\n}\nexport function getTransactionCountQueryKey(options = {}) {\n  return ['transactionCount', filterQueryOptions(options)];\n}","map":{"version":3,"names":["getTransactionCount","filterQueryOptions","getTransactionCountQueryOptions","config","options","queryFn","queryKey","address","scopeKey","_","parameters","Error","transactionCount","getTransactionCountQueryKey"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/@wagmi/core/src/query/getTransactionCount.ts"],"sourcesContent":["import type { QueryOptions } from '@tanstack/query-core'\n\nimport {\n  type GetTransactionCountErrorType,\n  type GetTransactionCountParameters,\n  type GetTransactionCountReturnType,\n  getTransactionCount,\n} from '../actions/getTransactionCount.js'\nimport type { Config } from '../createConfig.js'\nimport type { ScopeKeyParameter } from '../types/properties.js'\nimport type { Compute, PartialBy } from '../types/utils.js'\nimport { filterQueryOptions } from './utils.js'\n\nexport type GetTransactionCountOptions<config extends Config> = Compute<\n  PartialBy<GetTransactionCountParameters<config>, 'address'> &\n    ScopeKeyParameter\n>\n\nexport function getTransactionCountQueryOptions<config extends Config>(\n  config: config,\n  options: GetTransactionCountOptions<config> = {},\n) {\n  return {\n    async queryFn({ queryKey }) {\n      const { address, scopeKey: _, ...parameters } = queryKey[1]\n      if (!address) throw new Error('address is required')\n      const transactionCount = await getTransactionCount(config, {\n        ...(parameters as GetTransactionCountParameters),\n        address,\n      })\n      return transactionCount ?? null\n    },\n    queryKey: getTransactionCountQueryKey(options),\n  } as const satisfies QueryOptions<\n    GetTransactionCountQueryFnData,\n    GetTransactionCountErrorType,\n    GetTransactionCountData,\n    GetTransactionCountQueryKey<config>\n  >\n}\n\nexport type GetTransactionCountQueryFnData =\n  Compute<GetTransactionCountReturnType>\n\nexport type GetTransactionCountData = GetTransactionCountQueryFnData\n\nexport function getTransactionCountQueryKey<config extends Config>(\n  options: GetTransactionCountOptions<config> = {},\n) {\n  return ['transactionCount', filterQueryOptions(options)] as const\n}\n\nexport type GetTransactionCountQueryKey<config extends Config> = ReturnType<\n  typeof getTransactionCountQueryKey<config>\n>\n"],"mappings":"AAEA,SAIEA,mBAAmB,QACd,mCAAmC;AAI1C,SAASC,kBAAkB,QAAQ,YAAY;AAO/C,OAAM,SAAUC,+BAA+BA,CAC7CC,MAAc,EACdC,OAAA,GAA8C,EAAE;EAEhD,OAAO;IACL,MAAMC,OAAOA,CAAC;MAAEC;IAAQ,CAAE;MACxB,MAAM;QAAEC,OAAO;QAAEC,QAAQ,EAAEC,CAAC;QAAE,GAAGC;MAAU,CAAE,GAAGJ,QAAQ,CAAC,CAAC,CAAC;MAC3D,IAAI,CAACC,OAAO,EAAE,MAAM,IAAII,KAAK,CAAC,qBAAqB,CAAC;MACpD,MAAMC,gBAAgB,GAAG,MAAMZ,mBAAmB,CAACG,MAAM,EAAE;QACzD,GAAIO,UAA4C;QAChDH;OACD,CAAC;MACF,OAAOK,gBAAgB,IAAI,IAAI;IACjC,CAAC;IACDN,QAAQ,EAAEO,2BAA2B,CAACT,OAAO;GAM9C;AACH;AAOA,OAAM,SAAUS,2BAA2BA,CACzCT,OAAA,GAA8C,EAAE;EAEhD,OAAO,CAAC,kBAAkB,EAAEH,kBAAkB,CAACG,OAAO,CAAC,CAAU;AACnE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}