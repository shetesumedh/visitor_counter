{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WaitForCallsStatusTimeoutError = void 0;\nexports.waitForCallsStatus = waitForCallsStatus;\nconst base_js_1 = require(\"../../errors/base.js\");\nconst observe_js_1 = require(\"../../utils/observe.js\");\nconst poll_js_1 = require(\"../../utils/poll.js\");\nconst withResolvers_js_1 = require(\"../../utils/promise/withResolvers.js\");\nconst stringify_js_1 = require(\"../../utils/stringify.js\");\nconst getCallsStatus_js_1 = require(\"./getCallsStatus.js\");\nasync function waitForCallsStatus(client, parameters) {\n  const {\n    id,\n    pollingInterval = client.pollingInterval,\n    status = ({\n      statusCode\n    }) => statusCode >= 200,\n    timeout = 60_000\n  } = parameters;\n  const observerId = (0, stringify_js_1.stringify)(['waitForCallsStatus', client.uid, id]);\n  const {\n    promise,\n    resolve,\n    reject\n  } = (0, withResolvers_js_1.withResolvers)();\n  let timer = undefined;\n  const unobserve = (0, observe_js_1.observe)(observerId, {\n    resolve,\n    reject\n  }, emit => {\n    const unpoll = (0, poll_js_1.poll)(async () => {\n      const done = fn => {\n        clearTimeout(timer);\n        unpoll();\n        fn();\n        unobserve();\n      };\n      try {\n        const result = await (0, getCallsStatus_js_1.getCallsStatus)(client, {\n          id\n        });\n        if (!status(result)) return;\n        done(() => emit.resolve(result));\n      } catch (error) {\n        done(() => emit.reject(error));\n      }\n    }, {\n      interval: pollingInterval,\n      emitOnBegin: true\n    });\n    return unpoll;\n  });\n  timer = timeout ? setTimeout(() => {\n    unobserve();\n    clearTimeout(timer);\n    reject(new WaitForCallsStatusTimeoutError({\n      id\n    }));\n  }, timeout) : undefined;\n  return await promise;\n}\nclass WaitForCallsStatusTimeoutError extends base_js_1.BaseError {\n  constructor({\n    id\n  }) {\n    super(`Timed out while waiting for call bundle with id \"${id}\" to be confirmed.`, {\n      name: 'WaitForCallsStatusTimeoutError'\n    });\n  }\n}\nexports.WaitForCallsStatusTimeoutError = WaitForCallsStatusTimeoutError;","map":{"version":3,"names":["exports","waitForCallsStatus","base_js_1","require","observe_js_1","poll_js_1","withResolvers_js_1","stringify_js_1","getCallsStatus_js_1","client","parameters","id","pollingInterval","status","statusCode","timeout","observerId","stringify","uid","promise","resolve","reject","withResolvers","timer","undefined","unobserve","observe","emit","unpoll","poll","done","fn","clearTimeout","result","getCallsStatus","error","interval","emitOnBegin","setTimeout","WaitForCallsStatusTimeoutError","BaseError","constructor","name"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/viem/actions/wallet/waitForCallsStatus.ts"],"sourcesContent":["import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { BaseError } from '../../errors/base.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport { type ObserveErrorType, observe } from '../../utils/observe.js'\nimport { type PollErrorType, poll } from '../../utils/poll.js'\nimport { withResolvers } from '../../utils/promise/withResolvers.js'\nimport { stringify } from '../../utils/stringify.js'\nimport {\n  type GetCallsStatusErrorType,\n  type GetCallsStatusReturnType,\n  getCallsStatus,\n} from './getCallsStatus.js'\n\nexport type WaitForCallsStatusParameters = {\n  /**\n   * The id of the call batch to wait for.\n   */\n  id: string\n  /**\n   * Polling frequency (in ms). Defaults to the client's pollingInterval config.\n   *\n   * @default client.pollingInterval\n   */\n  pollingInterval?: number | undefined\n  /**\n   * The status range to wait for.\n   *\n   * @default (status) => status >= 200\n   */\n  status?: ((parameters: GetCallsStatusReturnType) => boolean) | undefined\n  /**\n   * Optional timeout (in milliseconds) to wait before stopping polling.\n   *\n   * @default 60_000\n   */\n  timeout?: number | undefined\n}\n\nexport type WaitForCallsStatusReturnType = GetCallsStatusReturnType\n\nexport type WaitForCallsStatusErrorType =\n  | ObserveErrorType\n  | PollErrorType\n  | GetCallsStatusErrorType\n  | WaitForCallsStatusTimeoutError\n  | ErrorType\n\n/**\n * Waits for the status & receipts of a call bundle that was sent via `sendCalls`.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/waitForCallsStatus\n * - JSON-RPC Methods: [`wallet_getCallsStatus`](https://eips.ethereum.org/EIPS/eip-5792)\n *\n * @param client - Client to use\n * @param parameters - {@link WaitForCallsStatusParameters}\n * @returns Status & receipts of the call bundle. {@link WaitForCallsStatusReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { waitForCallsStatus } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n *\n * const { receipts, status } = await waitForCallsStatus(client, { id: '0xdeadbeef' })\n */\nexport async function waitForCallsStatus<chain extends Chain | undefined>(\n  client: Client<Transport, chain>,\n  parameters: WaitForCallsStatusParameters,\n): Promise<WaitForCallsStatusReturnType> {\n  const {\n    id,\n    pollingInterval = client.pollingInterval,\n    status = ({ statusCode }) => statusCode >= 200,\n    timeout = 60_000,\n  } = parameters\n  const observerId = stringify(['waitForCallsStatus', client.uid, id])\n\n  const { promise, resolve, reject } =\n    withResolvers<WaitForCallsStatusReturnType>()\n\n  let timer: Timer | undefined = undefined\n\n  const unobserve = observe(observerId, { resolve, reject }, (emit) => {\n    const unpoll = poll(\n      async () => {\n        const done = (fn: () => void) => {\n          clearTimeout(timer)\n          unpoll()\n          fn()\n          unobserve()\n        }\n\n        try {\n          const result = await getCallsStatus(client, { id })\n          if (!status(result)) return\n          done(() => emit.resolve(result))\n        } catch (error) {\n          done(() => emit.reject(error))\n        }\n      },\n      {\n        interval: pollingInterval,\n        emitOnBegin: true,\n      },\n    )\n\n    return unpoll\n  })\n\n  timer = timeout\n    ? setTimeout(() => {\n        unobserve()\n        clearTimeout(timer)\n        reject(new WaitForCallsStatusTimeoutError({ id }))\n      }, timeout)\n    : undefined\n\n  return await promise\n}\n\nexport type WaitForCallsStatusTimeoutErrorType =\n  WaitForCallsStatusTimeoutError & {\n    name: 'WaitForCallsStatusTimeoutError'\n  }\nexport class WaitForCallsStatusTimeoutError extends BaseError {\n  constructor({ id }: { id: string }) {\n    super(\n      `Timed out while waiting for call bundle with id \"${id}\" to be confirmed.`,\n      { name: 'WaitForCallsStatusTimeoutError' },\n    )\n  }\n}\n"],"mappings":";;;;;;AAuEAA,OAAA,CAAAC,kBAAA,GAAAA,kBAAA;AArEA,MAAAC,SAAA,GAAAC,OAAA;AAGA,MAAAC,YAAA,GAAAD,OAAA;AACA,MAAAE,SAAA,GAAAF,OAAA;AACA,MAAAG,kBAAA,GAAAH,OAAA;AACA,MAAAI,cAAA,GAAAJ,OAAA;AACA,MAAAK,mBAAA,GAAAL,OAAA;AA8DO,eAAeF,kBAAkBA,CACtCQ,MAAgC,EAChCC,UAAwC;EAExC,MAAM;IACJC,EAAE;IACFC,eAAe,GAAGH,MAAM,CAACG,eAAe;IACxCC,MAAM,GAAGA,CAAC;MAAEC;IAAU,CAAE,KAAKA,UAAU,IAAI,GAAG;IAC9CC,OAAO,GAAG;EAAM,CACjB,GAAGL,UAAU;EACd,MAAMM,UAAU,GAAG,IAAAT,cAAA,CAAAU,SAAS,EAAC,CAAC,oBAAoB,EAAER,MAAM,CAACS,GAAG,EAAEP,EAAE,CAAC,CAAC;EAEpE,MAAM;IAAEQ,OAAO;IAAEC,OAAO;IAAEC;EAAM,CAAE,GAChC,IAAAf,kBAAA,CAAAgB,aAAa,GAAgC;EAE/C,IAAIC,KAAK,GAAsBC,SAAS;EAExC,MAAMC,SAAS,GAAG,IAAArB,YAAA,CAAAsB,OAAO,EAACV,UAAU,EAAE;IAAEI,OAAO;IAAEC;EAAM,CAAE,EAAGM,IAAI,IAAI;IAClE,MAAMC,MAAM,GAAG,IAAAvB,SAAA,CAAAwB,IAAI,EACjB,YAAW;MACT,MAAMC,IAAI,GAAIC,EAAc,IAAI;QAC9BC,YAAY,CAACT,KAAK,CAAC;QACnBK,MAAM,EAAE;QACRG,EAAE,EAAE;QACJN,SAAS,EAAE;MACb,CAAC;MAED,IAAI;QACF,MAAMQ,MAAM,GAAG,MAAM,IAAAzB,mBAAA,CAAA0B,cAAc,EAACzB,MAAM,EAAE;UAAEE;QAAE,CAAE,CAAC;QACnD,IAAI,CAACE,MAAM,CAACoB,MAAM,CAAC,EAAE;QACrBH,IAAI,CAAC,MAAMH,IAAI,CAACP,OAAO,CAACa,MAAM,CAAC,CAAC;MAClC,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdL,IAAI,CAAC,MAAMH,IAAI,CAACN,MAAM,CAACc,KAAK,CAAC,CAAC;MAChC;IACF,CAAC,EACD;MACEC,QAAQ,EAAExB,eAAe;MACzByB,WAAW,EAAE;KACd,CACF;IAED,OAAOT,MAAM;EACf,CAAC,CAAC;EAEFL,KAAK,GAAGR,OAAO,GACXuB,UAAU,CAAC,MAAK;IACdb,SAAS,EAAE;IACXO,YAAY,CAACT,KAAK,CAAC;IACnBF,MAAM,CAAC,IAAIkB,8BAA8B,CAAC;MAAE5B;IAAE,CAAE,CAAC,CAAC;EACpD,CAAC,EAAEI,OAAO,CAAC,GACXS,SAAS;EAEb,OAAO,MAAML,OAAO;AACtB;AAMA,MAAaoB,8BAA+B,SAAQrC,SAAA,CAAAsC,SAAS;EAC3DC,YAAY;IAAE9B;EAAE,CAAkB;IAChC,KAAK,CACH,oDAAoDA,EAAE,oBAAoB,EAC1E;MAAE+B,IAAI,EAAE;IAAgC,CAAE,CAC3C;EACH;;AANF1C,OAAA,CAAAuC,8BAAA,GAAAA,8BAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}