{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.signMessage = signMessage;\nconst parseAccount_js_1 = require(\"../../accounts/utils/parseAccount.js\");\nconst account_js_1 = require(\"../../errors/account.js\");\nconst toHex_js_1 = require(\"../../utils/encoding/toHex.js\");\nasync function signMessage(client, {\n  account: account_ = client.account,\n  message\n}) {\n  if (!account_) throw new account_js_1.AccountNotFoundError({\n    docsPath: '/docs/actions/wallet/signMessage'\n  });\n  const account = (0, parseAccount_js_1.parseAccount)(account_);\n  if (account.signMessage) return account.signMessage({\n    message\n  });\n  const message_ = (() => {\n    if (typeof message === 'string') return (0, toHex_js_1.stringToHex)(message);\n    if (message.raw instanceof Uint8Array) return (0, toHex_js_1.toHex)(message.raw);\n    return message.raw;\n  })();\n  return client.request({\n    method: 'personal_sign',\n    params: [message_, account.address]\n  }, {\n    retryCount: 0\n  });\n}","map":{"version":3,"names":["exports","signMessage","parseAccount_js_1","require","account_js_1","toHex_js_1","client","account","account_","message","AccountNotFoundError","docsPath","parseAccount","message_","stringToHex","raw","Uint8Array","toHex","request","method","params","address","retryCount"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/viem/actions/wallet/signMessage.ts"],"sourcesContent":["import type { Account } from '../../accounts/types.js'\nimport {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../../accounts/utils/parseAccount.js'\nimport type { SignMessageErrorType as SignMessageErrorType_account } from '../../accounts/utils/signMessage.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { AccountNotFoundError } from '../../errors/account.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { GetAccountParameter } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hex, SignableMessage } from '../../types/misc.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type ToHexErrorType,\n  stringToHex,\n  toHex,\n} from '../../utils/encoding/toHex.js'\n\nexport type SignMessageParameters<\n  account extends Account | undefined = Account | undefined,\n> = GetAccountParameter<account> & {\n  message: SignableMessage\n}\n\nexport type SignMessageReturnType = Hex\n\nexport type SignMessageErrorType =\n  | ParseAccountErrorType\n  | RequestErrorType\n  | SignMessageErrorType_account\n  | ToHexErrorType\n  | ErrorType\n\n/**\n * Calculates an Ethereum-specific signature in [EIP-191 format](https://eips.ethereum.org/EIPS/eip-191): `keccak256(\"\\x19Ethereum Signed Message:\\n\" + len(message) + message))`.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/signMessage\n * - JSON-RPC Methods:\n *   - JSON-RPC Accounts: [`personal_sign`](https://docs.metamask.io/guide/signing-data#personal-sign)\n *   - Local Accounts: Signs locally. No JSON-RPC request.\n *\n * With the calculated signature, you can:\n * - use [`verifyMessage`](https://viem.sh/docs/utilities/verifyMessage) to verify the signature,\n * - use [`recoverMessageAddress`](https://viem.sh/docs/utilities/recoverMessageAddress) to recover the signing address from a signature.\n *\n * @param client - Client to use\n * @param parameters - {@link SignMessageParameters}\n * @returns The signed message. {@link SignMessageReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { signMessage } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const signature = await signMessage(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   message: 'hello world',\n * })\n *\n * @example\n * // Account Hoisting\n * import { createWalletClient, custom } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { signMessage } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0xâ€¦'),\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const signature = await signMessage(client, {\n *   message: 'hello world',\n * })\n */\nexport async function signMessage<\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n>(\n  client: Client<Transport, chain, account>,\n  {\n    account: account_ = client.account,\n    message,\n  }: SignMessageParameters<account>,\n): Promise<SignMessageReturnType> {\n  if (!account_)\n    throw new AccountNotFoundError({\n      docsPath: '/docs/actions/wallet/signMessage',\n    })\n  const account = parseAccount(account_)\n\n  if (account.signMessage) return account.signMessage({ message })\n\n  const message_ = (() => {\n    if (typeof message === 'string') return stringToHex(message)\n    if (message.raw instanceof Uint8Array) return toHex(message.raw)\n    return message.raw\n  })()\n\n  return client.request(\n    {\n      method: 'personal_sign',\n      params: [message_, account.address],\n    },\n    { retryCount: 0 },\n  )\n}\n"],"mappings":";;;;;AAiFAA,OAAA,CAAAC,WAAA,GAAAA,WAAA;AAhFA,MAAAC,iBAAA,GAAAC,OAAA;AAOA,MAAAC,YAAA,GAAAD,OAAA;AAMA,MAAAE,UAAA,GAAAF,OAAA;AAmEO,eAAeF,WAAWA,CAI/BK,MAAyC,EACzC;EACEC,OAAO,EAAEC,QAAQ,GAAGF,MAAM,CAACC,OAAO;EAClCE;AAAO,CACwB;EAEjC,IAAI,CAACD,QAAQ,EACX,MAAM,IAAIJ,YAAA,CAAAM,oBAAoB,CAAC;IAC7BC,QAAQ,EAAE;GACX,CAAC;EACJ,MAAMJ,OAAO,GAAG,IAAAL,iBAAA,CAAAU,YAAY,EAACJ,QAAQ,CAAC;EAEtC,IAAID,OAAO,CAACN,WAAW,EAAE,OAAOM,OAAO,CAACN,WAAW,CAAC;IAAEQ;EAAO,CAAE,CAAC;EAEhE,MAAMI,QAAQ,GAAG,CAAC,MAAK;IACrB,IAAI,OAAOJ,OAAO,KAAK,QAAQ,EAAE,OAAO,IAAAJ,UAAA,CAAAS,WAAW,EAACL,OAAO,CAAC;IAC5D,IAAIA,OAAO,CAACM,GAAG,YAAYC,UAAU,EAAE,OAAO,IAAAX,UAAA,CAAAY,KAAK,EAACR,OAAO,CAACM,GAAG,CAAC;IAChE,OAAON,OAAO,CAACM,GAAG;EACpB,CAAC,EAAC,CAAE;EAEJ,OAAOT,MAAM,CAACY,OAAO,CACnB;IACEC,MAAM,EAAE,eAAe;IACvBC,MAAM,EAAE,CAACP,QAAQ,EAAEN,OAAO,CAACc,OAAO;GACnC,EACD;IAAEC,UAAU,EAAE;EAAC,CAAE,CAClB;AACH","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}