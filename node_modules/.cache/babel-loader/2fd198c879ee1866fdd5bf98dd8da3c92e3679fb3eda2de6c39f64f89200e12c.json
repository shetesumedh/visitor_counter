{"ast":null,"code":"'use client';\n\nimport { verifyTypedDataQueryOptions } from '@wagmi/core/query';\nimport { useQuery } from '../utils/query.js';\nimport { useChainId } from './useChainId.js';\nimport { useConfig } from './useConfig.js';\n/** https://wagmi.sh/react/api/hooks/useVerifyTypedData */\nexport function useVerifyTypedData(parameters = {}) {\n  const {\n    address,\n    message,\n    primaryType,\n    signature,\n    types,\n    query = {}\n  } = parameters;\n  const config = useConfig(parameters);\n  const chainId = useChainId({\n    config\n  });\n  const options = verifyTypedDataQueryOptions(config, {\n    ...parameters,\n    chainId: parameters.chainId ?? chainId\n  });\n  const enabled = Boolean(address && message && primaryType && signature && types && (query.enabled ?? true));\n  return useQuery({\n    ...query,\n    ...options,\n    enabled\n  });\n}","map":{"version":3,"names":["verifyTypedDataQueryOptions","useQuery","useChainId","useConfig","useVerifyTypedData","parameters","address","message","primaryType","signature","types","query","config","chainId","options","enabled","Boolean"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/wagmi/src/hooks/useVerifyTypedData.ts"],"sourcesContent":["'use client'\n\nimport type {\n  Config,\n  ResolvedRegister,\n  VerifyTypedDataErrorType,\n} from '@wagmi/core'\nimport {\n  type VerifyTypedDataData,\n  type VerifyTypedDataOptions,\n  type VerifyTypedDataQueryKey,\n  verifyTypedDataQueryOptions,\n} from '@wagmi/core/query'\nimport type { VerifyTypedDataQueryFnData } from '@wagmi/core/query'\nimport type { TypedData } from 'viem'\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseVerifyTypedDataParameters<\n  typedData extends TypedData | Record<string, unknown> = TypedData,\n  primaryType extends keyof typedData | 'EIP712Domain' = keyof typedData,\n  config extends Config = Config,\n  selectData = VerifyTypedDataData,\n> = VerifyTypedDataOptions<typedData, primaryType, config> &\n  ConfigParameter<config> &\n  QueryParameter<\n    VerifyTypedDataQueryFnData,\n    VerifyTypedDataErrorType,\n    selectData,\n    VerifyTypedDataQueryKey<typedData, primaryType, config>\n  >\n\nexport type UseVerifyTypedDataReturnType<selectData = VerifyTypedDataData> =\n  UseQueryReturnType<selectData, VerifyTypedDataErrorType>\n\n/** https://wagmi.sh/react/api/hooks/useVerifyTypedData */\nexport function useVerifyTypedData<\n  const typedData extends TypedData | Record<string, unknown>,\n  primaryType extends keyof typedData | 'EIP712Domain',\n  config extends Config = ResolvedRegister['config'],\n  selectData = VerifyTypedDataData,\n>(\n  parameters: UseVerifyTypedDataParameters<\n    typedData,\n    primaryType,\n    config,\n    selectData\n  > = {} as any,\n): UseVerifyTypedDataReturnType<selectData> {\n  const {\n    address,\n    message,\n    primaryType,\n    signature,\n    types,\n    query = {},\n  } = parameters\n\n  const config = useConfig(parameters)\n  const chainId = useChainId({ config })\n\n  const options = verifyTypedDataQueryOptions<config, typedData, primaryType>(\n    config,\n    {\n      ...parameters,\n      chainId: parameters.chainId ?? chainId,\n    },\n  )\n  const enabled = Boolean(\n    address &&\n      message &&\n      primaryType &&\n      signature &&\n      types &&\n      (query.enabled ?? true),\n  )\n\n  return useQuery({ ...query, ...options, enabled })\n}\n"],"mappings":"AAAA,YAAY;;AAOZ,SAIEA,2BAA2B,QACtB,mBAAmB;AAI1B,SAAkCC,QAAQ,QAAQ,mBAAmB;AACrE,SAASC,UAAU,QAAQ,iBAAiB;AAC5C,SAASC,SAAS,QAAQ,gBAAgB;AAmB1C;AACA,OAAM,SAAUC,kBAAkBA,CAMhCC,UAAA,GAKI,EAAS;EAEb,MAAM;IACJC,OAAO;IACPC,OAAO;IACPC,WAAW;IACXC,SAAS;IACTC,KAAK;IACLC,KAAK,GAAG;EAAE,CACX,GAAGN,UAAU;EAEd,MAAMO,MAAM,GAAGT,SAAS,CAACE,UAAU,CAAC;EACpC,MAAMQ,OAAO,GAAGX,UAAU,CAAC;IAAEU;EAAM,CAAE,CAAC;EAEtC,MAAME,OAAO,GAAGd,2BAA2B,CACzCY,MAAM,EACN;IACE,GAAGP,UAAU;IACbQ,OAAO,EAAER,UAAU,CAACQ,OAAO,IAAIA;GAChC,CACF;EACD,MAAME,OAAO,GAAGC,OAAO,CACrBV,OAAO,IACLC,OAAO,IACPC,WAAW,IACXC,SAAS,IACTC,KAAK,KACJC,KAAK,CAACI,OAAO,IAAI,IAAI,CAAC,CAC1B;EAED,OAAOd,QAAQ,CAAC;IAAE,GAAGU,KAAK;IAAE,GAAGG,OAAO;IAAEC;EAAO,CAAE,CAAC;AACpD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}