{"ast":null,"code":"import { getPaymasterData } from '../../actions/paymaster/getPaymasterData.js';\nimport { getPaymasterStubData } from '../../actions/paymaster/getPaymasterStubData.js';\nexport function paymasterActions(client) {\n  return {\n    getPaymasterData: parameters => getPaymasterData(client, parameters),\n    getPaymasterStubData: parameters => getPaymasterStubData(client, parameters)\n  };\n}","map":{"version":3,"names":["getPaymasterData","getPaymasterStubData","paymasterActions","client","parameters"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/viem/account-abstraction/clients/decorators/paymaster.ts"],"sourcesContent":["import type { Client } from '../../../clients/createClient.js'\nimport type { Transport } from '../../../clients/transports/createTransport.js'\nimport {\n  type GetPaymasterDataParameters,\n  type GetPaymasterDataReturnType,\n  getPaymasterData,\n} from '../../actions/paymaster/getPaymasterData.js'\nimport {\n  type GetPaymasterStubDataParameters,\n  type GetPaymasterStubDataReturnType,\n  getPaymasterStubData,\n} from '../../actions/paymaster/getPaymasterStubData.js'\n\nexport type PaymasterActions = {\n  /**\n   * Retrieves paymaster-related User Operation properties to be used for sending the User Operation.\n   *\n   * - Docs: https://viem.sh/account-abstraction/actions/paymaster/getPaymasterData\n   *\n   * @param client - Client to use\n   * @param parameters - {@link GetPaymasterDataParameters}\n   * @returns Paymaster-related User Operation properties. {@link GetPaymasterDataReturnType}\n   *\n   * @example\n   * import { http } from 'viem'\n   * import { createPaymasterClient } from 'viem/account-abstraction'\n   *\n   * const paymasterClient = createPaymasterClient({\n   *   transport: http('https://...'),\n   * })\n   *\n   * const userOperation = { ... }\n   *\n   * const values = await paymasterClient.getPaymasterData({\n   *   chainId: 1,\n   *   entryPointAddress: '0x...',\n   *   ...userOperation,\n   * })\n   */\n  getPaymasterData: (\n    parameters: GetPaymasterDataParameters,\n  ) => Promise<GetPaymasterDataReturnType>\n  /**\n   * Retrieves paymaster-related User Operation properties to be used for gas estimation.\n   *\n   * - Docs: https://viem.sh/account-abstraction/actions/paymaster/getPaymasterStubData\n   *\n   * @param client - Client to use\n   * @param parameters - {@link GetPaymasterStubDataParameters}\n   * @returns Paymaster-related User Operation properties. {@link GetPaymasterStubDataReturnType}\n   *\n   * @example\n   * import { http } from 'viem'\n   * import { createPaymasterClient } from 'viem/account-abstraction'\n   *\n   * const paymasterClient = createPaymasterClient({\n   *   transport: http('https://...'),\n   * })\n   *\n   * const userOperation = { ... }\n   *\n   * const values = await paymasterClient.getPaymasterStubData({\n   *   chainId: 1,\n   *   entryPointAddress: '0x...',\n   *   ...userOperation,\n   * })\n   */\n  getPaymasterStubData: (\n    parameters: GetPaymasterStubDataParameters,\n  ) => Promise<GetPaymasterStubDataReturnType>\n}\n\nexport function paymasterActions<transport extends Transport = Transport>(\n  client: Client<transport>,\n): PaymasterActions {\n  return {\n    getPaymasterData: (parameters) => getPaymasterData(client, parameters),\n    getPaymasterStubData: (parameters) =>\n      getPaymasterStubData(client, parameters),\n  }\n}\n"],"mappings":"AAEA,SAGEA,gBAAgB,QACX,6CAA6C;AACpD,SAGEC,oBAAoB,QACf,iDAAiD;AA6DxD,OAAM,SAAUC,gBAAgBA,CAC9BC,MAAyB;EAEzB,OAAO;IACLH,gBAAgB,EAAGI,UAAU,IAAKJ,gBAAgB,CAACG,MAAM,EAAEC,UAAU,CAAC;IACtEH,oBAAoB,EAAGG,UAAU,IAC/BH,oBAAoB,CAACE,MAAM,EAAEC,UAAU;GAC1C;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}