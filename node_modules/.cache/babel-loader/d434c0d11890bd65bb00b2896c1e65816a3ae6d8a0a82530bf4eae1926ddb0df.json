{"ast":null,"code":"import { isViemError, standardErrors, viemHttpErrorToProviderError } from '../../../core/error/errors.js';\nimport { ensureHexString } from '../../../core/type/util.js';\nimport { assertArrayPresence, assertPresence } from '../../../util/assertPresence.js';\nimport { convertCredentialToJSON } from '../../../util/encoding.js';\nimport { get } from '../../../util/get.js';\nimport { hexToString, isHex, numberToHex } from 'viem';\nimport { createWalletSendCallsRequest, injectRequestCapabilities, waitForCallsTransactionHash } from '../utils.js';\nimport { createSmartAccount } from './createSmartAccount.js';\nexport async function createSubAccountSigner({\n  address,\n  client,\n  factory,\n  factoryData,\n  owner,\n  ownerIndex,\n  parentAddress,\n  attribution\n}) {\n  var _a;\n  const subAccount = {\n    address,\n    factory,\n    factoryData\n  };\n  const chainId = (_a = client.chain) === null || _a === void 0 ? void 0 : _a.id;\n  if (!chainId) {\n    throw standardErrors.rpc.internal('chainId not found');\n  }\n  const account = await createSmartAccount({\n    owner,\n    ownerIndex: ownerIndex !== null && ownerIndex !== void 0 ? ownerIndex : 1,\n    address,\n    client,\n    factoryData\n  });\n  const request = async args => {\n    var _a, _b, _c, _d, _e, _f;\n    try {\n      switch (args.method) {\n        case 'wallet_addSubAccount':\n          return subAccount;\n        case 'eth_accounts':\n          return [subAccount.address];\n        case 'eth_coinbase':\n          return subAccount.address;\n        case 'net_version':\n          return chainId.toString();\n        case 'eth_chainId':\n          return numberToHex(chainId);\n        case 'eth_sendTransaction':\n          {\n            assertArrayPresence(args.params);\n            const rawParams = args.params[0];\n            assertPresence(rawParams.to, standardErrors.rpc.invalidParams('to is required'));\n            const params = {\n              to: rawParams.to,\n              data: ensureHexString((_a = rawParams.data) !== null && _a !== void 0 ? _a : '0x', true),\n              value: ensureHexString((_b = rawParams.value) !== null && _b !== void 0 ? _b : '0x', true),\n              from: (_c = rawParams.from) !== null && _c !== void 0 ? _c : subAccount.address\n            };\n            // Transform into wallet_sendCalls request\n            const sendCallsRequest = createWalletSendCallsRequest({\n              calls: [params],\n              chainId,\n              from: params.from\n            });\n            const response = await request(sendCallsRequest);\n            return waitForCallsTransactionHash({\n              client,\n              id: response\n            });\n          }\n        case 'wallet_sendCalls':\n          {\n            assertArrayPresence(args.params);\n            // Get the client for the chain\n            const chainId = get(args.params[0], 'chainId');\n            if (!chainId) {\n              throw standardErrors.rpc.invalidParams('chainId is required');\n            }\n            if (!isHex(chainId)) {\n              throw standardErrors.rpc.invalidParams('chainId must be a hex encoded integer');\n            }\n            if (!args.params[0]) {\n              throw standardErrors.rpc.invalidParams('params are required');\n            }\n            if (!('calls' in args.params[0])) {\n              throw standardErrors.rpc.invalidParams('calls are required');\n            }\n            let prepareCallsRequest = {\n              method: 'wallet_prepareCalls',\n              params: [{\n                version: '1.0',\n                calls: args.params[0].calls,\n                chainId: chainId,\n                from: subAccount.address,\n                capabilities: 'capabilities' in args.params[0] ? args.params[0].capabilities : {}\n              }]\n            };\n            if (parentAddress) {\n              prepareCallsRequest = injectRequestCapabilities(prepareCallsRequest, {\n                funding: [{\n                  type: 'spendPermission',\n                  data: {\n                    autoApply: true,\n                    sources: [parentAddress],\n                    preference: 'PREFER_DIRECT_BALANCE'\n                  }\n                }]\n              });\n            }\n            let prepareCallsResponse = await request(prepareCallsRequest);\n            const signResponse = await ((_e = (_d = owner).sign) === null || _e === void 0 ? void 0 : _e.call(_d, {\n              // Hash returned from wallet_prepareCalls is double hex encoded\n              hash: hexToString(prepareCallsResponse.signatureRequest.hash)\n            }));\n            let signatureData;\n            if (!signResponse) {\n              throw standardErrors.rpc.internal('signature not found');\n            }\n            if (isHex(signResponse)) {\n              signatureData = {\n                type: 'secp256k1',\n                data: {\n                  address: owner.address,\n                  signature: signResponse\n                }\n              };\n            } else {\n              signatureData = {\n                type: 'webauthn',\n                data: {\n                  signature: JSON.stringify(convertCredentialToJSON(Object.assign({\n                    id: (_f = owner.id) !== null && _f !== void 0 ? _f : '1'\n                  }, signResponse))),\n                  publicKey: owner.publicKey\n                }\n              };\n            }\n            const sendPreparedCallsResponse = await request({\n              method: 'wallet_sendPreparedCalls',\n              params: [{\n                version: '1.0',\n                type: prepareCallsResponse.type,\n                data: prepareCallsResponse.userOp,\n                chainId: prepareCallsResponse.chainId,\n                signature: signatureData\n              }]\n            });\n            return sendPreparedCallsResponse[0];\n          }\n        case 'wallet_sendPreparedCalls':\n          {\n            assertArrayPresence(args.params);\n            // Get the client for the chain\n            const chainId = get(args.params[0], 'chainId');\n            if (!chainId) {\n              throw standardErrors.rpc.invalidParams('chainId is required');\n            }\n            if (!isHex(chainId)) {\n              throw standardErrors.rpc.invalidParams('chainId must be a hex encoded integer');\n            }\n            const sendPreparedCallsResponse = await client.request({\n              method: 'wallet_sendPreparedCalls',\n              params: args.params\n            });\n            return sendPreparedCallsResponse;\n          }\n        case 'wallet_prepareCalls':\n          {\n            assertArrayPresence(args.params);\n            // Get the client for the chain\n            const chainId = get(args.params[0], 'chainId');\n            if (!chainId) {\n              throw standardErrors.rpc.invalidParams('chainId is required');\n            }\n            if (!isHex(chainId)) {\n              throw standardErrors.rpc.invalidParams('chainId must be a hex encoded integer');\n            }\n            if (!args.params[0]) {\n              throw standardErrors.rpc.invalidParams('params are required');\n            }\n            if (!get(args.params[0], 'calls')) {\n              throw standardErrors.rpc.invalidParams('calls are required');\n            }\n            const prepareCallsParams = args.params[0];\n            if (attribution && prepareCallsParams.capabilities && !('attribution' in prepareCallsParams.capabilities)) {\n              prepareCallsParams.capabilities.attribution = attribution;\n            }\n            const prepareCallsResponse = await client.request({\n              method: 'wallet_prepareCalls',\n              params: [Object.assign(Object.assign({}, args.params[0]), {\n                chainId: chainId\n              })]\n            });\n            return prepareCallsResponse;\n          }\n        case 'personal_sign':\n          {\n            assertArrayPresence(args.params);\n            // Param is expected to be a hex encoded string\n            if (!isHex(args.params[0])) {\n              throw standardErrors.rpc.invalidParams('message must be a hex encoded string');\n            }\n            // signMessage expects the unencoded message\n            const message = hexToString(args.params[0]);\n            return account.signMessage({\n              message\n            });\n          }\n        case 'eth_signTypedData_v4':\n          {\n            assertArrayPresence(args.params);\n            const typedData = typeof args.params[1] === 'string' ? JSON.parse(args.params[1]) : args.params[1];\n            return account.signTypedData(typedData);\n          }\n        case 'eth_signTypedData_v1':\n        case 'eth_signTypedData_v3':\n        case 'wallet_addEthereumChain':\n        case 'wallet_switchEthereumChain':\n        default:\n          throw standardErrors.rpc.methodNotSupported();\n      }\n    } catch (error) {\n      // Convert error to RPC error if possible\n      if (isViemError(error)) {\n        const newError = viemHttpErrorToProviderError(error);\n        if (newError) {\n          throw newError;\n        }\n      }\n      throw error;\n    }\n  };\n  return {\n    request\n  };\n}","map":{"version":3,"names":["isViemError","standardErrors","viemHttpErrorToProviderError","ensureHexString","assertArrayPresence","assertPresence","convertCredentialToJSON","get","hexToString","isHex","numberToHex","createWalletSendCallsRequest","injectRequestCapabilities","waitForCallsTransactionHash","createSmartAccount","createSubAccountSigner","address","client","factory","factoryData","owner","ownerIndex","parentAddress","attribution","subAccount","chainId","_a","chain","id","rpc","internal","account","request","args","method","toString","params","rawParams","to","invalidParams","data","value","_b","from","_c","sendCallsRequest","calls","response","prepareCallsRequest","version","capabilities","funding","type","autoApply","sources","preference","prepareCallsResponse","signResponse","_e","_d","sign","call","hash","signatureRequest","signatureData","signature","JSON","stringify","Object","assign","_f","publicKey","sendPreparedCallsResponse","userOp","prepareCallsParams","message","signMessage","typedData","parse","signTypedData","methodNotSupported","error","newError"],"sources":["../../../../src/sign/base-account/utils/createSubAccountSigner.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}