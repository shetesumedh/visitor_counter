{"ast":null,"code":"import * as AbiParameters from 'ox/AbiParameters';\nimport { encodeFunctionData } from '../../../utils/abi/encodeFunctionData.js';\nimport { abi, executionMode } from '../constants.js';\nimport { encodeCalls } from './encodeCalls.js';\nexport function encodeExecuteBatchesData(parameters) {\n  const {\n    batches\n  } = parameters;\n  const encodedBatches = AbiParameters.encode(AbiParameters.from('bytes[]'), [batches.map(b => {\n    const batch = b;\n    return encodeCalls(batch.calls, batch.opData);\n  })]);\n  return encodeFunctionData({\n    abi,\n    functionName: 'execute',\n    args: [executionMode.batchOfBatches, encodedBatches]\n  });\n}","map":{"version":3,"names":["AbiParameters","encodeFunctionData","abi","executionMode","encodeCalls","encodeExecuteBatchesData","parameters","batches","encodedBatches","encode","from","map","b","batch","calls","opData","functionName","args","batchOfBatches"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/viem/experimental/erc7821/utils/encodeExecuteBatchesData.ts"],"sourcesContent":["import type { Narrow } from 'abitype'\nimport * as AbiParameters from 'ox/AbiParameters'\nimport type { ErrorType } from '../../../errors/utils.js'\n\nimport type { Batches } from '../../../types/calls.js'\nimport type { Hex } from '../../../types/misc.js'\nimport {\n  type EncodeFunctionDataErrorType,\n  encodeFunctionData,\n} from '../../../utils/abi/encodeFunctionData.js'\nimport { abi, executionMode } from '../constants.js'\nimport { type EncodeCallsErrorType, encodeCalls } from './encodeCalls.js'\n\n/** @internal */\nexport type Batch = { calls: readonly unknown[]; opData?: Hex | undefined }\n\nexport type EncodeExecuteBatchesDataParameters<\n  batches extends readonly Batch[] = readonly Batch[],\n> = {\n  /** Batches to execute. */\n  batches: Batches<Narrow<batches>, { opData?: Hex | undefined }>\n}\n\nexport type EncodeExecuteBatchesDataReturnType = Hex\n\nexport type EncodeExecuteBatchesDataErrorType =\n  | EncodeCallsErrorType\n  | EncodeFunctionDataErrorType\n  | ErrorType\n\nexport function encodeExecuteBatchesData<batches extends readonly Batch[]>(\n  parameters: EncodeExecuteBatchesDataParameters<batches>,\n): EncodeExecuteBatchesDataReturnType {\n  const { batches } = parameters\n\n  const encodedBatches = AbiParameters.encode(AbiParameters.from('bytes[]'), [\n    batches.map((b) => {\n      const batch = b as Batch\n      return encodeCalls(batch.calls, batch.opData)\n    }),\n  ])\n\n  return encodeFunctionData({\n    abi,\n    functionName: 'execute',\n    args: [executionMode.batchOfBatches, encodedBatches],\n  })\n}\n"],"mappings":"AACA,OAAO,KAAKA,aAAa,MAAM,kBAAkB;AAKjD,SAEEC,kBAAkB,QACb,0CAA0C;AACjD,SAASC,GAAG,EAAEC,aAAa,QAAQ,iBAAiB;AACpD,SAAoCC,WAAW,QAAQ,kBAAkB;AAmBzE,OAAM,SAAUC,wBAAwBA,CACtCC,UAAuD;EAEvD,MAAM;IAAEC;EAAO,CAAE,GAAGD,UAAU;EAE9B,MAAME,cAAc,GAAGR,aAAa,CAACS,MAAM,CAACT,aAAa,CAACU,IAAI,CAAC,SAAS,CAAC,EAAE,CACzEH,OAAO,CAACI,GAAG,CAAEC,CAAC,IAAI;IAChB,MAAMC,KAAK,GAAGD,CAAU;IACxB,OAAOR,WAAW,CAACS,KAAK,CAACC,KAAK,EAAED,KAAK,CAACE,MAAM,CAAC;EAC/C,CAAC,CAAC,CACH,CAAC;EAEF,OAAOd,kBAAkB,CAAC;IACxBC,GAAG;IACHc,YAAY,EAAE,SAAS;IACvBC,IAAI,EAAE,CAACd,aAAa,CAACe,cAAc,EAAEV,cAAc;GACpD,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}