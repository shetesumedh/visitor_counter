{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toBlobSidecars = toBlobSidecars;\nconst blobsToCommitments_js_1 = require(\"./blobsToCommitments.js\");\nconst blobsToProofs_js_1 = require(\"./blobsToProofs.js\");\nconst toBlobs_js_1 = require(\"./toBlobs.js\");\nfunction toBlobSidecars(parameters) {\n  const {\n    data,\n    kzg,\n    to\n  } = parameters;\n  const blobs = parameters.blobs ?? (0, toBlobs_js_1.toBlobs)({\n    data: data,\n    to\n  });\n  const commitments = parameters.commitments ?? (0, blobsToCommitments_js_1.blobsToCommitments)({\n    blobs,\n    kzg: kzg,\n    to\n  });\n  const proofs = parameters.proofs ?? (0, blobsToProofs_js_1.blobsToProofs)({\n    blobs,\n    commitments,\n    kzg: kzg,\n    to\n  });\n  const sidecars = [];\n  for (let i = 0; i < blobs.length; i++) sidecars.push({\n    blob: blobs[i],\n    commitment: commitments[i],\n    proof: proofs[i]\n  });\n  return sidecars;\n}","map":{"version":3,"names":["exports","toBlobSidecars","blobsToCommitments_js_1","require","blobsToProofs_js_1","toBlobs_js_1","parameters","data","kzg","to","blobs","toBlobs","commitments","blobsToCommitments","proofs","blobsToProofs","sidecars","i","length","push","blob","commitment","proof"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/viem/utils/blob/toBlobSidecars.ts"],"sourcesContent":["import type { ErrorType } from '../../errors/utils.js'\nimport type { BlobSidecars } from '../../types/eip4844.js'\nimport type { Kzg } from '../../types/kzg.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport type { OneOf } from '../../types/utils.js'\nimport {\n  type BlobsToCommitmentsErrorType,\n  blobsToCommitments,\n} from './blobsToCommitments.js'\nimport { blobsToProofs, type blobsToProofsErrorType } from './blobsToProofs.js'\nimport { type ToBlobsErrorType, toBlobs } from './toBlobs.js'\n\ntype To = 'hex' | 'bytes'\n\nexport type ToBlobSidecarsParameters<\n  data extends Hex | ByteArray | undefined = undefined,\n  blobs extends readonly Hex[] | readonly ByteArray[] | undefined = undefined,\n  to extends To =\n    | (blobs extends readonly Hex[] ? 'hex' : never)\n    | (blobs extends readonly ByteArray[] ? 'bytes' : never),\n  ///\n  _blobsType =\n    | (blobs extends readonly Hex[] ? readonly Hex[] : never)\n    | (blobs extends readonly ByteArray[] ? readonly ByteArray[] : never),\n> = {\n  /** Return type. */\n  to?: to | To | undefined\n} & OneOf<\n  | {\n      /** Data to transform into blobs. */\n      data: data | Hex | ByteArray\n      /** KZG implementation. */\n      kzg: Kzg\n    }\n  | {\n      /** Blobs. */\n      blobs: blobs | readonly Hex[] | readonly ByteArray[]\n      /** Commitment for each blob. */\n      commitments: _blobsType | readonly Hex[] | readonly ByteArray[]\n      /** Proof for each blob. */\n      proofs: _blobsType | readonly Hex[] | readonly ByteArray[]\n    }\n>\n\nexport type ToBlobSidecarsReturnType<to extends To> =\n  | (to extends 'bytes' ? BlobSidecars<ByteArray> : never)\n  | (to extends 'hex' ? BlobSidecars<Hex> : never)\n\nexport type ToBlobSidecarsErrorType =\n  | BlobsToCommitmentsErrorType\n  | ToBlobsErrorType\n  | blobsToProofsErrorType\n  | ErrorType\n\n/**\n * Transforms arbitrary data (or blobs, commitments, & proofs) into a sidecar array.\n *\n * @example\n * ```ts\n * import { toBlobSidecars, stringToHex } from 'viem'\n *\n * const sidecars = toBlobSidecars({ data: stringToHex('hello world') })\n * ```\n *\n * @example\n * ```ts\n * import {\n *   blobsToCommitments,\n *   toBlobs,\n *   blobsToProofs,\n *   toBlobSidecars,\n *   stringToHex\n * } from 'viem'\n *\n * const blobs = toBlobs({ data: stringToHex('hello world') })\n * const commitments = blobsToCommitments({ blobs, kzg })\n * const proofs = blobsToProofs({ blobs, commitments, kzg })\n *\n * const sidecars = toBlobSidecars({ blobs, commitments, proofs })\n * ```\n */\nexport function toBlobSidecars<\n  const data extends Hex | ByteArray | undefined = undefined,\n  const blobs extends\n    | readonly Hex[]\n    | readonly ByteArray[]\n    | undefined = undefined,\n  to extends To =\n    | (data extends Hex ? 'hex' : never)\n    | (data extends ByteArray ? 'bytes' : never)\n    | (blobs extends readonly Hex[] ? 'hex' : never)\n    | (blobs extends readonly ByteArray[] ? 'bytes' : never),\n>(\n  parameters: ToBlobSidecarsParameters<data, blobs, to>,\n): ToBlobSidecarsReturnType<to> {\n  const { data, kzg, to } = parameters\n  const blobs = parameters.blobs ?? toBlobs({ data: data!, to })\n  const commitments =\n    parameters.commitments ?? blobsToCommitments({ blobs, kzg: kzg!, to })\n  const proofs =\n    parameters.proofs ?? blobsToProofs({ blobs, commitments, kzg: kzg!, to })\n\n  const sidecars: BlobSidecars = []\n  for (let i = 0; i < blobs.length; i++)\n    sidecars.push({\n      blob: blobs[i],\n      commitment: commitments[i],\n      proof: proofs[i],\n    })\n\n  return sidecars as ToBlobSidecarsReturnType<to>\n}\n"],"mappings":";;;;;AAiFAA,OAAA,CAAAC,cAAA,GAAAA,cAAA;AA5EA,MAAAC,uBAAA,GAAAC,OAAA;AAIA,MAAAC,kBAAA,GAAAD,OAAA;AACA,MAAAE,YAAA,GAAAF,OAAA;AAuEA,SAAgBF,cAAcA,CAY5BK,UAAqD;EAErD,MAAM;IAAEC,IAAI;IAAEC,GAAG;IAAEC;EAAE,CAAE,GAAGH,UAAU;EACpC,MAAMI,KAAK,GAAGJ,UAAU,CAACI,KAAK,IAAI,IAAAL,YAAA,CAAAM,OAAO,EAAC;IAAEJ,IAAI,EAAEA,IAAK;IAAEE;EAAE,CAAE,CAAC;EAC9D,MAAMG,WAAW,GACfN,UAAU,CAACM,WAAW,IAAI,IAAAV,uBAAA,CAAAW,kBAAkB,EAAC;IAAEH,KAAK;IAAEF,GAAG,EAAEA,GAAI;IAAEC;EAAE,CAAE,CAAC;EACxE,MAAMK,MAAM,GACVR,UAAU,CAACQ,MAAM,IAAI,IAAAV,kBAAA,CAAAW,aAAa,EAAC;IAAEL,KAAK;IAAEE,WAAW;IAAEJ,GAAG,EAAEA,GAAI;IAAEC;EAAE,CAAE,CAAC;EAE3E,MAAMO,QAAQ,GAAiB,EAAE;EACjC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,KAAK,CAACQ,MAAM,EAAED,CAAC,EAAE,EACnCD,QAAQ,CAACG,IAAI,CAAC;IACZC,IAAI,EAAEV,KAAK,CAACO,CAAC,CAAC;IACdI,UAAU,EAAET,WAAW,CAACK,CAAC,CAAC;IAC1BK,KAAK,EAAER,MAAM,CAACG,CAAC;GAChB,CAAC;EAEJ,OAAOD,QAAwC;AACjD","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}