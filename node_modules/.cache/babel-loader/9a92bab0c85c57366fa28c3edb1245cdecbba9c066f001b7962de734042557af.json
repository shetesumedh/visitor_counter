{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UnsupportedPackedAbiType = exports.InvalidDefinitionTypeError = exports.InvalidArrayError = exports.InvalidAbiDecodingTypeError = exports.InvalidAbiEncodingTypeError = exports.DecodeLogTopicsMismatch = exports.DecodeLogDataMismatch = exports.BytesSizeMismatchError = exports.AbiItemAmbiguityError = exports.AbiFunctionSignatureNotFoundError = exports.AbiFunctionOutputsNotFoundError = exports.AbiFunctionNotFoundError = exports.AbiEventNotFoundError = exports.AbiEventSignatureNotFoundError = exports.AbiEventSignatureEmptyTopicsError = exports.AbiErrorSignatureNotFoundError = exports.AbiErrorNotFoundError = exports.AbiErrorInputsNotFoundError = exports.AbiEncodingLengthMismatchError = exports.AbiEncodingBytesSizeMismatchError = exports.AbiEncodingArrayLengthMismatchError = exports.AbiDecodingZeroDataError = exports.AbiDecodingDataSizeTooSmallError = exports.AbiDecodingDataSizeInvalidError = exports.AbiConstructorParamsNotFoundError = exports.AbiConstructorNotFoundError = void 0;\nconst formatAbiItem_js_1 = require(\"../utils/abi/formatAbiItem.js\");\nconst size_js_1 = require(\"../utils/data/size.js\");\nconst base_js_1 = require(\"./base.js\");\nclass AbiConstructorNotFoundError extends base_js_1.BaseError {\n  constructor({\n    docsPath\n  }) {\n    super(['A constructor was not found on the ABI.', 'Make sure you are using the correct ABI and that the constructor exists on it.'].join('\\n'), {\n      docsPath,\n      name: 'AbiConstructorNotFoundError'\n    });\n  }\n}\nexports.AbiConstructorNotFoundError = AbiConstructorNotFoundError;\nclass AbiConstructorParamsNotFoundError extends base_js_1.BaseError {\n  constructor({\n    docsPath\n  }) {\n    super(['Constructor arguments were provided (`args`), but a constructor parameters (`inputs`) were not found on the ABI.', 'Make sure you are using the correct ABI, and that the `inputs` attribute on the constructor exists.'].join('\\n'), {\n      docsPath,\n      name: 'AbiConstructorParamsNotFoundError'\n    });\n  }\n}\nexports.AbiConstructorParamsNotFoundError = AbiConstructorParamsNotFoundError;\nclass AbiDecodingDataSizeInvalidError extends base_js_1.BaseError {\n  constructor({\n    data,\n    size\n  }) {\n    super([`Data size of ${size} bytes is invalid.`, 'Size must be in increments of 32 bytes (size % 32 === 0).'].join('\\n'), {\n      metaMessages: [`Data: ${data} (${size} bytes)`],\n      name: 'AbiDecodingDataSizeInvalidError'\n    });\n  }\n}\nexports.AbiDecodingDataSizeInvalidError = AbiDecodingDataSizeInvalidError;\nclass AbiDecodingDataSizeTooSmallError extends base_js_1.BaseError {\n  constructor({\n    data,\n    params,\n    size\n  }) {\n    super([`Data size of ${size} bytes is too small for given parameters.`].join('\\n'), {\n      metaMessages: [`Params: (${(0, formatAbiItem_js_1.formatAbiParams)(params, {\n        includeName: true\n      })})`, `Data:   ${data} (${size} bytes)`],\n      name: 'AbiDecodingDataSizeTooSmallError'\n    });\n    Object.defineProperty(this, \"data\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"params\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"size\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.data = data;\n    this.params = params;\n    this.size = size;\n  }\n}\nexports.AbiDecodingDataSizeTooSmallError = AbiDecodingDataSizeTooSmallError;\nclass AbiDecodingZeroDataError extends base_js_1.BaseError {\n  constructor() {\n    super('Cannot decode zero data (\"0x\") with ABI parameters.', {\n      name: 'AbiDecodingZeroDataError'\n    });\n  }\n}\nexports.AbiDecodingZeroDataError = AbiDecodingZeroDataError;\nclass AbiEncodingArrayLengthMismatchError extends base_js_1.BaseError {\n  constructor({\n    expectedLength,\n    givenLength,\n    type\n  }) {\n    super([`ABI encoding array length mismatch for type ${type}.`, `Expected length: ${expectedLength}`, `Given length: ${givenLength}`].join('\\n'), {\n      name: 'AbiEncodingArrayLengthMismatchError'\n    });\n  }\n}\nexports.AbiEncodingArrayLengthMismatchError = AbiEncodingArrayLengthMismatchError;\nclass AbiEncodingBytesSizeMismatchError extends base_js_1.BaseError {\n  constructor({\n    expectedSize,\n    value\n  }) {\n    super(`Size of bytes \"${value}\" (bytes${(0, size_js_1.size)(value)}) does not match expected size (bytes${expectedSize}).`, {\n      name: 'AbiEncodingBytesSizeMismatchError'\n    });\n  }\n}\nexports.AbiEncodingBytesSizeMismatchError = AbiEncodingBytesSizeMismatchError;\nclass AbiEncodingLengthMismatchError extends base_js_1.BaseError {\n  constructor({\n    expectedLength,\n    givenLength\n  }) {\n    super(['ABI encoding params/values length mismatch.', `Expected length (params): ${expectedLength}`, `Given length (values): ${givenLength}`].join('\\n'), {\n      name: 'AbiEncodingLengthMismatchError'\n    });\n  }\n}\nexports.AbiEncodingLengthMismatchError = AbiEncodingLengthMismatchError;\nclass AbiErrorInputsNotFoundError extends base_js_1.BaseError {\n  constructor(errorName, {\n    docsPath\n  }) {\n    super([`Arguments (\\`args\\`) were provided to \"${errorName}\", but \"${errorName}\" on the ABI does not contain any parameters (\\`inputs\\`).`, 'Cannot encode error result without knowing what the parameter types are.', 'Make sure you are using the correct ABI and that the inputs exist on it.'].join('\\n'), {\n      docsPath,\n      name: 'AbiErrorInputsNotFoundError'\n    });\n  }\n}\nexports.AbiErrorInputsNotFoundError = AbiErrorInputsNotFoundError;\nclass AbiErrorNotFoundError extends base_js_1.BaseError {\n  constructor(errorName, {\n    docsPath\n  } = {}) {\n    super([`Error ${errorName ? `\"${errorName}\" ` : ''}not found on ABI.`, 'Make sure you are using the correct ABI and that the error exists on it.'].join('\\n'), {\n      docsPath,\n      name: 'AbiErrorNotFoundError'\n    });\n  }\n}\nexports.AbiErrorNotFoundError = AbiErrorNotFoundError;\nclass AbiErrorSignatureNotFoundError extends base_js_1.BaseError {\n  constructor(signature, {\n    docsPath\n  }) {\n    super([`Encoded error signature \"${signature}\" not found on ABI.`, 'Make sure you are using the correct ABI and that the error exists on it.', `You can look up the decoded signature here: https://openchain.xyz/signatures?query=${signature}.`].join('\\n'), {\n      docsPath,\n      name: 'AbiErrorSignatureNotFoundError'\n    });\n    Object.defineProperty(this, \"signature\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.signature = signature;\n  }\n}\nexports.AbiErrorSignatureNotFoundError = AbiErrorSignatureNotFoundError;\nclass AbiEventSignatureEmptyTopicsError extends base_js_1.BaseError {\n  constructor({\n    docsPath\n  }) {\n    super('Cannot extract event signature from empty topics.', {\n      docsPath,\n      name: 'AbiEventSignatureEmptyTopicsError'\n    });\n  }\n}\nexports.AbiEventSignatureEmptyTopicsError = AbiEventSignatureEmptyTopicsError;\nclass AbiEventSignatureNotFoundError extends base_js_1.BaseError {\n  constructor(signature, {\n    docsPath\n  }) {\n    super([`Encoded event signature \"${signature}\" not found on ABI.`, 'Make sure you are using the correct ABI and that the event exists on it.', `You can look up the signature here: https://openchain.xyz/signatures?query=${signature}.`].join('\\n'), {\n      docsPath,\n      name: 'AbiEventSignatureNotFoundError'\n    });\n  }\n}\nexports.AbiEventSignatureNotFoundError = AbiEventSignatureNotFoundError;\nclass AbiEventNotFoundError extends base_js_1.BaseError {\n  constructor(eventName, {\n    docsPath\n  } = {}) {\n    super([`Event ${eventName ? `\"${eventName}\" ` : ''}not found on ABI.`, 'Make sure you are using the correct ABI and that the event exists on it.'].join('\\n'), {\n      docsPath,\n      name: 'AbiEventNotFoundError'\n    });\n  }\n}\nexports.AbiEventNotFoundError = AbiEventNotFoundError;\nclass AbiFunctionNotFoundError extends base_js_1.BaseError {\n  constructor(functionName, {\n    docsPath\n  } = {}) {\n    super([`Function ${functionName ? `\"${functionName}\" ` : ''}not found on ABI.`, 'Make sure you are using the correct ABI and that the function exists on it.'].join('\\n'), {\n      docsPath,\n      name: 'AbiFunctionNotFoundError'\n    });\n  }\n}\nexports.AbiFunctionNotFoundError = AbiFunctionNotFoundError;\nclass AbiFunctionOutputsNotFoundError extends base_js_1.BaseError {\n  constructor(functionName, {\n    docsPath\n  }) {\n    super([`Function \"${functionName}\" does not contain any \\`outputs\\` on ABI.`, 'Cannot decode function result without knowing what the parameter types are.', 'Make sure you are using the correct ABI and that the function exists on it.'].join('\\n'), {\n      docsPath,\n      name: 'AbiFunctionOutputsNotFoundError'\n    });\n  }\n}\nexports.AbiFunctionOutputsNotFoundError = AbiFunctionOutputsNotFoundError;\nclass AbiFunctionSignatureNotFoundError extends base_js_1.BaseError {\n  constructor(signature, {\n    docsPath\n  }) {\n    super([`Encoded function signature \"${signature}\" not found on ABI.`, 'Make sure you are using the correct ABI and that the function exists on it.', `You can look up the signature here: https://openchain.xyz/signatures?query=${signature}.`].join('\\n'), {\n      docsPath,\n      name: 'AbiFunctionSignatureNotFoundError'\n    });\n  }\n}\nexports.AbiFunctionSignatureNotFoundError = AbiFunctionSignatureNotFoundError;\nclass AbiItemAmbiguityError extends base_js_1.BaseError {\n  constructor(x, y) {\n    super('Found ambiguous types in overloaded ABI items.', {\n      metaMessages: [`\\`${x.type}\\` in \\`${(0, formatAbiItem_js_1.formatAbiItem)(x.abiItem)}\\`, and`, `\\`${y.type}\\` in \\`${(0, formatAbiItem_js_1.formatAbiItem)(y.abiItem)}\\``, '', 'These types encode differently and cannot be distinguished at runtime.', 'Remove one of the ambiguous items in the ABI.'],\n      name: 'AbiItemAmbiguityError'\n    });\n  }\n}\nexports.AbiItemAmbiguityError = AbiItemAmbiguityError;\nclass BytesSizeMismatchError extends base_js_1.BaseError {\n  constructor({\n    expectedSize,\n    givenSize\n  }) {\n    super(`Expected bytes${expectedSize}, got bytes${givenSize}.`, {\n      name: 'BytesSizeMismatchError'\n    });\n  }\n}\nexports.BytesSizeMismatchError = BytesSizeMismatchError;\nclass DecodeLogDataMismatch extends base_js_1.BaseError {\n  constructor({\n    abiItem,\n    data,\n    params,\n    size\n  }) {\n    super([`Data size of ${size} bytes is too small for non-indexed event parameters.`].join('\\n'), {\n      metaMessages: [`Params: (${(0, formatAbiItem_js_1.formatAbiParams)(params, {\n        includeName: true\n      })})`, `Data:   ${data} (${size} bytes)`],\n      name: 'DecodeLogDataMismatch'\n    });\n    Object.defineProperty(this, \"abiItem\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"data\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"params\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"size\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.abiItem = abiItem;\n    this.data = data;\n    this.params = params;\n    this.size = size;\n  }\n}\nexports.DecodeLogDataMismatch = DecodeLogDataMismatch;\nclass DecodeLogTopicsMismatch extends base_js_1.BaseError {\n  constructor({\n    abiItem,\n    param\n  }) {\n    super([`Expected a topic for indexed event parameter${param.name ? ` \"${param.name}\"` : ''} on event \"${(0, formatAbiItem_js_1.formatAbiItem)(abiItem, {\n      includeName: true\n    })}\".`].join('\\n'), {\n      name: 'DecodeLogTopicsMismatch'\n    });\n    Object.defineProperty(this, \"abiItem\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.abiItem = abiItem;\n  }\n}\nexports.DecodeLogTopicsMismatch = DecodeLogTopicsMismatch;\nclass InvalidAbiEncodingTypeError extends base_js_1.BaseError {\n  constructor(type, {\n    docsPath\n  }) {\n    super([`Type \"${type}\" is not a valid encoding type.`, 'Please provide a valid ABI type.'].join('\\n'), {\n      docsPath,\n      name: 'InvalidAbiEncodingType'\n    });\n  }\n}\nexports.InvalidAbiEncodingTypeError = InvalidAbiEncodingTypeError;\nclass InvalidAbiDecodingTypeError extends base_js_1.BaseError {\n  constructor(type, {\n    docsPath\n  }) {\n    super([`Type \"${type}\" is not a valid decoding type.`, 'Please provide a valid ABI type.'].join('\\n'), {\n      docsPath,\n      name: 'InvalidAbiDecodingType'\n    });\n  }\n}\nexports.InvalidAbiDecodingTypeError = InvalidAbiDecodingTypeError;\nclass InvalidArrayError extends base_js_1.BaseError {\n  constructor(value) {\n    super([`Value \"${value}\" is not a valid array.`].join('\\n'), {\n      name: 'InvalidArrayError'\n    });\n  }\n}\nexports.InvalidArrayError = InvalidArrayError;\nclass InvalidDefinitionTypeError extends base_js_1.BaseError {\n  constructor(type) {\n    super([`\"${type}\" is not a valid definition type.`, 'Valid types: \"function\", \"event\", \"error\"'].join('\\n'), {\n      name: 'InvalidDefinitionTypeError'\n    });\n  }\n}\nexports.InvalidDefinitionTypeError = InvalidDefinitionTypeError;\nclass UnsupportedPackedAbiType extends base_js_1.BaseError {\n  constructor(type) {\n    super(`Type \"${type}\" is not supported for packed encoding.`, {\n      name: 'UnsupportedPackedAbiType'\n    });\n  }\n}\nexports.UnsupportedPackedAbiType = UnsupportedPackedAbiType;","map":{"version":3,"names":["formatAbiItem_js_1","require","size_js_1","base_js_1","AbiConstructorNotFoundError","BaseError","constructor","docsPath","join","name","exports","AbiConstructorParamsNotFoundError","AbiDecodingDataSizeInvalidError","data","size","metaMessages","AbiDecodingDataSizeTooSmallError","params","formatAbiParams","includeName","Object","defineProperty","AbiDecodingZeroDataError","AbiEncodingArrayLengthMismatchError","expectedLength","givenLength","type","AbiEncodingBytesSizeMismatchError","expectedSize","value","AbiEncodingLengthMismatchError","AbiErrorInputsNotFoundError","errorName","AbiErrorNotFoundError","AbiErrorSignatureNotFoundError","signature","AbiEventSignatureEmptyTopicsError","AbiEventSignatureNotFoundError","AbiEventNotFoundError","eventName","AbiFunctionNotFoundError","functionName","AbiFunctionOutputsNotFoundError","AbiFunctionSignatureNotFoundError","AbiItemAmbiguityError","x","y","formatAbiItem","abiItem","BytesSizeMismatchError","givenSize","DecodeLogDataMismatch","DecodeLogTopicsMismatch","param","InvalidAbiEncodingTypeError","InvalidAbiDecodingTypeError","InvalidArrayError","InvalidDefinitionTypeError","UnsupportedPackedAbiType"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/viem/errors/abi.ts"],"sourcesContent":["import type { Abi, AbiEvent, AbiParameter } from 'abitype'\n\nimport type { Hex } from '../types/misc.js'\nimport { formatAbiItem, formatAbiParams } from '../utils/abi/formatAbiItem.js'\nimport { size } from '../utils/data/size.js'\n\nimport { BaseError } from './base.js'\n\nexport type AbiConstructorNotFoundErrorType = AbiConstructorNotFoundError & {\n  name: 'AbiConstructorNotFoundError'\n}\nexport class AbiConstructorNotFoundError extends BaseError {\n  constructor({ docsPath }: { docsPath: string }) {\n    super(\n      [\n        'A constructor was not found on the ABI.',\n        'Make sure you are using the correct ABI and that the constructor exists on it.',\n      ].join('\\n'),\n      {\n        docsPath,\n        name: 'AbiConstructorNotFoundError',\n      },\n    )\n  }\n}\n\nexport type AbiConstructorParamsNotFoundErrorType =\n  AbiConstructorParamsNotFoundError & {\n    name: 'AbiConstructorParamsNotFoundError'\n  }\n\nexport class AbiConstructorParamsNotFoundError extends BaseError {\n  constructor({ docsPath }: { docsPath: string }) {\n    super(\n      [\n        'Constructor arguments were provided (`args`), but a constructor parameters (`inputs`) were not found on the ABI.',\n        'Make sure you are using the correct ABI, and that the `inputs` attribute on the constructor exists.',\n      ].join('\\n'),\n      {\n        docsPath,\n        name: 'AbiConstructorParamsNotFoundError',\n      },\n    )\n  }\n}\n\nexport type AbiDecodingDataSizeInvalidErrorType =\n  AbiDecodingDataSizeInvalidError & {\n    name: 'AbiDecodingDataSizeInvalidError'\n  }\nexport class AbiDecodingDataSizeInvalidError extends BaseError {\n  constructor({ data, size }: { data: Hex; size: number }) {\n    super(\n      [\n        `Data size of ${size} bytes is invalid.`,\n        'Size must be in increments of 32 bytes (size % 32 === 0).',\n      ].join('\\n'),\n      {\n        metaMessages: [`Data: ${data} (${size} bytes)`],\n        name: 'AbiDecodingDataSizeInvalidError',\n      },\n    )\n  }\n}\n\nexport type AbiDecodingDataSizeTooSmallErrorType =\n  AbiDecodingDataSizeTooSmallError & {\n    name: 'AbiDecodingDataSizeTooSmallError'\n  }\nexport class AbiDecodingDataSizeTooSmallError extends BaseError {\n  data: Hex\n  params: readonly AbiParameter[]\n  size: number\n\n  constructor({\n    data,\n    params,\n    size,\n  }: { data: Hex; params: readonly AbiParameter[]; size: number }) {\n    super(\n      [`Data size of ${size} bytes is too small for given parameters.`].join(\n        '\\n',\n      ),\n      {\n        metaMessages: [\n          `Params: (${formatAbiParams(params, { includeName: true })})`,\n          `Data:   ${data} (${size} bytes)`,\n        ],\n        name: 'AbiDecodingDataSizeTooSmallError',\n      },\n    )\n\n    this.data = data\n    this.params = params\n    this.size = size\n  }\n}\n\nexport type AbiDecodingZeroDataErrorType = AbiDecodingZeroDataError & {\n  name: 'AbiDecodingZeroDataError'\n}\nexport class AbiDecodingZeroDataError extends BaseError {\n  constructor() {\n    super('Cannot decode zero data (\"0x\") with ABI parameters.', {\n      name: 'AbiDecodingZeroDataError',\n    })\n  }\n}\n\nexport type AbiEncodingArrayLengthMismatchErrorType =\n  AbiEncodingArrayLengthMismatchError & {\n    name: 'AbiEncodingArrayLengthMismatchError'\n  }\nexport class AbiEncodingArrayLengthMismatchError extends BaseError {\n  constructor({\n    expectedLength,\n    givenLength,\n    type,\n  }: { expectedLength: number; givenLength: number; type: string }) {\n    super(\n      [\n        `ABI encoding array length mismatch for type ${type}.`,\n        `Expected length: ${expectedLength}`,\n        `Given length: ${givenLength}`,\n      ].join('\\n'),\n      { name: 'AbiEncodingArrayLengthMismatchError' },\n    )\n  }\n}\n\nexport type AbiEncodingBytesSizeMismatchErrorType =\n  AbiEncodingBytesSizeMismatchError & {\n    name: 'AbiEncodingBytesSizeMismatchError'\n  }\nexport class AbiEncodingBytesSizeMismatchError extends BaseError {\n  constructor({ expectedSize, value }: { expectedSize: number; value: Hex }) {\n    super(\n      `Size of bytes \"${value}\" (bytes${size(\n        value,\n      )}) does not match expected size (bytes${expectedSize}).`,\n      { name: 'AbiEncodingBytesSizeMismatchError' },\n    )\n  }\n}\n\nexport type AbiEncodingLengthMismatchErrorType =\n  AbiEncodingLengthMismatchError & {\n    name: 'AbiEncodingLengthMismatchError'\n  }\nexport class AbiEncodingLengthMismatchError extends BaseError {\n  constructor({\n    expectedLength,\n    givenLength,\n  }: { expectedLength: number; givenLength: number }) {\n    super(\n      [\n        'ABI encoding params/values length mismatch.',\n        `Expected length (params): ${expectedLength}`,\n        `Given length (values): ${givenLength}`,\n      ].join('\\n'),\n      { name: 'AbiEncodingLengthMismatchError' },\n    )\n  }\n}\n\nexport type AbiErrorInputsNotFoundErrorType = AbiErrorInputsNotFoundError & {\n  name: 'AbiErrorInputsNotFoundError'\n}\nexport class AbiErrorInputsNotFoundError extends BaseError {\n  constructor(errorName: string, { docsPath }: { docsPath: string }) {\n    super(\n      [\n        `Arguments (\\`args\\`) were provided to \"${errorName}\", but \"${errorName}\" on the ABI does not contain any parameters (\\`inputs\\`).`,\n        'Cannot encode error result without knowing what the parameter types are.',\n        'Make sure you are using the correct ABI and that the inputs exist on it.',\n      ].join('\\n'),\n      {\n        docsPath,\n        name: 'AbiErrorInputsNotFoundError',\n      },\n    )\n  }\n}\n\nexport type AbiErrorNotFoundErrorType = AbiErrorNotFoundError & {\n  name: 'AbiErrorNotFoundError'\n}\nexport class AbiErrorNotFoundError extends BaseError {\n  constructor(\n    errorName?: string | undefined,\n    { docsPath }: { docsPath?: string | undefined } = {},\n  ) {\n    super(\n      [\n        `Error ${errorName ? `\"${errorName}\" ` : ''}not found on ABI.`,\n        'Make sure you are using the correct ABI and that the error exists on it.',\n      ].join('\\n'),\n      {\n        docsPath,\n        name: 'AbiErrorNotFoundError',\n      },\n    )\n  }\n}\n\nexport type AbiErrorSignatureNotFoundErrorType =\n  AbiErrorSignatureNotFoundError & {\n    name: 'AbiErrorSignatureNotFoundError'\n  }\nexport class AbiErrorSignatureNotFoundError extends BaseError {\n  signature: Hex\n\n  constructor(signature: Hex, { docsPath }: { docsPath: string }) {\n    super(\n      [\n        `Encoded error signature \"${signature}\" not found on ABI.`,\n        'Make sure you are using the correct ABI and that the error exists on it.',\n        `You can look up the decoded signature here: https://openchain.xyz/signatures?query=${signature}.`,\n      ].join('\\n'),\n      {\n        docsPath,\n        name: 'AbiErrorSignatureNotFoundError',\n      },\n    )\n    this.signature = signature\n  }\n}\n\nexport type AbiEventSignatureEmptyTopicsErrorType =\n  AbiEventSignatureEmptyTopicsError & {\n    name: 'AbiEventSignatureEmptyTopicsError'\n  }\nexport class AbiEventSignatureEmptyTopicsError extends BaseError {\n  constructor({ docsPath }: { docsPath: string }) {\n    super('Cannot extract event signature from empty topics.', {\n      docsPath,\n      name: 'AbiEventSignatureEmptyTopicsError',\n    })\n  }\n}\n\nexport type AbiEventSignatureNotFoundErrorType =\n  AbiEventSignatureNotFoundError & {\n    name: 'AbiEventSignatureNotFoundError'\n  }\nexport class AbiEventSignatureNotFoundError extends BaseError {\n  constructor(signature: Hex, { docsPath }: { docsPath: string }) {\n    super(\n      [\n        `Encoded event signature \"${signature}\" not found on ABI.`,\n        'Make sure you are using the correct ABI and that the event exists on it.',\n        `You can look up the signature here: https://openchain.xyz/signatures?query=${signature}.`,\n      ].join('\\n'),\n      {\n        docsPath,\n        name: 'AbiEventSignatureNotFoundError',\n      },\n    )\n  }\n}\n\nexport type AbiEventNotFoundErrorType = AbiEventNotFoundError & {\n  name: 'AbiEventNotFoundError'\n}\nexport class AbiEventNotFoundError extends BaseError {\n  constructor(\n    eventName?: string | undefined,\n    { docsPath }: { docsPath?: string | undefined } = {},\n  ) {\n    super(\n      [\n        `Event ${eventName ? `\"${eventName}\" ` : ''}not found on ABI.`,\n        'Make sure you are using the correct ABI and that the event exists on it.',\n      ].join('\\n'),\n      {\n        docsPath,\n        name: 'AbiEventNotFoundError',\n      },\n    )\n  }\n}\n\nexport type AbiFunctionNotFoundErrorType = AbiFunctionNotFoundError & {\n  name: 'AbiFunctionNotFoundError'\n}\nexport class AbiFunctionNotFoundError extends BaseError {\n  constructor(\n    functionName?: string | undefined,\n    { docsPath }: { docsPath?: string | undefined } = {},\n  ) {\n    super(\n      [\n        `Function ${functionName ? `\"${functionName}\" ` : ''}not found on ABI.`,\n        'Make sure you are using the correct ABI and that the function exists on it.',\n      ].join('\\n'),\n      {\n        docsPath,\n        name: 'AbiFunctionNotFoundError',\n      },\n    )\n  }\n}\n\nexport type AbiFunctionOutputsNotFoundErrorType =\n  AbiFunctionOutputsNotFoundError & {\n    name: 'AbiFunctionOutputsNotFoundError'\n  }\nexport class AbiFunctionOutputsNotFoundError extends BaseError {\n  constructor(functionName: string, { docsPath }: { docsPath: string }) {\n    super(\n      [\n        `Function \"${functionName}\" does not contain any \\`outputs\\` on ABI.`,\n        'Cannot decode function result without knowing what the parameter types are.',\n        'Make sure you are using the correct ABI and that the function exists on it.',\n      ].join('\\n'),\n      {\n        docsPath,\n        name: 'AbiFunctionOutputsNotFoundError',\n      },\n    )\n  }\n}\n\nexport type AbiFunctionSignatureNotFoundErrorType =\n  AbiFunctionSignatureNotFoundError & {\n    name: 'AbiFunctionSignatureNotFoundError'\n  }\nexport class AbiFunctionSignatureNotFoundError extends BaseError {\n  constructor(signature: Hex, { docsPath }: { docsPath: string }) {\n    super(\n      [\n        `Encoded function signature \"${signature}\" not found on ABI.`,\n        'Make sure you are using the correct ABI and that the function exists on it.',\n        `You can look up the signature here: https://openchain.xyz/signatures?query=${signature}.`,\n      ].join('\\n'),\n      {\n        docsPath,\n        name: 'AbiFunctionSignatureNotFoundError',\n      },\n    )\n  }\n}\n\nexport type AbiItemAmbiguityErrorType = AbiItemAmbiguityError & {\n  name: 'AbiItemAmbiguityError'\n}\nexport class AbiItemAmbiguityError extends BaseError {\n  constructor(\n    x: { abiItem: Abi[number]; type: string },\n    y: { abiItem: Abi[number]; type: string },\n  ) {\n    super('Found ambiguous types in overloaded ABI items.', {\n      metaMessages: [\n        `\\`${x.type}\\` in \\`${formatAbiItem(x.abiItem)}\\`, and`,\n        `\\`${y.type}\\` in \\`${formatAbiItem(y.abiItem)}\\``,\n        '',\n        'These types encode differently and cannot be distinguished at runtime.',\n        'Remove one of the ambiguous items in the ABI.',\n      ],\n      name: 'AbiItemAmbiguityError',\n    })\n  }\n}\n\nexport type BytesSizeMismatchErrorType = BytesSizeMismatchError & {\n  name: 'BytesSizeMismatchError'\n}\nexport class BytesSizeMismatchError extends BaseError {\n  constructor({\n    expectedSize,\n    givenSize,\n  }: { expectedSize: number; givenSize: number }) {\n    super(`Expected bytes${expectedSize}, got bytes${givenSize}.`, {\n      name: 'BytesSizeMismatchError',\n    })\n  }\n}\n\nexport type DecodeLogDataMismatchErrorType = DecodeLogDataMismatch & {\n  name: 'DecodeLogDataMismatch'\n}\nexport class DecodeLogDataMismatch extends BaseError {\n  abiItem: AbiEvent\n  data: Hex\n  params: readonly AbiParameter[]\n  size: number\n\n  constructor({\n    abiItem,\n    data,\n    params,\n    size,\n  }: {\n    abiItem: AbiEvent\n    data: Hex\n    params: readonly AbiParameter[]\n    size: number\n  }) {\n    super(\n      [\n        `Data size of ${size} bytes is too small for non-indexed event parameters.`,\n      ].join('\\n'),\n      {\n        metaMessages: [\n          `Params: (${formatAbiParams(params, { includeName: true })})`,\n          `Data:   ${data} (${size} bytes)`,\n        ],\n        name: 'DecodeLogDataMismatch',\n      },\n    )\n\n    this.abiItem = abiItem\n    this.data = data\n    this.params = params\n    this.size = size\n  }\n}\n\nexport type DecodeLogTopicsMismatchErrorType = DecodeLogTopicsMismatch & {\n  name: 'DecodeLogTopicsMismatch'\n}\nexport class DecodeLogTopicsMismatch extends BaseError {\n  abiItem: AbiEvent\n\n  constructor({\n    abiItem,\n    param,\n  }: {\n    abiItem: AbiEvent\n    param: AbiParameter & { indexed: boolean }\n  }) {\n    super(\n      [\n        `Expected a topic for indexed event parameter${\n          param.name ? ` \"${param.name}\"` : ''\n        } on event \"${formatAbiItem(abiItem, { includeName: true })}\".`,\n      ].join('\\n'),\n      { name: 'DecodeLogTopicsMismatch' },\n    )\n\n    this.abiItem = abiItem\n  }\n}\n\nexport type InvalidAbiEncodingTypeErrorType = InvalidAbiEncodingTypeError & {\n  name: 'InvalidAbiEncodingTypeError'\n}\nexport class InvalidAbiEncodingTypeError extends BaseError {\n  constructor(type: string, { docsPath }: { docsPath: string }) {\n    super(\n      [\n        `Type \"${type}\" is not a valid encoding type.`,\n        'Please provide a valid ABI type.',\n      ].join('\\n'),\n      { docsPath, name: 'InvalidAbiEncodingType' },\n    )\n  }\n}\n\nexport type InvalidAbiDecodingTypeErrorType = InvalidAbiDecodingTypeError & {\n  name: 'InvalidAbiDecodingTypeError'\n}\nexport class InvalidAbiDecodingTypeError extends BaseError {\n  constructor(type: string, { docsPath }: { docsPath: string }) {\n    super(\n      [\n        `Type \"${type}\" is not a valid decoding type.`,\n        'Please provide a valid ABI type.',\n      ].join('\\n'),\n      { docsPath, name: 'InvalidAbiDecodingType' },\n    )\n  }\n}\n\nexport type InvalidArrayErrorType = InvalidArrayError & {\n  name: 'InvalidArrayError'\n}\nexport class InvalidArrayError extends BaseError {\n  constructor(value: unknown) {\n    super([`Value \"${value}\" is not a valid array.`].join('\\n'), {\n      name: 'InvalidArrayError',\n    })\n  }\n}\n\nexport type InvalidDefinitionTypeErrorType = InvalidDefinitionTypeError & {\n  name: 'InvalidDefinitionTypeError'\n}\nexport class InvalidDefinitionTypeError extends BaseError {\n  constructor(type: string) {\n    super(\n      [\n        `\"${type}\" is not a valid definition type.`,\n        'Valid types: \"function\", \"event\", \"error\"',\n      ].join('\\n'),\n      { name: 'InvalidDefinitionTypeError' },\n    )\n  }\n}\n\nexport type UnsupportedPackedAbiTypeErrorType = UnsupportedPackedAbiType & {\n  name: 'UnsupportedPackedAbiType'\n}\nexport class UnsupportedPackedAbiType extends BaseError {\n  constructor(type: unknown) {\n    super(`Type \"${type}\" is not supported for packed encoding.`, {\n      name: 'UnsupportedPackedAbiType',\n    })\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}