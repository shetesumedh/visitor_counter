{"ast":null,"code":"import { sliceHex } from '../../utils/data/slice.js';\nimport { trim } from '../../utils/data/trim.js';\nimport { hexToBigInt, hexToNumber } from '../../utils/encoding/fromHex.js';\nimport { receiptStatuses } from '../../utils/formatters/transactionReceipt.js';\nimport { fallbackMagicIdentifier, fallbackTransactionErrorMagicIdentifier } from './sendCalls.js';\n/**\n * Returns the status of a call batch that was sent via `sendCalls`.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/getCallsStatus\n * - JSON-RPC Methods: [`wallet_getCallsStatus`](https://eips.ethereum.org/EIPS/eip-5792)\n *\n * @param client - Client to use\n * @returns Status of the calls. {@link GetCallsStatusReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getCallsStatus } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const { receipts, status } = await getCallsStatus(client, { id: '0xdeadbeef' })\n */\nexport async function getCallsStatus(client, parameters) {\n  async function getStatus(id) {\n    const isTransactions = id.endsWith(fallbackMagicIdentifier.slice(2));\n    if (isTransactions) {\n      const chainId = trim(sliceHex(id, -64, -32));\n      const hashes = sliceHex(id, 0, -64).slice(2).match(/.{1,64}/g);\n      const receipts = await Promise.all(hashes.map(hash => fallbackTransactionErrorMagicIdentifier.slice(2) !== hash ? client.request({\n        method: 'eth_getTransactionReceipt',\n        params: [`0x${hash}`]\n      }, {\n        dedupe: true\n      }) : undefined));\n      const status = (() => {\n        if (receipts.some(r => r === null)) return 100; // pending\n        if (receipts.every(r => r?.status === '0x1')) return 200; // success\n        if (receipts.every(r => r?.status === '0x0')) return 500; // complete failure\n        return 600; // partial failure\n      })();\n      return {\n        atomic: false,\n        chainId: hexToNumber(chainId),\n        receipts: receipts.filter(Boolean),\n        status,\n        version: '2.0.0'\n      };\n    }\n    return client.request({\n      method: 'wallet_getCallsStatus',\n      params: [id]\n    });\n  }\n  const {\n    atomic = false,\n    chainId,\n    receipts,\n    version = '2.0.0',\n    ...response\n  } = await getStatus(parameters.id);\n  const [status, statusCode] = (() => {\n    const statusCode = response.status;\n    if (statusCode >= 100 && statusCode < 200) return ['pending', statusCode];\n    if (statusCode >= 200 && statusCode < 300) return ['success', statusCode];\n    if (statusCode >= 300 && statusCode < 700) return ['failure', statusCode];\n    // @ts-expect-error: for backwards compatibility\n    if (statusCode === 'CONFIRMED') return ['success', 200];\n    // @ts-expect-error: for backwards compatibility\n    if (statusCode === 'PENDING') return ['pending', 100];\n    return [undefined, statusCode];\n  })();\n  return {\n    ...response,\n    atomic,\n    // @ts-expect-error: for backwards compatibility\n    chainId: chainId ? hexToNumber(chainId) : undefined,\n    receipts: receipts?.map(receipt => ({\n      ...receipt,\n      blockNumber: hexToBigInt(receipt.blockNumber),\n      gasUsed: hexToBigInt(receipt.gasUsed),\n      status: receiptStatuses[receipt.status]\n    })) ?? [],\n    statusCode,\n    status,\n    version\n  };\n}","map":{"version":3,"names":["sliceHex","trim","hexToBigInt","hexToNumber","receiptStatuses","fallbackMagicIdentifier","fallbackTransactionErrorMagicIdentifier","getCallsStatus","client","parameters","getStatus","id","isTransactions","endsWith","slice","chainId","hashes","match","receipts","Promise","all","map","hash","request","method","params","dedupe","undefined","status","some","r","every","atomic","filter","Boolean","version","response","statusCode","receipt","blockNumber","gasUsed"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/viem/actions/wallet/getCallsStatus.ts"],"sourcesContent":["import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../../types/account.js'\nimport type { ExtractCapabilities } from '../../types/capabilities.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { WalletGetCallsStatusReturnType } from '../../types/eip1193.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { RpcTransactionReceipt } from '../../types/rpc.js'\nimport type { Prettify } from '../../types/utils.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport { sliceHex } from '../../utils/data/slice.js'\nimport { trim } from '../../utils/data/trim.js'\nimport { hexToBigInt, hexToNumber } from '../../utils/encoding/fromHex.js'\nimport { receiptStatuses } from '../../utils/formatters/transactionReceipt.js'\nimport {\n  fallbackMagicIdentifier,\n  fallbackTransactionErrorMagicIdentifier,\n} from './sendCalls.js'\n\nexport type GetCallsStatusParameters = { id: string }\n\nexport type GetCallsStatusReturnType = Prettify<\n  Omit<\n    WalletGetCallsStatusReturnType<\n      ExtractCapabilities<'getCallsStatus', 'ReturnType'>,\n      number,\n      bigint,\n      'success' | 'reverted'\n    >,\n    'status'\n  > & {\n    statusCode: number\n    status: 'pending' | 'success' | 'failure' | undefined\n  }\n>\n\nexport type GetCallsStatusErrorType = RequestErrorType | ErrorType\n\n/**\n * Returns the status of a call batch that was sent via `sendCalls`.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/getCallsStatus\n * - JSON-RPC Methods: [`wallet_getCallsStatus`](https://eips.ethereum.org/EIPS/eip-5792)\n *\n * @param client - Client to use\n * @returns Status of the calls. {@link GetCallsStatusReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getCallsStatus } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const { receipts, status } = await getCallsStatus(client, { id: '0xdeadbeef' })\n */\nexport async function getCallsStatus<\n  chain extends Chain | undefined,\n  account extends Account | undefined = undefined,\n>(\n  client: Client<Transport, chain, account>,\n  parameters: GetCallsStatusParameters,\n): Promise<GetCallsStatusReturnType> {\n  async function getStatus(id: Hex) {\n    const isTransactions = id.endsWith(fallbackMagicIdentifier.slice(2))\n    if (isTransactions) {\n      const chainId = trim(sliceHex(id, -64, -32))\n      const hashes = sliceHex(id, 0, -64)\n        .slice(2)\n        .match(/.{1,64}/g)\n\n      const receipts = await Promise.all(\n        hashes!.map((hash) =>\n          fallbackTransactionErrorMagicIdentifier.slice(2) !== hash\n            ? client.request(\n                {\n                  method: 'eth_getTransactionReceipt',\n                  params: [`0x${hash}`],\n                },\n                { dedupe: true },\n              )\n            : undefined,\n        ),\n      )\n\n      const status = (() => {\n        if (receipts.some((r) => r === null)) return 100 // pending\n        if (receipts.every((r) => r?.status === '0x1')) return 200 // success\n        if (receipts.every((r) => r?.status === '0x0')) return 500 // complete failure\n        return 600 // partial failure\n      })()\n\n      return {\n        atomic: false,\n        chainId: hexToNumber(chainId),\n        receipts: receipts.filter(Boolean) as RpcTransactionReceipt[],\n        status,\n        version: '2.0.0',\n      }\n    }\n    return client.request({\n      method: 'wallet_getCallsStatus',\n      params: [id],\n    })\n  }\n\n  const {\n    atomic = false,\n    chainId,\n    receipts,\n    version = '2.0.0',\n    ...response\n  } = await getStatus(parameters.id as Hex)\n  const [status, statusCode] = (() => {\n    const statusCode = response.status\n    if (statusCode >= 100 && statusCode < 200)\n      return ['pending', statusCode] as const\n    if (statusCode >= 200 && statusCode < 300)\n      return ['success', statusCode] as const\n    if (statusCode >= 300 && statusCode < 700)\n      return ['failure', statusCode] as const\n    // @ts-expect-error: for backwards compatibility\n    if (statusCode === 'CONFIRMED') return ['success', 200] as const\n    // @ts-expect-error: for backwards compatibility\n    if (statusCode === 'PENDING') return ['pending', 100] as const\n    return [undefined, statusCode]\n  })()\n  return {\n    ...response,\n    atomic,\n    // @ts-expect-error: for backwards compatibility\n    chainId: chainId ? hexToNumber(chainId) : undefined,\n    receipts:\n      receipts?.map((receipt) => ({\n        ...receipt,\n        blockNumber: hexToBigInt(receipt.blockNumber),\n        gasUsed: hexToBigInt(receipt.gasUsed),\n        status: receiptStatuses[receipt.status as '0x0' | '0x1'],\n      })) ?? [],\n    statusCode,\n    status,\n    version,\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}