{"ast":null,"code":"'use client';\n\nimport { useMutation } from '@tanstack/react-query';\nimport { switchChainMutationOptions } from '@wagmi/core/query';\nimport { useChains } from './useChains.js';\nimport { useConfig } from './useConfig.js';\n/** https://wagmi.sh/react/api/hooks/useSwitchChain */\nexport function useSwitchChain(parameters = {}) {\n  const {\n    mutation\n  } = parameters;\n  const config = useConfig(parameters);\n  const mutationOptions = switchChainMutationOptions(config);\n  const {\n    mutate,\n    mutateAsync,\n    ...result\n  } = useMutation({\n    ...mutation,\n    ...mutationOptions\n  });\n  return {\n    ...result,\n    chains: useChains({\n      config\n    }),\n    switchChain: mutate,\n    switchChainAsync: mutateAsync\n  };\n}","map":{"version":3,"names":["useMutation","switchChainMutationOptions","useChains","useConfig","useSwitchChain","parameters","mutation","config","mutationOptions","mutate","mutateAsync","result","chains","switchChain","switchChainAsync"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/wagmi/src/hooks/useSwitchChain.ts"],"sourcesContent":["'use client'\n\nimport { useMutation } from '@tanstack/react-query'\nimport type {\n  Config,\n  ResolvedRegister,\n  SwitchChainErrorType,\n} from '@wagmi/core'\nimport type { Compute } from '@wagmi/core/internal'\nimport {\n  type SwitchChainData,\n  type SwitchChainMutate,\n  type SwitchChainMutateAsync,\n  type SwitchChainVariables,\n  switchChainMutationOptions,\n} from '@wagmi/core/query'\n\nimport type { ConfigParameter } from '../types/properties.js'\nimport type {\n  UseMutationParameters,\n  UseMutationReturnType,\n} from '../utils/query.js'\nimport { useChains } from './useChains.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseSwitchChainParameters<\n  config extends Config = Config,\n  context = unknown,\n> = Compute<\n  ConfigParameter<config> & {\n    mutation?:\n      | UseMutationParameters<\n          SwitchChainData<config, config['chains'][number]['id']>,\n          SwitchChainErrorType,\n          SwitchChainVariables<config, config['chains'][number]['id']>,\n          context\n        >\n      | undefined\n  }\n>\n\nexport type UseSwitchChainReturnType<\n  config extends Config = Config,\n  context = unknown,\n> = Compute<\n  UseMutationReturnType<\n    SwitchChainData<config, config['chains'][number]['id']>,\n    SwitchChainErrorType,\n    SwitchChainVariables<config, config['chains'][number]['id']>,\n    context\n  > & {\n    chains: config['chains']\n    switchChain: SwitchChainMutate<config, context>\n    switchChainAsync: SwitchChainMutateAsync<config, context>\n  }\n>\n\n/** https://wagmi.sh/react/api/hooks/useSwitchChain */\nexport function useSwitchChain<\n  config extends Config = ResolvedRegister['config'],\n  context = unknown,\n>(\n  parameters: UseSwitchChainParameters<config, context> = {},\n): UseSwitchChainReturnType<config, context> {\n  const { mutation } = parameters\n\n  const config = useConfig(parameters)\n\n  const mutationOptions = switchChainMutationOptions(config)\n  const { mutate, mutateAsync, ...result } = useMutation({\n    ...mutation,\n    ...mutationOptions,\n  })\n\n  type Return = UseSwitchChainReturnType<config, context>\n  return {\n    ...result,\n    chains: useChains({ config }) as unknown as config['chains'],\n    switchChain: mutate as Return['switchChain'],\n    switchChainAsync: mutateAsync as Return['switchChainAsync'],\n  }\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,SAASA,WAAW,QAAQ,uBAAuB;AAOnD,SAKEC,0BAA0B,QACrB,mBAAmB;AAO1B,SAASC,SAAS,QAAQ,gBAAgB;AAC1C,SAASC,SAAS,QAAQ,gBAAgB;AAkC1C;AACA,OAAM,SAAUC,cAAcA,CAI5BC,UAAA,GAAwD,EAAE;EAE1D,MAAM;IAAEC;EAAQ,CAAE,GAAGD,UAAU;EAE/B,MAAME,MAAM,GAAGJ,SAAS,CAACE,UAAU,CAAC;EAEpC,MAAMG,eAAe,GAAGP,0BAA0B,CAACM,MAAM,CAAC;EAC1D,MAAM;IAAEE,MAAM;IAAEC,WAAW;IAAE,GAAGC;EAAM,CAAE,GAAGX,WAAW,CAAC;IACrD,GAAGM,QAAQ;IACX,GAAGE;GACJ,CAAC;EAGF,OAAO;IACL,GAAGG,MAAM;IACTC,MAAM,EAAEV,SAAS,CAAC;MAAEK;IAAM,CAAE,CAAgC;IAC5DM,WAAW,EAAEJ,MAA+B;IAC5CK,gBAAgB,EAAEJ;GACnB;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}