{"ast":null,"code":"import { ProviderNotFoundError, createConnector } from '@wagmi/core';\nimport { getAddress, withTimeout } from 'viem';\nsafe.type = 'safe';\nexport function safe(parameters = {}) {\n  const {\n    shimDisconnect = false\n  } = parameters;\n  let provider_;\n  let disconnect;\n  return createConnector(config => ({\n    id: 'safe',\n    name: 'Safe',\n    type: safe.type,\n    async connect() {\n      const provider = await this.getProvider();\n      if (!provider) throw new ProviderNotFoundError();\n      const accounts = await this.getAccounts();\n      const chainId = await this.getChainId();\n      if (!disconnect) {\n        disconnect = this.onDisconnect.bind(this);\n        provider.on('disconnect', disconnect);\n      }\n      // Remove disconnected shim if it exists\n      if (shimDisconnect) await config.storage?.removeItem('safe.disconnected');\n      return {\n        accounts,\n        chainId\n      };\n    },\n    async disconnect() {\n      const provider = await this.getProvider();\n      if (!provider) throw new ProviderNotFoundError();\n      if (disconnect) {\n        provider.removeListener('disconnect', disconnect);\n        disconnect = undefined;\n      }\n      // Add shim signalling connector is disconnected\n      if (shimDisconnect) await config.storage?.setItem('safe.disconnected', true);\n    },\n    async getAccounts() {\n      const provider = await this.getProvider();\n      if (!provider) throw new ProviderNotFoundError();\n      return (await provider.request({\n        method: 'eth_accounts'\n      })).map(getAddress);\n    },\n    async getProvider() {\n      // Only allowed in iframe context\n      const isIframe = typeof window !== 'undefined' && window?.parent !== window;\n      if (!isIframe) return;\n      if (!provider_) {\n        const {\n          default: SDK\n        } = await import('@safe-global/safe-apps-sdk');\n        const sdk = new SDK(parameters);\n        // `getInfo` hangs when not used in Safe App iFrame\n        // https://github.com/safe-global/safe-apps-sdk/issues/263#issuecomment-1029835840\n        const safe = await withTimeout(() => sdk.safe.getInfo(), {\n          timeout: parameters.unstable_getInfoTimeout ?? 10\n        });\n        if (!safe) throw new Error('Could not load Safe information');\n        // Unwrapping import for Vite compatibility.\n        // See: https://github.com/vitejs/vite/issues/9703\n        const SafeAppProvider = await (async () => {\n          const Provider = await import('@safe-global/safe-apps-provider');\n          if (typeof Provider.SafeAppProvider !== 'function' && typeof Provider.default.SafeAppProvider === 'function') return Provider.default.SafeAppProvider;\n          return Provider.SafeAppProvider;\n        })();\n        provider_ = new SafeAppProvider(safe, sdk);\n      }\n      return provider_;\n    },\n    async getChainId() {\n      const provider = await this.getProvider();\n      if (!provider) throw new ProviderNotFoundError();\n      return Number(provider.chainId);\n    },\n    async isAuthorized() {\n      try {\n        const isDisconnected = shimDisconnect && (\n        // If shim exists in storage, connector is disconnected\n        await config.storage?.getItem('safe.disconnected'));\n        if (isDisconnected) return false;\n        const accounts = await this.getAccounts();\n        return !!accounts.length;\n      } catch {\n        return false;\n      }\n    },\n    onAccountsChanged() {\n      // Not relevant for Safe because changing account requires app reload.\n    },\n    onChainChanged() {\n      // Not relevant for Safe because Safe smart contract wallets only exist on single chain.\n    },\n    onDisconnect() {\n      config.emitter.emit('disconnect');\n    }\n  }));\n}","map":{"version":3,"names":["ProviderNotFoundError","createConnector","getAddress","withTimeout","safe","type","parameters","shimDisconnect","provider_","disconnect","config","id","name","connect","provider","getProvider","accounts","getAccounts","chainId","getChainId","onDisconnect","bind","on","storage","removeItem","removeListener","undefined","setItem","request","method","map","isIframe","window","parent","default","SDK","sdk","getInfo","timeout","unstable_getInfoTimeout","Error","SafeAppProvider","Provider","Number","isAuthorized","isDisconnected","getItem","length","onAccountsChanged","onChainChanged","emitter","emit"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/@wagmi/connectors/src/safe.ts"],"sourcesContent":["import type { SafeAppProvider } from '@safe-global/safe-apps-provider'\nimport type { Opts } from '@safe-global/safe-apps-sdk'\nimport {\n  type Connector,\n  ProviderNotFoundError,\n  createConnector,\n} from '@wagmi/core'\nimport type { Compute } from '@wagmi/core/internal'\nimport { getAddress, withTimeout } from 'viem'\n\nexport type SafeParameters = Compute<\n  Opts & {\n    /**\n     * Connector automatically connects when used as Safe App.\n     *\n     * This flag simulates the disconnect behavior by keeping track of connection status in storage\n     * and only autoconnecting when previously connected by user action (e.g. explicitly choosing to connect).\n     *\n     * @default false\n     */\n    shimDisconnect?: boolean | undefined\n    /**\n     * Timeout in milliseconds for `getInfo` (from the Safe SDK) to resolve.\n     *\n     * `getInfo` does not resolve when not used in Safe App iFrame. This allows the connector to force a timeout.\n     * @default 10\n     */\n    unstable_getInfoTimeout?: number | undefined\n  }\n>\n\nsafe.type = 'safe' as const\nexport function safe(parameters: SafeParameters = {}) {\n  const { shimDisconnect = false } = parameters\n\n  type Provider = SafeAppProvider | undefined\n  type Properties = Record<string, unknown>\n  type StorageItem = { 'safe.disconnected': true }\n\n  let provider_: Provider | undefined\n\n  let disconnect: Connector['onDisconnect'] | undefined\n\n  return createConnector<Provider, Properties, StorageItem>((config) => ({\n    id: 'safe',\n    name: 'Safe',\n    type: safe.type,\n    async connect() {\n      const provider = await this.getProvider()\n      if (!provider) throw new ProviderNotFoundError()\n\n      const accounts = await this.getAccounts()\n      const chainId = await this.getChainId()\n\n      if (!disconnect) {\n        disconnect = this.onDisconnect.bind(this)\n        provider.on('disconnect', disconnect)\n      }\n\n      // Remove disconnected shim if it exists\n      if (shimDisconnect) await config.storage?.removeItem('safe.disconnected')\n\n      return { accounts, chainId }\n    },\n    async disconnect() {\n      const provider = await this.getProvider()\n      if (!provider) throw new ProviderNotFoundError()\n\n      if (disconnect) {\n        provider.removeListener('disconnect', disconnect)\n        disconnect = undefined\n      }\n\n      // Add shim signalling connector is disconnected\n      if (shimDisconnect)\n        await config.storage?.setItem('safe.disconnected', true)\n    },\n    async getAccounts() {\n      const provider = await this.getProvider()\n      if (!provider) throw new ProviderNotFoundError()\n      return (await provider.request({ method: 'eth_accounts' })).map(\n        getAddress,\n      )\n    },\n    async getProvider() {\n      // Only allowed in iframe context\n      const isIframe =\n        typeof window !== 'undefined' && window?.parent !== window\n      if (!isIframe) return\n\n      if (!provider_) {\n        const { default: SDK } = await import('@safe-global/safe-apps-sdk')\n        const sdk = new SDK(parameters)\n\n        // `getInfo` hangs when not used in Safe App iFrame\n        // https://github.com/safe-global/safe-apps-sdk/issues/263#issuecomment-1029835840\n        const safe = await withTimeout(() => sdk.safe.getInfo(), {\n          timeout: parameters.unstable_getInfoTimeout ?? 10,\n        })\n        if (!safe) throw new Error('Could not load Safe information')\n        // Unwrapping import for Vite compatibility.\n        // See: https://github.com/vitejs/vite/issues/9703\n        const SafeAppProvider = await (async () => {\n          const Provider = await import('@safe-global/safe-apps-provider')\n          if (\n            typeof Provider.SafeAppProvider !== 'function' &&\n            typeof Provider.default.SafeAppProvider === 'function'\n          )\n            return Provider.default.SafeAppProvider\n          return Provider.SafeAppProvider\n        })()\n        provider_ = new SafeAppProvider(safe, sdk)\n      }\n      return provider_\n    },\n    async getChainId() {\n      const provider = await this.getProvider()\n      if (!provider) throw new ProviderNotFoundError()\n      return Number(provider.chainId)\n    },\n    async isAuthorized() {\n      try {\n        const isDisconnected =\n          shimDisconnect &&\n          // If shim exists in storage, connector is disconnected\n          (await config.storage?.getItem('safe.disconnected'))\n        if (isDisconnected) return false\n\n        const accounts = await this.getAccounts()\n        return !!accounts.length\n      } catch {\n        return false\n      }\n    },\n    onAccountsChanged() {\n      // Not relevant for Safe because changing account requires app reload.\n    },\n    onChainChanged() {\n      // Not relevant for Safe because Safe smart contract wallets only exist on single chain.\n    },\n    onDisconnect() {\n      config.emitter.emit('disconnect')\n    },\n  }))\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}