{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fallbackTransactionErrorMagicIdentifier = exports.fallbackMagicIdentifier = void 0;\nexports.sendCalls = sendCalls;\nconst parseAccount_js_1 = require(\"../../accounts/utils/parseAccount.js\");\nconst base_js_1 = require(\"../../errors/base.js\");\nconst rpc_js_1 = require(\"../../errors/rpc.js\");\nconst encodeFunctionData_js_1 = require(\"../../utils/abi/encodeFunctionData.js\");\nconst concat_js_1 = require(\"../../utils/data/concat.js\");\nconst fromHex_js_1 = require(\"../../utils/encoding/fromHex.js\");\nconst toHex_js_1 = require(\"../../utils/encoding/toHex.js\");\nconst getTransactionError_js_1 = require(\"../../utils/errors/getTransactionError.js\");\nconst sendTransaction_js_1 = require(\"./sendTransaction.js\");\nexports.fallbackMagicIdentifier = '0x5792579257925792579257925792579257925792579257925792579257925792';\nexports.fallbackTransactionErrorMagicIdentifier = (0, toHex_js_1.numberToHex)(0, {\n  size: 32\n});\nasync function sendCalls(client, parameters) {\n  const {\n    account: account_ = client.account,\n    capabilities,\n    chain = client.chain,\n    experimental_fallback,\n    experimental_fallbackDelay = 32,\n    forceAtomic = false,\n    id,\n    version = '2.0.0'\n  } = parameters;\n  const account = account_ ? (0, parseAccount_js_1.parseAccount)(account_) : null;\n  const calls = parameters.calls.map(call_ => {\n    const call = call_;\n    const data = call.abi ? (0, encodeFunctionData_js_1.encodeFunctionData)({\n      abi: call.abi,\n      functionName: call.functionName,\n      args: call.args\n    }) : call.data;\n    return {\n      data: call.dataSuffix && data ? (0, concat_js_1.concat)([data, call.dataSuffix]) : data,\n      to: call.to,\n      value: call.value ? (0, toHex_js_1.numberToHex)(call.value) : undefined\n    };\n  });\n  try {\n    const response = await client.request({\n      method: 'wallet_sendCalls',\n      params: [{\n        atomicRequired: forceAtomic,\n        calls,\n        capabilities,\n        chainId: (0, toHex_js_1.numberToHex)(chain.id),\n        from: account?.address,\n        id,\n        version\n      }]\n    }, {\n      retryCount: 0\n    });\n    if (typeof response === 'string') return {\n      id: response\n    };\n    return response;\n  } catch (err) {\n    const error = err;\n    if (experimental_fallback && (error.name === 'MethodNotFoundRpcError' || error.name === 'MethodNotSupportedRpcError' || error.name === 'UnknownRpcError' || error.details.toLowerCase().includes('does not exist / is not available') || error.details.toLowerCase().includes('missing or invalid. request()') || error.details.toLowerCase().includes('did not match any variant of untagged enum') || error.details.toLowerCase().includes('account upgraded to unsupported contract') || error.details.toLowerCase().includes('eip-7702 not supported') || error.details.toLowerCase().includes('unsupported wc_ method'))) {\n      if (capabilities) {\n        const hasNonOptionalCapability = Object.values(capabilities).some(capability => !capability.optional);\n        if (hasNonOptionalCapability) {\n          const message = 'non-optional `capabilities` are not supported on fallback to `eth_sendTransaction`.';\n          throw new rpc_js_1.UnsupportedNonOptionalCapabilityError(new base_js_1.BaseError(message, {\n            details: message\n          }));\n        }\n      }\n      if (forceAtomic && calls.length > 1) {\n        const message = '`forceAtomic` is not supported on fallback to `eth_sendTransaction`.';\n        throw new rpc_js_1.AtomicityNotSupportedError(new base_js_1.BaseError(message, {\n          details: message\n        }));\n      }\n      const promises = [];\n      for (const call of calls) {\n        const promise = (0, sendTransaction_js_1.sendTransaction)(client, {\n          account,\n          chain,\n          data: call.data,\n          to: call.to,\n          value: call.value ? (0, fromHex_js_1.hexToBigInt)(call.value) : undefined\n        });\n        promises.push(promise);\n        if (experimental_fallbackDelay > 0) await new Promise(resolve => setTimeout(resolve, experimental_fallbackDelay));\n      }\n      const results = await Promise.allSettled(promises);\n      if (results.every(r => r.status === 'rejected')) throw results[0].reason;\n      const hashes = results.map(result => {\n        if (result.status === 'fulfilled') return result.value;\n        return exports.fallbackTransactionErrorMagicIdentifier;\n      });\n      return {\n        id: (0, concat_js_1.concat)([...hashes, (0, toHex_js_1.numberToHex)(chain.id, {\n          size: 32\n        }), exports.fallbackMagicIdentifier])\n      };\n    }\n    throw (0, getTransactionError_js_1.getTransactionError)(err, {\n      ...parameters,\n      account,\n      chain: parameters.chain\n    });\n  }\n}","map":{"version":3,"names":["exports","sendCalls","parseAccount_js_1","require","base_js_1","rpc_js_1","encodeFunctionData_js_1","concat_js_1","fromHex_js_1","toHex_js_1","getTransactionError_js_1","sendTransaction_js_1","fallbackMagicIdentifier","fallbackTransactionErrorMagicIdentifier","numberToHex","size","client","parameters","account","account_","capabilities","chain","experimental_fallback","experimental_fallbackDelay","forceAtomic","id","version","parseAccount","calls","map","call_","call","data","abi","encodeFunctionData","functionName","args","dataSuffix","concat","to","value","undefined","response","request","method","params","atomicRequired","chainId","from","address","retryCount","err","error","name","details","toLowerCase","includes","hasNonOptionalCapability","Object","values","some","capability","optional","message","UnsupportedNonOptionalCapabilityError","BaseError","length","AtomicityNotSupportedError","promises","promise","sendTransaction","hexToBigInt","push","Promise","resolve","setTimeout","results","allSettled","every","r","status","reason","hashes","result","getTransactionError"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/viem/actions/wallet/sendCalls.ts"],"sourcesContent":["import type { Address, Narrow } from 'abitype'\nimport { parseAccount } from '../../accounts/utils/parseAccount.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { BaseError } from '../../errors/base.js'\nimport {\n  AtomicityNotSupportedError,\n  UnsupportedNonOptionalCapabilityError,\n} from '../../errors/rpc.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account, GetAccountParameter } from '../../types/account.js'\nimport type { Call, Calls } from '../../types/calls.js'\nimport type { ExtractCapabilities } from '../../types/capabilities.js'\nimport type { Chain, DeriveChain } from '../../types/chain.js'\nimport type { WalletSendCallsParameters } from '../../types/eip1193.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { Prettify } from '../../types/utils.js'\nimport { encodeFunctionData } from '../../utils/abi/encodeFunctionData.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport { concat } from '../../utils/data/concat.js'\nimport { hexToBigInt } from '../../utils/encoding/fromHex.js'\nimport { numberToHex } from '../../utils/encoding/toHex.js'\nimport { getTransactionError } from '../../utils/errors/getTransactionError.js'\nimport { sendTransaction } from './sendTransaction.js'\n\nexport const fallbackMagicIdentifier =\n  '0x5792579257925792579257925792579257925792579257925792579257925792'\nexport const fallbackTransactionErrorMagicIdentifier = numberToHex(0, {\n  size: 32,\n})\n\nexport type SendCallsParameters<\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n  chainOverride extends Chain | undefined = Chain | undefined,\n  calls extends readonly unknown[] = readonly unknown[],\n  //\n  _chain extends Chain | undefined = DeriveChain<chain, chainOverride>,\n> = {\n  chain?: chainOverride | Chain | undefined\n  calls: Calls<Narrow<calls>>\n  capabilities?: ExtractCapabilities<'sendCalls', 'Request'> | undefined\n  experimental_fallback?: boolean | undefined\n  experimental_fallbackDelay?: number | undefined\n  forceAtomic?: boolean | undefined\n  id?: string | undefined\n  version?: WalletSendCallsParameters[number]['version'] | undefined\n} & GetAccountParameter<account, Account | Address, false, true>\n\nexport type SendCallsReturnType = Prettify<{\n  capabilities?: ExtractCapabilities<'sendCalls', 'ReturnType'> | undefined\n  id: string\n}>\n\nexport type SendCallsErrorType = RequestErrorType | ErrorType\n\n/**\n * Requests the connected wallet to send a batch of calls.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/sendCalls\n * - JSON-RPC Methods: [`wallet_sendCalls`](https://eips.ethereum.org/EIPS/eip-5792)\n *\n * @param client - Client to use\n * @returns Transaction identifier. {@link SendCallsReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { sendCalls } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const id = await sendCalls(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   calls: [\n *     {\n *       data: '0xdeadbeef',\n *       to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *     },\n *     {\n *       to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *       value: 69420n,\n *     },\n *   ],\n * })\n */\nexport async function sendCalls<\n  const calls extends readonly unknown[],\n  chain extends Chain | undefined,\n  account extends Account | undefined = undefined,\n  chainOverride extends Chain | undefined = undefined,\n>(\n  client: Client<Transport, chain, account>,\n  parameters: SendCallsParameters<chain, account, chainOverride, calls>,\n): Promise<SendCallsReturnType> {\n  const {\n    account: account_ = client.account,\n    capabilities,\n    chain = client.chain,\n    experimental_fallback,\n    experimental_fallbackDelay = 32,\n    forceAtomic = false,\n    id,\n    version = '2.0.0',\n  } = parameters\n\n  const account = account_ ? parseAccount(account_) : null\n\n  const calls = parameters.calls.map((call_: unknown) => {\n    const call = call_ as Call\n\n    const data = call.abi\n      ? encodeFunctionData({\n          abi: call.abi,\n          functionName: call.functionName,\n          args: call.args,\n        })\n      : call.data\n\n    return {\n      data: call.dataSuffix && data ? concat([data, call.dataSuffix]) : data,\n      to: call.to,\n      value: call.value ? numberToHex(call.value) : undefined,\n    }\n  })\n\n  try {\n    const response = await client.request(\n      {\n        method: 'wallet_sendCalls',\n        params: [\n          {\n            atomicRequired: forceAtomic,\n            calls,\n            capabilities,\n            chainId: numberToHex(chain!.id),\n            from: account?.address,\n            id,\n            version,\n          },\n        ],\n      },\n      { retryCount: 0 },\n    )\n    if (typeof response === 'string') return { id: response }\n    return response as never\n  } catch (err) {\n    const error = err as BaseError\n\n    // If the transport does not support EIP-5792, fall back to\n    // `eth_sendTransaction`.\n    if (\n      experimental_fallback &&\n      (error.name === 'MethodNotFoundRpcError' ||\n        error.name === 'MethodNotSupportedRpcError' ||\n        error.name === 'UnknownRpcError' ||\n        error.details\n          .toLowerCase()\n          .includes('does not exist / is not available') ||\n        error.details.toLowerCase().includes('missing or invalid. request()') ||\n        error.details\n          .toLowerCase()\n          .includes('did not match any variant of untagged enum') ||\n        error.details\n          .toLowerCase()\n          .includes('account upgraded to unsupported contract') ||\n        error.details.toLowerCase().includes('eip-7702 not supported') ||\n        error.details.toLowerCase().includes('unsupported wc_ method'))\n    ) {\n      if (capabilities) {\n        const hasNonOptionalCapability = Object.values(capabilities).some(\n          (capability) => !capability.optional,\n        )\n        if (hasNonOptionalCapability) {\n          const message =\n            'non-optional `capabilities` are not supported on fallback to `eth_sendTransaction`.'\n          throw new UnsupportedNonOptionalCapabilityError(\n            new BaseError(message, {\n              details: message,\n            }),\n          )\n        }\n      }\n      if (forceAtomic && calls.length > 1) {\n        const message =\n          '`forceAtomic` is not supported on fallback to `eth_sendTransaction`.'\n        throw new AtomicityNotSupportedError(\n          new BaseError(message, {\n            details: message,\n          }),\n        )\n      }\n\n      const promises: Promise<Hex>[] = []\n      for (const call of calls) {\n        const promise = sendTransaction(client, {\n          account,\n          chain,\n          data: call.data,\n          to: call.to,\n          value: call.value ? hexToBigInt(call.value) : undefined,\n        })\n        promises.push(promise)\n\n        // Note: some browser wallets require a small delay between transactions\n        // to prevent duplicate JSON-RPC requests.\n        if (experimental_fallbackDelay > 0)\n          await new Promise((resolve) =>\n            setTimeout(resolve, experimental_fallbackDelay),\n          )\n      }\n\n      const results = await Promise.allSettled(promises)\n      if (results.every((r) => r.status === 'rejected')) throw results[0].reason\n\n      const hashes = results.map((result) => {\n        if (result.status === 'fulfilled') return result.value\n        return fallbackTransactionErrorMagicIdentifier\n      })\n      return {\n        id: concat([\n          ...hashes,\n          numberToHex(chain!.id, { size: 32 }),\n          fallbackMagicIdentifier,\n        ]),\n      }\n    }\n\n    throw getTransactionError(err as BaseError, {\n      ...parameters,\n      account,\n      chain: parameters.chain!,\n    })\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}