{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as Signature from 'ox/Signature';\nimport { BaseError, decodeFunctionData, encodeAbiParameters, encodeFunctionData, encodePacked, hashMessage, hashTypedData, parseSignature, size, stringToHex } from 'viem';\nimport { entryPoint06Abi, entryPoint06Address, getUserOperationHash, toSmartAccount } from 'viem/account-abstraction';\nimport { abi, factoryAbi, factoryAddress } from './constants.js';\n/**\n * @description Create a Coinbase Smart Account.\n *\n * @param parameters - {@link CreateSmartAccountParameters}\n * @returns Coinbase Smart Account. {@link CreateSmartAccountReturnType}\n *\n * @example\n *\n * const account = createSmartAccount({\n *   client,\n *   owner: privateKeyToAccount('0x...'),\n *   ownerIndex: 0,\n *   address: '0x...',\n *   factoryData: '0x...',\n * })\n */\nexport async function createSmartAccount(parameters) {\n  const {\n    owner,\n    ownerIndex,\n    address,\n    client,\n    factoryData\n  } = parameters;\n  const entryPoint = {\n    abi: entryPoint06Abi,\n    address: entryPoint06Address,\n    version: '0.6'\n  };\n  const factory = {\n    abi: factoryAbi,\n    address: factoryAddress\n  };\n  return toSmartAccount({\n    client,\n    entryPoint,\n    extend: {\n      abi,\n      factory\n    },\n    async decodeCalls(data) {\n      const result = decodeFunctionData({\n        abi,\n        data\n      });\n      if (result.functionName === 'execute') return [{\n        to: result.args[0],\n        value: result.args[1],\n        data: result.args[2]\n      }];\n      if (result.functionName === 'executeBatch') return result.args[0].map(arg => ({\n        to: arg.target,\n        value: arg.value,\n        data: arg.data\n      }));\n      throw new BaseError(`unable to decode calls for \"${result.functionName}\"`);\n    },\n    async encodeCalls(calls) {\n      var _a, _b;\n      if (calls.length === 1) {\n        return encodeFunctionData({\n          abi,\n          functionName: 'execute',\n          args: [calls[0].to, (_a = calls[0].value) !== null && _a !== void 0 ? _a : BigInt(0), (_b = calls[0].data) !== null && _b !== void 0 ? _b : '0x']\n        });\n      }\n      return encodeFunctionData({\n        abi,\n        functionName: 'executeBatch',\n        args: [calls.map(call => {\n          var _a, _b;\n          return {\n            data: (_a = call.data) !== null && _a !== void 0 ? _a : '0x',\n            target: call.to,\n            value: (_b = call.value) !== null && _b !== void 0 ? _b : BigInt(0)\n          };\n        })]\n      });\n    },\n    async getAddress() {\n      return address;\n    },\n    async getFactoryArgs() {\n      if (factoryData) return {\n        factory: factory.address,\n        factoryData\n      };\n      // TODO: support creating factory data\n      return {\n        factory: factory.address,\n        factoryData\n      };\n    },\n    async getStubSignature() {\n      if (owner.type === 'webAuthn') return '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000170000000000000000000000000000000000000000000000000000000000000001949fc7c88032b9fcb5f6efc7a7b8c63668eae9871b765e23123bb473ff57aa831a7c0d9276168ebcc29f2875a0239cffdf2a9cd1c2007c5c77c071db9264df1d000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97630500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008a7b2274797065223a22776562617574686e2e676574222c226368616c6c656e6765223a2273496a396e6164474850596759334b7156384f7a4a666c726275504b474f716d59576f4d57516869467773222c226f726967696e223a2268747470733a2f2f7369676e2e636f696e626173652e636f6d222c2263726f73734f726967696e223a66616c73657d00000000000000000000000000000000000000000000';\n      return wrapSignature({\n        ownerIndex,\n        signature: '0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c'\n      });\n    },\n    async sign(parameters) {\n      const address = await this.getAddress();\n      const hash = toReplaySafeHash({\n        address,\n        chainId: client.chain.id,\n        hash: parameters.hash\n      });\n      const signature = await sign({\n        hash,\n        owner\n      });\n      return wrapSignature({\n        ownerIndex,\n        signature\n      });\n    },\n    async signMessage(parameters) {\n      const {\n        message\n      } = parameters;\n      const address = await this.getAddress();\n      const hash = toReplaySafeHash({\n        address,\n        chainId: client.chain.id,\n        hash: hashMessage(message)\n      });\n      const signature = await sign({\n        hash,\n        owner\n      });\n      return wrapSignature({\n        ownerIndex,\n        signature\n      });\n    },\n    async signTypedData(parameters) {\n      const {\n        domain,\n        types,\n        primaryType,\n        message\n      } = parameters;\n      const address = await this.getAddress();\n      const hash = toReplaySafeHash({\n        address,\n        chainId: client.chain.id,\n        hash: hashTypedData({\n          domain,\n          message,\n          primaryType,\n          types\n        })\n      });\n      const signature = await sign({\n        hash,\n        owner\n      });\n      return wrapSignature({\n        ownerIndex,\n        signature\n      });\n    },\n    async signUserOperation(parameters) {\n      const {\n          chainId = client.chain.id\n        } = parameters,\n        userOperation = __rest(parameters, [\"chainId\"]);\n      const address = await this.getAddress();\n      const hash = getUserOperationHash({\n        chainId,\n        entryPointAddress: entryPoint.address,\n        entryPointVersion: entryPoint.version,\n        userOperation: Object.assign(Object.assign({}, userOperation), {\n          sender: address\n        })\n      });\n      const signature = await sign({\n        hash,\n        owner\n      });\n      return wrapSignature({\n        ownerIndex,\n        signature\n      });\n    },\n    userOperation: {\n      async estimateGas(userOperation) {\n        var _a;\n        if (owner.type !== 'webAuthn') return;\n        // Accounts with WebAuthn owner require a minimum verification gas limit of 800,000.\n        return {\n          verificationGasLimit: BigInt(Math.max(Number((_a = userOperation.verificationGasLimit) !== null && _a !== void 0 ? _a : BigInt(0)), 800000))\n        };\n      }\n    }\n  });\n}\n/////////////////////////////////////////////////////////////////////////////////////////////\n// Utilities\n/////////////////////////////////////////////////////////////////////////////////////////////\n/** @internal */\nexport async function sign({\n  hash,\n  owner\n}) {\n  // WebAuthn Account (Passkey)\n  if (owner.type === 'webAuthn') {\n    const {\n      signature,\n      webauthn\n    } = await owner.sign({\n      hash\n    });\n    return toWebAuthnSignature({\n      signature,\n      webauthn\n    });\n  }\n  if (owner.sign) return owner.sign({\n    hash\n  });\n  throw new BaseError('`owner` does not support raw sign.');\n}\n/** @internal */\nexport function toReplaySafeHash({\n  address,\n  chainId,\n  hash\n}) {\n  return hashTypedData({\n    domain: {\n      chainId,\n      name: 'Coinbase Smart Wallet',\n      verifyingContract: address,\n      version: '1'\n    },\n    types: {\n      CoinbaseSmartWalletMessage: [{\n        name: 'hash',\n        type: 'bytes32'\n      }]\n    },\n    primaryType: 'CoinbaseSmartWalletMessage',\n    message: {\n      hash\n    }\n  });\n}\n/** @internal */\nexport function toWebAuthnSignature({\n  webauthn,\n  signature\n}) {\n  const {\n    r,\n    s\n  } = Signature.fromHex(signature);\n  return encodeAbiParameters([{\n    components: [{\n      name: 'authenticatorData',\n      type: 'bytes'\n    }, {\n      name: 'clientDataJSON',\n      type: 'bytes'\n    }, {\n      name: 'challengeIndex',\n      type: 'uint256'\n    }, {\n      name: 'typeIndex',\n      type: 'uint256'\n    }, {\n      name: 'r',\n      type: 'uint256'\n    }, {\n      name: 's',\n      type: 'uint256'\n    }],\n    type: 'tuple'\n  }], [{\n    authenticatorData: webauthn.authenticatorData,\n    clientDataJSON: stringToHex(webauthn.clientDataJSON),\n    challengeIndex: BigInt(webauthn.challengeIndex),\n    typeIndex: BigInt(webauthn.typeIndex),\n    r,\n    s\n  }]);\n}\n/** @internal */\nexport function wrapSignature(parameters) {\n  const {\n    ownerIndex = 0\n  } = parameters;\n  const signatureData = (() => {\n    if (size(parameters.signature) !== 65) return parameters.signature;\n    const signature = parseSignature(parameters.signature);\n    return encodePacked(['bytes32', 'bytes32', 'uint8'], [signature.r, signature.s, signature.yParity === 0 ? 27 : 28]);\n  })();\n  return encodeAbiParameters([{\n    components: [{\n      name: 'ownerIndex',\n      type: 'uint8'\n    }, {\n      name: 'signatureData',\n      type: 'bytes'\n    }],\n    type: 'tuple'\n  }], [{\n    ownerIndex,\n    signatureData\n  }]);\n}","map":{"version":3,"names":["Signature","BaseError","decodeFunctionData","encodeAbiParameters","encodeFunctionData","encodePacked","hashMessage","hashTypedData","parseSignature","size","stringToHex","entryPoint06Abi","entryPoint06Address","getUserOperationHash","toSmartAccount","abi","factoryAbi","factoryAddress","createSmartAccount","parameters","owner","ownerIndex","address","client","factoryData","entryPoint","version","factory","extend","decodeCalls","data","result","functionName","to","args","value","map","arg","target","encodeCalls","calls","length","_a","BigInt","_b","call","getAddress","getFactoryArgs","getStubSignature","type","wrapSignature","signature","sign","hash","toReplaySafeHash","chainId","chain","id","signMessage","message","signTypedData","domain","types","primaryType","signUserOperation","userOperation","__rest","entryPointAddress","entryPointVersion","Object","assign","sender","estimateGas","verificationGasLimit","Math","max","Number","webauthn","toWebAuthnSignature","name","verifyingContract","CoinbaseSmartWalletMessage","r","s","fromHex","components","authenticatorData","clientDataJSON","challengeIndex","typeIndex","signatureData","yParity"],"sources":["../../../../src/sign/base-account/utils/createSmartAccount.ts"],"sourcesContent":[null],"mappings":";;;;;;;;AACA,OAAO,KAAKA,SAAS,MAAM,cAAc;AAEzC,SAEEC,SAAS,EAUTC,kBAAkB,EAClBC,mBAAmB,EACnBC,kBAAkB,EAClBC,YAAY,EACZC,WAAW,EACXC,aAAa,EACbC,cAAc,EACdC,IAAI,EACJC,WAAW,QACN,MAAM;AACb,SAIEC,eAAe,EACfC,mBAAmB,EACnBC,oBAAoB,EACpBC,cAAc,QACT,0BAA0B;AAGjC,SAASC,GAAG,EAAEC,UAAU,EAAEC,cAAc,QAAQ,gBAAgB;AA0BhE;;;;;;;;;;;;;;;;AAgBA,OAAO,eAAeC,kBAAkBA,CACtCC,UAAwC;EAExC,MAAM;IAAEC,KAAK;IAAEC,UAAU;IAAEC,OAAO;IAAEC,MAAM;IAAEC;EAAW,CAAE,GAAGL,UAAU;EACtE,MAAMM,UAAU,GAAG;IACjBV,GAAG,EAAEJ,eAAe;IACpBW,OAAO,EAAEV,mBAAmB;IAC5Bc,OAAO,EAAE;GACD;EACV,MAAMC,OAAO,GAAG;IACdZ,GAAG,EAAEC,UAAU;IACfM,OAAO,EAAEL;GACD;EAEV,OAAOH,cAAc,CAAC;IACpBS,MAAM;IACNE,UAAU;IACVG,MAAM,EAAE;MAAEb,GAAG;MAAEY;IAAO,CAAE;IACxB,MAAME,WAAWA,CAACC,IAAI;MACpB,MAAMC,MAAM,GAAG7B,kBAAkB,CAAC;QAChCa,GAAG;QACHe;OACD,CAAC;MACF,IAAIC,MAAM,CAACC,YAAY,KAAK,SAAS,EACnC,OAAO,CAAC;QAAEC,EAAE,EAAEF,MAAM,CAACG,IAAI,CAAC,CAAC,CAAC;QAAEC,KAAK,EAAEJ,MAAM,CAACG,IAAI,CAAC,CAAC,CAAC;QAAEJ,IAAI,EAAEC,MAAM,CAACG,IAAI,CAAC,CAAC;MAAC,CAAE,CAAC;MAC9E,IAAIH,MAAM,CAACC,YAAY,KAAK,cAAc,EACxC,OAAOD,MAAM,CAACG,IAAI,CAAC,CAAC,CAAC,CAACE,GAAG,CAAEC,GAAG,KAAM;QAClCJ,EAAE,EAAEI,GAAG,CAACC,MAAM;QACdH,KAAK,EAAEE,GAAG,CAACF,KAAK;QAChBL,IAAI,EAAEO,GAAG,CAACP;OACX,CAAC,CAAC;MACL,MAAM,IAAI7B,SAAS,CAAC,+BAA+B8B,MAAM,CAACC,YAAY,GAAG,CAAC;IAC5E,CAAC;IAED,MAAMO,WAAWA,CAACC,KAAK;;MACrB,IAAIA,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;QACtB,OAAOrC,kBAAkB,CAAC;UACxBW,GAAG;UACHiB,YAAY,EAAE,SAAS;UACvBE,IAAI,EAAE,CAACM,KAAK,CAAC,CAAC,CAAC,CAACP,EAAE,EAAE,CAAAS,EAAA,GAAAF,KAAK,CAAC,CAAC,CAAC,CAACL,KAAK,cAAAO,EAAA,cAAAA,EAAA,GAAIC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAAC,EAAA,GAAAJ,KAAK,CAAC,CAAC,CAAC,CAACV,IAAI,cAAAc,EAAA,cAAAA,EAAA,GAAI,IAAI;SACvE,CAAC;MACJ;MACA,OAAOxC,kBAAkB,CAAC;QACxBW,GAAG;QACHiB,YAAY,EAAE,cAAc;QAC5BE,IAAI,EAAE,CACJM,KAAK,CAACJ,GAAG,CAAES,IAAI,IAAI;;UAAC,OAAC;YACnBf,IAAI,EAAE,CAAAY,EAAA,GAAAG,IAAI,CAACf,IAAI,cAAAY,EAAA,cAAAA,EAAA,GAAI,IAAI;YACvBJ,MAAM,EAAEO,IAAI,CAACZ,EAAE;YACfE,KAAK,EAAE,CAAAS,EAAA,GAAAC,IAAI,CAACV,KAAK,cAAAS,EAAA,cAAAA,EAAA,GAAID,MAAM,CAAC,CAAC;WAC9B;SAAC,CAAC;OAEN,CAAC;IACJ,CAAC;IAED,MAAMG,UAAUA,CAAA;MACd,OAAOxB,OAAO;IAChB,CAAC;IAED,MAAMyB,cAAcA,CAAA;MAClB,IAAIvB,WAAW,EAAE,OAAO;QAAEG,OAAO,EAAEA,OAAO,CAACL,OAAO;QAAEE;MAAW,CAAE;MACjE;MACA,OAAO;QAAEG,OAAO,EAAEA,OAAO,CAACL,OAAO;QAAEE;MAAW,CAAE;IAClD,CAAC;IAED,MAAMwB,gBAAgBA,CAAA;MACpB,IAAI5B,KAAK,CAAC6B,IAAI,KAAK,UAAU,EAC3B,OAAO,owCAAowC;MAC7wC,OAAOC,aAAa,CAAC;QACnB7B,UAAU;QACV8B,SAAS,EACP;OACH,CAAC;IACJ,CAAC;IAED,MAAMC,IAAIA,CAACjC,UAAU;MACnB,MAAMG,OAAO,GAAG,MAAM,IAAI,CAACwB,UAAU,EAAE;MAEvC,MAAMO,IAAI,GAAGC,gBAAgB,CAAC;QAC5BhC,OAAO;QACPiC,OAAO,EAAEhC,MAAM,CAACiC,KAAM,CAACC,EAAE;QACzBJ,IAAI,EAAElC,UAAU,CAACkC;OAClB,CAAC;MAEF,MAAMF,SAAS,GAAG,MAAMC,IAAI,CAAC;QAAEC,IAAI;QAAEjC;MAAK,CAAE,CAAC;MAE7C,OAAO8B,aAAa,CAAC;QACnB7B,UAAU;QACV8B;OACD,CAAC;IACJ,CAAC;IAED,MAAMO,WAAWA,CAACvC,UAAU;MAC1B,MAAM;QAAEwC;MAAO,CAAE,GAAGxC,UAAU;MAC9B,MAAMG,OAAO,GAAG,MAAM,IAAI,CAACwB,UAAU,EAAE;MAEvC,MAAMO,IAAI,GAAGC,gBAAgB,CAAC;QAC5BhC,OAAO;QACPiC,OAAO,EAAEhC,MAAM,CAACiC,KAAM,CAACC,EAAE;QACzBJ,IAAI,EAAE/C,WAAW,CAACqD,OAAO;OAC1B,CAAC;MAEF,MAAMR,SAAS,GAAG,MAAMC,IAAI,CAAC;QAAEC,IAAI;QAAEjC;MAAK,CAAE,CAAC;MAE7C,OAAO8B,aAAa,CAAC;QACnB7B,UAAU;QACV8B;OACD,CAAC;IACJ,CAAC;IAED,MAAMS,aAAaA,CAACzC,UAAU;MAC5B,MAAM;QAAE0C,MAAM;QAAEC,KAAK;QAAEC,WAAW;QAAEJ;MAAO,CAAE,GAAGxC,UAG/C;MACD,MAAMG,OAAO,GAAG,MAAM,IAAI,CAACwB,UAAU,EAAE;MAEvC,MAAMO,IAAI,GAAGC,gBAAgB,CAAC;QAC5BhC,OAAO;QACPiC,OAAO,EAAEhC,MAAM,CAACiC,KAAM,CAACC,EAAE;QACzBJ,IAAI,EAAE9C,aAAa,CAAC;UAClBsD,MAAM;UACNF,OAAO;UACPI,WAAW;UACXD;SACD;OACF,CAAC;MAEF,MAAMX,SAAS,GAAG,MAAMC,IAAI,CAAC;QAAEC,IAAI;QAAEjC;MAAK,CAAE,CAAC;MAE7C,OAAO8B,aAAa,CAAC;QACnB7B,UAAU;QACV8B;OACD,CAAC;IACJ,CAAC;IAED,MAAMa,iBAAiBA,CAAC7C,UAAU;MAChC,MAAM;UAAEoC,OAAO,GAAGhC,MAAM,CAACiC,KAAM,CAACC;QAAE,IAAuBtC,UAAU;QAA5B8C,aAAa,GAAAC,MAAA,CAAK/C,UAAU,EAA7D,WAAgD,CAAa;MAEnE,MAAMG,OAAO,GAAG,MAAM,IAAI,CAACwB,UAAU,EAAE;MACvC,MAAMO,IAAI,GAAGxC,oBAAoB,CAAC;QAChC0C,OAAO;QACPY,iBAAiB,EAAE1C,UAAU,CAACH,OAAO;QACrC8C,iBAAiB,EAAE3C,UAAU,CAACC,OAAO;QACrCuC,aAAa,EAAAI,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACPL,aAA0C;UAC9CM,MAAM,EAAEjD;QAAO;OAElB,CAAC;MAEF,MAAM6B,SAAS,GAAG,MAAMC,IAAI,CAAC;QAAEC,IAAI;QAAEjC;MAAK,CAAE,CAAC;MAE7C,OAAO8B,aAAa,CAAC;QACnB7B,UAAU;QACV8B;OACD,CAAC;IACJ,CAAC;IAEDc,aAAa,EAAE;MACb,MAAMO,WAAWA,CAACP,aAAa;;QAC7B,IAAI7C,KAAK,CAAC6B,IAAI,KAAK,UAAU,EAAE;QAE/B;QACA,OAAO;UACLwB,oBAAoB,EAAE9B,MAAM,CAC1B+B,IAAI,CAACC,GAAG,CAACC,MAAM,CAAC,CAAAlC,EAAA,GAAAuB,aAAa,CAACQ,oBAAoB,cAAA/B,EAAA,cAAAA,EAAA,GAAIC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,MAAO,CAAC;SAE7E;MACH;;GAEH,CAAC;AACJ;AAEA;AACA;AACA;AAEA;AACA,OAAO,eAAeS,IAAIA,CAAC;EACzBC,IAAI;EACJjC;AAAK,CAIN;EACC;EACA,IAAIA,KAAK,CAAC6B,IAAI,KAAK,UAAU,EAAE;IAC7B,MAAM;MAAEE,SAAS;MAAE0B;IAAQ,CAAE,GAAG,MAAMzD,KAAK,CAACgC,IAAI,CAAC;MAC/CC;KACD,CAAC;IACF,OAAOyB,mBAAmB,CAAC;MAAE3B,SAAS;MAAE0B;IAAQ,CAAE,CAAC;EACrD;EAEA,IAAIzD,KAAK,CAACgC,IAAI,EAAE,OAAOhC,KAAK,CAACgC,IAAI,CAAC;IAAEC;EAAI,CAAE,CAAC;EAE3C,MAAM,IAAIpD,SAAS,CAAC,oCAAoC,CAAC;AAC3D;AAEA;AACA,OAAM,SAAUqD,gBAAgBA,CAAC;EAC/BhC,OAAO;EACPiC,OAAO;EACPF;AAAI,CAKL;EACC,OAAO9C,aAAa,CAAC;IACnBsD,MAAM,EAAE;MACNN,OAAO;MACPwB,IAAI,EAAE,uBAAuB;MAC7BC,iBAAiB,EAAE1D,OAAO;MAC1BI,OAAO,EAAE;KACV;IACDoC,KAAK,EAAE;MACLmB,0BAA0B,EAAE,CAC1B;QACEF,IAAI,EAAE,MAAM;QACZ9B,IAAI,EAAE;OACP;KAEJ;IACDc,WAAW,EAAE,4BAA4B;IACzCJ,OAAO,EAAE;MACPN;;GAEH,CAAC;AACJ;AAEA;AACA,OAAM,SAAUyB,mBAAmBA,CAAC;EAClCD,QAAQ;EACR1B;AAAS,CAIV;EACC,MAAM;IAAE+B,CAAC;IAAEC;EAAC,CAAE,GAAGnF,SAAS,CAACoF,OAAO,CAACjC,SAAS,CAAC;EAC7C,OAAOhD,mBAAmB,CACxB,CACE;IACEkF,UAAU,EAAE,CACV;MACEN,IAAI,EAAE,mBAAmB;MACzB9B,IAAI,EAAE;KACP,EACD;MAAE8B,IAAI,EAAE,gBAAgB;MAAE9B,IAAI,EAAE;IAAO,CAAE,EACzC;MAAE8B,IAAI,EAAE,gBAAgB;MAAE9B,IAAI,EAAE;IAAS,CAAE,EAC3C;MAAE8B,IAAI,EAAE,WAAW;MAAE9B,IAAI,EAAE;IAAS,CAAE,EACtC;MACE8B,IAAI,EAAE,GAAG;MACT9B,IAAI,EAAE;KACP,EACD;MACE8B,IAAI,EAAE,GAAG;MACT9B,IAAI,EAAE;KACP,CACF;IACDA,IAAI,EAAE;GACP,CACF,EACD,CACE;IACEqC,iBAAiB,EAAET,QAAQ,CAACS,iBAAiB;IAC7CC,cAAc,EAAE7E,WAAW,CAACmE,QAAQ,CAACU,cAAc,CAAC;IACpDC,cAAc,EAAE7C,MAAM,CAACkC,QAAQ,CAACW,cAAc,CAAC;IAC/CC,SAAS,EAAE9C,MAAM,CAACkC,QAAQ,CAACY,SAAS,CAAC;IACrCP,CAAC;IACDC;GACD,CACF,CACF;AACH;AAEA;AACA,OAAM,SAAUjC,aAAaA,CAAC/B,UAA+D;EAC3F,MAAM;IAAEE,UAAU,GAAG;EAAC,CAAE,GAAGF,UAAU;EACrC,MAAMuE,aAAa,GAAG,CAAC,MAAK;IAC1B,IAAIjF,IAAI,CAACU,UAAU,CAACgC,SAAS,CAAC,KAAK,EAAE,EAAE,OAAOhC,UAAU,CAACgC,SAAS;IAClE,MAAMA,SAAS,GAAG3C,cAAc,CAACW,UAAU,CAACgC,SAAS,CAAC;IACtD,OAAO9C,YAAY,CACjB,CAAC,SAAS,EAAE,SAAS,EAAE,OAAO,CAAC,EAC/B,CAAC8C,SAAS,CAAC+B,CAAC,EAAE/B,SAAS,CAACgC,CAAC,EAAEhC,SAAS,CAACwC,OAAO,KAAK,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,CAC9D;EACH,CAAC,EAAC,CAAE;EACJ,OAAOxF,mBAAmB,CACxB,CACE;IACEkF,UAAU,EAAE,CACV;MACEN,IAAI,EAAE,YAAY;MAClB9B,IAAI,EAAE;KACP,EACD;MACE8B,IAAI,EAAE,eAAe;MACrB9B,IAAI,EAAE;KACP,CACF;IACDA,IAAI,EAAE;GACP,CACF,EACD,CACE;IACE5B,UAAU;IACVqE;GACD,CACF,CACF;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}