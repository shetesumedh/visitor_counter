{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toSignature = void 0;\nconst abitype_1 = require(\"abitype\");\nconst normalizeSignature_js_1 = require(\"./normalizeSignature.js\");\nconst toSignature = def => {\n  const def_ = (() => {\n    if (typeof def === 'string') return def;\n    return (0, abitype_1.formatAbiItem)(def);\n  })();\n  return (0, normalizeSignature_js_1.normalizeSignature)(def_);\n};\nexports.toSignature = toSignature;","map":{"version":3,"names":["abitype_1","require","normalizeSignature_js_1","toSignature","def","def_","formatAbiItem","normalizeSignature","exports"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/viem/utils/hash/toSignature.ts"],"sourcesContent":["import { type AbiEvent, type AbiFunction, formatAbiItem } from 'abitype'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport {\n  type NormalizeSignatureErrorType,\n  normalizeSignature,\n} from './normalizeSignature.js'\n\nexport type ToSignatureErrorType = NormalizeSignatureErrorType | ErrorType\n\n/**\n * Returns the signature for a given function or event definition.\n *\n * @example\n * const signature = toSignature('function ownerOf(uint256 tokenId)')\n * // 'ownerOf(uint256)'\n *\n * @example\n * const signature_3 = toSignature({\n *   name: 'ownerOf',\n *   type: 'function',\n *   inputs: [{ name: 'tokenId', type: 'uint256' }],\n *   outputs: [],\n *   stateMutability: 'view',\n * })\n * // 'ownerOf(uint256)'\n */\nexport const toSignature = (def: string | AbiFunction | AbiEvent) => {\n  const def_ = (() => {\n    if (typeof def === 'string') return def\n    return formatAbiItem(def)\n  })()\n  return normalizeSignature(def_)\n}\n"],"mappings":";;;;;;AAAA,MAAAA,SAAA,GAAAC,OAAA;AAGA,MAAAC,uBAAA,GAAAD,OAAA;AAwBO,MAAME,WAAW,GAAIC,GAAoC,IAAI;EAClE,MAAMC,IAAI,GAAG,CAAC,MAAK;IACjB,IAAI,OAAOD,GAAG,KAAK,QAAQ,EAAE,OAAOA,GAAG;IACvC,OAAO,IAAAJ,SAAA,CAAAM,aAAa,EAACF,GAAG,CAAC;EAC3B,CAAC,EAAC,CAAE;EACJ,OAAO,IAAAF,uBAAA,CAAAK,kBAAkB,EAACF,IAAI,CAAC;AACjC,CAAC;AANYG,OAAA,CAAAL,WAAW,GAAAA,WAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}