{"ast":null,"code":"\"use strict\";\n\n// Copyright (c) 2018-2023 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.filterFromParam = exports.FilterPolyfill = void 0;\nconst type_1 = require(\"../core/type\");\nconst util_1 = require(\"../core/util\");\nconst TIMEOUT = 5 * 60 * 1000; // 5 minutes\nconst JSONRPC_TEMPLATE = {\n  jsonrpc: '2.0',\n  id: 0\n};\nclass FilterPolyfill {\n  constructor(provider) {\n    this.logFilters = new Map(); // <id, filter>\n    this.blockFilters = new Set(); // <id>\n    this.pendingTransactionFilters = new Set(); // <id, true>\n    this.cursors = new Map(); // <id, cursor>\n    this.timeouts = new Map(); // <id, setTimeout id>\n    this.nextFilterId = (0, type_1.IntNumber)(1);\n    this.REQUEST_THROTTLE_INTERVAL = 1000; // in milliseconds\n    this.lastFetchTimestamp = new Date(0);\n    this.resolvers = [];\n    this.provider = provider;\n  }\n  async newFilter(param) {\n    const filter = filterFromParam(param);\n    const id = this.makeFilterId();\n    const cursor = await this.setInitialCursorPosition(id, filter.fromBlock);\n    console.info(`Installing new log filter(${id}):`, filter, 'initial cursor position:', cursor);\n    this.logFilters.set(id, filter);\n    this.setFilterTimeout(id);\n    return (0, util_1.hexStringFromIntNumber)(id);\n  }\n  async newBlockFilter() {\n    const id = this.makeFilterId();\n    const cursor = await this.setInitialCursorPosition(id, 'latest');\n    console.info(`Installing new block filter (${id}) with initial cursor position:`, cursor);\n    this.blockFilters.add(id);\n    this.setFilterTimeout(id);\n    return (0, util_1.hexStringFromIntNumber)(id);\n  }\n  async newPendingTransactionFilter() {\n    const id = this.makeFilterId();\n    const cursor = await this.setInitialCursorPosition(id, 'latest');\n    console.info(`Installing new block filter (${id}) with initial cursor position:`, cursor);\n    this.pendingTransactionFilters.add(id);\n    this.setFilterTimeout(id);\n    return (0, util_1.hexStringFromIntNumber)(id);\n  }\n  uninstallFilter(filterId) {\n    const id = (0, util_1.intNumberFromHexString)(filterId);\n    console.info(`Uninstalling filter (${id})`);\n    this.deleteFilter(id);\n    return true;\n  }\n  getFilterChanges(filterId) {\n    const id = (0, util_1.intNumberFromHexString)(filterId);\n    if (this.timeouts.has(id)) {\n      // extend timeout\n      this.setFilterTimeout(id);\n    }\n    if (this.logFilters.has(id)) {\n      return this.getLogFilterChanges(id);\n    } else if (this.blockFilters.has(id)) {\n      return this.getBlockFilterChanges(id);\n    } else if (this.pendingTransactionFilters.has(id)) {\n      return this.getPendingTransactionFilterChanges(id);\n    }\n    return Promise.resolve(filterNotFoundError());\n  }\n  async getFilterLogs(filterId) {\n    const id = (0, util_1.intNumberFromHexString)(filterId);\n    const filter = this.logFilters.get(id);\n    if (!filter) {\n      return filterNotFoundError();\n    }\n    return this.sendAsyncPromise(Object.assign(Object.assign({}, JSONRPC_TEMPLATE), {\n      method: 'eth_getLogs',\n      params: [paramFromFilter(filter)]\n    }));\n  }\n  makeFilterId() {\n    return (0, type_1.IntNumber)(++this.nextFilterId);\n  }\n  sendAsyncPromise(request) {\n    return new Promise((resolve, reject) => {\n      this.provider.sendAsync(request, (err, response) => {\n        if (err) {\n          return reject(err);\n        }\n        if (Array.isArray(response) || response == null) {\n          return reject(new Error(`unexpected response received: ${JSON.stringify(response)}`));\n        }\n        resolve(response);\n      });\n    });\n  }\n  deleteFilter(id) {\n    console.info(`Deleting filter (${id})`);\n    this.logFilters.delete(id);\n    this.blockFilters.delete(id);\n    this.pendingTransactionFilters.delete(id);\n    this.cursors.delete(id);\n    this.timeouts.delete(id);\n  }\n  async getLogFilterChanges(id) {\n    const filter = this.logFilters.get(id);\n    const cursorPosition = this.cursors.get(id);\n    if (!cursorPosition || !filter) {\n      return filterNotFoundError();\n    }\n    const currentBlockHeight = await this.getCurrentBlockHeight();\n    const toBlock = filter.toBlock === 'latest' ? currentBlockHeight : filter.toBlock;\n    if (cursorPosition > currentBlockHeight) {\n      return emptyResult();\n    }\n    if (cursorPosition > Number(filter.toBlock)) {\n      return emptyResult();\n    }\n    console.info(`Fetching logs from ${cursorPosition} to ${toBlock} for filter ${id}`);\n    const response = await this.sendAsyncPromise(Object.assign(Object.assign({}, JSONRPC_TEMPLATE), {\n      method: 'eth_getLogs',\n      params: [paramFromFilter(Object.assign(Object.assign({}, filter), {\n        fromBlock: cursorPosition,\n        toBlock\n      }))]\n    }));\n    if (Array.isArray(response.result)) {\n      const blocks = response.result.map(log => (0, util_1.intNumberFromHexString)(log.blockNumber || '0x0'));\n      const highestBlock = Math.max(...blocks);\n      if (highestBlock && highestBlock > cursorPosition) {\n        const newCursorPosition = (0, type_1.IntNumber)(highestBlock + 1);\n        console.info(`Moving cursor position for filter (${id}) from ${cursorPosition} to ${newCursorPosition}`);\n        this.cursors.set(id, newCursorPosition);\n      }\n    }\n    return response;\n  }\n  async getBlockFilterChanges(id) {\n    const cursorPosition = this.cursors.get(id);\n    if (!cursorPosition) {\n      return filterNotFoundError();\n    }\n    const currentBlockHeight = await this.getCurrentBlockHeight();\n    if (cursorPosition > currentBlockHeight) {\n      return emptyResult();\n    }\n    console.info(`Fetching blocks from ${cursorPosition} to ${currentBlockHeight} for filter (${id})`);\n    const blocks = (await Promise.all(\n    // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n    (0, util_1.range)(cursorPosition, currentBlockHeight + 1).map(i => this.getBlockHashByNumber((0, type_1.IntNumber)(i))))).filter(hash => !!hash);\n    // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n    const newCursorPosition = (0, type_1.IntNumber)(cursorPosition + blocks.length);\n    console.info(`Moving cursor position for filter (${id}) from ${cursorPosition} to ${newCursorPosition}`);\n    this.cursors.set(id, newCursorPosition);\n    return Object.assign(Object.assign({}, JSONRPC_TEMPLATE), {\n      result: blocks\n    });\n  }\n  async getPendingTransactionFilterChanges(_id) {\n    // pending transaction filters are not supported\n    return Promise.resolve(emptyResult());\n  }\n  async setInitialCursorPosition(id, startBlock) {\n    const currentBlockHeight = await this.getCurrentBlockHeight();\n    const initialCursorPosition = typeof startBlock === 'number' && startBlock > currentBlockHeight ? startBlock : currentBlockHeight;\n    this.cursors.set(id, initialCursorPosition);\n    return initialCursorPosition;\n  }\n  setFilterTimeout(id) {\n    const existing = this.timeouts.get(id);\n    if (existing) {\n      window.clearTimeout(existing);\n    }\n    const timeout = window.setTimeout(() => {\n      console.info(`Filter (${id}) timed out`);\n      this.deleteFilter(id);\n    }, TIMEOUT);\n    this.timeouts.set(id, timeout);\n  }\n  // throttle eth_blockNumber requests\n  async getCurrentBlockHeight() {\n    const now = new Date();\n    if (now.getTime() - this.lastFetchTimestamp.getTime() > this.REQUEST_THROTTLE_INTERVAL) {\n      this.lastFetchTimestamp = now;\n      const height = await this._getCurrentBlockHeight();\n      this.currentBlockHeight = height;\n      this.resolvers.forEach(resolve => resolve(height));\n      this.resolvers = [];\n    }\n    if (!this.currentBlockHeight) {\n      return new Promise(resolve => this.resolvers.push(resolve));\n    }\n    return this.currentBlockHeight;\n  }\n  async _getCurrentBlockHeight() {\n    const {\n      result\n    } = await this.sendAsyncPromise(Object.assign(Object.assign({}, JSONRPC_TEMPLATE), {\n      method: 'eth_blockNumber',\n      params: []\n    }));\n    return (0, util_1.intNumberFromHexString)((0, util_1.ensureHexString)(result));\n  }\n  async getBlockHashByNumber(blockNumber) {\n    const response = await this.sendAsyncPromise(Object.assign(Object.assign({}, JSONRPC_TEMPLATE), {\n      method: 'eth_getBlockByNumber',\n      params: [(0, util_1.hexStringFromIntNumber)(blockNumber), false]\n    }));\n    if (response.result && typeof response.result.hash === 'string') {\n      return (0, util_1.ensureHexString)(response.result.hash);\n    }\n    return null;\n  }\n}\nexports.FilterPolyfill = FilterPolyfill;\nfunction filterFromParam(param) {\n  return {\n    fromBlock: intBlockHeightFromHexBlockHeight(param.fromBlock),\n    toBlock: intBlockHeightFromHexBlockHeight(param.toBlock),\n    addresses: param.address === undefined ? null : Array.isArray(param.address) ? param.address : [param.address],\n    topics: param.topics || []\n  };\n}\nexports.filterFromParam = filterFromParam;\nfunction paramFromFilter(filter) {\n  const param = {\n    fromBlock: hexBlockHeightFromIntBlockHeight(filter.fromBlock),\n    toBlock: hexBlockHeightFromIntBlockHeight(filter.toBlock),\n    topics: filter.topics\n  };\n  if (filter.addresses !== null) {\n    param.address = filter.addresses;\n  }\n  return param;\n}\nfunction intBlockHeightFromHexBlockHeight(value) {\n  if (value === undefined || value === 'latest' || value === 'pending') {\n    return 'latest';\n  } else if (value === 'earliest') {\n    return (0, type_1.IntNumber)(0);\n  } else if ((0, util_1.isHexString)(value)) {\n    return (0, util_1.intNumberFromHexString)(value);\n  }\n  throw new Error(`Invalid block option: ${String(value)}`);\n}\nfunction hexBlockHeightFromIntBlockHeight(value) {\n  if (value === 'latest') {\n    return value;\n  }\n  return (0, util_1.hexStringFromIntNumber)(value);\n}\nfunction filterNotFoundError() {\n  return Object.assign(Object.assign({}, JSONRPC_TEMPLATE), {\n    error: {\n      code: -32000,\n      message: 'filter not found'\n    }\n  });\n}\nfunction emptyResult() {\n  return Object.assign(Object.assign({}, JSONRPC_TEMPLATE), {\n    result: []\n  });\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","filterFromParam","FilterPolyfill","type_1","require","util_1","TIMEOUT","JSONRPC_TEMPLATE","jsonrpc","id","constructor","provider","logFilters","Map","blockFilters","Set","pendingTransactionFilters","cursors","timeouts","nextFilterId","IntNumber","REQUEST_THROTTLE_INTERVAL","lastFetchTimestamp","Date","resolvers","newFilter","param","filter","makeFilterId","cursor","setInitialCursorPosition","fromBlock","console","info","set","setFilterTimeout","hexStringFromIntNumber","newBlockFilter","add","newPendingTransactionFilter","uninstallFilter","filterId","intNumberFromHexString","deleteFilter","getFilterChanges","has","getLogFilterChanges","getBlockFilterChanges","getPendingTransactionFilterChanges","Promise","resolve","filterNotFoundError","getFilterLogs","get","sendAsyncPromise","assign","method","params","paramFromFilter","request","reject","sendAsync","err","response","Array","isArray","Error","JSON","stringify","delete","cursorPosition","currentBlockHeight","getCurrentBlockHeight","toBlock","emptyResult","Number","result","blocks","map","log","blockNumber","highestBlock","Math","max","newCursorPosition","all","range","i","getBlockHashByNumber","hash","length","_id","startBlock","initialCursorPosition","existing","window","clearTimeout","timeout","setTimeout","now","getTime","height","_getCurrentBlockHeight","forEach","push","ensureHexString","intBlockHeightFromHexBlockHeight","addresses","address","undefined","topics","hexBlockHeightFromIntBlockHeight","isHexString","String","error","code","message"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/cbw-sdk/dist/provider/FilterPolyfill.js"],"sourcesContent":["\"use strict\";\n// Copyright (c) 2018-2023 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.filterFromParam = exports.FilterPolyfill = void 0;\nconst type_1 = require(\"../core/type\");\nconst util_1 = require(\"../core/util\");\nconst TIMEOUT = 5 * 60 * 1000; // 5 minutes\nconst JSONRPC_TEMPLATE = {\n    jsonrpc: '2.0',\n    id: 0,\n};\nclass FilterPolyfill {\n    constructor(provider) {\n        this.logFilters = new Map(); // <id, filter>\n        this.blockFilters = new Set(); // <id>\n        this.pendingTransactionFilters = new Set(); // <id, true>\n        this.cursors = new Map(); // <id, cursor>\n        this.timeouts = new Map(); // <id, setTimeout id>\n        this.nextFilterId = (0, type_1.IntNumber)(1);\n        this.REQUEST_THROTTLE_INTERVAL = 1000; // in milliseconds\n        this.lastFetchTimestamp = new Date(0);\n        this.resolvers = [];\n        this.provider = provider;\n    }\n    async newFilter(param) {\n        const filter = filterFromParam(param);\n        const id = this.makeFilterId();\n        const cursor = await this.setInitialCursorPosition(id, filter.fromBlock);\n        console.info(`Installing new log filter(${id}):`, filter, 'initial cursor position:', cursor);\n        this.logFilters.set(id, filter);\n        this.setFilterTimeout(id);\n        return (0, util_1.hexStringFromIntNumber)(id);\n    }\n    async newBlockFilter() {\n        const id = this.makeFilterId();\n        const cursor = await this.setInitialCursorPosition(id, 'latest');\n        console.info(`Installing new block filter (${id}) with initial cursor position:`, cursor);\n        this.blockFilters.add(id);\n        this.setFilterTimeout(id);\n        return (0, util_1.hexStringFromIntNumber)(id);\n    }\n    async newPendingTransactionFilter() {\n        const id = this.makeFilterId();\n        const cursor = await this.setInitialCursorPosition(id, 'latest');\n        console.info(`Installing new block filter (${id}) with initial cursor position:`, cursor);\n        this.pendingTransactionFilters.add(id);\n        this.setFilterTimeout(id);\n        return (0, util_1.hexStringFromIntNumber)(id);\n    }\n    uninstallFilter(filterId) {\n        const id = (0, util_1.intNumberFromHexString)(filterId);\n        console.info(`Uninstalling filter (${id})`);\n        this.deleteFilter(id);\n        return true;\n    }\n    getFilterChanges(filterId) {\n        const id = (0, util_1.intNumberFromHexString)(filterId);\n        if (this.timeouts.has(id)) {\n            // extend timeout\n            this.setFilterTimeout(id);\n        }\n        if (this.logFilters.has(id)) {\n            return this.getLogFilterChanges(id);\n        }\n        else if (this.blockFilters.has(id)) {\n            return this.getBlockFilterChanges(id);\n        }\n        else if (this.pendingTransactionFilters.has(id)) {\n            return this.getPendingTransactionFilterChanges(id);\n        }\n        return Promise.resolve(filterNotFoundError());\n    }\n    async getFilterLogs(filterId) {\n        const id = (0, util_1.intNumberFromHexString)(filterId);\n        const filter = this.logFilters.get(id);\n        if (!filter) {\n            return filterNotFoundError();\n        }\n        return this.sendAsyncPromise(Object.assign(Object.assign({}, JSONRPC_TEMPLATE), { method: 'eth_getLogs', params: [paramFromFilter(filter)] }));\n    }\n    makeFilterId() {\n        return (0, type_1.IntNumber)(++this.nextFilterId);\n    }\n    sendAsyncPromise(request) {\n        return new Promise((resolve, reject) => {\n            this.provider.sendAsync(request, (err, response) => {\n                if (err) {\n                    return reject(err);\n                }\n                if (Array.isArray(response) || response == null) {\n                    return reject(new Error(`unexpected response received: ${JSON.stringify(response)}`));\n                }\n                resolve(response);\n            });\n        });\n    }\n    deleteFilter(id) {\n        console.info(`Deleting filter (${id})`);\n        this.logFilters.delete(id);\n        this.blockFilters.delete(id);\n        this.pendingTransactionFilters.delete(id);\n        this.cursors.delete(id);\n        this.timeouts.delete(id);\n    }\n    async getLogFilterChanges(id) {\n        const filter = this.logFilters.get(id);\n        const cursorPosition = this.cursors.get(id);\n        if (!cursorPosition || !filter) {\n            return filterNotFoundError();\n        }\n        const currentBlockHeight = await this.getCurrentBlockHeight();\n        const toBlock = filter.toBlock === 'latest' ? currentBlockHeight : filter.toBlock;\n        if (cursorPosition > currentBlockHeight) {\n            return emptyResult();\n        }\n        if (cursorPosition > Number(filter.toBlock)) {\n            return emptyResult();\n        }\n        console.info(`Fetching logs from ${cursorPosition} to ${toBlock} for filter ${id}`);\n        const response = await this.sendAsyncPromise(Object.assign(Object.assign({}, JSONRPC_TEMPLATE), { method: 'eth_getLogs', params: [\n                paramFromFilter(Object.assign(Object.assign({}, filter), { fromBlock: cursorPosition, toBlock })),\n            ] }));\n        if (Array.isArray(response.result)) {\n            const blocks = response.result.map((log) => (0, util_1.intNumberFromHexString)(log.blockNumber || '0x0'));\n            const highestBlock = Math.max(...blocks);\n            if (highestBlock && highestBlock > cursorPosition) {\n                const newCursorPosition = (0, type_1.IntNumber)(highestBlock + 1);\n                console.info(`Moving cursor position for filter (${id}) from ${cursorPosition} to ${newCursorPosition}`);\n                this.cursors.set(id, newCursorPosition);\n            }\n        }\n        return response;\n    }\n    async getBlockFilterChanges(id) {\n        const cursorPosition = this.cursors.get(id);\n        if (!cursorPosition) {\n            return filterNotFoundError();\n        }\n        const currentBlockHeight = await this.getCurrentBlockHeight();\n        if (cursorPosition > currentBlockHeight) {\n            return emptyResult();\n        }\n        console.info(`Fetching blocks from ${cursorPosition} to ${currentBlockHeight} for filter (${id})`);\n        const blocks = (await Promise.all(\n        // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n        (0, util_1.range)(cursorPosition, currentBlockHeight + 1).map((i) => this.getBlockHashByNumber((0, type_1.IntNumber)(i))))).filter((hash) => !!hash);\n        // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n        const newCursorPosition = (0, type_1.IntNumber)(cursorPosition + blocks.length);\n        console.info(`Moving cursor position for filter (${id}) from ${cursorPosition} to ${newCursorPosition}`);\n        this.cursors.set(id, newCursorPosition);\n        return Object.assign(Object.assign({}, JSONRPC_TEMPLATE), { result: blocks });\n    }\n    async getPendingTransactionFilterChanges(_id) {\n        // pending transaction filters are not supported\n        return Promise.resolve(emptyResult());\n    }\n    async setInitialCursorPosition(id, startBlock) {\n        const currentBlockHeight = await this.getCurrentBlockHeight();\n        const initialCursorPosition = typeof startBlock === 'number' && startBlock > currentBlockHeight\n            ? startBlock\n            : currentBlockHeight;\n        this.cursors.set(id, initialCursorPosition);\n        return initialCursorPosition;\n    }\n    setFilterTimeout(id) {\n        const existing = this.timeouts.get(id);\n        if (existing) {\n            window.clearTimeout(existing);\n        }\n        const timeout = window.setTimeout(() => {\n            console.info(`Filter (${id}) timed out`);\n            this.deleteFilter(id);\n        }, TIMEOUT);\n        this.timeouts.set(id, timeout);\n    }\n    // throttle eth_blockNumber requests\n    async getCurrentBlockHeight() {\n        const now = new Date();\n        if (now.getTime() - this.lastFetchTimestamp.getTime() > this.REQUEST_THROTTLE_INTERVAL) {\n            this.lastFetchTimestamp = now;\n            const height = await this._getCurrentBlockHeight();\n            this.currentBlockHeight = height;\n            this.resolvers.forEach((resolve) => resolve(height));\n            this.resolvers = [];\n        }\n        if (!this.currentBlockHeight) {\n            return new Promise((resolve) => this.resolvers.push(resolve));\n        }\n        return this.currentBlockHeight;\n    }\n    async _getCurrentBlockHeight() {\n        const { result } = await this.sendAsyncPromise(Object.assign(Object.assign({}, JSONRPC_TEMPLATE), { method: 'eth_blockNumber', params: [] }));\n        return (0, util_1.intNumberFromHexString)((0, util_1.ensureHexString)(result));\n    }\n    async getBlockHashByNumber(blockNumber) {\n        const response = await this.sendAsyncPromise(Object.assign(Object.assign({}, JSONRPC_TEMPLATE), { method: 'eth_getBlockByNumber', params: [(0, util_1.hexStringFromIntNumber)(blockNumber), false] }));\n        if (response.result && typeof response.result.hash === 'string') {\n            return (0, util_1.ensureHexString)(response.result.hash);\n        }\n        return null;\n    }\n}\nexports.FilterPolyfill = FilterPolyfill;\nfunction filterFromParam(param) {\n    return {\n        fromBlock: intBlockHeightFromHexBlockHeight(param.fromBlock),\n        toBlock: intBlockHeightFromHexBlockHeight(param.toBlock),\n        addresses: param.address === undefined\n            ? null\n            : Array.isArray(param.address)\n                ? param.address\n                : [param.address],\n        topics: param.topics || [],\n    };\n}\nexports.filterFromParam = filterFromParam;\nfunction paramFromFilter(filter) {\n    const param = {\n        fromBlock: hexBlockHeightFromIntBlockHeight(filter.fromBlock),\n        toBlock: hexBlockHeightFromIntBlockHeight(filter.toBlock),\n        topics: filter.topics,\n    };\n    if (filter.addresses !== null) {\n        param.address = filter.addresses;\n    }\n    return param;\n}\nfunction intBlockHeightFromHexBlockHeight(value) {\n    if (value === undefined || value === 'latest' || value === 'pending') {\n        return 'latest';\n    }\n    else if (value === 'earliest') {\n        return (0, type_1.IntNumber)(0);\n    }\n    else if ((0, util_1.isHexString)(value)) {\n        return (0, util_1.intNumberFromHexString)(value);\n    }\n    throw new Error(`Invalid block option: ${String(value)}`);\n}\nfunction hexBlockHeightFromIntBlockHeight(value) {\n    if (value === 'latest') {\n        return value;\n    }\n    return (0, util_1.hexStringFromIntNumber)(value);\n}\nfunction filterNotFoundError() {\n    return Object.assign(Object.assign({}, JSONRPC_TEMPLATE), { error: { code: -32000, message: 'filter not found' } });\n}\nfunction emptyResult() {\n    return Object.assign(Object.assign({}, JSONRPC_TEMPLATE), { result: [] });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}