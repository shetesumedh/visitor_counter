{"ast":null,"code":"module.exports = getBlocksForRange;\nasync function getBlocksForRange({\n  provider,\n  fromBlock,\n  toBlock\n}) {\n  if (!fromBlock) fromBlock = toBlock;\n  const fromBlockNumber = hexToInt(fromBlock);\n  const toBlockNumber = hexToInt(toBlock);\n  const blockCountToQuery = toBlockNumber - fromBlockNumber + 1;\n  // load all blocks from old to new (inclusive)\n  const missingBlockNumbers = Array(blockCountToQuery).fill().map((_, index) => fromBlockNumber + index).map(intToHex);\n  let blockBodies = await Promise.all(missingBlockNumbers.map(blockNum => query(provider, 'eth_getBlockByNumber', [blockNum, false])));\n  blockBodies = blockBodies.filter(block => block !== null);\n  return blockBodies;\n}\nfunction hexToInt(hexString) {\n  if (hexString === undefined || hexString === null) return hexString;\n  return Number.parseInt(hexString, 16);\n}\nfunction incrementHexInt(hexString) {\n  if (hexString === undefined || hexString === null) return hexString;\n  const value = hexToInt(hexString);\n  return intToHex(value + 1);\n}\nfunction intToHex(int) {\n  if (int === undefined || int === null) return int;\n  const hexString = int.toString(16);\n  return '0x' + hexString;\n}\nfunction sendAsync(provider, request) {\n  return new Promise((resolve, reject) => {\n    provider.sendAsync(request, (error, response) => {\n      if (error) {\n        reject(error);\n      } else if (response.error) {\n        reject(response.error);\n      } else if (response.result) {\n        resolve(response.result);\n      } else {\n        reject(new Error(\"Result was empty\"));\n      }\n    });\n  });\n}\nasync function query(provider, method, params) {\n  for (let i = 0; i < 3; i++) {\n    try {\n      return await sendAsync(provider, {\n        id: 1,\n        jsonrpc: \"2.0\",\n        method,\n        params\n      });\n    } catch (error) {\n      console.error(`provider.sendAsync failed: ${error.stack || error.message || error}`);\n    }\n  }\n  return null;\n}","map":{"version":3,"names":["module","exports","getBlocksForRange","provider","fromBlock","toBlock","fromBlockNumber","hexToInt","toBlockNumber","blockCountToQuery","missingBlockNumbers","Array","fill","map","_","index","intToHex","blockBodies","Promise","all","blockNum","query","filter","block","hexString","undefined","Number","parseInt","incrementHexInt","value","int","toString","sendAsync","request","resolve","reject","error","response","result","Error","method","params","i","id","jsonrpc","console","stack","message"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/eth-json-rpc-filters/getBlocksForRange.js"],"sourcesContent":["module.exports = getBlocksForRange\n\nasync function getBlocksForRange({ provider, fromBlock, toBlock }) {\n  if (!fromBlock) fromBlock = toBlock\n\n  const fromBlockNumber = hexToInt(fromBlock)\n  const toBlockNumber = hexToInt(toBlock)\n  const blockCountToQuery = toBlockNumber - fromBlockNumber + 1\n  // load all blocks from old to new (inclusive)\n  const missingBlockNumbers = Array(blockCountToQuery).fill()\n                              .map((_,index) => fromBlockNumber + index)\n                              .map(intToHex)\n  let blockBodies = await Promise.all(\n    missingBlockNumbers.map(blockNum => query(provider, 'eth_getBlockByNumber', [blockNum, false]))\n  )\n  blockBodies = blockBodies.filter(block => block !== null);\n  return blockBodies\n}\n\nfunction hexToInt(hexString) {\n  if (hexString === undefined || hexString === null) return hexString\n  return Number.parseInt(hexString, 16)\n}\n\nfunction incrementHexInt(hexString){\n  if (hexString === undefined || hexString === null) return hexString\n  const value = hexToInt(hexString)\n  return intToHex(value + 1)\n}\n\nfunction intToHex(int) {\n  if (int === undefined || int === null) return int\n  const hexString = int.toString(16)\n  return '0x' + hexString\n}\n\nfunction sendAsync(provider, request) {\n  return new Promise((resolve, reject) => {\n    provider.sendAsync(request, (error, response) => {\n      if (error) {\n        reject(error);\n      } else if (response.error) {\n        reject(response.error);\n      } else if (response.result) {\n        resolve(response.result);\n      } else {\n        reject(new Error(\"Result was empty\"));\n      }\n    });\n  });\n}\n\nasync function query(provider, method, params) {\n  for (let i = 0; i < 3; i++) {\n    try {\n      return await sendAsync(provider, {\n        id: 1,\n        jsonrpc: \"2.0\",\n        method,\n        params,\n      });\n    } catch (error) {\n      console.error(\n        `provider.sendAsync failed: ${error.stack || error.message || error}`\n      );\n    }\n  }\n  return null;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}