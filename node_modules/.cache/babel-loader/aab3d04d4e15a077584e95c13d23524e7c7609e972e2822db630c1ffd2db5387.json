{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.serializeTransaction = serializeTransaction;\nexports.toYParitySignatureArray = toYParitySignatureArray;\nconst transaction_js_1 = require(\"../../errors/transaction.js\");\nconst serializeAuthorizationList_js_1 = require(\"../authorization/serializeAuthorizationList.js\");\nconst blobsToCommitments_js_1 = require(\"../blob/blobsToCommitments.js\");\nconst blobsToProofs_js_1 = require(\"../blob/blobsToProofs.js\");\nconst commitmentsToVersionedHashes_js_1 = require(\"../blob/commitmentsToVersionedHashes.js\");\nconst toBlobSidecars_js_1 = require(\"../blob/toBlobSidecars.js\");\nconst concat_js_1 = require(\"../data/concat.js\");\nconst trim_js_1 = require(\"../data/trim.js\");\nconst toHex_js_1 = require(\"../encoding/toHex.js\");\nconst toRlp_js_1 = require(\"../encoding/toRlp.js\");\nconst assertTransaction_js_1 = require(\"./assertTransaction.js\");\nconst getTransactionType_js_1 = require(\"./getTransactionType.js\");\nconst serializeAccessList_js_1 = require(\"./serializeAccessList.js\");\nfunction serializeTransaction(transaction, signature) {\n  const type = (0, getTransactionType_js_1.getTransactionType)(transaction);\n  if (type === 'eip1559') return serializeTransactionEIP1559(transaction, signature);\n  if (type === 'eip2930') return serializeTransactionEIP2930(transaction, signature);\n  if (type === 'eip4844') return serializeTransactionEIP4844(transaction, signature);\n  if (type === 'eip7702') return serializeTransactionEIP7702(transaction, signature);\n  return serializeTransactionLegacy(transaction, signature);\n}\nfunction serializeTransactionEIP7702(transaction, signature) {\n  const {\n    authorizationList,\n    chainId,\n    gas,\n    nonce,\n    to,\n    value,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    accessList,\n    data\n  } = transaction;\n  (0, assertTransaction_js_1.assertTransactionEIP7702)(transaction);\n  const serializedAccessList = (0, serializeAccessList_js_1.serializeAccessList)(accessList);\n  const serializedAuthorizationList = (0, serializeAuthorizationList_js_1.serializeAuthorizationList)(authorizationList);\n  return (0, concat_js_1.concatHex)(['0x04', (0, toRlp_js_1.toRlp)([(0, toHex_js_1.numberToHex)(chainId), nonce ? (0, toHex_js_1.numberToHex)(nonce) : '0x', maxPriorityFeePerGas ? (0, toHex_js_1.numberToHex)(maxPriorityFeePerGas) : '0x', maxFeePerGas ? (0, toHex_js_1.numberToHex)(maxFeePerGas) : '0x', gas ? (0, toHex_js_1.numberToHex)(gas) : '0x', to ?? '0x', value ? (0, toHex_js_1.numberToHex)(value) : '0x', data ?? '0x', serializedAccessList, serializedAuthorizationList, ...toYParitySignatureArray(transaction, signature)])]);\n}\nfunction serializeTransactionEIP4844(transaction, signature) {\n  const {\n    chainId,\n    gas,\n    nonce,\n    to,\n    value,\n    maxFeePerBlobGas,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    accessList,\n    data\n  } = transaction;\n  (0, assertTransaction_js_1.assertTransactionEIP4844)(transaction);\n  let blobVersionedHashes = transaction.blobVersionedHashes;\n  let sidecars = transaction.sidecars;\n  if (transaction.blobs && (typeof blobVersionedHashes === 'undefined' || typeof sidecars === 'undefined')) {\n    const blobs = typeof transaction.blobs[0] === 'string' ? transaction.blobs : transaction.blobs.map(x => (0, toHex_js_1.bytesToHex)(x));\n    const kzg = transaction.kzg;\n    const commitments = (0, blobsToCommitments_js_1.blobsToCommitments)({\n      blobs,\n      kzg\n    });\n    if (typeof blobVersionedHashes === 'undefined') blobVersionedHashes = (0, commitmentsToVersionedHashes_js_1.commitmentsToVersionedHashes)({\n      commitments\n    });\n    if (typeof sidecars === 'undefined') {\n      const proofs = (0, blobsToProofs_js_1.blobsToProofs)({\n        blobs,\n        commitments,\n        kzg\n      });\n      sidecars = (0, toBlobSidecars_js_1.toBlobSidecars)({\n        blobs,\n        commitments,\n        proofs\n      });\n    }\n  }\n  const serializedAccessList = (0, serializeAccessList_js_1.serializeAccessList)(accessList);\n  const serializedTransaction = [(0, toHex_js_1.numberToHex)(chainId), nonce ? (0, toHex_js_1.numberToHex)(nonce) : '0x', maxPriorityFeePerGas ? (0, toHex_js_1.numberToHex)(maxPriorityFeePerGas) : '0x', maxFeePerGas ? (0, toHex_js_1.numberToHex)(maxFeePerGas) : '0x', gas ? (0, toHex_js_1.numberToHex)(gas) : '0x', to ?? '0x', value ? (0, toHex_js_1.numberToHex)(value) : '0x', data ?? '0x', serializedAccessList, maxFeePerBlobGas ? (0, toHex_js_1.numberToHex)(maxFeePerBlobGas) : '0x', blobVersionedHashes ?? [], ...toYParitySignatureArray(transaction, signature)];\n  const blobs = [];\n  const commitments = [];\n  const proofs = [];\n  if (sidecars) for (let i = 0; i < sidecars.length; i++) {\n    const {\n      blob,\n      commitment,\n      proof\n    } = sidecars[i];\n    blobs.push(blob);\n    commitments.push(commitment);\n    proofs.push(proof);\n  }\n  return (0, concat_js_1.concatHex)(['0x03', sidecars ? (0, toRlp_js_1.toRlp)([serializedTransaction, blobs, commitments, proofs]) : (0, toRlp_js_1.toRlp)(serializedTransaction)]);\n}\nfunction serializeTransactionEIP1559(transaction, signature) {\n  const {\n    chainId,\n    gas,\n    nonce,\n    to,\n    value,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    accessList,\n    data\n  } = transaction;\n  (0, assertTransaction_js_1.assertTransactionEIP1559)(transaction);\n  const serializedAccessList = (0, serializeAccessList_js_1.serializeAccessList)(accessList);\n  const serializedTransaction = [(0, toHex_js_1.numberToHex)(chainId), nonce ? (0, toHex_js_1.numberToHex)(nonce) : '0x', maxPriorityFeePerGas ? (0, toHex_js_1.numberToHex)(maxPriorityFeePerGas) : '0x', maxFeePerGas ? (0, toHex_js_1.numberToHex)(maxFeePerGas) : '0x', gas ? (0, toHex_js_1.numberToHex)(gas) : '0x', to ?? '0x', value ? (0, toHex_js_1.numberToHex)(value) : '0x', data ?? '0x', serializedAccessList, ...toYParitySignatureArray(transaction, signature)];\n  return (0, concat_js_1.concatHex)(['0x02', (0, toRlp_js_1.toRlp)(serializedTransaction)]);\n}\nfunction serializeTransactionEIP2930(transaction, signature) {\n  const {\n    chainId,\n    gas,\n    data,\n    nonce,\n    to,\n    value,\n    accessList,\n    gasPrice\n  } = transaction;\n  (0, assertTransaction_js_1.assertTransactionEIP2930)(transaction);\n  const serializedAccessList = (0, serializeAccessList_js_1.serializeAccessList)(accessList);\n  const serializedTransaction = [(0, toHex_js_1.numberToHex)(chainId), nonce ? (0, toHex_js_1.numberToHex)(nonce) : '0x', gasPrice ? (0, toHex_js_1.numberToHex)(gasPrice) : '0x', gas ? (0, toHex_js_1.numberToHex)(gas) : '0x', to ?? '0x', value ? (0, toHex_js_1.numberToHex)(value) : '0x', data ?? '0x', serializedAccessList, ...toYParitySignatureArray(transaction, signature)];\n  return (0, concat_js_1.concatHex)(['0x01', (0, toRlp_js_1.toRlp)(serializedTransaction)]);\n}\nfunction serializeTransactionLegacy(transaction, signature) {\n  const {\n    chainId = 0,\n    gas,\n    data,\n    nonce,\n    to,\n    value,\n    gasPrice\n  } = transaction;\n  (0, assertTransaction_js_1.assertTransactionLegacy)(transaction);\n  let serializedTransaction = [nonce ? (0, toHex_js_1.numberToHex)(nonce) : '0x', gasPrice ? (0, toHex_js_1.numberToHex)(gasPrice) : '0x', gas ? (0, toHex_js_1.numberToHex)(gas) : '0x', to ?? '0x', value ? (0, toHex_js_1.numberToHex)(value) : '0x', data ?? '0x'];\n  if (signature) {\n    const v = (() => {\n      if (signature.v >= 35n) {\n        const inferredChainId = (signature.v - 35n) / 2n;\n        if (inferredChainId > 0) return signature.v;\n        return 27n + (signature.v === 35n ? 0n : 1n);\n      }\n      if (chainId > 0) return BigInt(chainId * 2) + BigInt(35n + signature.v - 27n);\n      const v = 27n + (signature.v === 27n ? 0n : 1n);\n      if (signature.v !== v) throw new transaction_js_1.InvalidLegacyVError({\n        v: signature.v\n      });\n      return v;\n    })();\n    const r = (0, trim_js_1.trim)(signature.r);\n    const s = (0, trim_js_1.trim)(signature.s);\n    serializedTransaction = [...serializedTransaction, (0, toHex_js_1.numberToHex)(v), r === '0x00' ? '0x' : r, s === '0x00' ? '0x' : s];\n  } else if (chainId > 0) {\n    serializedTransaction = [...serializedTransaction, (0, toHex_js_1.numberToHex)(chainId), '0x', '0x'];\n  }\n  return (0, toRlp_js_1.toRlp)(serializedTransaction);\n}\nfunction toYParitySignatureArray(transaction, signature_) {\n  const signature = signature_ ?? transaction;\n  const {\n    v,\n    yParity\n  } = signature;\n  if (typeof signature.r === 'undefined') return [];\n  if (typeof signature.s === 'undefined') return [];\n  if (typeof v === 'undefined' && typeof yParity === 'undefined') return [];\n  const r = (0, trim_js_1.trim)(signature.r);\n  const s = (0, trim_js_1.trim)(signature.s);\n  const yParity_ = (() => {\n    if (typeof yParity === 'number') return yParity ? (0, toHex_js_1.numberToHex)(1) : '0x';\n    if (v === 0n) return '0x';\n    if (v === 1n) return (0, toHex_js_1.numberToHex)(1);\n    return v === 27n ? '0x' : (0, toHex_js_1.numberToHex)(1);\n  })();\n  return [yParity_, r === '0x00' ? '0x' : r, s === '0x00' ? '0x' : s];\n}","map":{"version":3,"names":["exports","serializeTransaction","toYParitySignatureArray","transaction_js_1","require","serializeAuthorizationList_js_1","blobsToCommitments_js_1","blobsToProofs_js_1","commitmentsToVersionedHashes_js_1","toBlobSidecars_js_1","concat_js_1","trim_js_1","toHex_js_1","toRlp_js_1","assertTransaction_js_1","getTransactionType_js_1","serializeAccessList_js_1","transaction","signature","type","getTransactionType","serializeTransactionEIP1559","serializeTransactionEIP2930","serializeTransactionEIP4844","serializeTransactionEIP7702","serializeTransactionLegacy","authorizationList","chainId","gas","nonce","to","value","maxFeePerGas","maxPriorityFeePerGas","accessList","data","assertTransactionEIP7702","serializedAccessList","serializeAccessList","serializedAuthorizationList","serializeAuthorizationList","concatHex","toRlp","numberToHex","maxFeePerBlobGas","assertTransactionEIP4844","blobVersionedHashes","sidecars","blobs","map","x","bytesToHex","kzg","commitments","blobsToCommitments","commitmentsToVersionedHashes","proofs","blobsToProofs","toBlobSidecars","serializedTransaction","i","length","blob","commitment","proof","push","assertTransactionEIP1559","gasPrice","assertTransactionEIP2930","assertTransactionLegacy","v","inferredChainId","BigInt","InvalidLegacyVError","r","trim","s","signature_","yParity","yParity_"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/viem/utils/transaction/serializeTransaction.ts"],"sourcesContent":["import {\n  InvalidLegacyVError,\n  type InvalidLegacyVErrorType,\n} from '../../errors/transaction.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type {\n  ByteArray,\n  Hex,\n  Signature,\n  SignatureLegacy,\n} from '../../types/misc.js'\nimport type {\n  TransactionSerializable,\n  TransactionSerializableEIP1559,\n  TransactionSerializableEIP2930,\n  TransactionSerializableEIP4844,\n  TransactionSerializableEIP7702,\n  TransactionSerializableGeneric,\n  TransactionSerializableLegacy,\n  TransactionSerialized,\n  TransactionSerializedEIP1559,\n  TransactionSerializedEIP2930,\n  TransactionSerializedEIP4844,\n  TransactionSerializedEIP7702,\n  TransactionSerializedLegacy,\n  TransactionType,\n} from '../../types/transaction.js'\nimport type { OneOf } from '../../types/utils.js'\nimport {\n  type SerializeAuthorizationListErrorType,\n  serializeAuthorizationList,\n} from '../authorization/serializeAuthorizationList.js'\nimport {\n  type BlobsToCommitmentsErrorType,\n  blobsToCommitments,\n} from '../blob/blobsToCommitments.js'\nimport {\n  blobsToProofs,\n  type blobsToProofsErrorType,\n} from '../blob/blobsToProofs.js'\nimport {\n  type CommitmentsToVersionedHashesErrorType,\n  commitmentsToVersionedHashes,\n} from '../blob/commitmentsToVersionedHashes.js'\nimport {\n  type ToBlobSidecarsErrorType,\n  toBlobSidecars,\n} from '../blob/toBlobSidecars.js'\nimport { type ConcatHexErrorType, concatHex } from '../data/concat.js'\nimport { trim } from '../data/trim.js'\nimport {\n  type NumberToHexErrorType,\n  bytesToHex,\n  numberToHex,\n} from '../encoding/toHex.js'\nimport { type ToRlpErrorType, toRlp } from '../encoding/toRlp.js'\n\nimport {\n  type AssertTransactionEIP1559ErrorType,\n  type AssertTransactionEIP2930ErrorType,\n  type AssertTransactionEIP4844ErrorType,\n  type AssertTransactionEIP7702ErrorType,\n  type AssertTransactionLegacyErrorType,\n  assertTransactionEIP1559,\n  assertTransactionEIP2930,\n  assertTransactionEIP4844,\n  assertTransactionEIP7702,\n  assertTransactionLegacy,\n} from './assertTransaction.js'\nimport {\n  type GetTransactionType,\n  type GetTransactionTypeErrorType,\n  getTransactionType,\n} from './getTransactionType.js'\nimport {\n  type SerializeAccessListErrorType,\n  serializeAccessList,\n} from './serializeAccessList.js'\n\nexport type SerializedTransactionReturnType<\n  transaction extends TransactionSerializable = TransactionSerializable,\n  ///\n  _transactionType extends TransactionType = GetTransactionType<transaction>,\n> = TransactionSerialized<_transactionType>\n\nexport type SerializeTransactionFn<\n  transaction extends TransactionSerializableGeneric = TransactionSerializable,\n  ///\n  _transactionType extends TransactionType = never,\n> = typeof serializeTransaction<\n  OneOf<TransactionSerializable | transaction>,\n  _transactionType\n>\n\nexport type SerializeTransactionErrorType =\n  | GetTransactionTypeErrorType\n  | SerializeTransactionEIP1559ErrorType\n  | SerializeTransactionEIP2930ErrorType\n  | SerializeTransactionEIP4844ErrorType\n  | SerializeTransactionEIP7702ErrorType\n  | SerializeTransactionLegacyErrorType\n  | ErrorType\n\nexport function serializeTransaction<\n  const transaction extends TransactionSerializable,\n  ///\n  _transactionType extends TransactionType = GetTransactionType<transaction>,\n>(\n  transaction: transaction,\n  signature?: Signature | undefined,\n): SerializedTransactionReturnType<transaction, _transactionType> {\n  const type = getTransactionType(transaction) as GetTransactionType\n\n  if (type === 'eip1559')\n    return serializeTransactionEIP1559(\n      transaction as TransactionSerializableEIP1559,\n      signature,\n    ) as SerializedTransactionReturnType<transaction>\n\n  if (type === 'eip2930')\n    return serializeTransactionEIP2930(\n      transaction as TransactionSerializableEIP2930,\n      signature,\n    ) as SerializedTransactionReturnType<transaction>\n\n  if (type === 'eip4844')\n    return serializeTransactionEIP4844(\n      transaction as TransactionSerializableEIP4844,\n      signature,\n    ) as SerializedTransactionReturnType<transaction>\n\n  if (type === 'eip7702')\n    return serializeTransactionEIP7702(\n      transaction as TransactionSerializableEIP7702,\n      signature,\n    ) as SerializedTransactionReturnType<transaction>\n\n  return serializeTransactionLegacy(\n    transaction as TransactionSerializableLegacy,\n    signature as SignatureLegacy,\n  ) as SerializedTransactionReturnType<transaction>\n}\n\ntype SerializeTransactionEIP7702ErrorType =\n  | AssertTransactionEIP7702ErrorType\n  | SerializeAuthorizationListErrorType\n  | ConcatHexErrorType\n  | InvalidLegacyVErrorType\n  | NumberToHexErrorType\n  | ToRlpErrorType\n  | SerializeAccessListErrorType\n  | ErrorType\n\nfunction serializeTransactionEIP7702(\n  transaction: TransactionSerializableEIP7702,\n  signature?: Signature | undefined,\n): TransactionSerializedEIP7702 {\n  const {\n    authorizationList,\n    chainId,\n    gas,\n    nonce,\n    to,\n    value,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    accessList,\n    data,\n  } = transaction\n\n  assertTransactionEIP7702(transaction)\n\n  const serializedAccessList = serializeAccessList(accessList)\n  const serializedAuthorizationList =\n    serializeAuthorizationList(authorizationList)\n\n  return concatHex([\n    '0x04',\n    toRlp([\n      numberToHex(chainId),\n      nonce ? numberToHex(nonce) : '0x',\n      maxPriorityFeePerGas ? numberToHex(maxPriorityFeePerGas) : '0x',\n      maxFeePerGas ? numberToHex(maxFeePerGas) : '0x',\n      gas ? numberToHex(gas) : '0x',\n      to ?? '0x',\n      value ? numberToHex(value) : '0x',\n      data ?? '0x',\n      serializedAccessList,\n      serializedAuthorizationList,\n      ...toYParitySignatureArray(transaction, signature),\n    ]),\n  ]) as TransactionSerializedEIP7702\n}\n\ntype SerializeTransactionEIP4844ErrorType =\n  | AssertTransactionEIP4844ErrorType\n  | BlobsToCommitmentsErrorType\n  | CommitmentsToVersionedHashesErrorType\n  | blobsToProofsErrorType\n  | ToBlobSidecarsErrorType\n  | ConcatHexErrorType\n  | InvalidLegacyVErrorType\n  | NumberToHexErrorType\n  | ToRlpErrorType\n  | SerializeAccessListErrorType\n  | ErrorType\n\nfunction serializeTransactionEIP4844(\n  transaction: TransactionSerializableEIP4844,\n  signature?: Signature | undefined,\n): TransactionSerializedEIP4844 {\n  const {\n    chainId,\n    gas,\n    nonce,\n    to,\n    value,\n    maxFeePerBlobGas,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    accessList,\n    data,\n  } = transaction\n\n  assertTransactionEIP4844(transaction)\n\n  let blobVersionedHashes = transaction.blobVersionedHashes\n  let sidecars = transaction.sidecars\n  // If `blobs` are passed, we will need to compute the KZG commitments & proofs.\n  if (\n    transaction.blobs &&\n    (typeof blobVersionedHashes === 'undefined' ||\n      typeof sidecars === 'undefined')\n  ) {\n    const blobs = (\n      typeof transaction.blobs[0] === 'string'\n        ? transaction.blobs\n        : (transaction.blobs as ByteArray[]).map((x) => bytesToHex(x))\n    ) as Hex[]\n    const kzg = transaction.kzg!\n    const commitments = blobsToCommitments({\n      blobs,\n      kzg,\n    })\n\n    if (typeof blobVersionedHashes === 'undefined')\n      blobVersionedHashes = commitmentsToVersionedHashes({\n        commitments,\n      })\n    if (typeof sidecars === 'undefined') {\n      const proofs = blobsToProofs({ blobs, commitments, kzg })\n      sidecars = toBlobSidecars({ blobs, commitments, proofs })\n    }\n  }\n\n  const serializedAccessList = serializeAccessList(accessList)\n\n  const serializedTransaction = [\n    numberToHex(chainId),\n    nonce ? numberToHex(nonce) : '0x',\n    maxPriorityFeePerGas ? numberToHex(maxPriorityFeePerGas) : '0x',\n    maxFeePerGas ? numberToHex(maxFeePerGas) : '0x',\n    gas ? numberToHex(gas) : '0x',\n    to ?? '0x',\n    value ? numberToHex(value) : '0x',\n    data ?? '0x',\n    serializedAccessList,\n    maxFeePerBlobGas ? numberToHex(maxFeePerBlobGas) : '0x',\n    blobVersionedHashes ?? [],\n    ...toYParitySignatureArray(transaction, signature),\n  ] as const\n\n  const blobs: Hex[] = []\n  const commitments: Hex[] = []\n  const proofs: Hex[] = []\n  if (sidecars)\n    for (let i = 0; i < sidecars.length; i++) {\n      const { blob, commitment, proof } = sidecars[i]\n      blobs.push(blob)\n      commitments.push(commitment)\n      proofs.push(proof)\n    }\n\n  return concatHex([\n    '0x03',\n    sidecars\n      ? // If sidecars are enabled, envelope turns into a \"wrapper\":\n        toRlp([serializedTransaction, blobs, commitments, proofs])\n      : // If sidecars are disabled, standard envelope is used:\n        toRlp(serializedTransaction),\n  ]) as TransactionSerializedEIP4844\n}\n\ntype SerializeTransactionEIP1559ErrorType =\n  | AssertTransactionEIP1559ErrorType\n  | ConcatHexErrorType\n  | InvalidLegacyVErrorType\n  | NumberToHexErrorType\n  | ToRlpErrorType\n  | SerializeAccessListErrorType\n  | ErrorType\n\nfunction serializeTransactionEIP1559(\n  transaction: TransactionSerializableEIP1559,\n  signature?: Signature | undefined,\n): TransactionSerializedEIP1559 {\n  const {\n    chainId,\n    gas,\n    nonce,\n    to,\n    value,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    accessList,\n    data,\n  } = transaction\n\n  assertTransactionEIP1559(transaction)\n\n  const serializedAccessList = serializeAccessList(accessList)\n\n  const serializedTransaction = [\n    numberToHex(chainId),\n    nonce ? numberToHex(nonce) : '0x',\n    maxPriorityFeePerGas ? numberToHex(maxPriorityFeePerGas) : '0x',\n    maxFeePerGas ? numberToHex(maxFeePerGas) : '0x',\n    gas ? numberToHex(gas) : '0x',\n    to ?? '0x',\n    value ? numberToHex(value) : '0x',\n    data ?? '0x',\n    serializedAccessList,\n    ...toYParitySignatureArray(transaction, signature),\n  ]\n\n  return concatHex([\n    '0x02',\n    toRlp(serializedTransaction),\n  ]) as TransactionSerializedEIP1559\n}\n\ntype SerializeTransactionEIP2930ErrorType =\n  | AssertTransactionEIP2930ErrorType\n  | ConcatHexErrorType\n  | InvalidLegacyVErrorType\n  | NumberToHexErrorType\n  | ToRlpErrorType\n  | SerializeAccessListErrorType\n  | ErrorType\n\nfunction serializeTransactionEIP2930(\n  transaction: TransactionSerializableEIP2930,\n  signature?: Signature | undefined,\n): TransactionSerializedEIP2930 {\n  const { chainId, gas, data, nonce, to, value, accessList, gasPrice } =\n    transaction\n\n  assertTransactionEIP2930(transaction)\n\n  const serializedAccessList = serializeAccessList(accessList)\n\n  const serializedTransaction = [\n    numberToHex(chainId),\n    nonce ? numberToHex(nonce) : '0x',\n    gasPrice ? numberToHex(gasPrice) : '0x',\n    gas ? numberToHex(gas) : '0x',\n    to ?? '0x',\n    value ? numberToHex(value) : '0x',\n    data ?? '0x',\n    serializedAccessList,\n    ...toYParitySignatureArray(transaction, signature),\n  ]\n\n  return concatHex([\n    '0x01',\n    toRlp(serializedTransaction),\n  ]) as TransactionSerializedEIP2930\n}\n\ntype SerializeTransactionLegacyErrorType =\n  | AssertTransactionLegacyErrorType\n  | InvalidLegacyVErrorType\n  | NumberToHexErrorType\n  | ToRlpErrorType\n  | ErrorType\n\nfunction serializeTransactionLegacy(\n  transaction: TransactionSerializableLegacy,\n  signature?: SignatureLegacy | undefined,\n): TransactionSerializedLegacy {\n  const { chainId = 0, gas, data, nonce, to, value, gasPrice } = transaction\n\n  assertTransactionLegacy(transaction)\n\n  let serializedTransaction = [\n    nonce ? numberToHex(nonce) : '0x',\n    gasPrice ? numberToHex(gasPrice) : '0x',\n    gas ? numberToHex(gas) : '0x',\n    to ?? '0x',\n    value ? numberToHex(value) : '0x',\n    data ?? '0x',\n  ]\n\n  if (signature) {\n    const v = (() => {\n      // EIP-155 (inferred chainId)\n      if (signature.v >= 35n) {\n        const inferredChainId = (signature.v - 35n) / 2n\n        if (inferredChainId > 0) return signature.v\n        return 27n + (signature.v === 35n ? 0n : 1n)\n      }\n\n      // EIP-155 (explicit chainId)\n      if (chainId > 0)\n        return BigInt(chainId * 2) + BigInt(35n + signature.v - 27n)\n\n      // Pre-EIP-155 (no chainId)\n      const v = 27n + (signature.v === 27n ? 0n : 1n)\n      if (signature.v !== v) throw new InvalidLegacyVError({ v: signature.v })\n      return v\n    })()\n\n    const r = trim(signature.r)\n    const s = trim(signature.s)\n\n    serializedTransaction = [\n      ...serializedTransaction,\n      numberToHex(v),\n      r === '0x00' ? '0x' : r,\n      s === '0x00' ? '0x' : s,\n    ]\n  } else if (chainId > 0) {\n    serializedTransaction = [\n      ...serializedTransaction,\n      numberToHex(chainId),\n      '0x',\n      '0x',\n    ]\n  }\n\n  return toRlp(serializedTransaction) as TransactionSerializedLegacy\n}\n\nexport function toYParitySignatureArray(\n  transaction: TransactionSerializableGeneric,\n  signature_?: Signature | undefined,\n) {\n  const signature = signature_ ?? transaction\n  const { v, yParity } = signature\n\n  if (typeof signature.r === 'undefined') return []\n  if (typeof signature.s === 'undefined') return []\n  if (typeof v === 'undefined' && typeof yParity === 'undefined') return []\n\n  const r = trim(signature.r)\n  const s = trim(signature.s)\n\n  const yParity_ = (() => {\n    if (typeof yParity === 'number') return yParity ? numberToHex(1) : '0x'\n    if (v === 0n) return '0x'\n    if (v === 1n) return numberToHex(1)\n\n    return v === 27n ? '0x' : numberToHex(1)\n  })()\n\n  return [yParity_, r === '0x00' ? '0x' : r, s === '0x00' ? '0x' : s]\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}