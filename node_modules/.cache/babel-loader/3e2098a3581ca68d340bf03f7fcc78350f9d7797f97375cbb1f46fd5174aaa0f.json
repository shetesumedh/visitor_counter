{"ast":null,"code":"import { ConnectorNotConnectedError } from '../errors/config.js';\n/** https://wagmi.sh/core/api/actions/switchAccount */\nexport async function switchAccount(config, parameters) {\n  const {\n    connector\n  } = parameters;\n  const connection = config.state.connections.get(connector.uid);\n  if (!connection) throw new ConnectorNotConnectedError();\n  await config.storage?.setItem('recentConnectorId', connector.id);\n  config.setState(x => ({\n    ...x,\n    current: connector.uid\n  }));\n  return {\n    accounts: connection.accounts,\n    chainId: connection.chainId\n  };\n}","map":{"version":3,"names":["ConnectorNotConnectedError","switchAccount","config","parameters","connector","connection","state","connections","get","uid","storage","setItem","id","setState","x","current","accounts","chainId"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/@wagmi/core/src/actions/switchAccount.ts"],"sourcesContent":["import type { Address } from 'viem'\n\nimport type { Config, Connector } from '../createConfig.js'\nimport type { BaseError, ErrorType } from '../errors/base.js'\nimport {\n  ConnectorNotConnectedError,\n  type ConnectorNotConnectedErrorType,\n} from '../errors/config.js'\n\nexport type SwitchAccountParameters = {\n  connector: Connector\n}\n\nexport type SwitchAccountReturnType<config extends Config = Config> = {\n  accounts: readonly [Address, ...Address[]]\n  chainId:\n    | config['chains'][number]['id']\n    | (number extends config['chains'][number]['id'] ? number : number & {})\n}\n\nexport type SwitchAccountErrorType =\n  | ConnectorNotConnectedErrorType\n  | BaseError\n  | ErrorType\n\n/** https://wagmi.sh/core/api/actions/switchAccount */\nexport async function switchAccount<config extends Config>(\n  config: config,\n  parameters: SwitchAccountParameters,\n): Promise<SwitchAccountReturnType<config>> {\n  const { connector } = parameters\n\n  const connection = config.state.connections.get(connector.uid)\n  if (!connection) throw new ConnectorNotConnectedError()\n\n  await config.storage?.setItem('recentConnectorId', connector.id)\n  config.setState((x) => ({\n    ...x,\n    current: connector.uid,\n  }))\n  return {\n    accounts: connection.accounts,\n    chainId: connection.chainId,\n  }\n}\n"],"mappings":"AAIA,SACEA,0BAA0B,QAErB,qBAAqB;AAkB5B;AACA,OAAO,eAAeC,aAAaA,CACjCC,MAAc,EACdC,UAAmC;EAEnC,MAAM;IAAEC;EAAS,CAAE,GAAGD,UAAU;EAEhC,MAAME,UAAU,GAAGH,MAAM,CAACI,KAAK,CAACC,WAAW,CAACC,GAAG,CAACJ,SAAS,CAACK,GAAG,CAAC;EAC9D,IAAI,CAACJ,UAAU,EAAE,MAAM,IAAIL,0BAA0B,EAAE;EAEvD,MAAME,MAAM,CAACQ,OAAO,EAAEC,OAAO,CAAC,mBAAmB,EAAEP,SAAS,CAACQ,EAAE,CAAC;EAChEV,MAAM,CAACW,QAAQ,CAAEC,CAAC,KAAM;IACtB,GAAGA,CAAC;IACJC,OAAO,EAAEX,SAAS,CAACK;GACpB,CAAC,CAAC;EACH,OAAO;IACLO,QAAQ,EAAEX,UAAU,CAACW,QAAQ;IAC7BC,OAAO,EAAEZ,UAAU,CAACY;GACrB;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}