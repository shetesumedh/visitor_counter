{"ast":null,"code":"import { RPC_CALLS } from '../eth/constants.js';\nimport { Methods } from '../communication/methods.js';\nconst inputFormatters = {\n  defaultBlockParam: (arg = 'latest') => arg,\n  returnFullTxObjectParam: (arg = false) => arg,\n  blockNumberToHex: arg => Number.isInteger(arg) ? `0x${arg.toString(16)}` : arg\n};\nclass Eth {\n  constructor(communicator) {\n    this.communicator = communicator;\n    this.call = this.buildRequest({\n      call: RPC_CALLS.eth_call,\n      formatters: [null, inputFormatters.defaultBlockParam]\n    });\n    this.getBalance = this.buildRequest({\n      call: RPC_CALLS.eth_getBalance,\n      formatters: [null, inputFormatters.defaultBlockParam]\n    });\n    this.getCode = this.buildRequest({\n      call: RPC_CALLS.eth_getCode,\n      formatters: [null, inputFormatters.defaultBlockParam]\n    });\n    this.getStorageAt = this.buildRequest({\n      call: RPC_CALLS.eth_getStorageAt,\n      formatters: [null, inputFormatters.blockNumberToHex, inputFormatters.defaultBlockParam]\n    });\n    this.getPastLogs = this.buildRequest({\n      call: RPC_CALLS.eth_getLogs\n    });\n    this.getBlockByHash = this.buildRequest({\n      call: RPC_CALLS.eth_getBlockByHash,\n      formatters: [null, inputFormatters.returnFullTxObjectParam]\n    });\n    this.getBlockByNumber = this.buildRequest({\n      call: RPC_CALLS.eth_getBlockByNumber,\n      formatters: [inputFormatters.blockNumberToHex, inputFormatters.returnFullTxObjectParam]\n    });\n    this.getTransactionByHash = this.buildRequest({\n      call: RPC_CALLS.eth_getTransactionByHash\n    });\n    this.getTransactionReceipt = this.buildRequest({\n      call: RPC_CALLS.eth_getTransactionReceipt\n    });\n    this.getTransactionCount = this.buildRequest({\n      call: RPC_CALLS.eth_getTransactionCount,\n      formatters: [null, inputFormatters.defaultBlockParam]\n    });\n    this.getGasPrice = this.buildRequest({\n      call: RPC_CALLS.eth_gasPrice\n    });\n    this.getEstimateGas = transaction => this.buildRequest({\n      call: RPC_CALLS.eth_estimateGas\n    })([transaction]);\n    this.setSafeSettings = this.buildRequest({\n      call: RPC_CALLS.safe_setSettings\n    });\n  }\n  buildRequest(args) {\n    const {\n      call,\n      formatters\n    } = args;\n    return async params => {\n      if (formatters && Array.isArray(params)) {\n        formatters.forEach((formatter, i) => {\n          if (formatter) {\n            params[i] = formatter(params[i]);\n          }\n        });\n      }\n      const payload = {\n        call,\n        params: params || []\n      };\n      const response = await this.communicator.send(Methods.rpcCall, payload);\n      return response.data;\n    };\n  }\n}\nexport { Eth };","map":{"version":3,"names":["RPC_CALLS","Methods","inputFormatters","defaultBlockParam","arg","returnFullTxObjectParam","blockNumberToHex","Number","isInteger","toString","Eth","constructor","communicator","call","buildRequest","eth_call","formatters","getBalance","eth_getBalance","getCode","eth_getCode","getStorageAt","eth_getStorageAt","getPastLogs","eth_getLogs","getBlockByHash","eth_getBlockByHash","getBlockByNumber","eth_getBlockByNumber","getTransactionByHash","eth_getTransactionByHash","getTransactionReceipt","eth_getTransactionReceipt","getTransactionCount","eth_getTransactionCount","getGasPrice","eth_gasPrice","getEstimateGas","transaction","eth_estimateGas","setSafeSettings","safe_setSettings","args","params","Array","isArray","forEach","formatter","i","payload","response","send","rpcCall","data"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/@safe-global/safe-apps-sdk/src/eth/index.ts"],"sourcesContent":["import { RPC_CALLS } from '../eth/constants.js';\nimport {\n  BlockNumberArg,\n  RpcCallNames,\n  Communicator,\n  Log,\n  BlockTransactionString,\n  BlockTransactionObject,\n  Web3TransactionObject,\n  RPCPayload,\n  TransactionConfig,\n  Web3TransactionReceiptObject,\n  PastLogsOptions,\n  SafeSettings,\n} from '../types/index.js';\nimport { Methods } from '../communication/methods.js';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype Formatter = (arg: any) => any;\n\nconst inputFormatters: Record<string, Formatter> = {\n  defaultBlockParam: (arg = 'latest') => arg,\n  returnFullTxObjectParam: (arg = false): boolean => arg,\n  blockNumberToHex: (arg: BlockNumberArg): string =>\n    Number.isInteger(arg) ? `0x${arg.toString(16)}` : (arg as string),\n};\n\ntype BuildRequestArgs = {\n  call: RpcCallNames;\n  formatters?: (Formatter | null)[];\n};\n\nclass Eth {\n  public call;\n  public getBalance;\n  public getCode;\n  public getStorageAt;\n  public getPastLogs;\n  public getBlockByHash;\n  public getBlockByNumber;\n  public getTransactionByHash;\n  public getTransactionReceipt;\n  public getTransactionCount;\n  public getGasPrice;\n  public getEstimateGas;\n  public setSafeSettings;\n\n  private readonly communicator: Communicator;\n\n  constructor(communicator: Communicator) {\n    this.communicator = communicator;\n    this.call = this.buildRequest<[TransactionConfig, string?], string>({\n      call: RPC_CALLS.eth_call,\n      formatters: [null, inputFormatters.defaultBlockParam],\n    });\n    this.getBalance = this.buildRequest<[string, string?], string>({\n      call: RPC_CALLS.eth_getBalance,\n      formatters: [null, inputFormatters.defaultBlockParam],\n    });\n    this.getCode = this.buildRequest<[string, string?], string>({\n      call: RPC_CALLS.eth_getCode,\n      formatters: [null, inputFormatters.defaultBlockParam],\n    });\n    this.getStorageAt = this.buildRequest<[string, number, string?], string>({\n      call: RPC_CALLS.eth_getStorageAt,\n      formatters: [null, inputFormatters.blockNumberToHex, inputFormatters.defaultBlockParam],\n    });\n    this.getPastLogs = this.buildRequest<[PastLogsOptions], Log[]>({\n      call: RPC_CALLS.eth_getLogs,\n    });\n    this.getBlockByHash = this.buildRequest<[string, boolean?], BlockTransactionString | BlockTransactionObject>({\n      call: RPC_CALLS.eth_getBlockByHash,\n      formatters: [null, inputFormatters.returnFullTxObjectParam],\n    });\n    this.getBlockByNumber = this.buildRequest<\n      [BlockNumberArg, boolean?],\n      BlockTransactionString | BlockTransactionObject\n    >({\n      call: RPC_CALLS.eth_getBlockByNumber,\n      formatters: [inputFormatters.blockNumberToHex, inputFormatters.returnFullTxObjectParam],\n    });\n    this.getTransactionByHash = this.buildRequest<[string], Web3TransactionObject>({\n      call: RPC_CALLS.eth_getTransactionByHash,\n    });\n    this.getTransactionReceipt = this.buildRequest<[string], Web3TransactionReceiptObject>({\n      call: RPC_CALLS.eth_getTransactionReceipt,\n    });\n    this.getTransactionCount = this.buildRequest<[string, string?], string>({\n      call: RPC_CALLS.eth_getTransactionCount,\n      formatters: [null, inputFormatters.defaultBlockParam],\n    });\n    this.getGasPrice = this.buildRequest<never[], string>({\n      call: RPC_CALLS.eth_gasPrice,\n    });\n    this.getEstimateGas = (transaction: TransactionConfig): Promise<number> =>\n      this.buildRequest<[TransactionConfig], number>({\n        call: RPC_CALLS.eth_estimateGas,\n      })([transaction]);\n    this.setSafeSettings = this.buildRequest<[SafeSettings], SafeSettings>({\n      call: RPC_CALLS.safe_setSettings,\n    });\n  }\n\n  private buildRequest<P = never[], R = unknown>(args: BuildRequestArgs) {\n    const { call, formatters } = args;\n\n    return async (params?: P): Promise<R> => {\n      if (formatters && Array.isArray(params)) {\n        formatters.forEach((formatter: ((...args: unknown[]) => unknown) | null, i) => {\n          if (formatter) {\n            params[i] = formatter(params[i]);\n          }\n        });\n      }\n\n      const payload: RPCPayload<P> = {\n        call,\n        params: params || [],\n      };\n\n      const response = await this.communicator.send<Methods.rpcCall, RPCPayload<P>, R>(Methods.rpcCall, payload);\n\n      return response.data;\n    };\n  }\n}\n\nexport { Eth };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}