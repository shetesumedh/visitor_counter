{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.negateCt = negateCt;\nexports.normalizeZ = normalizeZ;\nexports.wNAF = wNAF;\nexports.mulEndoUnsafe = mulEndoUnsafe;\nexports.pippenger = pippenger;\nexports.precomputeMSMUnsafe = precomputeMSMUnsafe;\nexports.validateBasic = validateBasic;\nexports._createCurveFields = _createCurveFields;\n/**\n * Methods for elliptic curve multiplication by scalars.\n * Contains wNAF, pippenger\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nconst utils_ts_1 = require(\"../utils.js\");\nconst modular_ts_1 = require(\"./modular.js\");\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nfunction negateCt(condition, item) {\n  const neg = item.negate();\n  return condition ? neg : item;\n}\n/**\n * Takes a bunch of Projective Points but executes only one\n * inversion on all of them. Inversion is very slow operation,\n * so this improves performance massively.\n * Optimization: converts a list of projective points to a list of identical points with Z=1.\n */\nfunction normalizeZ(c, property, points) {\n  const getz = property === 'pz' ? p => p.pz : p => p.ez;\n  const toInv = (0, modular_ts_1.FpInvertBatch)(c.Fp, points.map(getz));\n  // @ts-ignore\n  const affined = points.map((p, i) => p.toAffine(toInv[i]));\n  return affined.map(c.fromAffine);\n}\nfunction validateW(W, bits) {\n  if (!Number.isSafeInteger(W) || W <= 0 || W > bits) throw new Error('invalid window size, expected [1..' + bits + '], got W=' + W);\n}\nfunction calcWOpts(W, scalarBits) {\n  validateW(W, scalarBits);\n  const windows = Math.ceil(scalarBits / W) + 1; // W=8 33. Not 32, because we skip zero\n  const windowSize = 2 ** (W - 1); // W=8 128. Not 256, because we skip zero\n  const maxNumber = 2 ** W; // W=8 256\n  const mask = (0, utils_ts_1.bitMask)(W); // W=8 255 == mask 0b11111111\n  const shiftBy = BigInt(W); // W=8 8\n  return {\n    windows,\n    windowSize,\n    mask,\n    maxNumber,\n    shiftBy\n  };\n}\nfunction calcOffsets(n, window, wOpts) {\n  const {\n    windowSize,\n    mask,\n    maxNumber,\n    shiftBy\n  } = wOpts;\n  let wbits = Number(n & mask); // extract W bits.\n  let nextN = n >> shiftBy; // shift number by W bits.\n  // What actually happens here:\n  // const highestBit = Number(mask ^ (mask >> 1n));\n  // let wbits2 = wbits - 1; // skip zero\n  // if (wbits2 & highestBit) { wbits2 ^= Number(mask); // (~);\n  // split if bits > max: +224 => 256-32\n  if (wbits > windowSize) {\n    // we skip zero, which means instead of `>= size-1`, we do `> size`\n    wbits -= maxNumber; // -32, can be maxNumber - wbits, but then we need to set isNeg here.\n    nextN += _1n; // +256 (carry)\n  }\n  const offsetStart = window * windowSize;\n  const offset = offsetStart + Math.abs(wbits) - 1; // -1 because we skip zero\n  const isZero = wbits === 0; // is current window slice a 0?\n  const isNeg = wbits < 0; // is current window slice negative?\n  const isNegF = window % 2 !== 0; // fake random statement for noise\n  const offsetF = offsetStart; // fake offset for noise\n  return {\n    nextN,\n    offset,\n    isZero,\n    isNeg,\n    isNegF,\n    offsetF\n  };\n}\nfunction validateMSMPoints(points, c) {\n  if (!Array.isArray(points)) throw new Error('array expected');\n  points.forEach((p, i) => {\n    if (!(p instanceof c)) throw new Error('invalid point at index ' + i);\n  });\n}\nfunction validateMSMScalars(scalars, field) {\n  if (!Array.isArray(scalars)) throw new Error('array of scalars expected');\n  scalars.forEach((s, i) => {\n    if (!field.isValid(s)) throw new Error('invalid scalar at index ' + i);\n  });\n}\n// Since points in different groups cannot be equal (different object constructor),\n// we can have single place to store precomputes.\n// Allows to make points frozen / immutable.\nconst pointPrecomputes = new WeakMap();\nconst pointWindowSizes = new WeakMap();\nfunction getW(P) {\n  return pointWindowSizes.get(P) || 1;\n}\nfunction assert0(n) {\n  if (n !== _0n) throw new Error('invalid wNAF');\n}\n/**\n * Elliptic curve multiplication of Point by scalar. Fragile.\n * Scalars should always be less than curve order: this should be checked inside of a curve itself.\n * Creates precomputation tables for fast multiplication:\n * - private scalar is split by fixed size windows of W bits\n * - every window point is collected from window's table & added to accumulator\n * - since windows are different, same point inside tables won't be accessed more than once per calc\n * - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n * - +1 window is neccessary for wNAF\n * - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n *\n * @todo Research returning 2d JS array of windows, instead of a single window.\n * This would allow windows to be in different memory locations\n */\nfunction wNAF(c, bits) {\n  return {\n    constTimeNegate: negateCt,\n    hasPrecomputes(elm) {\n      return getW(elm) !== 1;\n    },\n    // non-const time multiplication ladder\n    unsafeLadder(elm, n, p = c.ZERO) {\n      let d = elm;\n      while (n > _0n) {\n        if (n & _1n) p = p.add(d);\n        d = d.double();\n        n >>= _1n;\n      }\n      return p;\n    },\n    /**\n     * Creates a wNAF precomputation window. Used for caching.\n     * Default window size is set by `utils.precompute()` and is equal to 8.\n     * Number of precomputed points depends on the curve size:\n     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n     * - 𝑊 is the window size\n     * - 𝑛 is the bitlength of the curve order.\n     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n     * @param elm Point instance\n     * @param W window size\n     * @returns precomputed point tables flattened to a single array\n     */\n    precomputeWindow(elm, W) {\n      const {\n        windows,\n        windowSize\n      } = calcWOpts(W, bits);\n      const points = [];\n      let p = elm;\n      let base = p;\n      for (let window = 0; window < windows; window++) {\n        base = p;\n        points.push(base);\n        // i=1, bc we skip 0\n        for (let i = 1; i < windowSize; i++) {\n          base = base.add(p);\n          points.push(base);\n        }\n        p = base.double();\n      }\n      return points;\n    },\n    /**\n     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param W window size\n     * @param precomputes precomputed tables\n     * @param n scalar (we don't check here, but should be less than curve order)\n     * @returns real and fake (for const-time) points\n     */\n    wNAF(W, precomputes, n) {\n      // Smaller version:\n      // https://github.com/paulmillr/noble-secp256k1/blob/47cb1669b6e506ad66b35fe7d76132ae97465da2/index.ts#L502-L541\n      // TODO: check the scalar is less than group order?\n      // wNAF behavior is undefined otherwise. But have to carefully remove\n      // other checks before wNAF. ORDER == bits here.\n      // Accumulators\n      let p = c.ZERO;\n      let f = c.BASE;\n      // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n      // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n      // there is negate now: it is possible that negated element from low value\n      // would be the same as high element, which will create carry into next window.\n      // It's not obvious how this can fail, but still worth investigating later.\n      const wo = calcWOpts(W, bits);\n      for (let window = 0; window < wo.windows; window++) {\n        // (n === _0n) is handled and not early-exited. isEven and offsetF are used for noise\n        const {\n          nextN,\n          offset,\n          isZero,\n          isNeg,\n          isNegF,\n          offsetF\n        } = calcOffsets(n, window, wo);\n        n = nextN;\n        if (isZero) {\n          // bits are 0: add garbage to fake point\n          // Important part for const-time getPublicKey: add random \"noise\" point to f.\n          f = f.add(negateCt(isNegF, precomputes[offsetF]));\n        } else {\n          // bits are 1: add to result point\n          p = p.add(negateCt(isNeg, precomputes[offset]));\n        }\n      }\n      assert0(n);\n      // Return both real and fake points: JIT won't eliminate f.\n      // At this point there is a way to F be infinity-point even if p is not,\n      // which makes it less const-time: around 1 bigint multiply.\n      return {\n        p,\n        f\n      };\n    },\n    /**\n     * Implements ec unsafe (non const-time) multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param W window size\n     * @param precomputes precomputed tables\n     * @param n scalar (we don't check here, but should be less than curve order)\n     * @param acc accumulator point to add result of multiplication\n     * @returns point\n     */\n    wNAFUnsafe(W, precomputes, n, acc = c.ZERO) {\n      const wo = calcWOpts(W, bits);\n      for (let window = 0; window < wo.windows; window++) {\n        if (n === _0n) break; // Early-exit, skip 0 value\n        const {\n          nextN,\n          offset,\n          isZero,\n          isNeg\n        } = calcOffsets(n, window, wo);\n        n = nextN;\n        if (isZero) {\n          // Window bits are 0: skip processing.\n          // Move to next window.\n          continue;\n        } else {\n          const item = precomputes[offset];\n          acc = acc.add(isNeg ? item.negate() : item); // Re-using acc allows to save adds in MSM\n        }\n      }\n      assert0(n);\n      return acc;\n    },\n    getPrecomputes(W, P, transform) {\n      // Calculate precomputes on a first run, reuse them after\n      let comp = pointPrecomputes.get(P);\n      if (!comp) {\n        comp = this.precomputeWindow(P, W);\n        if (W !== 1) {\n          // Doing transform outside of if brings 15% perf hit\n          if (typeof transform === 'function') comp = transform(comp);\n          pointPrecomputes.set(P, comp);\n        }\n      }\n      return comp;\n    },\n    wNAFCached(P, n, transform) {\n      const W = getW(P);\n      return this.wNAF(W, this.getPrecomputes(W, P, transform), n);\n    },\n    wNAFCachedUnsafe(P, n, transform, prev) {\n      const W = getW(P);\n      if (W === 1) return this.unsafeLadder(P, n, prev); // For W=1 ladder is ~x2 faster\n      return this.wNAFUnsafe(W, this.getPrecomputes(W, P, transform), n, prev);\n    },\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n    setWindowSize(P, W) {\n      validateW(W, bits);\n      pointWindowSizes.set(P, W);\n      pointPrecomputes.delete(P);\n    }\n  };\n}\n/**\n * Endomorphism-specific multiplication for Koblitz curves.\n * Cost: 128 dbl, 0-256 adds.\n */\nfunction mulEndoUnsafe(c, point, k1, k2) {\n  let acc = point;\n  let p1 = c.ZERO;\n  let p2 = c.ZERO;\n  while (k1 > _0n || k2 > _0n) {\n    if (k1 & _1n) p1 = p1.add(acc);\n    if (k2 & _1n) p2 = p2.add(acc);\n    acc = acc.double();\n    k1 >>= _1n;\n    k2 >>= _1n;\n  }\n  return {\n    p1,\n    p2\n  };\n}\n/**\n * Pippenger algorithm for multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * 30x faster vs naive addition on L=4096, 10x faster than precomputes.\n * For N=254bit, L=1, it does: 1024 ADD + 254 DBL. For L=5: 1536 ADD + 254 DBL.\n * Algorithmically constant-time (for same L), even when 1 point + scalar, or when scalar = 0.\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @param scalars array of L scalars (aka private keys / bigints)\n */\nfunction pippenger(c, fieldN, points, scalars) {\n  // If we split scalars by some window (let's say 8 bits), every chunk will only\n  // take 256 buckets even if there are 4096 scalars, also re-uses double.\n  // TODO:\n  // - https://eprint.iacr.org/2024/750.pdf\n  // - https://tches.iacr.org/index.php/TCHES/article/view/10287\n  // 0 is accepted in scalars\n  validateMSMPoints(points, c);\n  validateMSMScalars(scalars, fieldN);\n  const plength = points.length;\n  const slength = scalars.length;\n  if (plength !== slength) throw new Error('arrays of points and scalars must have equal length');\n  // if (plength === 0) throw new Error('array must be of length >= 2');\n  const zero = c.ZERO;\n  const wbits = (0, utils_ts_1.bitLen)(BigInt(plength));\n  let windowSize = 1; // bits\n  if (wbits > 12) windowSize = wbits - 3;else if (wbits > 4) windowSize = wbits - 2;else if (wbits > 0) windowSize = 2;\n  const MASK = (0, utils_ts_1.bitMask)(windowSize);\n  const buckets = new Array(Number(MASK) + 1).fill(zero); // +1 for zero array\n  const lastBits = Math.floor((fieldN.BITS - 1) / windowSize) * windowSize;\n  let sum = zero;\n  for (let i = lastBits; i >= 0; i -= windowSize) {\n    buckets.fill(zero);\n    for (let j = 0; j < slength; j++) {\n      const scalar = scalars[j];\n      const wbits = Number(scalar >> BigInt(i) & MASK);\n      buckets[wbits] = buckets[wbits].add(points[j]);\n    }\n    let resI = zero; // not using this will do small speed-up, but will lose ct\n    // Skip first bucket, because it is zero\n    for (let j = buckets.length - 1, sumI = zero; j > 0; j--) {\n      sumI = sumI.add(buckets[j]);\n      resI = resI.add(sumI);\n    }\n    sum = sum.add(resI);\n    if (i !== 0) for (let j = 0; j < windowSize; j++) sum = sum.double();\n  }\n  return sum;\n}\n/**\n * Precomputed multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @returns function which multiplies points with scaars\n */\nfunction precomputeMSMUnsafe(c, fieldN, points, windowSize) {\n  /**\n   * Performance Analysis of Window-based Precomputation\n   *\n   * Base Case (256-bit scalar, 8-bit window):\n   * - Standard precomputation requires:\n   *   - 31 additions per scalar × 256 scalars = 7,936 ops\n   *   - Plus 255 summary additions = 8,191 total ops\n   *   Note: Summary additions can be optimized via accumulator\n   *\n   * Chunked Precomputation Analysis:\n   * - Using 32 chunks requires:\n   *   - 255 additions per chunk\n   *   - 256 doublings\n   *   - Total: (255 × 32) + 256 = 8,416 ops\n   *\n   * Memory Usage Comparison:\n   * Window Size | Standard Points | Chunked Points\n   * ------------|-----------------|---------------\n   *     4-bit   |     520         |      15\n   *     8-bit   |    4,224        |     255\n   *    10-bit   |   13,824        |   1,023\n   *    16-bit   |  557,056        |  65,535\n   *\n   * Key Advantages:\n   * 1. Enables larger window sizes due to reduced memory overhead\n   * 2. More efficient for smaller scalar counts:\n   *    - 16 chunks: (16 × 255) + 256 = 4,336 ops\n   *    - ~2x faster than standard 8,191 ops\n   *\n   * Limitations:\n   * - Not suitable for plain precomputes (requires 256 constant doublings)\n   * - Performance degrades with larger scalar counts:\n   *   - Optimal for ~256 scalars\n   *   - Less efficient for 4096+ scalars (Pippenger preferred)\n   */\n  validateW(windowSize, fieldN.BITS);\n  validateMSMPoints(points, c);\n  const zero = c.ZERO;\n  const tableSize = 2 ** windowSize - 1; // table size (without zero)\n  const chunks = Math.ceil(fieldN.BITS / windowSize); // chunks of item\n  const MASK = (0, utils_ts_1.bitMask)(windowSize);\n  const tables = points.map(p => {\n    const res = [];\n    for (let i = 0, acc = p; i < tableSize; i++) {\n      res.push(acc);\n      acc = acc.add(p);\n    }\n    return res;\n  });\n  return scalars => {\n    validateMSMScalars(scalars, fieldN);\n    if (scalars.length > points.length) throw new Error('array of scalars must be smaller than array of points');\n    let res = zero;\n    for (let i = 0; i < chunks; i++) {\n      // No need to double if accumulator is still zero.\n      if (res !== zero) for (let j = 0; j < windowSize; j++) res = res.double();\n      const shiftBy = BigInt(chunks * windowSize - (i + 1) * windowSize);\n      for (let j = 0; j < scalars.length; j++) {\n        const n = scalars[j];\n        const curr = Number(n >> shiftBy & MASK);\n        if (!curr) continue; // skip zero scalars chunks\n        res = res.add(tables[j][curr - 1]);\n      }\n    }\n    return res;\n  };\n}\n// TODO: remove\n/** @deprecated */\nfunction validateBasic(curve) {\n  (0, modular_ts_1.validateField)(curve.Fp);\n  (0, utils_ts_1.validateObject)(curve, {\n    n: 'bigint',\n    h: 'bigint',\n    Gx: 'field',\n    Gy: 'field'\n  }, {\n    nBitLength: 'isSafeInteger',\n    nByteLength: 'isSafeInteger'\n  });\n  // Set defaults\n  return Object.freeze({\n    ...(0, modular_ts_1.nLength)(curve.n, curve.nBitLength),\n    ...curve,\n    ...{\n      p: curve.Fp.ORDER\n    }\n  });\n}\nfunction createField(order, field) {\n  if (field) {\n    if (field.ORDER !== order) throw new Error('Field.ORDER must match order: Fp == p, Fn == n');\n    (0, modular_ts_1.validateField)(field);\n    return field;\n  } else {\n    return (0, modular_ts_1.Field)(order);\n  }\n}\n/** Validates CURVE opts and creates fields */\nfunction _createCurveFields(type, CURVE, curveOpts = {}) {\n  if (!CURVE || typeof CURVE !== 'object') throw new Error(`expected valid ${type} CURVE object`);\n  for (const p of ['p', 'n', 'h']) {\n    const val = CURVE[p];\n    if (!(typeof val === 'bigint' && val > _0n)) throw new Error(`CURVE.${p} must be positive bigint`);\n  }\n  const Fp = createField(CURVE.p, curveOpts.Fp);\n  const Fn = createField(CURVE.n, curveOpts.Fn);\n  const _b = type === 'weierstrass' ? 'b' : 'd';\n  const params = ['Gx', 'Gy', 'a', _b];\n  for (const p of params) {\n    // @ts-ignore\n    if (!Fp.isValid(CURVE[p])) throw new Error(`CURVE.${p} must be valid field element of CURVE.Fp`);\n  }\n  return {\n    Fp,\n    Fn\n  };\n}","map":{"version":3,"names":["exports","negateCt","normalizeZ","wNAF","mulEndoUnsafe","pippenger","precomputeMSMUnsafe","validateBasic","_createCurveFields","utils_ts_1","require","modular_ts_1","_0n","BigInt","_1n","condition","item","neg","negate","c","property","points","getz","p","pz","ez","toInv","FpInvertBatch","Fp","map","affined","i","toAffine","fromAffine","validateW","W","bits","Number","isSafeInteger","Error","calcWOpts","scalarBits","windows","Math","ceil","windowSize","maxNumber","mask","bitMask","shiftBy","calcOffsets","n","window","wOpts","wbits","nextN","offsetStart","offset","abs","isZero","isNeg","isNegF","offsetF","validateMSMPoints","Array","isArray","forEach","validateMSMScalars","scalars","field","s","isValid","pointPrecomputes","WeakMap","pointWindowSizes","getW","P","get","assert0","constTimeNegate","hasPrecomputes","elm","unsafeLadder","ZERO","d","add","double","precomputeWindow","base","push","precomputes","f","BASE","wo","wNAFUnsafe","acc","getPrecomputes","transform","comp","set","wNAFCached","wNAFCachedUnsafe","prev","setWindowSize","delete","point","k1","k2","p1","p2","fieldN","plength","length","slength","zero","bitLen","MASK","buckets","fill","lastBits","floor","BITS","sum","j","scalar","resI","sumI","tableSize","chunks","tables","res","curr","curve","validateField","validateObject","h","Gx","Gy","nBitLength","nByteLength","Object","freeze","nLength","ORDER","createField","order","Field","type","CURVE","curveOpts","val","Fn","_b","params"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/viem/node_modules/@noble/curves/src/abstract/curve.ts"],"sourcesContent":["/**\n * Methods for elliptic curve multiplication by scalars.\n * Contains wNAF, pippenger\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { bitLen, bitMask, validateObject } from '../utils.ts';\nimport { Field, FpInvertBatch, type IField, nLength, validateField } from './modular.ts';\n\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n\nexport type AffinePoint<T> = {\n  x: T;\n  y: T;\n} & { z?: never; t?: never };\n\nexport interface Group<T extends Group<T>> {\n  double(): T;\n  negate(): T;\n  add(other: T): T;\n  subtract(other: T): T;\n  equals(other: T): boolean;\n  multiply(scalar: bigint): T;\n  toAffine?(invertedZ?: any): AffinePoint<any>;\n}\n\nexport type GroupConstructor<T> = {\n  BASE: T;\n  ZERO: T;\n};\nexport type ExtendedGroupConstructor<T> = GroupConstructor<T> & {\n  Fp: IField<any>;\n  Fn: IField<bigint>;\n  fromAffine(ap: AffinePoint<any>): T;\n};\nexport type Mapper<T> = (i: T[]) => T[];\n\nexport function negateCt<T extends Group<T>>(condition: boolean, item: T): T {\n  const neg = item.negate();\n  return condition ? neg : item;\n}\n\n/**\n * Takes a bunch of Projective Points but executes only one\n * inversion on all of them. Inversion is very slow operation,\n * so this improves performance massively.\n * Optimization: converts a list of projective points to a list of identical points with Z=1.\n */\nexport function normalizeZ<T>(\n  c: ExtendedGroupConstructor<T>,\n  property: 'pz' | 'ez',\n  points: T[]\n): T[] {\n  const getz = property === 'pz' ? (p: any) => p.pz : (p: any) => p.ez;\n  const toInv = FpInvertBatch(c.Fp, points.map(getz));\n  // @ts-ignore\n  const affined = points.map((p, i) => p.toAffine(toInv[i]));\n  return affined.map(c.fromAffine);\n}\n\nfunction validateW(W: number, bits: number) {\n  if (!Number.isSafeInteger(W) || W <= 0 || W > bits)\n    throw new Error('invalid window size, expected [1..' + bits + '], got W=' + W);\n}\n\n/** Internal wNAF opts for specific W and scalarBits */\nexport type WOpts = {\n  windows: number;\n  windowSize: number;\n  mask: bigint;\n  maxNumber: number;\n  shiftBy: bigint;\n};\n\nfunction calcWOpts(W: number, scalarBits: number): WOpts {\n  validateW(W, scalarBits);\n  const windows = Math.ceil(scalarBits / W) + 1; // W=8 33. Not 32, because we skip zero\n  const windowSize = 2 ** (W - 1); // W=8 128. Not 256, because we skip zero\n  const maxNumber = 2 ** W; // W=8 256\n  const mask = bitMask(W); // W=8 255 == mask 0b11111111\n  const shiftBy = BigInt(W); // W=8 8\n  return { windows, windowSize, mask, maxNumber, shiftBy };\n}\n\nfunction calcOffsets(n: bigint, window: number, wOpts: WOpts) {\n  const { windowSize, mask, maxNumber, shiftBy } = wOpts;\n  let wbits = Number(n & mask); // extract W bits.\n  let nextN = n >> shiftBy; // shift number by W bits.\n\n  // What actually happens here:\n  // const highestBit = Number(mask ^ (mask >> 1n));\n  // let wbits2 = wbits - 1; // skip zero\n  // if (wbits2 & highestBit) { wbits2 ^= Number(mask); // (~);\n\n  // split if bits > max: +224 => 256-32\n  if (wbits > windowSize) {\n    // we skip zero, which means instead of `>= size-1`, we do `> size`\n    wbits -= maxNumber; // -32, can be maxNumber - wbits, but then we need to set isNeg here.\n    nextN += _1n; // +256 (carry)\n  }\n  const offsetStart = window * windowSize;\n  const offset = offsetStart + Math.abs(wbits) - 1; // -1 because we skip zero\n  const isZero = wbits === 0; // is current window slice a 0?\n  const isNeg = wbits < 0; // is current window slice negative?\n  const isNegF = window % 2 !== 0; // fake random statement for noise\n  const offsetF = offsetStart; // fake offset for noise\n  return { nextN, offset, isZero, isNeg, isNegF, offsetF };\n}\n\nfunction validateMSMPoints(points: any[], c: any) {\n  if (!Array.isArray(points)) throw new Error('array expected');\n  points.forEach((p, i) => {\n    if (!(p instanceof c)) throw new Error('invalid point at index ' + i);\n  });\n}\nfunction validateMSMScalars(scalars: any[], field: any) {\n  if (!Array.isArray(scalars)) throw new Error('array of scalars expected');\n  scalars.forEach((s, i) => {\n    if (!field.isValid(s)) throw new Error('invalid scalar at index ' + i);\n  });\n}\n\n// Since points in different groups cannot be equal (different object constructor),\n// we can have single place to store precomputes.\n// Allows to make points frozen / immutable.\nconst pointPrecomputes = new WeakMap<any, any[]>();\nconst pointWindowSizes = new WeakMap<any, number>();\n\nfunction getW(P: any): number {\n  return pointWindowSizes.get(P) || 1;\n}\n\nfunction assert0(n: bigint): void {\n  if (n !== _0n) throw new Error('invalid wNAF');\n}\n\nexport type IWNAF<T extends Group<T>> = {\n  constTimeNegate: <T extends Group<T>>(condition: boolean, item: T) => T;\n  hasPrecomputes(elm: T): boolean;\n  unsafeLadder(elm: T, n: bigint, p?: T): T;\n  precomputeWindow(elm: T, W: number): Group<T>[];\n  getPrecomputes(W: number, P: T, transform?: Mapper<T>): T[];\n  wNAF(W: number, precomputes: T[], n: bigint): { p: T; f: T };\n  wNAFUnsafe(W: number, precomputes: T[], n: bigint, acc?: T): T;\n  wNAFCached(P: T, n: bigint, transform?: Mapper<T>): { p: T; f: T };\n  wNAFCachedUnsafe(P: T, n: bigint, transform?: Mapper<T>, prev?: T): T;\n  setWindowSize(P: T, W: number): void;\n};\n\n/**\n * Elliptic curve multiplication of Point by scalar. Fragile.\n * Scalars should always be less than curve order: this should be checked inside of a curve itself.\n * Creates precomputation tables for fast multiplication:\n * - private scalar is split by fixed size windows of W bits\n * - every window point is collected from window's table & added to accumulator\n * - since windows are different, same point inside tables won't be accessed more than once per calc\n * - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n * - +1 window is neccessary for wNAF\n * - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n *\n * @todo Research returning 2d JS array of windows, instead of a single window.\n * This would allow windows to be in different memory locations\n */\nexport function wNAF<T extends Group<T>>(c: GroupConstructor<T>, bits: number): IWNAF<T> {\n  return {\n    constTimeNegate: negateCt,\n\n    hasPrecomputes(elm: T) {\n      return getW(elm) !== 1;\n    },\n\n    // non-const time multiplication ladder\n    unsafeLadder(elm: T, n: bigint, p = c.ZERO) {\n      let d: T = elm;\n      while (n > _0n) {\n        if (n & _1n) p = p.add(d);\n        d = d.double();\n        n >>= _1n;\n      }\n      return p;\n    },\n\n    /**\n     * Creates a wNAF precomputation window. Used for caching.\n     * Default window size is set by `utils.precompute()` and is equal to 8.\n     * Number of precomputed points depends on the curve size:\n     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n     * - 𝑊 is the window size\n     * - 𝑛 is the bitlength of the curve order.\n     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n     * @param elm Point instance\n     * @param W window size\n     * @returns precomputed point tables flattened to a single array\n     */\n    precomputeWindow(elm: T, W: number): Group<T>[] {\n      const { windows, windowSize } = calcWOpts(W, bits);\n      const points: T[] = [];\n      let p: T = elm;\n      let base = p;\n      for (let window = 0; window < windows; window++) {\n        base = p;\n        points.push(base);\n        // i=1, bc we skip 0\n        for (let i = 1; i < windowSize; i++) {\n          base = base.add(p);\n          points.push(base);\n        }\n        p = base.double();\n      }\n      return points;\n    },\n\n    /**\n     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param W window size\n     * @param precomputes precomputed tables\n     * @param n scalar (we don't check here, but should be less than curve order)\n     * @returns real and fake (for const-time) points\n     */\n    wNAF(W: number, precomputes: T[], n: bigint): { p: T; f: T } {\n      // Smaller version:\n      // https://github.com/paulmillr/noble-secp256k1/blob/47cb1669b6e506ad66b35fe7d76132ae97465da2/index.ts#L502-L541\n      // TODO: check the scalar is less than group order?\n      // wNAF behavior is undefined otherwise. But have to carefully remove\n      // other checks before wNAF. ORDER == bits here.\n      // Accumulators\n      let p = c.ZERO;\n      let f = c.BASE;\n      // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n      // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n      // there is negate now: it is possible that negated element from low value\n      // would be the same as high element, which will create carry into next window.\n      // It's not obvious how this can fail, but still worth investigating later.\n      const wo = calcWOpts(W, bits);\n      for (let window = 0; window < wo.windows; window++) {\n        // (n === _0n) is handled and not early-exited. isEven and offsetF are used for noise\n        const { nextN, offset, isZero, isNeg, isNegF, offsetF } = calcOffsets(n, window, wo);\n        n = nextN;\n        if (isZero) {\n          // bits are 0: add garbage to fake point\n          // Important part for const-time getPublicKey: add random \"noise\" point to f.\n          f = f.add(negateCt(isNegF, precomputes[offsetF]));\n        } else {\n          // bits are 1: add to result point\n          p = p.add(negateCt(isNeg, precomputes[offset]));\n        }\n      }\n      assert0(n);\n      // Return both real and fake points: JIT won't eliminate f.\n      // At this point there is a way to F be infinity-point even if p is not,\n      // which makes it less const-time: around 1 bigint multiply.\n      return { p, f };\n    },\n\n    /**\n     * Implements ec unsafe (non const-time) multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param W window size\n     * @param precomputes precomputed tables\n     * @param n scalar (we don't check here, but should be less than curve order)\n     * @param acc accumulator point to add result of multiplication\n     * @returns point\n     */\n    wNAFUnsafe(W: number, precomputes: T[], n: bigint, acc: T = c.ZERO): T {\n      const wo = calcWOpts(W, bits);\n      for (let window = 0; window < wo.windows; window++) {\n        if (n === _0n) break; // Early-exit, skip 0 value\n        const { nextN, offset, isZero, isNeg } = calcOffsets(n, window, wo);\n        n = nextN;\n        if (isZero) {\n          // Window bits are 0: skip processing.\n          // Move to next window.\n          continue;\n        } else {\n          const item = precomputes[offset];\n          acc = acc.add(isNeg ? item.negate() : item); // Re-using acc allows to save adds in MSM\n        }\n      }\n      assert0(n);\n      return acc;\n    },\n\n    getPrecomputes(W: number, P: T, transform?: Mapper<T>): T[] {\n      // Calculate precomputes on a first run, reuse them after\n      let comp = pointPrecomputes.get(P);\n      if (!comp) {\n        comp = this.precomputeWindow(P, W) as T[];\n        if (W !== 1) {\n          // Doing transform outside of if brings 15% perf hit\n          if (typeof transform === 'function') comp = transform(comp);\n          pointPrecomputes.set(P, comp);\n        }\n      }\n      return comp;\n    },\n\n    wNAFCached(P: T, n: bigint, transform?: Mapper<T>): { p: T; f: T } {\n      const W = getW(P);\n      return this.wNAF(W, this.getPrecomputes(W, P, transform), n);\n    },\n\n    wNAFCachedUnsafe(P: T, n: bigint, transform?: Mapper<T>, prev?: T): T {\n      const W = getW(P);\n      if (W === 1) return this.unsafeLadder(P, n, prev); // For W=1 ladder is ~x2 faster\n      return this.wNAFUnsafe(W, this.getPrecomputes(W, P, transform), n, prev);\n    },\n\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n\n    setWindowSize(P: T, W: number) {\n      validateW(W, bits);\n      pointWindowSizes.set(P, W);\n      pointPrecomputes.delete(P);\n    },\n  };\n}\n\n/**\n * Endomorphism-specific multiplication for Koblitz curves.\n * Cost: 128 dbl, 0-256 adds.\n */\nexport function mulEndoUnsafe<T extends Group<T>>(\n  c: GroupConstructor<T>,\n  point: T,\n  k1: bigint,\n  k2: bigint\n): { p1: T; p2: T } {\n  let acc = point;\n  let p1 = c.ZERO;\n  let p2 = c.ZERO;\n  while (k1 > _0n || k2 > _0n) {\n    if (k1 & _1n) p1 = p1.add(acc);\n    if (k2 & _1n) p2 = p2.add(acc);\n    acc = acc.double();\n    k1 >>= _1n;\n    k2 >>= _1n;\n  }\n  return { p1, p2 };\n}\n\n/**\n * Pippenger algorithm for multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * 30x faster vs naive addition on L=4096, 10x faster than precomputes.\n * For N=254bit, L=1, it does: 1024 ADD + 254 DBL. For L=5: 1536 ADD + 254 DBL.\n * Algorithmically constant-time (for same L), even when 1 point + scalar, or when scalar = 0.\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @param scalars array of L scalars (aka private keys / bigints)\n */\nexport function pippenger<T extends Group<T>>(\n  c: GroupConstructor<T>,\n  fieldN: IField<bigint>,\n  points: T[],\n  scalars: bigint[]\n): T {\n  // If we split scalars by some window (let's say 8 bits), every chunk will only\n  // take 256 buckets even if there are 4096 scalars, also re-uses double.\n  // TODO:\n  // - https://eprint.iacr.org/2024/750.pdf\n  // - https://tches.iacr.org/index.php/TCHES/article/view/10287\n  // 0 is accepted in scalars\n  validateMSMPoints(points, c);\n  validateMSMScalars(scalars, fieldN);\n  const plength = points.length;\n  const slength = scalars.length;\n  if (plength !== slength) throw new Error('arrays of points and scalars must have equal length');\n  // if (plength === 0) throw new Error('array must be of length >= 2');\n  const zero = c.ZERO;\n  const wbits = bitLen(BigInt(plength));\n  let windowSize = 1; // bits\n  if (wbits > 12) windowSize = wbits - 3;\n  else if (wbits > 4) windowSize = wbits - 2;\n  else if (wbits > 0) windowSize = 2;\n  const MASK = bitMask(windowSize);\n  const buckets = new Array(Number(MASK) + 1).fill(zero); // +1 for zero array\n  const lastBits = Math.floor((fieldN.BITS - 1) / windowSize) * windowSize;\n  let sum = zero;\n  for (let i = lastBits; i >= 0; i -= windowSize) {\n    buckets.fill(zero);\n    for (let j = 0; j < slength; j++) {\n      const scalar = scalars[j];\n      const wbits = Number((scalar >> BigInt(i)) & MASK);\n      buckets[wbits] = buckets[wbits].add(points[j]);\n    }\n    let resI = zero; // not using this will do small speed-up, but will lose ct\n    // Skip first bucket, because it is zero\n    for (let j = buckets.length - 1, sumI = zero; j > 0; j--) {\n      sumI = sumI.add(buckets[j]);\n      resI = resI.add(sumI);\n    }\n    sum = sum.add(resI);\n    if (i !== 0) for (let j = 0; j < windowSize; j++) sum = sum.double();\n  }\n  return sum as T;\n}\n/**\n * Precomputed multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @returns function which multiplies points with scaars\n */\nexport function precomputeMSMUnsafe<T extends Group<T>>(\n  c: GroupConstructor<T>,\n  fieldN: IField<bigint>,\n  points: T[],\n  windowSize: number\n): (scalars: bigint[]) => T {\n  /**\n   * Performance Analysis of Window-based Precomputation\n   *\n   * Base Case (256-bit scalar, 8-bit window):\n   * - Standard precomputation requires:\n   *   - 31 additions per scalar × 256 scalars = 7,936 ops\n   *   - Plus 255 summary additions = 8,191 total ops\n   *   Note: Summary additions can be optimized via accumulator\n   *\n   * Chunked Precomputation Analysis:\n   * - Using 32 chunks requires:\n   *   - 255 additions per chunk\n   *   - 256 doublings\n   *   - Total: (255 × 32) + 256 = 8,416 ops\n   *\n   * Memory Usage Comparison:\n   * Window Size | Standard Points | Chunked Points\n   * ------------|-----------------|---------------\n   *     4-bit   |     520         |      15\n   *     8-bit   |    4,224        |     255\n   *    10-bit   |   13,824        |   1,023\n   *    16-bit   |  557,056        |  65,535\n   *\n   * Key Advantages:\n   * 1. Enables larger window sizes due to reduced memory overhead\n   * 2. More efficient for smaller scalar counts:\n   *    - 16 chunks: (16 × 255) + 256 = 4,336 ops\n   *    - ~2x faster than standard 8,191 ops\n   *\n   * Limitations:\n   * - Not suitable for plain precomputes (requires 256 constant doublings)\n   * - Performance degrades with larger scalar counts:\n   *   - Optimal for ~256 scalars\n   *   - Less efficient for 4096+ scalars (Pippenger preferred)\n   */\n  validateW(windowSize, fieldN.BITS);\n  validateMSMPoints(points, c);\n  const zero = c.ZERO;\n  const tableSize = 2 ** windowSize - 1; // table size (without zero)\n  const chunks = Math.ceil(fieldN.BITS / windowSize); // chunks of item\n  const MASK = bitMask(windowSize);\n  const tables = points.map((p: T) => {\n    const res = [];\n    for (let i = 0, acc = p; i < tableSize; i++) {\n      res.push(acc);\n      acc = acc.add(p);\n    }\n    return res;\n  });\n  return (scalars: bigint[]): T => {\n    validateMSMScalars(scalars, fieldN);\n    if (scalars.length > points.length)\n      throw new Error('array of scalars must be smaller than array of points');\n    let res = zero;\n    for (let i = 0; i < chunks; i++) {\n      // No need to double if accumulator is still zero.\n      if (res !== zero) for (let j = 0; j < windowSize; j++) res = res.double();\n      const shiftBy = BigInt(chunks * windowSize - (i + 1) * windowSize);\n      for (let j = 0; j < scalars.length; j++) {\n        const n = scalars[j];\n        const curr = Number((n >> shiftBy) & MASK);\n        if (!curr) continue; // skip zero scalars chunks\n        res = res.add(tables[j][curr - 1]);\n      }\n    }\n    return res;\n  };\n}\n\n/**\n * Generic BasicCurve interface: works even for polynomial fields (BLS): P, n, h would be ok.\n * Though generator can be different (Fp2 / Fp6 for BLS).\n */\nexport type BasicCurve<T> = {\n  Fp: IField<T>; // Field over which we'll do calculations (Fp)\n  n: bigint; // Curve order, total count of valid points in the field\n  nBitLength?: number; // bit length of curve order\n  nByteLength?: number; // byte length of curve order\n  h: bigint; // cofactor. we can assign default=1, but users will just ignore it w/o validation\n  hEff?: bigint; // Number to multiply to clear cofactor\n  Gx: T; // base point X coordinate\n  Gy: T; // base point Y coordinate\n  allowInfinityPoint?: boolean; // bls12-381 requires it. ZERO point is valid, but invalid pubkey\n};\n\n// TODO: remove\n/** @deprecated */\nexport function validateBasic<FP, T>(\n  curve: BasicCurve<FP> & T\n): Readonly<\n  {\n    readonly nBitLength: number;\n    readonly nByteLength: number;\n  } & BasicCurve<FP> &\n    T & {\n      p: bigint;\n    }\n> {\n  validateField(curve.Fp);\n  validateObject(\n    curve,\n    {\n      n: 'bigint',\n      h: 'bigint',\n      Gx: 'field',\n      Gy: 'field',\n    },\n    {\n      nBitLength: 'isSafeInteger',\n      nByteLength: 'isSafeInteger',\n    }\n  );\n  // Set defaults\n  return Object.freeze({\n    ...nLength(curve.n, curve.nBitLength),\n    ...curve,\n    ...{ p: curve.Fp.ORDER },\n  } as const);\n}\n\nexport type ValidCurveParams<T> = {\n  a: T;\n  p: bigint;\n  n: bigint;\n  h: bigint;\n  Gx: T;\n  Gy: T;\n} & ({ b: T } | { d: T });\n\nfunction createField<T>(order: bigint, field?: IField<T>): IField<T> {\n  if (field) {\n    if (field.ORDER !== order) throw new Error('Field.ORDER must match order: Fp == p, Fn == n');\n    validateField(field);\n    return field;\n  } else {\n    return Field(order) as unknown as IField<T>;\n  }\n}\nexport type FpFn<T> = { Fp: IField<T>; Fn: IField<bigint> };\n/** Validates CURVE opts and creates fields */\nexport function _createCurveFields<T>(\n  type: 'weierstrass' | 'edwards',\n  CURVE: ValidCurveParams<T>,\n  curveOpts: Partial<FpFn<T>> = {}\n): FpFn<T> {\n  if (!CURVE || typeof CURVE !== 'object') throw new Error(`expected valid ${type} CURVE object`);\n  for (const p of ['p', 'n', 'h'] as const) {\n    const val = CURVE[p];\n    if (!(typeof val === 'bigint' && val > _0n))\n      throw new Error(`CURVE.${p} must be positive bigint`);\n  }\n  const Fp = createField(CURVE.p, curveOpts.Fp);\n  const Fn = createField(CURVE.n, curveOpts.Fn);\n  const _b: 'b' | 'd' = type === 'weierstrass' ? 'b' : 'd';\n  const params = ['Gx', 'Gy', 'a', _b] as const;\n  for (const p of params) {\n    // @ts-ignore\n    if (!Fp.isValid(CURVE[p]))\n      throw new Error(`CURVE.${p} must be valid field element of CURVE.Fp`);\n  }\n  return { Fp, Fn };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}