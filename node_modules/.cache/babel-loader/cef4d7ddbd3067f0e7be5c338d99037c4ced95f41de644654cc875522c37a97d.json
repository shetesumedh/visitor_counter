{"ast":null,"code":"/**\n * Hex, bytes and number utilities.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { abytes as abytes_, bytesToHex as bytesToHex_, concatBytes as concatBytes_, hexToBytes as hexToBytes_, isBytes as isBytes_ } from '@noble/hashes/utils.js';\nexport { abytes, anumber, bytesToHex, bytesToUtf8, concatBytes, hexToBytes, isBytes, randomBytes, utf8ToBytes } from '@noble/hashes/utils.js';\nconst _0n = /* @__PURE__ */BigInt(0);\nconst _1n = /* @__PURE__ */BigInt(1);\nexport function abool(title, value) {\n  if (typeof value !== 'boolean') throw new Error(title + ' boolean expected, got ' + value);\n}\n// Used in weierstrass, der\nexport function numberToHexUnpadded(num) {\n  const hex = num.toString(16);\n  return hex.length & 1 ? '0' + hex : hex;\n}\nexport function hexToNumber(hex) {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  return hex === '' ? _0n : BigInt('0x' + hex); // Big Endian\n}\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes) {\n  return hexToNumber(bytesToHex_(bytes));\n}\nexport function bytesToNumberLE(bytes) {\n  abytes_(bytes);\n  return hexToNumber(bytesToHex_(Uint8Array.from(bytes).reverse()));\n}\nexport function numberToBytesBE(n, len) {\n  return hexToBytes_(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n, len) {\n  return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n) {\n  return hexToBytes_(numberToHexUnpadded(n));\n}\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title, hex, expectedLength) {\n  let res;\n  if (typeof hex === 'string') {\n    try {\n      res = hexToBytes_(hex);\n    } catch (e) {\n      throw new Error(title + ' must be hex string or Uint8Array, cause: ' + e);\n    }\n  } else if (isBytes_(hex)) {\n    // Uint8Array.from() instead of hash.slice() because node.js Buffer\n    // is instance of Uint8Array, and its slice() creates **mutable** copy\n    res = Uint8Array.from(hex);\n  } else {\n    throw new Error(title + ' must be hex string or Uint8Array');\n  }\n  const len = res.length;\n  if (typeof expectedLength === 'number' && len !== expectedLength) throw new Error(title + ' of length ' + expectedLength + ' expected, got ' + len);\n  return res;\n}\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a, b) {\n  if (a.length !== b.length) return false;\n  let diff = 0;\n  for (let i = 0; i < a.length; i++) diff |= a[i] ^ b[i];\n  return diff === 0;\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\n// export const utf8ToBytes: typeof utf8ToBytes_ = utf8ToBytes_;\n/**\n * Converts bytes to string using UTF8 encoding.\n * @example bytesToUtf8(Uint8Array.from([97, 98, 99])) // 'abc'\n */\n// export const bytesToUtf8: typeof bytesToUtf8_ = bytesToUtf8_;\n// Is positive bigint\nconst isPosBig = n => typeof n === 'bigint' && _0n <= n;\nexport function inRange(n, min, max) {\n  return isPosBig(n) && isPosBig(min) && isPosBig(max) && min <= n && n < max;\n}\n/**\n * Asserts min <= n < max. NOTE: It's < max and not <= max.\n * @example\n * aInRange('x', x, 1n, 256n); // would assume x is in (1n..255n)\n */\nexport function aInRange(title, n, min, max) {\n  // Why min <= n < max and not a (min < n < max) OR b (min <= n <= max)?\n  // consider P=256n, min=0n, max=P\n  // - a for min=0 would require -1:          `inRange('x', x, -1n, P)`\n  // - b would commonly require subtraction:  `inRange('x', x, 0n, P - 1n)`\n  // - our way is the cleanest:               `inRange('x', x, 0n, P)\n  if (!inRange(n, min, max)) throw new Error('expected valid ' + title + ': ' + min + ' <= n < ' + max + ', got ' + n);\n}\n// Bit operations\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n * TODO: merge with nLength in modular\n */\nexport function bitLen(n) {\n  let len;\n  for (len = 0; n > _0n; n >>= _1n, len += 1);\n  return len;\n}\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n, pos) {\n  return n >> BigInt(pos) & _1n;\n}\n/**\n * Sets single bit at position.\n */\nexport function bitSet(n, pos, value) {\n  return n | (value ? _1n : _0n) << BigInt(pos);\n}\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = n => (_1n << BigInt(n)) - _1n;\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg(hashLen, qByteLen, hmacFn) {\n  if (typeof hashLen !== 'number' || hashLen < 2) throw new Error('hashLen must be a number');\n  if (typeof qByteLen !== 'number' || qByteLen < 2) throw new Error('qByteLen must be a number');\n  if (typeof hmacFn !== 'function') throw new Error('hmacFn must be a function');\n  // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n  const u8n = len => new Uint8Array(len); // creates Uint8Array\n  const u8of = byte => Uint8Array.of(byte); // another shortcut\n  let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n  let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n  let i = 0; // Iterations counter, will throw when over 1000\n  const reset = () => {\n    v.fill(1);\n    k.fill(0);\n    i = 0;\n  };\n  const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n  const reseed = (seed = u8n(0)) => {\n    // HMAC-DRBG reseed() function. Steps D-G\n    k = h(u8of(0x00), seed); // k = hmac(k || v || 0x00 || seed)\n    v = h(); // v = hmac(k || v)\n    if (seed.length === 0) return;\n    k = h(u8of(0x01), seed); // k = hmac(k || v || 0x01 || seed)\n    v = h(); // v = hmac(k || v)\n  };\n  const gen = () => {\n    // HMAC-DRBG generate() function\n    if (i++ >= 1000) throw new Error('drbg: tried 1000 values');\n    let len = 0;\n    const out = [];\n    while (len < qByteLen) {\n      v = h();\n      const sl = v.slice();\n      out.push(sl);\n      len += v.length;\n    }\n    return concatBytes_(...out);\n  };\n  const genUntil = (seed, pred) => {\n    reset();\n    reseed(seed); // Steps D-G\n    let res = undefined; // Step H: grind until k is in [1..n-1]\n    while (!(res = pred(gen()))) reseed();\n    reset();\n    return res;\n  };\n  return genUntil;\n}\n// Validating curves and fields\nconst validatorFns = {\n  bigint: val => typeof val === 'bigint',\n  function: val => typeof val === 'function',\n  boolean: val => typeof val === 'boolean',\n  string: val => typeof val === 'string',\n  stringOrUint8Array: val => typeof val === 'string' || isBytes_(val),\n  isSafeInteger: val => Number.isSafeInteger(val),\n  array: val => Array.isArray(val),\n  field: (val, object) => object.Fp.isValid(val),\n  hash: val => typeof val === 'function' && Number.isSafeInteger(val.outputLen)\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nexport function validateObject(object, validators, optValidators = {}) {\n  const checkField = (fieldName, type, isOptional) => {\n    const checkVal = validatorFns[type];\n    if (typeof checkVal !== 'function') throw new Error('invalid validator function');\n    const val = object[fieldName];\n    if (isOptional && val === undefined) return;\n    if (!checkVal(val, object)) {\n      throw new Error('param ' + String(fieldName) + ' is invalid. Expected ' + type + ', got ' + val);\n    }\n  };\n  for (const [fieldName, type] of Object.entries(validators)) checkField(fieldName, type, false);\n  for (const [fieldName, type] of Object.entries(optValidators)) checkField(fieldName, type, true);\n  return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\nexport function isHash(val) {\n  return typeof val === 'function' && Number.isSafeInteger(val.outputLen);\n}\nexport function _validateObject(object, fields, optFields = {}) {\n  if (!object || typeof object !== 'object') throw new Error('expected valid options object');\n  function checkField(fieldName, expectedType, isOpt) {\n    const val = object[fieldName];\n    if (isOpt && val === undefined) return;\n    const current = typeof val;\n    if (current !== expectedType || val === null) throw new Error(`param \"${fieldName}\" is invalid: expected ${expectedType}, got ${current}`);\n  }\n  Object.entries(fields).forEach(([k, v]) => checkField(k, v, false));\n  Object.entries(optFields).forEach(([k, v]) => checkField(k, v, true));\n}\n/**\n * throws not implemented error\n */\nexport const notImplemented = () => {\n  throw new Error('not implemented');\n};\n/**\n * Memoizes (caches) computation result.\n * Uses WeakMap: the value is going auto-cleaned by GC after last reference is removed.\n */\nexport function memoized(fn) {\n  const map = new WeakMap();\n  return (arg, ...args) => {\n    const val = map.get(arg);\n    if (val !== undefined) return val;\n    const computed = fn(arg, ...args);\n    map.set(arg, computed);\n    return computed;\n  };\n}","map":{"version":3,"names":["abytes","abytes_","bytesToHex","bytesToHex_","concatBytes","concatBytes_","hexToBytes","hexToBytes_","isBytes","isBytes_","anumber","bytesToUtf8","randomBytes","utf8ToBytes","_0n","BigInt","_1n","abool","title","value","Error","numberToHexUnpadded","num","hex","toString","length","hexToNumber","bytesToNumberBE","bytes","bytesToNumberLE","Uint8Array","from","reverse","numberToBytesBE","n","len","padStart","numberToBytesLE","numberToVarBytesBE","ensureBytes","expectedLength","res","e","equalBytes","a","b","diff","i","isPosBig","inRange","min","max","aInRange","bitLen","bitGet","pos","bitSet","bitMask","createHmacDrbg","hashLen","qByteLen","hmacFn","u8n","u8of","byte","of","v","k","reset","fill","h","reseed","seed","gen","out","sl","slice","push","genUntil","pred","undefined","validatorFns","bigint","val","function","boolean","string","stringOrUint8Array","isSafeInteger","Number","array","Array","isArray","field","object","Fp","isValid","hash","outputLen","validateObject","validators","optValidators","checkField","fieldName","type","isOptional","checkVal","String","Object","entries","isHash","_validateObject","fields","optFields","expectedType","isOpt","current","forEach","notImplemented","memoized","fn","map","WeakMap","arg","args","get","computed","set"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/viem/node_modules/@noble/curves/src/utils.ts"],"sourcesContent":["/**\n * Hex, bytes and number utilities.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport {\n  abytes as abytes_,\n  bytesToHex as bytesToHex_,\n  concatBytes as concatBytes_,\n  hexToBytes as hexToBytes_,\n  isBytes as isBytes_,\n} from '@noble/hashes/utils.js';\nexport {\n  abytes,\n  anumber,\n  bytesToHex,\n  bytesToUtf8,\n  concatBytes,\n  hexToBytes,\n  isBytes,\n  randomBytes,\n  utf8ToBytes,\n} from '@noble/hashes/utils.js';\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nexport type Hex = Uint8Array | string; // hex strings are accepted for simplicity\nexport type PrivKey = Hex | bigint; // bigints are accepted to ease learning curve\nexport type CHash = {\n  (message: Uint8Array | string): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create(opts?: { dkLen?: number }): any; // For shake\n};\nexport type FHash = (message: Uint8Array | string) => Uint8Array;\n\nexport function abool(title: string, value: boolean): void {\n  if (typeof value !== 'boolean') throw new Error(title + ' boolean expected, got ' + value);\n}\n\n// Used in weierstrass, der\nexport function numberToHexUnpadded(num: number | bigint): string {\n  const hex = num.toString(16);\n  return hex.length & 1 ? '0' + hex : hex;\n}\n\nexport function hexToNumber(hex: string): bigint {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  return hex === '' ? _0n : BigInt('0x' + hex); // Big Endian\n}\n\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes: Uint8Array): bigint {\n  return hexToNumber(bytesToHex_(bytes));\n}\nexport function bytesToNumberLE(bytes: Uint8Array): bigint {\n  abytes_(bytes);\n  return hexToNumber(bytesToHex_(Uint8Array.from(bytes).reverse()));\n}\n\nexport function numberToBytesBE(n: number | bigint, len: number): Uint8Array {\n  return hexToBytes_(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n: number | bigint, len: number): Uint8Array {\n  return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n: number | bigint): Uint8Array {\n  return hexToBytes_(numberToHexUnpadded(n));\n}\n\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title: string, hex: Hex, expectedLength?: number): Uint8Array {\n  let res: Uint8Array;\n  if (typeof hex === 'string') {\n    try {\n      res = hexToBytes_(hex);\n    } catch (e) {\n      throw new Error(title + ' must be hex string or Uint8Array, cause: ' + e);\n    }\n  } else if (isBytes_(hex)) {\n    // Uint8Array.from() instead of hash.slice() because node.js Buffer\n    // is instance of Uint8Array, and its slice() creates **mutable** copy\n    res = Uint8Array.from(hex);\n  } else {\n    throw new Error(title + ' must be hex string or Uint8Array');\n  }\n  const len = res.length;\n  if (typeof expectedLength === 'number' && len !== expectedLength)\n    throw new Error(title + ' of length ' + expectedLength + ' expected, got ' + len);\n  return res;\n}\n\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a: Uint8Array, b: Uint8Array): boolean {\n  if (a.length !== b.length) return false;\n  let diff = 0;\n  for (let i = 0; i < a.length; i++) diff |= a[i] ^ b[i];\n  return diff === 0;\n}\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\n// export const utf8ToBytes: typeof utf8ToBytes_ = utf8ToBytes_;\n/**\n * Converts bytes to string using UTF8 encoding.\n * @example bytesToUtf8(Uint8Array.from([97, 98, 99])) // 'abc'\n */\n// export const bytesToUtf8: typeof bytesToUtf8_ = bytesToUtf8_;\n\n// Is positive bigint\nconst isPosBig = (n: bigint) => typeof n === 'bigint' && _0n <= n;\n\nexport function inRange(n: bigint, min: bigint, max: bigint): boolean {\n  return isPosBig(n) && isPosBig(min) && isPosBig(max) && min <= n && n < max;\n}\n\n/**\n * Asserts min <= n < max. NOTE: It's < max and not <= max.\n * @example\n * aInRange('x', x, 1n, 256n); // would assume x is in (1n..255n)\n */\nexport function aInRange(title: string, n: bigint, min: bigint, max: bigint): void {\n  // Why min <= n < max and not a (min < n < max) OR b (min <= n <= max)?\n  // consider P=256n, min=0n, max=P\n  // - a for min=0 would require -1:          `inRange('x', x, -1n, P)`\n  // - b would commonly require subtraction:  `inRange('x', x, 0n, P - 1n)`\n  // - our way is the cleanest:               `inRange('x', x, 0n, P)\n  if (!inRange(n, min, max))\n    throw new Error('expected valid ' + title + ': ' + min + ' <= n < ' + max + ', got ' + n);\n}\n\n// Bit operations\n\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n * TODO: merge with nLength in modular\n */\nexport function bitLen(n: bigint): number {\n  let len;\n  for (len = 0; n > _0n; n >>= _1n, len += 1);\n  return len;\n}\n\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n: bigint, pos: number): bigint {\n  return (n >> BigInt(pos)) & _1n;\n}\n\n/**\n * Sets single bit at position.\n */\nexport function bitSet(n: bigint, pos: number, value: boolean): bigint {\n  return n | ((value ? _1n : _0n) << BigInt(pos));\n}\n\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n: number): bigint => (_1n << BigInt(n)) - _1n;\n\n// DRBG\n\ntype Pred<T> = (v: Uint8Array) => T | undefined;\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg<T>(\n  hashLen: number,\n  qByteLen: number,\n  hmacFn: (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array\n): (seed: Uint8Array, predicate: Pred<T>) => T {\n  if (typeof hashLen !== 'number' || hashLen < 2) throw new Error('hashLen must be a number');\n  if (typeof qByteLen !== 'number' || qByteLen < 2) throw new Error('qByteLen must be a number');\n  if (typeof hmacFn !== 'function') throw new Error('hmacFn must be a function');\n  // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n  const u8n = (len: number) => new Uint8Array(len); // creates Uint8Array\n  const u8of = (byte: number) => Uint8Array.of(byte); // another shortcut\n  let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n  let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n  let i = 0; // Iterations counter, will throw when over 1000\n  const reset = () => {\n    v.fill(1);\n    k.fill(0);\n    i = 0;\n  };\n  const h = (...b: Uint8Array[]) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n  const reseed = (seed = u8n(0)) => {\n    // HMAC-DRBG reseed() function. Steps D-G\n    k = h(u8of(0x00), seed); // k = hmac(k || v || 0x00 || seed)\n    v = h(); // v = hmac(k || v)\n    if (seed.length === 0) return;\n    k = h(u8of(0x01), seed); // k = hmac(k || v || 0x01 || seed)\n    v = h(); // v = hmac(k || v)\n  };\n  const gen = () => {\n    // HMAC-DRBG generate() function\n    if (i++ >= 1000) throw new Error('drbg: tried 1000 values');\n    let len = 0;\n    const out: Uint8Array[] = [];\n    while (len < qByteLen) {\n      v = h();\n      const sl = v.slice();\n      out.push(sl);\n      len += v.length;\n    }\n    return concatBytes_(...out);\n  };\n  const genUntil = (seed: Uint8Array, pred: Pred<T>): T => {\n    reset();\n    reseed(seed); // Steps D-G\n    let res: T | undefined = undefined; // Step H: grind until k is in [1..n-1]\n    while (!(res = pred(gen()))) reseed();\n    reset();\n    return res;\n  };\n  return genUntil;\n}\n\n// Validating curves and fields\n\nconst validatorFns = {\n  bigint: (val: any): boolean => typeof val === 'bigint',\n  function: (val: any): boolean => typeof val === 'function',\n  boolean: (val: any): boolean => typeof val === 'boolean',\n  string: (val: any): boolean => typeof val === 'string',\n  stringOrUint8Array: (val: any): boolean => typeof val === 'string' || isBytes_(val),\n  isSafeInteger: (val: any): boolean => Number.isSafeInteger(val),\n  array: (val: any): boolean => Array.isArray(val),\n  field: (val: any, object: any): any => (object as any).Fp.isValid(val),\n  hash: (val: any): boolean => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n} as const;\ntype Validator = keyof typeof validatorFns;\ntype ValMap<T extends Record<string, any>> = { [K in keyof T]?: Validator };\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\n\nexport function validateObject<T extends Record<string, any>>(\n  object: T,\n  validators: ValMap<T>,\n  optValidators: ValMap<T> = {}\n): T {\n  const checkField = (fieldName: keyof T, type: Validator, isOptional: boolean) => {\n    const checkVal = validatorFns[type];\n    if (typeof checkVal !== 'function') throw new Error('invalid validator function');\n\n    const val = object[fieldName as keyof typeof object];\n    if (isOptional && val === undefined) return;\n    if (!checkVal(val, object)) {\n      throw new Error(\n        'param ' + String(fieldName) + ' is invalid. Expected ' + type + ', got ' + val\n      );\n    }\n  };\n  for (const [fieldName, type] of Object.entries(validators)) checkField(fieldName, type!, false);\n  for (const [fieldName, type] of Object.entries(optValidators)) checkField(fieldName, type!, true);\n  return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n\nexport function isHash(val: CHash): boolean {\n  return typeof val === 'function' && Number.isSafeInteger(val.outputLen);\n}\nexport function _validateObject(\n  object: Record<string, any>,\n  fields: Record<string, string>,\n  optFields: Record<string, string> = {}\n): void {\n  if (!object || typeof object !== 'object') throw new Error('expected valid options object');\n  type Item = keyof typeof object;\n  function checkField(fieldName: Item, expectedType: string, isOpt: boolean) {\n    const val = object[fieldName];\n    if (isOpt && val === undefined) return;\n    const current = typeof val;\n    if (current !== expectedType || val === null)\n      throw new Error(`param \"${fieldName}\" is invalid: expected ${expectedType}, got ${current}`);\n  }\n  Object.entries(fields).forEach(([k, v]) => checkField(k, v, false));\n  Object.entries(optFields).forEach(([k, v]) => checkField(k, v, true));\n}\n\n/**\n * throws not implemented error\n */\nexport const notImplemented = (): never => {\n  throw new Error('not implemented');\n};\n\n/**\n * Memoizes (caches) computation result.\n * Uses WeakMap: the value is going auto-cleaned by GC after last reference is removed.\n */\nexport function memoized<T extends object, R, O extends any[]>(\n  fn: (arg: T, ...args: O) => R\n): (arg: T, ...args: O) => R {\n  const map = new WeakMap<T, R>();\n  return (arg: T, ...args: O): R => {\n    const val = map.get(arg);\n    if (val !== undefined) return val;\n    const computed = fn(arg, ...args);\n    map.set(arg, computed);\n    return computed;\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}