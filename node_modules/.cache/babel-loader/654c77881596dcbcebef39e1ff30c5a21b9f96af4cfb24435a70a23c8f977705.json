{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.serializeAuthorizationList = serializeAuthorizationList;\nconst toHex_js_1 = require(\"../encoding/toHex.js\");\nconst serializeTransaction_js_1 = require(\"../transaction/serializeTransaction.js\");\nfunction serializeAuthorizationList(authorizationList) {\n  if (!authorizationList || authorizationList.length === 0) return [];\n  const serializedAuthorizationList = [];\n  for (const authorization of authorizationList) {\n    const {\n      chainId,\n      nonce,\n      ...signature\n    } = authorization;\n    const contractAddress = authorization.address;\n    serializedAuthorizationList.push([chainId ? (0, toHex_js_1.toHex)(chainId) : '0x', contractAddress, nonce ? (0, toHex_js_1.toHex)(nonce) : '0x', ...(0, serializeTransaction_js_1.toYParitySignatureArray)({}, signature)]);\n  }\n  return serializedAuthorizationList;\n}","map":{"version":3,"names":["exports","serializeAuthorizationList","toHex_js_1","require","serializeTransaction_js_1","authorizationList","length","serializedAuthorizationList","authorization","chainId","nonce","signature","contractAddress","address","push","toHex","toYParitySignatureArray"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/viem/utils/authorization/serializeAuthorizationList.ts"],"sourcesContent":["import type { ErrorType } from '../../errors/utils.js'\nimport type {\n  AuthorizationList,\n  SerializedAuthorizationList,\n} from '../../types/authorization.js'\nimport { toHex } from '../encoding/toHex.js'\nimport { toYParitySignatureArray } from '../transaction/serializeTransaction.js'\n\nexport type SerializeAuthorizationListReturnType = SerializedAuthorizationList\n\nexport type SerializeAuthorizationListErrorType = ErrorType\n\n/*\n * Serializes an EIP-7702 authorization list.\n */\nexport function serializeAuthorizationList(\n  authorizationList?: AuthorizationList<number, true> | undefined,\n): SerializeAuthorizationListReturnType {\n  if (!authorizationList || authorizationList.length === 0) return []\n\n  const serializedAuthorizationList = []\n  for (const authorization of authorizationList) {\n    const { chainId, nonce, ...signature } = authorization\n    const contractAddress = authorization.address\n    serializedAuthorizationList.push([\n      chainId ? toHex(chainId) : '0x',\n      contractAddress,\n      nonce ? toHex(nonce) : '0x',\n      ...toYParitySignatureArray({}, signature),\n    ])\n  }\n\n  return serializedAuthorizationList as {} as SerializeAuthorizationListReturnType\n}\n"],"mappings":";;;;;AAeAA,OAAA,CAAAC,0BAAA,GAAAA,0BAAA;AAVA,MAAAC,UAAA,GAAAC,OAAA;AACA,MAAAC,yBAAA,GAAAD,OAAA;AASA,SAAgBF,0BAA0BA,CACxCI,iBAA+D;EAE/D,IAAI,CAACA,iBAAiB,IAAIA,iBAAiB,CAACC,MAAM,KAAK,CAAC,EAAE,OAAO,EAAE;EAEnE,MAAMC,2BAA2B,GAAG,EAAE;EACtC,KAAK,MAAMC,aAAa,IAAIH,iBAAiB,EAAE;IAC7C,MAAM;MAAEI,OAAO;MAAEC,KAAK;MAAE,GAAGC;IAAS,CAAE,GAAGH,aAAa;IACtD,MAAMI,eAAe,GAAGJ,aAAa,CAACK,OAAO;IAC7CN,2BAA2B,CAACO,IAAI,CAAC,CAC/BL,OAAO,GAAG,IAAAP,UAAA,CAAAa,KAAK,EAACN,OAAO,CAAC,GAAG,IAAI,EAC/BG,eAAe,EACfF,KAAK,GAAG,IAAAR,UAAA,CAAAa,KAAK,EAACL,KAAK,CAAC,GAAG,IAAI,EAC3B,GAAG,IAAAN,yBAAA,CAAAY,uBAAuB,EAAC,EAAE,EAAEL,SAAS,CAAC,CAC1C,CAAC;EACJ;EAEA,OAAOJ,2BAAyE;AAClF","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}