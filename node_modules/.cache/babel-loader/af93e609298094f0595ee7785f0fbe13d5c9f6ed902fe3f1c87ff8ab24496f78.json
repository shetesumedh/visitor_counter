{"ast":null,"code":"import * as Address from './Address.js';\nimport * as Errors from './Errors.js';\nimport { uid } from './internal/uid.js';\nexport const domainRegex = /^([a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?\\.)+[a-zA-Z]{2,}(:[0-9]{1,5})?$/;\nexport const ipRegex = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(:[0-9]{1,5})?$/;\nexport const localhostRegex = /^localhost(:[0-9]{1,5})?$/;\nexport const nonceRegex = /^[a-zA-Z0-9]{8,}$/;\nexport const schemeRegex = /^([a-zA-Z][a-zA-Z0-9+-.]*)$/;\n// https://regexr.com/80gdj\nexport const prefixRegex = /^(?:(?<scheme>[a-zA-Z][a-zA-Z0-9+-.]*):\\/\\/)?(?<domain>[a-zA-Z0-9+-.]*(?::[0-9]{1,5})?) (?:wants you to sign in with your Ethereum account:\\n)(?<address>0x[a-fA-F0-9]{40})\\n\\n(?:(?<statement>.*)\\n\\n)?/;\n// https://regexr.com/80gf9\nexport const suffixRegex = /(?:URI: (?<uri>.+))\\n(?:Version: (?<version>.+))\\n(?:Chain ID: (?<chainId>\\d+))\\n(?:Nonce: (?<nonce>[a-zA-Z0-9]+))\\n(?:Issued At: (?<issuedAt>.+))(?:\\nExpiration Time: (?<expirationTime>.+))?(?:\\nNot Before: (?<notBefore>.+))?(?:\\nRequest ID: (?<requestId>.+))?/;\n/**\n * Creates [EIP-4361](https://eips.ethereum.org/EIPS/eip-4361) formatted message.\n *\n * @example\n * ```ts twoslash\n * import { Siwe } from 'ox'\n *\n * Siwe.createMessage({\n *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   chainId: 1,\n *   domain: 'example.com',\n *   nonce: 'foobarbaz',\n *   uri: 'https://example.com/path',\n *   version: '1',\n * })\n * // @log: \"example.com wants you to sign in with your Ethereum account:\n * // @log: 0xA0Cf798816D4b9b9866b5330EEa46a18382f251e\n * // @log:\n * // @log:\n * // @log: URI: https://example.com/path\n * // @log: Version: 1\n * // @log: Chain ID: 1\n * // @log: Nonce: foobarbaz\n * // @log: Issued At: 2023-02-01T00:00:00.000Z\"\n * ```\n *\n * @param value - Values to use when creating EIP-4361 formatted message.\n * @returns EIP-4361 formatted message.\n */\nexport function createMessage(value) {\n  const {\n    chainId,\n    domain,\n    expirationTime,\n    issuedAt = new Date(),\n    nonce,\n    notBefore,\n    requestId,\n    resources,\n    scheme,\n    uri,\n    version\n  } = value;\n  // Validate fields\n  {\n    // Required fields\n    if (chainId !== Math.floor(chainId)) throw new InvalidMessageFieldError({\n      field: 'chainId',\n      metaMessages: ['- Chain ID must be a EIP-155 chain ID.', '- See https://eips.ethereum.org/EIPS/eip-155', '', `Provided value: ${chainId}`]\n    });\n    if (!(domainRegex.test(domain) || ipRegex.test(domain) || localhostRegex.test(domain))) throw new InvalidMessageFieldError({\n      field: 'domain',\n      metaMessages: ['- Domain must be an RFC 3986 authority.', '- See https://www.rfc-editor.org/rfc/rfc3986', '', `Provided value: ${domain}`]\n    });\n    if (!nonceRegex.test(nonce)) throw new InvalidMessageFieldError({\n      field: 'nonce',\n      metaMessages: ['- Nonce must be at least 8 characters.', '- Nonce must be alphanumeric.', '', `Provided value: ${nonce}`]\n    });\n    if (!isUri(uri)) throw new InvalidMessageFieldError({\n      field: 'uri',\n      metaMessages: ['- URI must be a RFC 3986 URI referring to the resource that is the subject of the signing.', '- See https://www.rfc-editor.org/rfc/rfc3986', '', `Provided value: ${uri}`]\n    });\n    if (version !== '1') throw new InvalidMessageFieldError({\n      field: 'version',\n      metaMessages: [\"- Version must be '1'.\", '', `Provided value: ${version}`]\n    });\n    // Optional fields\n    if (scheme && !schemeRegex.test(scheme)) throw new InvalidMessageFieldError({\n      field: 'scheme',\n      metaMessages: ['- Scheme must be an RFC 3986 URI scheme.', '- See https://www.rfc-editor.org/rfc/rfc3986#section-3.1', '', `Provided value: ${scheme}`]\n    });\n    const statement = value.statement;\n    if (statement?.includes('\\n')) throw new InvalidMessageFieldError({\n      field: 'statement',\n      metaMessages: [\"- Statement must not include '\\\\n'.\", '', `Provided value: ${statement}`]\n    });\n  }\n  // Construct message\n  const address = Address.from(value.address, {\n    checksum: true\n  });\n  const origin = (() => {\n    if (scheme) return `${scheme}://${domain}`;\n    return domain;\n  })();\n  const statement = (() => {\n    if (!value.statement) return '';\n    return `${value.statement}\\n`;\n  })();\n  const prefix = `${origin} wants you to sign in with your Ethereum account:\\n${address}\\n\\n${statement}`;\n  let suffix = `URI: ${uri}\\nVersion: ${version}\\nChain ID: ${chainId}\\nNonce: ${nonce}\\nIssued At: ${issuedAt.toISOString()}`;\n  if (expirationTime) suffix += `\\nExpiration Time: ${expirationTime.toISOString()}`;\n  if (notBefore) suffix += `\\nNot Before: ${notBefore.toISOString()}`;\n  if (requestId) suffix += `\\nRequest ID: ${requestId}`;\n  if (resources) {\n    let content = '\\nResources:';\n    for (const resource of resources) {\n      if (!isUri(resource)) throw new InvalidMessageFieldError({\n        field: 'resources',\n        metaMessages: ['- Every resource must be a RFC 3986 URI.', '- See https://www.rfc-editor.org/rfc/rfc3986', '', `Provided value: ${resource}`]\n      });\n      content += `\\n- ${resource}`;\n    }\n    suffix += content;\n  }\n  return `${prefix}\\n${suffix}`;\n}\n/**\n * Generates random [EIP-4361](https://eips.ethereum.org/EIPS/eip-4361) nonce.\n *\n * @example\n * ```ts twoslash\n * import { Siwe } from 'ox'\n *\n * Siwe.generateNonce()\n * // @log: '65ed4681d4efe0270b923ff5f4b097b1c95974dc33aeebecd5724c42fd86dfd25dc70b27ef836b2aa22e68f19ebcccc1'\n * ```\n *\n * @returns Random nonce.\n */\nexport function generateNonce() {\n  return uid(96);\n}\n/**\n * Check if the given URI is a valid [RFC 3986](https://www.rfc-editor.org/rfc/rfc3986) URI.\n *\n * @example\n * ```ts twoslash\n * import { Siwe } from 'ox'\n *\n * Siwe.isUri('https://example.com/foo')\n * // @log: true\n * ```\n *\n * @param value - Value to check.\n * @returns `false` if invalid, otherwise the valid URI.\n */\n// based on https://github.com/ogt/valid-url\nexport function isUri(value) {\n  // check for illegal characters\n  if (/[^a-z0-9\\:\\/\\?\\#\\[\\]\\@\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=\\.\\-\\_\\~\\%]/i.test(value)) return false;\n  // check for hex escapes that aren't complete\n  if (/%[^0-9a-f]/i.test(value)) return false;\n  if (/%[0-9a-f](:?[^0-9a-f]|$)/i.test(value)) return false;\n  // from RFC 3986\n  const splitted = splitUri(value);\n  const scheme = splitted[1];\n  const authority = splitted[2];\n  const path = splitted[3];\n  const query = splitted[4];\n  const fragment = splitted[5];\n  // scheme and path are required, though the path can be empty\n  if (!(scheme?.length && path && path.length >= 0)) return false;\n  // if authority is present, the path must be empty or begin with a /\n  if (authority?.length) {\n    if (!(path.length === 0 || /^\\//.test(path))) return false;\n  } else {\n    // if authority is not present, the path must not start with //\n    if (/^\\/\\//.test(path)) return false;\n  }\n  // scheme must begin with a letter, then consist of letters, digits, +, ., or -\n  if (!/^[a-z][a-z0-9\\+\\-\\.]*$/.test(scheme.toLowerCase())) return false;\n  let out = '';\n  // re-assemble the URL per section 5.3 in RFC 3986\n  out += `${scheme}:`;\n  if (authority?.length) out += `//${authority}`;\n  out += path;\n  if (query?.length) out += `?${query}`;\n  if (fragment?.length) out += `#${fragment}`;\n  return out;\n}\nfunction splitUri(value) {\n  return value.match(/(?:([^:\\/?#]+):)?(?:\\/\\/([^\\/?#]*))?([^?#]*)(?:\\?([^#]*))?(?:#(.*))?/);\n}\n/**\n * [EIP-4361](https://eips.ethereum.org/EIPS/eip-4361) formatted message into message fields object.\n *\n * @example\n * ```ts twoslash\n * import { Siwe } from 'ox'\n *\n * Siwe.parseMessage(`example.com wants you to sign in with your Ethereum account:\n * 0xA0Cf798816D4b9b9866b5330EEa46a18382f251e\n *\n * I accept the ExampleOrg Terms of Service: https://example.com/tos\n *\n * URI: https://example.com/path\n * Version: 1\n * Chain ID: 1\n * Nonce: foobarbaz\n * Issued At: 2023-02-01T00:00:00.000Z`)\n * // @log: {\n * // @log:   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n * // @log:   chainId: 1,\n * // @log:   domain: 'example.com',\n * // @log:   issuedAt: '2023-02-01T00:00:00.000Z',\n * // @log:   nonce: 'foobarbaz',\n * // @log:   statement: 'I accept the ExampleOrg Terms of Service: https://example.com/tos',\n * // @log:   uri: 'https://example.com/path',\n * // @log:   version: '1',\n * // @log: }\n * ```\n *\n * @param message - [EIP-4361](https://eips.ethereum.org/EIPS/eip-4361) formatted message.\n * @returns Message fields object.\n */\nexport function parseMessage(message) {\n  const {\n    scheme,\n    statement,\n    ...prefix\n  } = message.match(prefixRegex)?.groups ?? {};\n  const {\n    chainId,\n    expirationTime,\n    issuedAt,\n    notBefore,\n    requestId,\n    ...suffix\n  } = message.match(suffixRegex)?.groups ?? {};\n  const resources = message.split('Resources:')[1]?.split('\\n- ').slice(1);\n  return {\n    ...prefix,\n    ...suffix,\n    ...(chainId ? {\n      chainId: Number(chainId)\n    } : {}),\n    ...(expirationTime ? {\n      expirationTime: new Date(expirationTime)\n    } : {}),\n    ...(issuedAt ? {\n      issuedAt: new Date(issuedAt)\n    } : {}),\n    ...(notBefore ? {\n      notBefore: new Date(notBefore)\n    } : {}),\n    ...(requestId ? {\n      requestId\n    } : {}),\n    ...(resources ? {\n      resources\n    } : {}),\n    ...(scheme ? {\n      scheme\n    } : {}),\n    ...(statement ? {\n      statement\n    } : {})\n  };\n}\n/**\n * Validates [EIP-4361](https://eips.ethereum.org/EIPS/eip-4361) message.\n *\n * @example\n * ```ts twoslash\n * import { Siwe } from 'ox'\n *\n * Siwe.validateMessage({\n *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   domain: 'example.com',\n *   message: {\n *     address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *     chainId: 1,\n *     domain: 'example.com',\n *     nonce: 'foobarbaz',\n *     uri: 'https://example.com/path',\n *     version: '1',\n *   },\n *   nonce: 'foobarbaz',\n * })\n * // @log: true\n * ```\n *\n * @param value - Values to use when validating EIP-4361 formatted message.\n * @returns Whether the message is valid.\n */\nexport function validateMessage(value) {\n  const {\n    address,\n    domain,\n    message,\n    nonce,\n    scheme,\n    time = new Date()\n  } = value;\n  if (domain && message.domain !== domain) return false;\n  if (nonce && message.nonce !== nonce) return false;\n  if (scheme && message.scheme !== scheme) return false;\n  if (message.expirationTime && time >= message.expirationTime) return false;\n  if (message.notBefore && time < message.notBefore) return false;\n  try {\n    if (!message.address) return false;\n    if (address && !Address.isEqual(message.address, address)) return false;\n  } catch {\n    return false;\n  }\n  return true;\n}\n/**\n * Thrown when a field in a SIWE Message is invalid.\n *\n * @example\n * ```ts twoslash\n * import { Siwe } from 'ox'\n *\n * Siwe.createMessage({\n *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   chainId: 1.1,\n *   domain: 'example.com',\n *   nonce: 'foobarbaz',\n *   uri: 'https://example.com/path',\n *   version: '1',\n * })\n * // @error: Siwe.InvalidMessageFieldError: Invalid Sign-In with Ethereum message field \"chainId\".\n * // @error: - Chain ID must be a EIP-155 chain ID.\n * // @error: - See https://eips.ethereum.org/EIPS/eip-155\n * // @error: Provided value: 1.1\n * ```\n */\nexport class InvalidMessageFieldError extends Errors.BaseError {\n  constructor(parameters) {\n    const {\n      field,\n      metaMessages\n    } = parameters;\n    super(`Invalid Sign-In with Ethereum message field \"${field}\".`, {\n      metaMessages\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'Siwe.InvalidMessageFieldError'\n    });\n  }\n}","map":{"version":3,"names":["Address","Errors","uid","domainRegex","ipRegex","localhostRegex","nonceRegex","schemeRegex","prefixRegex","suffixRegex","createMessage","value","chainId","domain","expirationTime","issuedAt","Date","nonce","notBefore","requestId","resources","scheme","uri","version","Math","floor","InvalidMessageFieldError","field","metaMessages","test","isUri","statement","includes","address","from","checksum","origin","prefix","suffix","toISOString","content","resource","generateNonce","splitted","splitUri","authority","path","query","fragment","length","toLowerCase","out","match","parseMessage","message","groups","split","slice","Number","validateMessage","time","isEqual","BaseError","constructor","parameters","Object","defineProperty"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/ox/core/Siwe.ts"],"sourcesContent":["import * as Address from './Address.js'\nimport * as Errors from './Errors.js'\nimport type { ExactPartial } from './internal/types.js'\nimport { uid } from './internal/uid.js'\n\nexport const domainRegex =\n  /^([a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?\\.)+[a-zA-Z]{2,}(:[0-9]{1,5})?$/\n\nexport const ipRegex =\n  /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(:[0-9]{1,5})?$/\n\nexport const localhostRegex = /^localhost(:[0-9]{1,5})?$/\n\nexport const nonceRegex = /^[a-zA-Z0-9]{8,}$/\n\nexport const schemeRegex = /^([a-zA-Z][a-zA-Z0-9+-.]*)$/\n\n// https://regexr.com/80gdj\nexport const prefixRegex =\n  /^(?:(?<scheme>[a-zA-Z][a-zA-Z0-9+-.]*):\\/\\/)?(?<domain>[a-zA-Z0-9+-.]*(?::[0-9]{1,5})?) (?:wants you to sign in with your Ethereum account:\\n)(?<address>0x[a-fA-F0-9]{40})\\n\\n(?:(?<statement>.*)\\n\\n)?/\n\n// https://regexr.com/80gf9\nexport const suffixRegex =\n  /(?:URI: (?<uri>.+))\\n(?:Version: (?<version>.+))\\n(?:Chain ID: (?<chainId>\\d+))\\n(?:Nonce: (?<nonce>[a-zA-Z0-9]+))\\n(?:Issued At: (?<issuedAt>.+))(?:\\nExpiration Time: (?<expirationTime>.+))?(?:\\nNot Before: (?<notBefore>.+))?(?:\\nRequest ID: (?<requestId>.+))?/\n\n/** [EIP-4361](https://eips.ethereum.org/EIPS/eip-4361) message fields. */\nexport type Message = {\n  /**\n   * The Ethereum address performing the signing.\n   */\n  address: Address.Address\n  /**\n   * The [EIP-155](https://eips.ethereum.org/EIPS/eip-155) Chain ID to which the session is bound,\n   */\n  chainId: number\n  /**\n   * [RFC 3986](https://www.rfc-editor.org/rfc/rfc3986) authority that is requesting the signing.\n   */\n  domain: string\n  /**\n   * Time when the signed authentication message is no longer valid.\n   */\n  expirationTime?: Date | undefined\n  /**\n   * Time when the message was generated, typically the current time.\n   */\n  issuedAt?: Date | undefined\n  /**\n   * A random string typically chosen by the relying party and used to prevent replay attacks.\n   */\n  nonce: string\n  /**\n   * Time when the signed authentication message will become valid.\n   */\n  notBefore?: Date | undefined\n  /**\n   * A system-specific identifier that may be used to uniquely refer to the sign-in request.\n   */\n  requestId?: string | undefined\n  /**\n   * A list of information or references to information the user wishes to have resolved as part of authentication by the relying party.\n   */\n  resources?: string[] | undefined\n  /**\n   * [RFC 3986](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) URI scheme of the origin of the request.\n   */\n  scheme?: string | undefined\n  /**\n   * A human-readable ASCII assertion that the user will sign.\n   */\n  statement?: string | undefined\n  /**\n   * [RFC 3986](https://www.rfc-editor.org/rfc/rfc3986) URI referring to the resource that is the subject of the signing (as in the subject of a claim).\n   */\n  uri: string\n  /**\n   * The current version of the SIWE Message.\n   */\n  version: '1'\n}\n\n/**\n * Creates [EIP-4361](https://eips.ethereum.org/EIPS/eip-4361) formatted message.\n *\n * @example\n * ```ts twoslash\n * import { Siwe } from 'ox'\n *\n * Siwe.createMessage({\n *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   chainId: 1,\n *   domain: 'example.com',\n *   nonce: 'foobarbaz',\n *   uri: 'https://example.com/path',\n *   version: '1',\n * })\n * // @log: \"example.com wants you to sign in with your Ethereum account:\n * // @log: 0xA0Cf798816D4b9b9866b5330EEa46a18382f251e\n * // @log:\n * // @log:\n * // @log: URI: https://example.com/path\n * // @log: Version: 1\n * // @log: Chain ID: 1\n * // @log: Nonce: foobarbaz\n * // @log: Issued At: 2023-02-01T00:00:00.000Z\"\n * ```\n *\n * @param value - Values to use when creating EIP-4361 formatted message.\n * @returns EIP-4361 formatted message.\n */\nexport function createMessage(value: Message): string {\n  const {\n    chainId,\n    domain,\n    expirationTime,\n    issuedAt = new Date(),\n    nonce,\n    notBefore,\n    requestId,\n    resources,\n    scheme,\n    uri,\n    version,\n  } = value\n\n  // Validate fields\n  {\n    // Required fields\n    if (chainId !== Math.floor(chainId))\n      throw new InvalidMessageFieldError({\n        field: 'chainId',\n        metaMessages: [\n          '- Chain ID must be a EIP-155 chain ID.',\n          '- See https://eips.ethereum.org/EIPS/eip-155',\n          '',\n          `Provided value: ${chainId}`,\n        ],\n      })\n    if (\n      !(\n        domainRegex.test(domain) ||\n        ipRegex.test(domain) ||\n        localhostRegex.test(domain)\n      )\n    )\n      throw new InvalidMessageFieldError({\n        field: 'domain',\n        metaMessages: [\n          '- Domain must be an RFC 3986 authority.',\n          '- See https://www.rfc-editor.org/rfc/rfc3986',\n          '',\n          `Provided value: ${domain}`,\n        ],\n      })\n    if (!nonceRegex.test(nonce))\n      throw new InvalidMessageFieldError({\n        field: 'nonce',\n        metaMessages: [\n          '- Nonce must be at least 8 characters.',\n          '- Nonce must be alphanumeric.',\n          '',\n          `Provided value: ${nonce}`,\n        ],\n      })\n    if (!isUri(uri))\n      throw new InvalidMessageFieldError({\n        field: 'uri',\n        metaMessages: [\n          '- URI must be a RFC 3986 URI referring to the resource that is the subject of the signing.',\n          '- See https://www.rfc-editor.org/rfc/rfc3986',\n          '',\n          `Provided value: ${uri}`,\n        ],\n      })\n    if (version !== '1')\n      throw new InvalidMessageFieldError({\n        field: 'version',\n        metaMessages: [\n          \"- Version must be '1'.\",\n          '',\n          `Provided value: ${version}`,\n        ],\n      })\n\n    // Optional fields\n    if (scheme && !schemeRegex.test(scheme))\n      throw new InvalidMessageFieldError({\n        field: 'scheme',\n        metaMessages: [\n          '- Scheme must be an RFC 3986 URI scheme.',\n          '- See https://www.rfc-editor.org/rfc/rfc3986#section-3.1',\n          '',\n          `Provided value: ${scheme}`,\n        ],\n      })\n    const statement = value.statement\n    if (statement?.includes('\\n'))\n      throw new InvalidMessageFieldError({\n        field: 'statement',\n        metaMessages: [\n          \"- Statement must not include '\\\\n'.\",\n          '',\n          `Provided value: ${statement}`,\n        ],\n      })\n  }\n\n  // Construct message\n  const address = Address.from(value.address, { checksum: true })\n  const origin = (() => {\n    if (scheme) return `${scheme}://${domain}`\n    return domain\n  })()\n  const statement = (() => {\n    if (!value.statement) return ''\n    return `${value.statement}\\n`\n  })()\n  const prefix = `${origin} wants you to sign in with your Ethereum account:\\n${address}\\n\\n${statement}`\n\n  let suffix = `URI: ${uri}\\nVersion: ${version}\\nChain ID: ${chainId}\\nNonce: ${nonce}\\nIssued At: ${issuedAt.toISOString()}`\n\n  if (expirationTime)\n    suffix += `\\nExpiration Time: ${expirationTime.toISOString()}`\n  if (notBefore) suffix += `\\nNot Before: ${notBefore.toISOString()}`\n  if (requestId) suffix += `\\nRequest ID: ${requestId}`\n  if (resources) {\n    let content = '\\nResources:'\n    for (const resource of resources) {\n      if (!isUri(resource))\n        throw new InvalidMessageFieldError({\n          field: 'resources',\n          metaMessages: [\n            '- Every resource must be a RFC 3986 URI.',\n            '- See https://www.rfc-editor.org/rfc/rfc3986',\n            '',\n            `Provided value: ${resource}`,\n          ],\n        })\n      content += `\\n- ${resource}`\n    }\n    suffix += content\n  }\n\n  return `${prefix}\\n${suffix}`\n}\n\nexport declare namespace createMessage {\n  type ErrorType =\n    | Address.from.ErrorType\n    | InvalidMessageFieldError\n    | Errors.GlobalErrorType\n}\n\n/**\n * Generates random [EIP-4361](https://eips.ethereum.org/EIPS/eip-4361) nonce.\n *\n * @example\n * ```ts twoslash\n * import { Siwe } from 'ox'\n *\n * Siwe.generateNonce()\n * // @log: '65ed4681d4efe0270b923ff5f4b097b1c95974dc33aeebecd5724c42fd86dfd25dc70b27ef836b2aa22e68f19ebcccc1'\n * ```\n *\n * @returns Random nonce.\n */\nexport function generateNonce(): string {\n  return uid(96)\n}\n\n/**\n * Check if the given URI is a valid [RFC 3986](https://www.rfc-editor.org/rfc/rfc3986) URI.\n *\n * @example\n * ```ts twoslash\n * import { Siwe } from 'ox'\n *\n * Siwe.isUri('https://example.com/foo')\n * // @log: true\n * ```\n *\n * @param value - Value to check.\n * @returns `false` if invalid, otherwise the valid URI.\n */\n// based on https://github.com/ogt/valid-url\nexport function isUri(value: string): false | string {\n  // check for illegal characters\n  if (/[^a-z0-9\\:\\/\\?\\#\\[\\]\\@\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=\\.\\-\\_\\~\\%]/i.test(value))\n    return false\n\n  // check for hex escapes that aren't complete\n  if (/%[^0-9a-f]/i.test(value)) return false\n  if (/%[0-9a-f](:?[^0-9a-f]|$)/i.test(value)) return false\n\n  // from RFC 3986\n  const splitted = splitUri(value)\n  const scheme = splitted[1]\n  const authority = splitted[2]\n  const path = splitted[3]\n  const query = splitted[4]\n  const fragment = splitted[5]\n\n  // scheme and path are required, though the path can be empty\n  if (!(scheme?.length && path && path.length >= 0)) return false\n\n  // if authority is present, the path must be empty or begin with a /\n  if (authority?.length) {\n    if (!(path.length === 0 || /^\\//.test(path))) return false\n  } else {\n    // if authority is not present, the path must not start with //\n    if (/^\\/\\//.test(path)) return false\n  }\n\n  // scheme must begin with a letter, then consist of letters, digits, +, ., or -\n  if (!/^[a-z][a-z0-9\\+\\-\\.]*$/.test(scheme.toLowerCase())) return false\n\n  let out = ''\n  // re-assemble the URL per section 5.3 in RFC 3986\n  out += `${scheme}:`\n  if (authority?.length) out += `//${authority}`\n\n  out += path\n\n  if (query?.length) out += `?${query}`\n  if (fragment?.length) out += `#${fragment}`\n\n  return out\n}\n\nfunction splitUri(value: string) {\n  return value.match(\n    /(?:([^:\\/?#]+):)?(?:\\/\\/([^\\/?#]*))?([^?#]*)(?:\\?([^#]*))?(?:#(.*))?/,\n  )!\n}\n\n/**\n * [EIP-4361](https://eips.ethereum.org/EIPS/eip-4361) formatted message into message fields object.\n *\n * @example\n * ```ts twoslash\n * import { Siwe } from 'ox'\n *\n * Siwe.parseMessage(`example.com wants you to sign in with your Ethereum account:\n * 0xA0Cf798816D4b9b9866b5330EEa46a18382f251e\n *\n * I accept the ExampleOrg Terms of Service: https://example.com/tos\n *\n * URI: https://example.com/path\n * Version: 1\n * Chain ID: 1\n * Nonce: foobarbaz\n * Issued At: 2023-02-01T00:00:00.000Z`)\n * // @log: {\n * // @log:   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n * // @log:   chainId: 1,\n * // @log:   domain: 'example.com',\n * // @log:   issuedAt: '2023-02-01T00:00:00.000Z',\n * // @log:   nonce: 'foobarbaz',\n * // @log:   statement: 'I accept the ExampleOrg Terms of Service: https://example.com/tos',\n * // @log:   uri: 'https://example.com/path',\n * // @log:   version: '1',\n * // @log: }\n * ```\n *\n * @param message - [EIP-4361](https://eips.ethereum.org/EIPS/eip-4361) formatted message.\n * @returns Message fields object.\n */\nexport function parseMessage(message: string): ExactPartial<Message> {\n  const { scheme, statement, ...prefix } = (message.match(prefixRegex)\n    ?.groups ?? {}) as {\n    address: Address.Address\n    domain: string\n    scheme?: string\n    statement?: string\n  }\n  const { chainId, expirationTime, issuedAt, notBefore, requestId, ...suffix } =\n    (message.match(suffixRegex)?.groups ?? {}) as {\n      chainId: string\n      expirationTime?: string\n      issuedAt?: string\n      nonce: string\n      notBefore?: string\n      requestId?: string\n      uri: string\n      version: '1'\n    }\n  const resources = message.split('Resources:')[1]?.split('\\n- ').slice(1)\n  return {\n    ...prefix,\n    ...suffix,\n    ...(chainId ? { chainId: Number(chainId) } : {}),\n    ...(expirationTime ? { expirationTime: new Date(expirationTime) } : {}),\n    ...(issuedAt ? { issuedAt: new Date(issuedAt) } : {}),\n    ...(notBefore ? { notBefore: new Date(notBefore) } : {}),\n    ...(requestId ? { requestId } : {}),\n    ...(resources ? { resources } : {}),\n    ...(scheme ? { scheme } : {}),\n    ...(statement ? { statement } : {}),\n  }\n}\n\n/**\n * Validates [EIP-4361](https://eips.ethereum.org/EIPS/eip-4361) message.\n *\n * @example\n * ```ts twoslash\n * import { Siwe } from 'ox'\n *\n * Siwe.validateMessage({\n *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   domain: 'example.com',\n *   message: {\n *     address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *     chainId: 1,\n *     domain: 'example.com',\n *     nonce: 'foobarbaz',\n *     uri: 'https://example.com/path',\n *     version: '1',\n *   },\n *   nonce: 'foobarbaz',\n * })\n * // @log: true\n * ```\n *\n * @param value - Values to use when validating EIP-4361 formatted message.\n * @returns Whether the message is valid.\n */\nexport function validateMessage(value: validateMessage.Value): boolean {\n  const { address, domain, message, nonce, scheme, time = new Date() } = value\n\n  if (domain && message.domain !== domain) return false\n  if (nonce && message.nonce !== nonce) return false\n  if (scheme && message.scheme !== scheme) return false\n\n  if (message.expirationTime && time >= message.expirationTime) return false\n  if (message.notBefore && time < message.notBefore) return false\n\n  try {\n    if (!message.address) return false\n    if (address && !Address.isEqual(message.address, address)) return false\n  } catch {\n    return false\n  }\n\n  return true\n}\n\nexport declare namespace validateMessage {\n  interface Value {\n    /**\n     * Ethereum address to check against.\n     */\n    address?: Address.Address | undefined\n    /**\n     * [RFC 3986](https://www.rfc-editor.org/rfc/rfc3986) authority to check against.\n     */\n    domain?: string | undefined\n    /**\n     * EIP-4361 message fields.\n     */\n    message: ExactPartial<Message>\n    /**\n     * Random string to check against.\n     */\n    nonce?: string | undefined\n    /**\n     * [RFC 3986](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) URI scheme to check against.\n     */\n    scheme?: string | undefined\n    /**\n     * Current time to check optional `expirationTime` and `notBefore` fields.\n     *\n     * @default new Date()\n     */\n    time?: Date | undefined\n  }\n}\n\n/**\n * Thrown when a field in a SIWE Message is invalid.\n *\n * @example\n * ```ts twoslash\n * import { Siwe } from 'ox'\n *\n * Siwe.createMessage({\n *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   chainId: 1.1,\n *   domain: 'example.com',\n *   nonce: 'foobarbaz',\n *   uri: 'https://example.com/path',\n *   version: '1',\n * })\n * // @error: Siwe.InvalidMessageFieldError: Invalid Sign-In with Ethereum message field \"chainId\".\n * // @error: - Chain ID must be a EIP-155 chain ID.\n * // @error: - See https://eips.ethereum.org/EIPS/eip-155\n * // @error: Provided value: 1.1\n * ```\n */\nexport class InvalidMessageFieldError extends Errors.BaseError {\n  override readonly name = 'Siwe.InvalidMessageFieldError'\n\n  constructor(parameters: {\n    field: string\n    metaMessages?: string[] | undefined\n  }) {\n    const { field, metaMessages } = parameters\n    super(`Invalid Sign-In with Ethereum message field \"${field}\".`, {\n      metaMessages,\n    })\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}