{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.verifySiweMessage = verifySiweMessage;\nconst hashMessage_js_1 = require(\"../../utils/signature/hashMessage.js\");\nconst parseSiweMessage_js_1 = require(\"../../utils/siwe/parseSiweMessage.js\");\nconst validateSiweMessage_js_1 = require(\"../../utils/siwe/validateSiweMessage.js\");\nconst verifyHash_js_1 = require(\"../public/verifyHash.js\");\nasync function verifySiweMessage(client, parameters) {\n  const {\n    address,\n    domain,\n    message,\n    nonce,\n    scheme,\n    signature,\n    time = new Date(),\n    ...callRequest\n  } = parameters;\n  const parsed = (0, parseSiweMessage_js_1.parseSiweMessage)(message);\n  if (!parsed.address) return false;\n  const isValid = (0, validateSiweMessage_js_1.validateSiweMessage)({\n    address,\n    domain,\n    message: parsed,\n    nonce,\n    scheme,\n    time\n  });\n  if (!isValid) return false;\n  const hash = (0, hashMessage_js_1.hashMessage)(message);\n  return (0, verifyHash_js_1.verifyHash)(client, {\n    address: parsed.address,\n    hash,\n    signature,\n    ...callRequest\n  });\n}","map":{"version":3,"names":["exports","verifySiweMessage","hashMessage_js_1","require","parseSiweMessage_js_1","validateSiweMessage_js_1","verifyHash_js_1","client","parameters","address","domain","message","nonce","scheme","signature","time","Date","callRequest","parsed","parseSiweMessage","isValid","validateSiweMessage","hash","hashMessage","verifyHash"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/viem/actions/siwe/verifySiweMessage.ts"],"sourcesContent":["import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { Prettify } from '../../types/utils.js'\nimport { hashMessage } from '../../utils/signature/hashMessage.js'\nimport type { HashMessageErrorType } from '../../utils/signature/hashMessage.js'\nimport { parseSiweMessage } from '../../utils/siwe/parseSiweMessage.js'\nimport {\n  type ValidateSiweMessageParameters,\n  validateSiweMessage,\n} from '../../utils/siwe/validateSiweMessage.js'\nimport {\n  type VerifyHashErrorType,\n  type VerifyHashParameters,\n  verifyHash,\n} from '../public/verifyHash.js'\n\nexport type VerifySiweMessageParameters = Prettify<\n  Pick<VerifyHashParameters, 'blockNumber' | 'blockTag'> &\n    Pick<\n      ValidateSiweMessageParameters,\n      'address' | 'domain' | 'nonce' | 'scheme' | 'time'\n    > & {\n      /**\n       * EIP-4361 formatted message.\n       */\n      message: string\n      /**\n       * Signature to check against.\n       */\n      signature: Hex\n    }\n>\n\nexport type VerifySiweMessageReturnType = boolean\n\nexport type VerifySiweMessageErrorType =\n  | HashMessageErrorType\n  | VerifyHashErrorType\n  | ErrorType\n\n/**\n * Verifies [EIP-4361](https://eips.ethereum.org/EIPS/eip-4361) formatted message was signed.\n *\n * Compatible with Smart Contract Accounts & Externally Owned Accounts via [ERC-6492](https://eips.ethereum.org/EIPS/eip-6492).\n *\n * - Docs {@link https://viem.sh/docs/siwe/actions/verifySiweMessage}\n *\n * @param client - Client to use.\n * @param parameters - {@link VerifySiweMessageParameters}\n * @returns Whether or not the signature is valid. {@link VerifySiweMessageReturnType}\n */\nexport async function verifySiweMessage<chain extends Chain | undefined>(\n  client: Client<Transport, chain>,\n  parameters: VerifySiweMessageParameters,\n): Promise<VerifySiweMessageReturnType> {\n  const {\n    address,\n    domain,\n    message,\n    nonce,\n    scheme,\n    signature,\n    time = new Date(),\n    ...callRequest\n  } = parameters\n\n  const parsed = parseSiweMessage(message)\n  if (!parsed.address) return false\n\n  const isValid = validateSiweMessage({\n    address,\n    domain,\n    message: parsed,\n    nonce,\n    scheme,\n    time,\n  })\n  if (!isValid) return false\n\n  const hash = hashMessage(message)\n  return verifyHash(client, {\n    address: parsed.address,\n    hash,\n    signature,\n    ...callRequest,\n  })\n}\n"],"mappings":";;;;;AAsDAA,OAAA,CAAAC,iBAAA,GAAAA,iBAAA;AAhDA,MAAAC,gBAAA,GAAAC,OAAA;AAEA,MAAAC,qBAAA,GAAAD,OAAA;AACA,MAAAE,wBAAA,GAAAF,OAAA;AAIA,MAAAG,eAAA,GAAAH,OAAA;AAyCO,eAAeF,iBAAiBA,CACrCM,MAAgC,EAChCC,UAAuC;EAEvC,MAAM;IACJC,OAAO;IACPC,MAAM;IACNC,OAAO;IACPC,KAAK;IACLC,MAAM;IACNC,SAAS;IACTC,IAAI,GAAG,IAAIC,IAAI,EAAE;IACjB,GAAGC;EAAW,CACf,GAAGT,UAAU;EAEd,MAAMU,MAAM,GAAG,IAAAd,qBAAA,CAAAe,gBAAgB,EAACR,OAAO,CAAC;EACxC,IAAI,CAACO,MAAM,CAACT,OAAO,EAAE,OAAO,KAAK;EAEjC,MAAMW,OAAO,GAAG,IAAAf,wBAAA,CAAAgB,mBAAmB,EAAC;IAClCZ,OAAO;IACPC,MAAM;IACNC,OAAO,EAAEO,MAAM;IACfN,KAAK;IACLC,MAAM;IACNE;GACD,CAAC;EACF,IAAI,CAACK,OAAO,EAAE,OAAO,KAAK;EAE1B,MAAME,IAAI,GAAG,IAAApB,gBAAA,CAAAqB,WAAW,EAACZ,OAAO,CAAC;EACjC,OAAO,IAAAL,eAAA,CAAAkB,UAAU,EAACjB,MAAM,EAAE;IACxBE,OAAO,EAAES,MAAM,CAACT,OAAO;IACvBa,IAAI;IACJR,SAAS;IACT,GAAGG;GACJ,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}