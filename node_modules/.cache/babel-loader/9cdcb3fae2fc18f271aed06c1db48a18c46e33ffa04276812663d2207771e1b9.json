{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.watchEvent = watchEvent;\nconst encodeEventTopics_js_1 = require(\"../../utils/abi/encodeEventTopics.js\");\nconst observe_js_1 = require(\"../../utils/observe.js\");\nconst poll_js_1 = require(\"../../utils/poll.js\");\nconst stringify_js_1 = require(\"../../utils/stringify.js\");\nconst abi_js_1 = require(\"../../errors/abi.js\");\nconst rpc_js_1 = require(\"../../errors/rpc.js\");\nconst decodeEventLog_js_1 = require(\"../../utils/abi/decodeEventLog.js\");\nconst log_js_1 = require(\"../../utils/formatters/log.js\");\nconst getAction_js_1 = require(\"../../utils/getAction.js\");\nconst createEventFilter_js_1 = require(\"./createEventFilter.js\");\nconst getBlockNumber_js_1 = require(\"./getBlockNumber.js\");\nconst getFilterChanges_js_1 = require(\"./getFilterChanges.js\");\nconst getLogs_js_1 = require(\"./getLogs.js\");\nconst uninstallFilter_js_1 = require(\"./uninstallFilter.js\");\nfunction watchEvent(client, {\n  address,\n  args,\n  batch = true,\n  event,\n  events,\n  fromBlock,\n  onError,\n  onLogs,\n  poll: poll_,\n  pollingInterval = client.pollingInterval,\n  strict: strict_\n}) {\n  const enablePolling = (() => {\n    if (typeof poll_ !== 'undefined') return poll_;\n    if (typeof fromBlock === 'bigint') return true;\n    if (client.transport.type === 'webSocket' || client.transport.type === 'ipc') return false;\n    if (client.transport.type === 'fallback' && (client.transport.transports[0].config.type === 'webSocket' || client.transport.transports[0].config.type === 'ipc')) return false;\n    return true;\n  })();\n  const strict = strict_ ?? false;\n  const pollEvent = () => {\n    const observerId = (0, stringify_js_1.stringify)(['watchEvent', address, args, batch, client.uid, event, pollingInterval, fromBlock]);\n    return (0, observe_js_1.observe)(observerId, {\n      onLogs,\n      onError\n    }, emit => {\n      let previousBlockNumber;\n      if (fromBlock !== undefined) previousBlockNumber = fromBlock - 1n;\n      let filter;\n      let initialized = false;\n      const unwatch = (0, poll_js_1.poll)(async () => {\n        if (!initialized) {\n          try {\n            filter = await (0, getAction_js_1.getAction)(client, createEventFilter_js_1.createEventFilter, 'createEventFilter')({\n              address,\n              args,\n              event: event,\n              events,\n              strict,\n              fromBlock\n            });\n          } catch {}\n          initialized = true;\n          return;\n        }\n        try {\n          let logs;\n          if (filter) {\n            logs = await (0, getAction_js_1.getAction)(client, getFilterChanges_js_1.getFilterChanges, 'getFilterChanges')({\n              filter\n            });\n          } else {\n            const blockNumber = await (0, getAction_js_1.getAction)(client, getBlockNumber_js_1.getBlockNumber, 'getBlockNumber')({});\n            if (previousBlockNumber && previousBlockNumber !== blockNumber) {\n              logs = await (0, getAction_js_1.getAction)(client, getLogs_js_1.getLogs, 'getLogs')({\n                address,\n                args,\n                event: event,\n                events,\n                fromBlock: previousBlockNumber + 1n,\n                toBlock: blockNumber\n              });\n            } else {\n              logs = [];\n            }\n            previousBlockNumber = blockNumber;\n          }\n          if (logs.length === 0) return;\n          if (batch) emit.onLogs(logs);else for (const log of logs) emit.onLogs([log]);\n        } catch (err) {\n          if (filter && err instanceof rpc_js_1.InvalidInputRpcError) initialized = false;\n          emit.onError?.(err);\n        }\n      }, {\n        emitOnBegin: true,\n        interval: pollingInterval\n      });\n      return async () => {\n        if (filter) await (0, getAction_js_1.getAction)(client, uninstallFilter_js_1.uninstallFilter, 'uninstallFilter')({\n          filter\n        });\n        unwatch();\n      };\n    });\n  };\n  const subscribeEvent = () => {\n    let active = true;\n    let unsubscribe = () => active = false;\n    (async () => {\n      try {\n        const transport = (() => {\n          if (client.transport.type === 'fallback') {\n            const transport = client.transport.transports.find(transport => transport.config.type === 'webSocket' || transport.config.type === 'ipc');\n            if (!transport) return client.transport;\n            return transport.value;\n          }\n          return client.transport;\n        })();\n        const events_ = events ?? (event ? [event] : undefined);\n        let topics = [];\n        if (events_) {\n          const encoded = events_.flatMap(event => (0, encodeEventTopics_js_1.encodeEventTopics)({\n            abi: [event],\n            eventName: event.name,\n            args\n          }));\n          topics = [encoded];\n          if (event) topics = topics[0];\n        }\n        const {\n          unsubscribe: unsubscribe_\n        } = await transport.subscribe({\n          params: ['logs', {\n            address,\n            topics\n          }],\n          onData(data) {\n            if (!active) return;\n            const log = data.result;\n            try {\n              const {\n                eventName,\n                args\n              } = (0, decodeEventLog_js_1.decodeEventLog)({\n                abi: events_ ?? [],\n                data: log.data,\n                topics: log.topics,\n                strict\n              });\n              const formatted = (0, log_js_1.formatLog)(log, {\n                args,\n                eventName\n              });\n              onLogs([formatted]);\n            } catch (err) {\n              let eventName;\n              let isUnnamed;\n              if (err instanceof abi_js_1.DecodeLogDataMismatch || err instanceof abi_js_1.DecodeLogTopicsMismatch) {\n                if (strict_) return;\n                eventName = err.abiItem.name;\n                isUnnamed = err.abiItem.inputs?.some(x => !('name' in x && x.name));\n              }\n              const formatted = (0, log_js_1.formatLog)(log, {\n                args: isUnnamed ? [] : {},\n                eventName\n              });\n              onLogs([formatted]);\n            }\n          },\n          onError(error) {\n            onError?.(error);\n          }\n        });\n        unsubscribe = unsubscribe_;\n        if (!active) unsubscribe();\n      } catch (err) {\n        onError?.(err);\n      }\n    })();\n    return () => unsubscribe();\n  };\n  return enablePolling ? pollEvent() : subscribeEvent();\n}","map":{"version":3,"names":["exports","watchEvent","encodeEventTopics_js_1","require","observe_js_1","poll_js_1","stringify_js_1","abi_js_1","rpc_js_1","decodeEventLog_js_1","log_js_1","getAction_js_1","createEventFilter_js_1","getBlockNumber_js_1","getFilterChanges_js_1","getLogs_js_1","uninstallFilter_js_1","client","address","args","batch","event","events","fromBlock","onError","onLogs","poll","poll_","pollingInterval","strict","strict_","enablePolling","transport","type","transports","config","pollEvent","observerId","stringify","uid","observe","emit","previousBlockNumber","undefined","filter","initialized","unwatch","getAction","createEventFilter","logs","getFilterChanges","blockNumber","getBlockNumber","getLogs","toBlock","length","log","err","InvalidInputRpcError","emitOnBegin","interval","uninstallFilter","subscribeEvent","active","unsubscribe","find","value","events_","topics","encoded","flatMap","encodeEventTopics","abi","eventName","name","unsubscribe_","subscribe","params","onData","data","result","decodeEventLog","formatted","formatLog","isUnnamed","DecodeLogDataMismatch","DecodeLogTopicsMismatch","abiItem","inputs","some","x","error"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/viem/actions/public/watchEvent.ts"],"sourcesContent":["import type { AbiEvent, Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { Chain } from '../../types/chain.js'\nimport type {\n  MaybeAbiEventName,\n  MaybeExtractEventArgsFromAbi,\n} from '../../types/contract.js'\nimport type { Filter } from '../../types/filter.js'\nimport type { Log } from '../../types/log.js'\nimport type { LogTopic } from '../../types/misc.js'\nimport type { GetPollOptions } from '../../types/transport.js'\nimport {\n  type EncodeEventTopicsParameters,\n  encodeEventTopics,\n} from '../../utils/abi/encodeEventTopics.js'\nimport { type ObserveErrorType, observe } from '../../utils/observe.js'\nimport { poll } from '../../utils/poll.js'\nimport { type StringifyErrorType, stringify } from '../../utils/stringify.js'\n\nimport {\n  DecodeLogDataMismatch,\n  DecodeLogTopicsMismatch,\n} from '../../errors/abi.js'\nimport { InvalidInputRpcError } from '../../errors/rpc.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockNumber } from '../../types/block.js'\nimport { decodeEventLog } from '../../utils/abi/decodeEventLog.js'\nimport { formatLog } from '../../utils/formatters/log.js'\nimport { getAction } from '../../utils/getAction.js'\nimport {\n  type CreateEventFilterParameters,\n  createEventFilter,\n} from './createEventFilter.js'\nimport { getBlockNumber } from './getBlockNumber.js'\nimport { getFilterChanges } from './getFilterChanges.js'\nimport { type GetLogsParameters, getLogs } from './getLogs.js'\nimport { uninstallFilter } from './uninstallFilter.js'\n\nexport type WatchEventOnLogsParameter<\n  abiEvent extends AbiEvent | undefined = undefined,\n  abiEvents extends\n    | readonly AbiEvent[]\n    | readonly unknown[]\n    | undefined = abiEvent extends AbiEvent ? [abiEvent] : undefined,\n  strict extends boolean | undefined = undefined,\n  eventName extends string | undefined = MaybeAbiEventName<abiEvent>,\n> = Log<bigint, number, false, abiEvent, strict, abiEvents, eventName>[]\nexport type WatchEventOnLogsFn<\n  abiEvent extends AbiEvent | undefined = undefined,\n  abiEvents extends\n    | readonly AbiEvent[]\n    | readonly unknown[]\n    | undefined = abiEvent extends AbiEvent ? [abiEvent] : undefined,\n  strict extends boolean | undefined = undefined,\n  //\n  _eventName extends string | undefined = MaybeAbiEventName<abiEvent>,\n> = (\n  logs: WatchEventOnLogsParameter<abiEvent, abiEvents, strict, _eventName>,\n) => void\n\nexport type WatchEventParameters<\n  abiEvent extends AbiEvent | undefined = undefined,\n  abiEvents extends\n    | readonly AbiEvent[]\n    | readonly unknown[]\n    | undefined = abiEvent extends AbiEvent ? [abiEvent] : undefined,\n  strict extends boolean | undefined = undefined,\n  transport extends Transport = Transport,\n  //\n  _eventName extends string | undefined = MaybeAbiEventName<abiEvent>,\n> = {\n  /** The address of the contract. */\n  address?: Address | Address[] | undefined\n  /** Block to start listening from. */\n  fromBlock?: BlockNumber<bigint> | undefined\n  /** The callback to call when an error occurred when trying to get for a new block. */\n  onError?: ((error: Error) => void) | undefined\n  /** The callback to call when new event logs are received. */\n  onLogs: WatchEventOnLogsFn<abiEvent, abiEvents, strict, _eventName>\n} & GetPollOptions<transport> &\n  (\n    | {\n        event: abiEvent\n        events?: undefined\n        args?: MaybeExtractEventArgsFromAbi<abiEvents, _eventName> | undefined\n        /**\n         * Whether or not the logs must match the indexed/non-indexed arguments on `event`.\n         * @default false\n         */\n        strict?: strict | undefined\n      }\n    | {\n        event?: undefined\n        events?: abiEvents | undefined\n        args?: undefined\n        /**\n         * Whether or not the logs must match the indexed/non-indexed arguments on `event`.\n         * @default false\n         */\n        strict?: strict | undefined\n      }\n    | {\n        event?: undefined\n        events?: undefined\n        args?: undefined\n        strict?: undefined\n      }\n  )\n\nexport type WatchEventReturnType = () => void\n\nexport type WatchEventErrorType =\n  | StringifyErrorType\n  | ObserveErrorType\n  | ErrorType\n\n/**\n * Watches and returns emitted [Event Logs](https://viem.sh/docs/glossary/terms#event-log).\n *\n * - Docs: https://viem.sh/docs/actions/public/watchEvent\n * - JSON-RPC Methods:\n *   - **RPC Provider supports `eth_newFilter`:**\n *     - Calls [`eth_newFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newfilter) to create a filter (called on initialize).\n *     - On a polling interval, it will call [`eth_getFilterChanges`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterchanges).\n *   - **RPC Provider does not support `eth_newFilter`:**\n *     - Calls [`eth_getLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getlogs) for each block between the polling interval.\n *\n * This Action will batch up all the Event Logs found within the [`pollingInterval`](https://viem.sh/docs/actions/public/watchEvent#pollinginterval-optional), and invoke them via [`onLogs`](https://viem.sh/docs/actions/public/watchEvent#onLogs).\n *\n * `watchEvent` will attempt to create an [Event Filter](https://viem.sh/docs/actions/public/createEventFilter) and listen to changes to the Filter per polling interval, however, if the RPC Provider does not support Filters (e.g. `eth_newFilter`), then `watchEvent` will fall back to using [`getLogs`](https://viem.sh/docs/actions/public/getLogs) instead.\n *\n * @param client - Client to use\n * @param parameters - {@link WatchEventParameters}\n * @returns A function that can be invoked to stop watching for new Event Logs. {@link WatchEventReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { watchEvent } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const unwatch = watchEvent(client, {\n *   onLogs: (logs) => console.log(logs),\n * })\n */\nexport function watchEvent<\n  chain extends Chain | undefined,\n  const abiEvent extends AbiEvent | undefined = undefined,\n  const abiEvents extends\n    | readonly AbiEvent[]\n    | readonly unknown[]\n    | undefined = abiEvent extends AbiEvent ? [abiEvent] : undefined,\n  strict extends boolean | undefined = undefined,\n  transport extends Transport = Transport,\n  _eventName extends string | undefined = undefined,\n>(\n  client: Client<transport, chain>,\n  {\n    address,\n    args,\n    batch = true,\n    event,\n    events,\n    fromBlock,\n    onError,\n    onLogs,\n    poll: poll_,\n    pollingInterval = client.pollingInterval,\n    strict: strict_,\n  }: WatchEventParameters<abiEvent, abiEvents, strict, transport>,\n): WatchEventReturnType {\n  const enablePolling = (() => {\n    if (typeof poll_ !== 'undefined') return poll_\n    if (typeof fromBlock === 'bigint') return true\n    if (\n      client.transport.type === 'webSocket' ||\n      client.transport.type === 'ipc'\n    )\n      return false\n    if (\n      client.transport.type === 'fallback' &&\n      (client.transport.transports[0].config.type === 'webSocket' ||\n        client.transport.transports[0].config.type === 'ipc')\n    )\n      return false\n    return true\n  })()\n  const strict = strict_ ?? false\n\n  const pollEvent = () => {\n    const observerId = stringify([\n      'watchEvent',\n      address,\n      args,\n      batch,\n      client.uid,\n      event,\n      pollingInterval,\n      fromBlock,\n    ])\n\n    return observe(observerId, { onLogs, onError }, (emit) => {\n      let previousBlockNumber: bigint\n      if (fromBlock !== undefined) previousBlockNumber = fromBlock - 1n\n      let filter: Filter<'event', abiEvents, _eventName, any>\n      let initialized = false\n\n      const unwatch = poll(\n        async () => {\n          if (!initialized) {\n            try {\n              filter = (await getAction(\n                client,\n                createEventFilter as any,\n                'createEventFilter',\n              )({\n                address,\n                args,\n                event: event!,\n                events,\n                strict,\n                fromBlock,\n              } as unknown as CreateEventFilterParameters)) as unknown as Filter<\n                'event',\n                abiEvents,\n                _eventName\n              >\n            } catch {}\n            initialized = true\n            return\n          }\n\n          try {\n            let logs: Log[]\n            if (filter) {\n              logs = await getAction(\n                client,\n                getFilterChanges,\n                'getFilterChanges',\n              )({ filter })\n            } else {\n              // If the filter doesn't exist, we will fall back to use `getLogs`.\n              // The fall back exists because some RPC Providers do not support filters.\n\n              // Fetch the block number to use for `getLogs`.\n              const blockNumber = await getAction(\n                client,\n                getBlockNumber,\n                'getBlockNumber',\n              )({})\n\n              // If the block number has changed, we will need to fetch the logs.\n              // If the block number doesn't exist, we are yet to reach the first poll interval,\n              // so do not emit any logs.\n              if (previousBlockNumber && previousBlockNumber !== blockNumber) {\n                logs = await getAction(\n                  client,\n                  getLogs,\n                  'getLogs',\n                )({\n                  address,\n                  args,\n                  event: event!,\n                  events,\n                  fromBlock: previousBlockNumber + 1n,\n                  toBlock: blockNumber,\n                } as unknown as GetLogsParameters)\n              } else {\n                logs = []\n              }\n              previousBlockNumber = blockNumber\n            }\n\n            if (logs.length === 0) return\n            if (batch) emit.onLogs(logs as any)\n            else for (const log of logs) emit.onLogs([log] as any)\n          } catch (err) {\n            // If a filter has been set and gets uninstalled, providers will throw an InvalidInput error.\n            // Reinitialize the filter when this occurs\n            if (filter && err instanceof InvalidInputRpcError)\n              initialized = false\n            emit.onError?.(err as Error)\n          }\n        },\n        {\n          emitOnBegin: true,\n          interval: pollingInterval,\n        },\n      )\n\n      return async () => {\n        if (filter)\n          await getAction(\n            client,\n            uninstallFilter,\n            'uninstallFilter',\n          )({ filter })\n        unwatch()\n      }\n    })\n  }\n\n  const subscribeEvent = () => {\n    let active = true\n    let unsubscribe = () => (active = false)\n    ;(async () => {\n      try {\n        const transport = (() => {\n          if (client.transport.type === 'fallback') {\n            const transport = client.transport.transports.find(\n              (transport: ReturnType<Transport>) =>\n                transport.config.type === 'webSocket' ||\n                transport.config.type === 'ipc',\n            )\n            if (!transport) return client.transport\n            return transport.value\n          }\n          return client.transport\n        })()\n\n        const events_ = events ?? (event ? [event] : undefined)\n        let topics: LogTopic[] = []\n        if (events_) {\n          const encoded = (events_ as AbiEvent[]).flatMap((event) =>\n            encodeEventTopics({\n              abi: [event],\n              eventName: (event as AbiEvent).name,\n              args,\n            } as EncodeEventTopicsParameters),\n          )\n          // TODO: Clean up type casting\n          topics = [encoded as LogTopic]\n          if (event) topics = topics[0] as LogTopic[]\n        }\n\n        const { unsubscribe: unsubscribe_ } = await transport.subscribe({\n          params: ['logs', { address, topics }],\n          onData(data: any) {\n            if (!active) return\n            const log = data.result\n            try {\n              const { eventName, args } = decodeEventLog({\n                abi: events_ ?? [],\n                data: log.data,\n                topics: log.topics,\n                strict,\n              })\n              const formatted = formatLog(log, { args, eventName })\n              onLogs([formatted] as any)\n            } catch (err) {\n              let eventName: string | undefined\n              let isUnnamed: boolean | undefined\n              if (\n                err instanceof DecodeLogDataMismatch ||\n                err instanceof DecodeLogTopicsMismatch\n              ) {\n                // If strict mode is on, and log data/topics do not match event definition, skip.\n                if (strict_) return\n                eventName = err.abiItem.name\n                isUnnamed = err.abiItem.inputs?.some(\n                  (x) => !('name' in x && x.name),\n                )\n              }\n\n              // Set args to empty if there is an error decoding (e.g. indexed/non-indexed params mismatch).\n              const formatted = formatLog(log, {\n                args: isUnnamed ? [] : {},\n                eventName,\n              })\n              onLogs([formatted] as any)\n            }\n          },\n          onError(error: Error) {\n            onError?.(error)\n          },\n        })\n        unsubscribe = unsubscribe_\n        if (!active) unsubscribe()\n      } catch (err) {\n        onError?.(err as Error)\n      }\n    })()\n    return () => unsubscribe()\n  }\n\n  return enablePolling ? pollEvent() : subscribeEvent()\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}