{"ast":null,"code":"'use client';\n\nimport { watchContractEvent } from '@wagmi/core';\nimport { useEffect } from 'react';\nimport { useChainId } from './useChainId.js';\nimport { useConfig } from './useConfig.js';\n/** https://wagmi.sh/react/api/hooks/useWatchContractEvent */\nexport function useWatchContractEvent(parameters = {}) {\n  const {\n    enabled = true,\n    onLogs,\n    config: _,\n    ...rest\n  } = parameters;\n  const config = useConfig(parameters);\n  const configChainId = useChainId({\n    config\n  });\n  const chainId = parameters.chainId ?? configChainId;\n  // TODO(react@19): cleanup\n  // biome-ignore lint/correctness/useExhaustiveDependencies: `rest` changes every render so only including properties in dependency array\n  useEffect(() => {\n    if (!enabled) return;\n    if (!onLogs) return;\n    return watchContractEvent(config, {\n      ...rest,\n      chainId,\n      onLogs\n    });\n  }, [chainId, config, enabled, onLogs,\n  ///\n  rest.abi, rest.address, rest.args, rest.batch, rest.eventName, rest.fromBlock, rest.onError, rest.poll, rest.pollingInterval, rest.strict, rest.syncConnectedChain]);\n}","map":{"version":3,"names":["watchContractEvent","useEffect","useChainId","useConfig","useWatchContractEvent","parameters","enabled","onLogs","config","_","rest","configChainId","chainId","abi","address","args","batch","eventName","fromBlock","onError","poll","pollingInterval","strict","syncConnectedChain"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/wagmi/src/hooks/useWatchContractEvent.ts"],"sourcesContent":["'use client'\n\nimport {\n  type Config,\n  type ResolvedRegister,\n  type WatchContractEventParameters,\n  watchContractEvent,\n} from '@wagmi/core'\nimport type { UnionCompute, UnionExactPartial } from '@wagmi/core/internal'\nimport { useEffect } from 'react'\nimport type { Abi, ContractEventName } from 'viem'\n\nimport type { ConfigParameter, EnabledParameter } from '../types/properties.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseWatchContractEventParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  eventName extends ContractEventName<abi> = ContractEventName<abi>,\n  strict extends boolean | undefined = undefined,\n  config extends Config = Config,\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n> = UnionCompute<\n  UnionExactPartial<\n    WatchContractEventParameters<abi, eventName, strict, config, chainId>\n  > &\n    ConfigParameter<config> &\n    EnabledParameter\n>\n\nexport type UseWatchContractEventReturnType = void\n\n/** https://wagmi.sh/react/api/hooks/useWatchContractEvent */\nexport function useWatchContractEvent<\n  const abi extends Abi | readonly unknown[],\n  eventName extends ContractEventName<abi>,\n  strict extends boolean | undefined = undefined,\n  config extends Config = ResolvedRegister['config'],\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n>(\n  parameters: UseWatchContractEventParameters<\n    abi,\n    eventName,\n    strict,\n    config,\n    chainId\n  > = {} as any,\n): UseWatchContractEventReturnType {\n  const { enabled = true, onLogs, config: _, ...rest } = parameters\n\n  const config = useConfig(parameters)\n  const configChainId = useChainId({ config })\n  const chainId = parameters.chainId ?? configChainId\n\n  // TODO(react@19): cleanup\n  // biome-ignore lint/correctness/useExhaustiveDependencies: `rest` changes every render so only including properties in dependency array\n  useEffect(() => {\n    if (!enabled) return\n    if (!onLogs) return\n    return watchContractEvent(config, {\n      ...(rest as any),\n      chainId,\n      onLogs,\n    })\n  }, [\n    chainId,\n    config,\n    enabled,\n    onLogs,\n    ///\n    rest.abi,\n    rest.address,\n    rest.args,\n    rest.batch,\n    rest.eventName,\n    rest.fromBlock,\n    rest.onError,\n    rest.poll,\n    rest.pollingInterval,\n    rest.strict,\n    rest.syncConnectedChain,\n  ])\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,SAIEA,kBAAkB,QACb,aAAa;AAEpB,SAASC,SAAS,QAAQ,OAAO;AAIjC,SAASC,UAAU,QAAQ,iBAAiB;AAC5C,SAASC,SAAS,QAAQ,gBAAgB;AAmB1C;AACA,OAAM,SAAUC,qBAAqBA,CAQnCC,UAAA,GAMI,EAAS;EAEb,MAAM;IAAEC,OAAO,GAAG,IAAI;IAAEC,MAAM;IAAEC,MAAM,EAAEC,CAAC;IAAE,GAAGC;EAAI,CAAE,GAAGL,UAAU;EAEjE,MAAMG,MAAM,GAAGL,SAAS,CAACE,UAAU,CAAC;EACpC,MAAMM,aAAa,GAAGT,UAAU,CAAC;IAAEM;EAAM,CAAE,CAAC;EAC5C,MAAMI,OAAO,GAAGP,UAAU,CAACO,OAAO,IAAID,aAAa;EAEnD;EACA;EACAV,SAAS,CAAC,MAAK;IACb,IAAI,CAACK,OAAO,EAAE;IACd,IAAI,CAACC,MAAM,EAAE;IACb,OAAOP,kBAAkB,CAACQ,MAAM,EAAE;MAChC,GAAIE,IAAY;MAChBE,OAAO;MACPL;KACD,CAAC;EACJ,CAAC,EAAE,CACDK,OAAO,EACPJ,MAAM,EACNF,OAAO,EACPC,MAAM;EACN;EACAG,IAAI,CAACG,GAAG,EACRH,IAAI,CAACI,OAAO,EACZJ,IAAI,CAACK,IAAI,EACTL,IAAI,CAACM,KAAK,EACVN,IAAI,CAACO,SAAS,EACdP,IAAI,CAACQ,SAAS,EACdR,IAAI,CAACS,OAAO,EACZT,IAAI,CAACU,IAAI,EACTV,IAAI,CAACW,eAAe,EACpBX,IAAI,CAACY,MAAM,EACXZ,IAAI,CAACa,kBAAkB,CACxB,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}