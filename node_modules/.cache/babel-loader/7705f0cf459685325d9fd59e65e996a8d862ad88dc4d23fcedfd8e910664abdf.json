{"ast":null,"code":"import { Wallet } from '../wallet/index.js';\nimport { PermissionsError, PERMISSIONS_REQUEST_REJECTED } from '../types/permissions.js';\nconst hasPermission = (required, permissions) => permissions.some(permission => permission.parentCapability === required);\nconst requirePermission = () => (_, propertyKey, descriptor) => {\n  const originalMethod = descriptor.value;\n  descriptor.value = async function () {\n    // @ts-expect-error accessing private property from decorator. 'this' context is the class instance\n    const wallet = new Wallet(this.communicator);\n    let currentPermissions = await wallet.getPermissions();\n    if (!hasPermission(propertyKey, currentPermissions)) {\n      currentPermissions = await wallet.requestPermissions([{\n        [propertyKey]: {}\n      }]);\n    }\n    if (!hasPermission(propertyKey, currentPermissions)) {\n      throw new PermissionsError('Permissions rejected', PERMISSIONS_REQUEST_REJECTED);\n    }\n    return originalMethod.apply(this);\n  };\n  return descriptor;\n};\nexport default requirePermission;","map":{"version":3,"names":["Wallet","PermissionsError","PERMISSIONS_REQUEST_REJECTED","hasPermission","required","permissions","some","permission","parentCapability","requirePermission","_","propertyKey","descriptor","originalMethod","value","wallet","communicator","currentPermissions","getPermissions","requestPermissions","apply"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/@safe-global/safe-apps-sdk/src/decorators/requirePermissions.ts"],"sourcesContent":["import { Methods } from '../communication/index.js';\nimport { Safe } from '../safe/index.js';\nimport { Wallet } from '../wallet/index.js';\n\nimport { Permission, PermissionsError, PERMISSIONS_REQUEST_REJECTED } from '../types/permissions.js';\n\nconst hasPermission = (required: Methods, permissions: Permission[]): boolean =>\n  permissions.some((permission) => permission.parentCapability === required);\n\nconst requirePermission = () => (_: unknown, propertyKey: string, descriptor: PropertyDescriptor) => {\n  const originalMethod = descriptor.value;\n\n  descriptor.value = async function () {\n    // @ts-expect-error accessing private property from decorator. 'this' context is the class instance\n    const wallet = new Wallet((this as Safe).communicator);\n\n    let currentPermissions = await wallet.getPermissions();\n\n    if (!hasPermission(propertyKey as Methods, currentPermissions)) {\n      currentPermissions = await wallet.requestPermissions([{ [propertyKey as Methods]: {} }]);\n    }\n\n    if (!hasPermission(propertyKey as Methods, currentPermissions)) {\n      throw new PermissionsError('Permissions rejected', PERMISSIONS_REQUEST_REJECTED);\n    }\n\n    return originalMethod.apply(this);\n  };\n\n  return descriptor;\n};\n\nexport default requirePermission;\n"],"mappings":"AAEA,SAASA,MAAM,QAAQ,oBAAoB;AAE3C,SAAqBC,gBAAgB,EAAEC,4BAA4B,QAAQ,yBAAyB;AAEpG,MAAMC,aAAa,GAAGA,CAACC,QAAiB,EAAEC,WAAyB,KACjEA,WAAW,CAACC,IAAI,CAAEC,UAAU,IAAKA,UAAU,CAACC,gBAAgB,KAAKJ,QAAQ,CAAC;AAE5E,MAAMK,iBAAiB,GAAGA,CAAA,KAAM,CAACC,CAAU,EAAEC,WAAmB,EAAEC,UAA8B,KAAI;EAClG,MAAMC,cAAc,GAAGD,UAAU,CAACE,KAAK;EAEvCF,UAAU,CAACE,KAAK,GAAG,kBAAK;IACtB;IACA,MAAMC,MAAM,GAAG,IAAIf,MAAM,CAAE,IAAa,CAACgB,YAAY,CAAC;IAEtD,IAAIC,kBAAkB,GAAG,MAAMF,MAAM,CAACG,cAAc,EAAE;IAEtD,IAAI,CAACf,aAAa,CAACQ,WAAsB,EAAEM,kBAAkB,CAAC,EAAE;MAC9DA,kBAAkB,GAAG,MAAMF,MAAM,CAACI,kBAAkB,CAAC,CAAC;QAAE,CAACR,WAAsB,GAAG;MAAE,CAAE,CAAC,CAAC;;IAG1F,IAAI,CAACR,aAAa,CAACQ,WAAsB,EAAEM,kBAAkB,CAAC,EAAE;MAC9D,MAAM,IAAIhB,gBAAgB,CAAC,sBAAsB,EAAEC,4BAA4B,CAAC;;IAGlF,OAAOW,cAAc,CAACO,KAAK,CAAC,IAAI,CAAC;EACnC,CAAC;EAED,OAAOR,UAAU;AACnB,CAAC;AAED,eAAeH,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}