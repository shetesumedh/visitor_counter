{"ast":null,"code":"import { execute } from '../actions/execute.js';\nimport { executeBatches } from '../actions/executeBatches.js';\nimport { supportsExecutionMode } from '../actions/supportsExecutionMode.js';\n/**\n * A suite of Actions for [ERC-7821](https://eips.ethereum.org/EIPS/eip-7821).\n *\n * @example\n * import { createClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { erc7821Actions } from 'viem/experimental'\n *\n * const client = createClient({\n *   chain: mainnet,\n *   transport: http(),\n * }).extend(erc7821Actions())\n */\nexport function erc7821Actions() {\n  return client => {\n    return {\n      execute: parameters => execute(client, parameters),\n      executeBatches: parameters => executeBatches(client, parameters),\n      supportsExecutionMode: parameters => supportsExecutionMode(client, parameters)\n    };\n  };\n}","map":{"version":3,"names":["execute","executeBatches","supportsExecutionMode","erc7821Actions","client","parameters"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/viem/experimental/erc7821/decorators/erc7821.ts"],"sourcesContent":["import type { Client } from '../../../clients/createClient.js'\nimport type { Transport } from '../../../clients/transports/createTransport.js'\nimport type { Account } from '../../../types/account.js'\nimport type { Chain } from '../../../types/chain.js'\nimport {\n  type ExecuteParameters,\n  type ExecuteReturnType,\n  execute,\n} from '../actions/execute.js'\nimport {\n  type Batch,\n  type ExecuteBatchesParameters,\n  type ExecuteBatchesReturnType,\n  executeBatches,\n} from '../actions/executeBatches.js'\nimport {\n  type SupportsExecutionModeParameters,\n  type SupportsExecutionModeReturnType,\n  supportsExecutionMode,\n} from '../actions/supportsExecutionMode.js'\n\nexport type Erc7821Actions<\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n> = {\n  /**\n   * Executes call(s) using the `execute` function on an [ERC-7821-compatible contract](https://eips.ethereum.org/EIPS/eip-7821).\n   *\n   * @example\n   * ```ts\n   * import { createClient, http } from 'viem'\n   * import { privateKeyToAccount } from 'viem/accounts'\n   * import { mainnet } from 'viem/chains'\n   * import { erc7821Actions } from 'viem/experimental'\n   *\n   * const account = privateKeyToAccount('0x...')\n   *\n   * const client = createClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * }).extend(erc7821Actions())\n   *\n   * const hash = await client.execute({\n   *   account,\n   *   calls: [{\n   *     {\n   *       data: '0xdeadbeef',\n   *       to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n   *     },\n   *     {\n   *       to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n   *       value: 69420n,\n   *     },\n   *   }],\n   *   to: account.address,\n   * })\n   * ```\n   *\n   * @example\n   * ```ts\n   * // Account Hoisting\n   * import { createClient, http } from 'viem'\n   * import { privateKeyToAccount } from 'viem/accounts'\n   * import { mainnet } from 'viem/chains'\n   * import { erc7821Actions } from 'viem/experimental'\n   *\n   * const account = privateKeyToAccount('0x...')\n   *\n   * const client = createClient({\n   *   account,\n   *   chain: mainnet,\n   *   transport: http(),\n   * }).extend(erc7821Actions())\n   *\n   * const hash = await client.execute({\n   *   calls: [{\n   *     {\n   *       data: '0xdeadbeef',\n   *       to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n   *     },\n   *     {\n   *       to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n   *       value: 69420n,\n   *     },\n   *   }],\n   *   to: account.address,\n   * })\n   * ```\n   *\n   * @param client - Client to use.\n   * @param parameters - {@link ExecuteParameters}\n   * @returns Transaction hash. {@link ExecuteReturnType}\n   */\n  execute: <\n    const calls extends readonly unknown[],\n    chainOverride extends Chain | undefined = undefined,\n  >(\n    parameters: ExecuteParameters<calls, chain, account, chainOverride>,\n  ) => Promise<ExecuteReturnType>\n  /**\n   * Executes batches of call(s) using \"batch of batches\" mode on an [ERC-7821-compatible contract](https://eips.ethereum.org/EIPS/eip-7821).\n   *\n   * @example\n   * ```ts\n   * import { createClient, http, parseEther } from 'viem'\n   * import { privateKeyToAccount } from 'viem/accounts'\n   * import { mainnet } from 'viem/chains'\n   * import { erc7821Actions } from 'viem/experimental'\n   *\n   * const account = privateKeyToAccount('0x...')\n   *\n   * const client = createClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * }).extend(erc7821Actions())\n   *\n   * const hash = await client.executeBatches({\n   *   account,\n   *   batches: [\n   *     {\n   *       calls: [\n   *         {\n   *           to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n   *           value: parseEther('1'),\n   *         },\n   *       ],\n   *     },\n   *     {\n   *       calls: [\n   *         {\n   *           to: '0xcb98643b8786950F0461f3B0edf99D88F274574D',\n   *           value: parseEther('2'),\n   *         },\n   *         {\n   *           data: '0xdeadbeef',\n   *           to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n   *         },\n   *       ],\n   *     },\n   *   ],\n   *   to: account.address,\n   * })\n   * ```\n   *\n   * @example\n   * ```ts\n   * // Account Hoisting\n   * import { createClient, http, parseEther } from 'viem'\n   * import { privateKeyToAccount } from 'viem/accounts'\n   * import { mainnet } from 'viem/chains'\n   * import { erc7821Actions } from 'viem/experimental'\n   *\n   * const account = privateKeyToAccount('0x...')\n   *\n   * const client = createClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * }).extend(erc7821Actions())\n   *\n   * const hash = await client.executeBatches({\n   *   batches: [\n   *     {\n   *       calls: [\n   *         {\n   *           to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n   *           value: parseEther('1'),\n   *         },\n   *       ],\n   *     },\n   *     {\n   *       calls: [\n   *         {\n   *           to: '0xcb98643b8786950F0461f3B0edf99D88F274574D',\n   *           value: parseEther('2'),\n   *         },\n   *         {\n   *           data: '0xdeadbeef',\n   *           to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n   *         },\n   *       ],\n   *     },\n   *   ],\n   *   to: account.address,\n   * })\n   * ```\n   *\n   * @param client - Client to use.\n   * @param parameters - {@link ExecuteBatchesParameters}\n   * @returns Transaction hash. {@link ExecuteBatchesReturnType}\n   */\n  executeBatches: <\n    const batches extends readonly Batch[],\n    chainOverride extends Chain | undefined = undefined,\n  >(\n    parameters: ExecuteBatchesParameters<\n      batches,\n      chain,\n      account,\n      chainOverride\n    >,\n  ) => Promise<ExecuteBatchesReturnType>\n  /**\n   * Checks if the contract supports the ERC-7821 execution mode.\n   *\n   * @example\n   * ```ts\n   * import { createClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { erc7821Actions } from 'viem/experimental'\n   *\n   * const client = createClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * }).extend(erc7821Actions())\n   *\n   * const supported = await supportsExecutionMode(client, {\n   *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n   * })\n   * ```\n   *\n   * @param client - Client to use.\n   * @param parameters - {@link SupportsExecutionModeParameters}\n   * @returns If the execution mode is supported. {@link SupportsExecutionModeReturnType}\n   */\n  supportsExecutionMode: (\n    parameters: SupportsExecutionModeParameters,\n  ) => Promise<SupportsExecutionModeReturnType>\n}\n\n/**\n * A suite of Actions for [ERC-7821](https://eips.ethereum.org/EIPS/eip-7821).\n *\n * @example\n * import { createClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { erc7821Actions } from 'viem/experimental'\n *\n * const client = createClient({\n *   chain: mainnet,\n *   transport: http(),\n * }).extend(erc7821Actions())\n */\nexport function erc7821Actions() {\n  return <\n    transport extends Transport,\n    chain extends Chain | undefined = Chain | undefined,\n    account extends Account | undefined = Account | undefined,\n  >(\n    client: Client<transport, chain, account>,\n  ): Erc7821Actions<chain, account> => {\n    return {\n      execute: (parameters) => execute(client, parameters),\n      executeBatches: (parameters) => executeBatches(client, parameters),\n      supportsExecutionMode: (parameters) =>\n        supportsExecutionMode(client, parameters),\n    }\n  }\n}\n"],"mappings":"AAIA,SAGEA,OAAO,QACF,uBAAuB;AAC9B,SAIEC,cAAc,QACT,8BAA8B;AACrC,SAGEC,qBAAqB,QAChB,qCAAqC;AAkN5C;;;;;;;;;;;;;AAaA,OAAM,SAAUC,cAAcA,CAAA;EAC5B,OAKEC,MAAyC,IACP;IAClC,OAAO;MACLJ,OAAO,EAAGK,UAAU,IAAKL,OAAO,CAACI,MAAM,EAAEC,UAAU,CAAC;MACpDJ,cAAc,EAAGI,UAAU,IAAKJ,cAAc,CAACG,MAAM,EAAEC,UAAU,CAAC;MAClEH,qBAAqB,EAAGG,UAAU,IAChCH,qBAAqB,CAACE,MAAM,EAAEC,UAAU;KAC3C;EACH,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}