{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTransactionCount = getTransactionCount;\nconst fromHex_js_1 = require(\"../../utils/encoding/fromHex.js\");\nconst toHex_js_1 = require(\"../../utils/encoding/toHex.js\");\nasync function getTransactionCount(client, {\n  address,\n  blockTag = 'latest',\n  blockNumber\n}) {\n  const count = await client.request({\n    method: 'eth_getTransactionCount',\n    params: [address, typeof blockNumber === 'bigint' ? (0, toHex_js_1.numberToHex)(blockNumber) : blockTag]\n  }, {\n    dedupe: Boolean(blockNumber)\n  });\n  return (0, fromHex_js_1.hexToNumber)(count);\n}","map":{"version":3,"names":["exports","getTransactionCount","fromHex_js_1","require","toHex_js_1","client","address","blockTag","blockNumber","count","request","method","params","numberToHex","dedupe","Boolean","hexToNumber"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/viem/actions/public/getTransactionCount.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport type { Account } from '../../accounts/types.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type HexToNumberErrorType,\n  hexToNumber,\n} from '../../utils/encoding/fromHex.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\n\nexport type GetTransactionCountParameters = {\n  /** The account address. */\n  address: Address\n} & (\n  | {\n      /** The block number. */\n      blockNumber?: bigint | undefined\n      blockTag?: undefined\n    }\n  | {\n      blockNumber?: undefined\n      /** The block tag. Defaults to 'latest'. */\n      blockTag?: BlockTag | undefined\n    }\n)\nexport type GetTransactionCountReturnType = number\n\nexport type GetTransactionCountErrorType =\n  | RequestErrorType\n  | NumberToHexErrorType\n  | HexToNumberErrorType\n  | ErrorType\n\n/**\n * Returns the number of [Transactions](https://viem.sh/docs/glossary/terms#transaction) an Account has sent.\n *\n * - Docs: https://viem.sh/docs/actions/public/getTransactionCount\n * - JSON-RPC Methods: [`eth_getTransactionCount`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactioncount)\n *\n * @param client - Client to use\n * @param parameters - {@link GetTransactionCountParameters}\n * @returns The number of transactions an account has sent. {@link GetTransactionCountReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getTransactionCount } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const transactionCount = await getTransactionCount(client, {\n *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n * })\n */\nexport async function getTransactionCount<\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n>(\n  client: Client<Transport, chain, account>,\n  { address, blockTag = 'latest', blockNumber }: GetTransactionCountParameters,\n): Promise<GetTransactionCountReturnType> {\n  const count = await client.request(\n    {\n      method: 'eth_getTransactionCount',\n      params: [\n        address,\n        typeof blockNumber === 'bigint' ? numberToHex(blockNumber) : blockTag,\n      ],\n    },\n    {\n      dedupe: Boolean(blockNumber),\n    },\n  )\n  return hexToNumber(count)\n}\n"],"mappings":";;;;;AAgEAA,OAAA,CAAAC,mBAAA,GAAAA,mBAAA;AAvDA,MAAAC,YAAA,GAAAC,OAAA;AAIA,MAAAC,UAAA,GAAAD,OAAA;AAmDO,eAAeF,mBAAmBA,CAIvCI,MAAyC,EACzC;EAAEC,OAAO;EAAEC,QAAQ,GAAG,QAAQ;EAAEC;AAAW,CAAiC;EAE5E,MAAMC,KAAK,GAAG,MAAMJ,MAAM,CAACK,OAAO,CAChC;IACEC,MAAM,EAAE,yBAAyB;IACjCC,MAAM,EAAE,CACNN,OAAO,EACP,OAAOE,WAAW,KAAK,QAAQ,GAAG,IAAAJ,UAAA,CAAAS,WAAW,EAACL,WAAW,CAAC,GAAGD,QAAQ;GAExE,EACD;IACEO,MAAM,EAAEC,OAAO,CAACP,WAAW;GAC5B,CACF;EACD,OAAO,IAAAN,YAAA,CAAAc,WAAW,EAACP,KAAK,CAAC;AAC3B","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}