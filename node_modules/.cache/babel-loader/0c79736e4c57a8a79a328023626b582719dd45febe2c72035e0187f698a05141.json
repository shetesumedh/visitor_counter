{"ast":null,"code":"import { ApiController, ConnectorController, CoreHelperUtil, OptionsController, StorageUtil } from '@reown/appkit-controllers';\nimport { HelpersUtil } from '@reown/appkit-utils';\nimport { ConnectorUtil } from './ConnectorUtil.js';\nimport { ConstantsUtil } from './ConstantsUtil.js';\nexport const WalletUtil = {\n  filterOutDuplicatesByRDNS(wallets) {\n    const connectors = OptionsController.state.enableEIP6963 ? ConnectorController.state.connectors : [];\n    const recent = StorageUtil.getRecentWallets();\n    const connectorRDNSs = connectors.map(connector => connector.info?.rdns).filter(Boolean);\n    const recentRDNSs = recent.map(wallet => wallet.rdns).filter(Boolean);\n    const allRDNSs = connectorRDNSs.concat(recentRDNSs);\n    if (allRDNSs.includes('io.metamask.mobile') && CoreHelperUtil.isMobile()) {\n      const index = allRDNSs.indexOf('io.metamask.mobile');\n      allRDNSs[index] = 'io.metamask';\n    }\n    const filtered = wallets.filter(wallet => !allRDNSs.includes(String(wallet?.rdns)));\n    return filtered;\n  },\n  filterOutDuplicatesByIds(wallets) {\n    const connectors = ConnectorController.state.connectors.filter(connector => connector.type === 'ANNOUNCED' || connector.type === 'INJECTED');\n    const recent = StorageUtil.getRecentWallets();\n    const connectorIds = connectors.map(connector => connector.explorerId);\n    const recentIds = recent.map(wallet => wallet.id);\n    const allIds = connectorIds.concat(recentIds);\n    const filtered = wallets.filter(wallet => !allIds.includes(wallet?.id));\n    return filtered;\n  },\n  filterOutDuplicateWallets(wallets) {\n    const uniqueByRDNS = this.filterOutDuplicatesByRDNS(wallets);\n    const uniqueWallets = this.filterOutDuplicatesByIds(uniqueByRDNS);\n    return uniqueWallets;\n  },\n  markWalletsAsInstalled(wallets) {\n    const {\n      connectors\n    } = ConnectorController.state;\n    const {\n      featuredWalletIds\n    } = OptionsController.state;\n    const installedWalletRdnsMap = connectors.filter(connector => connector.type === 'ANNOUNCED').reduce((rdnsMap, connector) => {\n      if (!connector.info?.rdns) {\n        return rdnsMap;\n      }\n      rdnsMap[connector.info.rdns] = true;\n      return rdnsMap;\n    }, {});\n    const walletsWithInstallationStatus = wallets.map(wallet => ({\n      ...wallet,\n      installed: Boolean(wallet.rdns) && Boolean(installedWalletRdnsMap[wallet.rdns ?? ''])\n    }));\n    const sortedWallets = walletsWithInstallationStatus.sort((walletA, walletB) => {\n      const installationComparison = Number(walletB.installed) - Number(walletA.installed);\n      if (installationComparison !== 0) {\n        return installationComparison;\n      }\n      if (featuredWalletIds?.length) {\n        const walletAFeaturedIndex = featuredWalletIds.indexOf(walletA.id);\n        const walletBFeaturedIndex = featuredWalletIds.indexOf(walletB.id);\n        if (walletAFeaturedIndex !== -1 && walletBFeaturedIndex !== -1) {\n          return walletAFeaturedIndex - walletBFeaturedIndex;\n        }\n        if (walletAFeaturedIndex !== -1) {\n          return -1;\n        }\n        if (walletBFeaturedIndex !== -1) {\n          return 1;\n        }\n      }\n      return 0;\n    });\n    return sortedWallets;\n  },\n  getConnectOrderMethod(_features, _connectors) {\n    const connectMethodOrder = _features?.connectMethodsOrder || OptionsController.state.features?.connectMethodsOrder;\n    const connectors = _connectors || ConnectorController.state.connectors;\n    if (connectMethodOrder) {\n      return connectMethodOrder;\n    }\n    const {\n      injected,\n      announced\n    } = ConnectorUtil.getConnectorsByType(connectors, ApiController.state.recommended, ApiController.state.featured);\n    const shownInjected = injected.filter(ConnectorUtil.showConnector);\n    const shownAnnounced = announced.filter(ConnectorUtil.showConnector);\n    if (shownInjected.length || shownAnnounced.length) {\n      return ['wallet', 'email', 'social'];\n    }\n    return ConstantsUtil.DEFAULT_CONNECT_METHOD_ORDER;\n  },\n  isExcluded(wallet) {\n    const isRDNSExcluded = Boolean(wallet.rdns) && ApiController.state.excludedWallets.some(w => w.rdns === wallet.rdns);\n    const isNameExcluded = Boolean(wallet.name) && ApiController.state.excludedWallets.some(w => HelpersUtil.isLowerCaseMatch(w.name, wallet.name));\n    return isRDNSExcluded || isNameExcluded;\n  }\n};","map":{"version":3,"names":["ApiController","ConnectorController","CoreHelperUtil","OptionsController","StorageUtil","HelpersUtil","ConnectorUtil","ConstantsUtil","WalletUtil","filterOutDuplicatesByRDNS","wallets","connectors","state","enableEIP6963","recent","getRecentWallets","connectorRDNSs","map","connector","info","rdns","filter","Boolean","recentRDNSs","wallet","allRDNSs","concat","includes","isMobile","index","indexOf","filtered","String","filterOutDuplicatesByIds","type","connectorIds","explorerId","recentIds","id","allIds","filterOutDuplicateWallets","uniqueByRDNS","uniqueWallets","markWalletsAsInstalled","featuredWalletIds","installedWalletRdnsMap","reduce","rdnsMap","walletsWithInstallationStatus","installed","sortedWallets","sort","walletA","walletB","installationComparison","Number","length","walletAFeaturedIndex","walletBFeaturedIndex","getConnectOrderMethod","_features","_connectors","connectMethodOrder","connectMethodsOrder","features","injected","announced","getConnectorsByType","recommended","featured","shownInjected","showConnector","shownAnnounced","DEFAULT_CONNECT_METHOD_ORDER","isExcluded","isRDNSExcluded","excludedWallets","some","w","isNameExcluded","name","isLowerCaseMatch"],"sources":["../../../../src/utils/WalletUtil.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}