{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isAddressCache = void 0;\nexports.isAddress = isAddress;\nconst lru_js_1 = require(\"../lru.js\");\nconst getAddress_js_1 = require(\"./getAddress.js\");\nconst addressRegex = /^0x[a-fA-F0-9]{40}$/;\nexports.isAddressCache = new lru_js_1.LruMap(8192);\nfunction isAddress(address, options) {\n  const {\n    strict = true\n  } = options ?? {};\n  const cacheKey = `${address}.${strict}`;\n  if (exports.isAddressCache.has(cacheKey)) return exports.isAddressCache.get(cacheKey);\n  const result = (() => {\n    if (!addressRegex.test(address)) return false;\n    if (address.toLowerCase() === address) return true;\n    if (strict) return (0, getAddress_js_1.checksumAddress)(address) === address;\n    return true;\n  })();\n  exports.isAddressCache.set(cacheKey, result);\n  return result;\n}","map":{"version":3,"names":["exports","isAddress","lru_js_1","require","getAddress_js_1","addressRegex","isAddressCache","LruMap","address","options","strict","cacheKey","has","get","result","test","toLowerCase","checksumAddress","set"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/viem/utils/address/isAddress.ts"],"sourcesContent":["import type { Address } from 'abitype'\nimport type { ErrorType } from '../../errors/utils.js'\nimport { LruMap } from '../lru.js'\nimport { checksumAddress } from './getAddress.js'\n\nconst addressRegex = /^0x[a-fA-F0-9]{40}$/\n\n/** @internal */\nexport const isAddressCache = /*#__PURE__*/ new LruMap<boolean>(8192)\n\nexport type IsAddressOptions = {\n  /**\n   * Enables strict mode. Whether or not to compare the address against its checksum.\n   *\n   * @default true\n   */\n  strict?: boolean | undefined\n}\n\nexport type IsAddressErrorType = ErrorType\n\nexport function isAddress(\n  address: string,\n  options?: IsAddressOptions | undefined,\n): address is Address {\n  const { strict = true } = options ?? {}\n  const cacheKey = `${address}.${strict}`\n\n  if (isAddressCache.has(cacheKey)) return isAddressCache.get(cacheKey)!\n\n  const result = (() => {\n    if (!addressRegex.test(address)) return false\n    if (address.toLowerCase() === address) return true\n    if (strict) return checksumAddress(address as Address) === address\n    return true\n  })()\n  isAddressCache.set(cacheKey, result)\n  return result\n}\n"],"mappings":";;;;;;AAqBAA,OAAA,CAAAC,SAAA,GAAAA,SAAA;AAnBA,MAAAC,QAAA,GAAAC,OAAA;AACA,MAAAC,eAAA,GAAAD,OAAA;AAEA,MAAME,YAAY,GAAG,qBAAqB;AAG7BL,OAAA,CAAAM,cAAc,GAAiB,IAAIJ,QAAA,CAAAK,MAAM,CAAU,IAAI,CAAC;AAarE,SAAgBN,SAASA,CACvBO,OAAe,EACfC,OAAsC;EAEtC,MAAM;IAAEC,MAAM,GAAG;EAAI,CAAE,GAAGD,OAAO,IAAI,EAAE;EACvC,MAAME,QAAQ,GAAG,GAAGH,OAAO,IAAIE,MAAM,EAAE;EAEvC,IAAIV,OAAA,CAAAM,cAAc,CAACM,GAAG,CAACD,QAAQ,CAAC,EAAE,OAAOX,OAAA,CAAAM,cAAc,CAACO,GAAG,CAACF,QAAQ,CAAE;EAEtE,MAAMG,MAAM,GAAG,CAAC,MAAK;IACnB,IAAI,CAACT,YAAY,CAACU,IAAI,CAACP,OAAO,CAAC,EAAE,OAAO,KAAK;IAC7C,IAAIA,OAAO,CAACQ,WAAW,EAAE,KAAKR,OAAO,EAAE,OAAO,IAAI;IAClD,IAAIE,MAAM,EAAE,OAAO,IAAAN,eAAA,CAAAa,eAAe,EAACT,OAAkB,CAAC,KAAKA,OAAO;IAClE,OAAO,IAAI;EACb,CAAC,EAAC,CAAE;EACJR,OAAA,CAAAM,cAAc,CAACY,GAAG,CAACP,QAAQ,EAAEG,MAAM,CAAC;EACpC,OAAOA,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}