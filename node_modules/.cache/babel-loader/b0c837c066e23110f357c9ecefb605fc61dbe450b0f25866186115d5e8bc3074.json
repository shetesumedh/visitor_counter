{"ast":null,"code":"import { readContract } from '../../../actions/public/readContract.js';\nimport { withCache } from '../../../utils/promise/withCache.js';\nimport { abi, executionMode } from '../constants.js';\nconst toSerializedMode = {\n  default: executionMode.default,\n  opData: executionMode.opData,\n  batchOfBatches: executionMode.batchOfBatches\n};\n/**\n * Checks if the contract supports the ERC-7821 execution mode.\n *\n * @example\n * ```ts\n * import { createClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { supportsExecutionMode } from 'viem/experimental/erc7821'\n *\n * const client = createClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n *\n * const supported = await supportsExecutionMode(client, {\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n * })\n * ```\n *\n * @param client - Client to use.\n * @param parameters - {@link SupportsExecutionModeParameters}\n * @returns If the execution mode is supported. {@link SupportsExecutionModeReturnType}\n */\nexport async function supportsExecutionMode(client, parameters) {\n  const {\n    address,\n    mode: m = 'default'\n  } = parameters;\n  const mode = m.startsWith('0x') ? m : toSerializedMode[m];\n  try {\n    return await withCache(() => readContract(client, {\n      abi,\n      address,\n      functionName: 'supportsExecutionMode',\n      args: [mode]\n    }), {\n      cacheKey: `supportsExecutionMode.${address}.${mode}`\n    });\n  } catch {\n    return false;\n  }\n}","map":{"version":3,"names":["readContract","withCache","abi","executionMode","toSerializedMode","default","opData","batchOfBatches","supportsExecutionMode","client","parameters","address","mode","m","startsWith","functionName","args","cacheKey"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/viem/experimental/erc7821/actions/supportsExecutionMode.ts"],"sourcesContent":["import type { Address } from '../../../accounts/index.js'\nimport { readContract } from '../../../actions/public/readContract.js'\nimport type { Client } from '../../../clients/createClient.js'\nimport type { Transport } from '../../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../../errors/utils.js'\nimport type { Chain } from '../../../types/chain.js'\nimport type { Hex } from '../../../types/misc.js'\nimport { withCache } from '../../../utils/promise/withCache.js'\nimport { abi, executionMode } from '../constants.js'\n\nexport type SupportsExecutionModeParameters = {\n  address: Address\n  mode?: 'default' | 'opData' | 'batchOfBatches' | Hex\n}\n\nexport type SupportsExecutionModeReturnType = boolean\n\nexport type SupportsExecutionModeErrorType = ErrorType\n\nconst toSerializedMode = {\n  default: executionMode.default,\n  opData: executionMode.opData,\n  batchOfBatches: executionMode.batchOfBatches,\n} as const\n\n/**\n * Checks if the contract supports the ERC-7821 execution mode.\n *\n * @example\n * ```ts\n * import { createClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { supportsExecutionMode } from 'viem/experimental/erc7821'\n *\n * const client = createClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n *\n * const supported = await supportsExecutionMode(client, {\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n * })\n * ```\n *\n * @param client - Client to use.\n * @param parameters - {@link SupportsExecutionModeParameters}\n * @returns If the execution mode is supported. {@link SupportsExecutionModeReturnType}\n */\nexport async function supportsExecutionMode<\n  chain extends Chain | undefined = Chain | undefined,\n>(\n  client: Client<Transport, chain>,\n  parameters: SupportsExecutionModeParameters,\n): Promise<SupportsExecutionModeReturnType> {\n  const { address, mode: m = 'default' } = parameters\n  const mode = m.startsWith('0x') ? m : (toSerializedMode as any)[m]\n  try {\n    return await withCache(\n      () =>\n        readContract(client, {\n          abi,\n          address,\n          functionName: 'supportsExecutionMode',\n          args: [mode],\n        }),\n      {\n        cacheKey: `supportsExecutionMode.${address}.${mode}`,\n      },\n    )\n  } catch {\n    return false\n  }\n}\n"],"mappings":"AACA,SAASA,YAAY,QAAQ,yCAAyC;AAMtE,SAASC,SAAS,QAAQ,qCAAqC;AAC/D,SAASC,GAAG,EAAEC,aAAa,QAAQ,iBAAiB;AAWpD,MAAMC,gBAAgB,GAAG;EACvBC,OAAO,EAAEF,aAAa,CAACE,OAAO;EAC9BC,MAAM,EAAEH,aAAa,CAACG,MAAM;EAC5BC,cAAc,EAAEJ,aAAa,CAACI;CACtB;AAEV;;;;;;;;;;;;;;;;;;;;;;;AAuBA,OAAO,eAAeC,qBAAqBA,CAGzCC,MAAgC,EAChCC,UAA2C;EAE3C,MAAM;IAAEC,OAAO;IAAEC,IAAI,EAAEC,CAAC,GAAG;EAAS,CAAE,GAAGH,UAAU;EACnD,MAAME,IAAI,GAAGC,CAAC,CAACC,UAAU,CAAC,IAAI,CAAC,GAAGD,CAAC,GAAIT,gBAAwB,CAACS,CAAC,CAAC;EAClE,IAAI;IACF,OAAO,MAAMZ,SAAS,CACpB,MACED,YAAY,CAACS,MAAM,EAAE;MACnBP,GAAG;MACHS,OAAO;MACPI,YAAY,EAAE,uBAAuB;MACrCC,IAAI,EAAE,CAACJ,IAAI;KACZ,CAAC,EACJ;MACEK,QAAQ,EAAE,yBAAyBN,OAAO,IAAIC,IAAI;KACnD,CACF;EACH,CAAC,CAAC,MAAM;IACN,OAAO,KAAK;EACd;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}