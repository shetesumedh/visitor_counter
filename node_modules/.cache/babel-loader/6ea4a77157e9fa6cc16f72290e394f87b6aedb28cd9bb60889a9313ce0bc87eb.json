{"ast":null,"code":"import { p256 } from '@noble/curves/p256';\nimport * as Bytes from './Bytes.js';\nimport * as PublicKey from './PublicKey.js';\n/**\n * Generates an ECDSA P256 key pair that includes:\n *\n * - a `privateKey` of type [`CryptoKey`](https://developer.mozilla.org/en-US/docs/Web/API/CryptoKey)\n *\n * - a `publicKey` of type {@link ox#Hex.Hex} or {@link ox#Bytes.Bytes}\n *\n * @example\n * ```ts twoslash\n * import { WebCryptoP256 } from 'ox'\n *\n * const { publicKey, privateKey } = await WebCryptoP256.createKeyPair()\n * // @log: {\n * // @log:   privateKey: CryptoKey {},\n * // @log:   publicKey: {\n * // @log:     x: 59295962801117472859457908919941473389380284132224861839820747729565200149877n,\n * // @log:     y: 24099691209996290925259367678540227198235484593389470330605641003500238088869n,\n * // @log:     prefix: 4,\n * // @log:   },\n * // @log: }\n * ```\n *\n * @param options - Options for creating the key pair.\n * @returns The key pair.\n */\nexport async function createKeyPair(options = {}) {\n  const {\n    extractable = false\n  } = options;\n  const keypair = await globalThis.crypto.subtle.generateKey({\n    name: 'ECDSA',\n    namedCurve: 'P-256'\n  }, extractable, ['sign', 'verify']);\n  const publicKey_raw = await globalThis.crypto.subtle.exportKey('raw', keypair.publicKey);\n  const publicKey = PublicKey.from(new Uint8Array(publicKey_raw));\n  return {\n    privateKey: keypair.privateKey,\n    publicKey\n  };\n}\n/**\n * Signs a payload with the provided `CryptoKey` private key and returns a P256 signature.\n *\n * @example\n * ```ts twoslash\n * import { WebCryptoP256 } from 'ox'\n *\n * const { privateKey } = await WebCryptoP256.createKeyPair()\n *\n * const signature = await WebCryptoP256.sign({ // [!code focus]\n *   payload: '0xdeadbeef', // [!code focus]\n *   privateKey, // [!code focus]\n * }) // [!code focus]\n * // @log: {\n * // @log:   r: 151231...4423n,\n * // @log:   s: 516123...5512n,\n * // @log: }\n * ```\n *\n * @param options - Options for signing the payload.\n * @returns The P256 ECDSA {@link ox#Signature.Signature}.\n */\nexport async function sign(options) {\n  const {\n    payload,\n    privateKey\n  } = options;\n  const signature = await globalThis.crypto.subtle.sign({\n    name: 'ECDSA',\n    hash: 'SHA-256'\n  }, privateKey, Bytes.from(payload));\n  const signature_bytes = Bytes.fromArray(new Uint8Array(signature));\n  const r = Bytes.toBigInt(Bytes.slice(signature_bytes, 0, 32));\n  let s = Bytes.toBigInt(Bytes.slice(signature_bytes, 32, 64));\n  if (s > p256.CURVE.n / 2n) s = p256.CURVE.n - s;\n  return {\n    r,\n    s\n  };\n}\n/**\n * Verifies a payload was signed by the provided public key.\n *\n * @example\n *\n * ```ts twoslash\n * import { WebCryptoP256 } from 'ox'\n *\n * const { privateKey, publicKey } = await WebCryptoP256.createKeyPair()\n * const signature = await WebCryptoP256.sign({ payload: '0xdeadbeef', privateKey })\n *\n * const verified = await WebCryptoP256.verify({ // [!code focus]\n *   payload: '0xdeadbeef', // [!code focus]\n *   publicKey, // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n * // @log: true\n * ```\n *\n * @param options - The verification options.\n * @returns Whether the payload was signed by the provided public key.\n */\nexport async function verify(options) {\n  const {\n    payload,\n    signature\n  } = options;\n  const publicKey = await globalThis.crypto.subtle.importKey('raw', PublicKey.toBytes(options.publicKey), {\n    name: 'ECDSA',\n    namedCurve: 'P-256'\n  }, true, ['verify']);\n  return await globalThis.crypto.subtle.verify({\n    name: 'ECDSA',\n    hash: 'SHA-256'\n  }, publicKey, Bytes.concat(Bytes.fromNumber(signature.r), Bytes.fromNumber(signature.s)), Bytes.from(payload));\n}","map":{"version":3,"names":["p256","Bytes","PublicKey","createKeyPair","options","extractable","keypair","globalThis","crypto","subtle","generateKey","name","namedCurve","publicKey_raw","exportKey","publicKey","from","Uint8Array","privateKey","sign","payload","signature","hash","signature_bytes","fromArray","r","toBigInt","slice","s","CURVE","n","verify","importKey","toBytes","concat","fromNumber"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/ox/core/WebCryptoP256.ts"],"sourcesContent":["import { p256 } from '@noble/curves/p256'\nimport * as Bytes from './Bytes.js'\nimport type * as Errors from './Errors.js'\nimport type * as Hex from './Hex.js'\nimport * as PublicKey from './PublicKey.js'\nimport type * as Signature from './Signature.js'\nimport type { Compute } from './internal/types.js'\n\n/**\n * Generates an ECDSA P256 key pair that includes:\n *\n * - a `privateKey` of type [`CryptoKey`](https://developer.mozilla.org/en-US/docs/Web/API/CryptoKey)\n *\n * - a `publicKey` of type {@link ox#Hex.Hex} or {@link ox#Bytes.Bytes}\n *\n * @example\n * ```ts twoslash\n * import { WebCryptoP256 } from 'ox'\n *\n * const { publicKey, privateKey } = await WebCryptoP256.createKeyPair()\n * // @log: {\n * // @log:   privateKey: CryptoKey {},\n * // @log:   publicKey: {\n * // @log:     x: 59295962801117472859457908919941473389380284132224861839820747729565200149877n,\n * // @log:     y: 24099691209996290925259367678540227198235484593389470330605641003500238088869n,\n * // @log:     prefix: 4,\n * // @log:   },\n * // @log: }\n * ```\n *\n * @param options - Options for creating the key pair.\n * @returns The key pair.\n */\nexport async function createKeyPair(\n  options: createKeyPair.Options = {},\n): Promise<createKeyPair.ReturnType> {\n  const { extractable = false } = options\n  const keypair = await globalThis.crypto.subtle.generateKey(\n    {\n      name: 'ECDSA',\n      namedCurve: 'P-256',\n    },\n    extractable,\n    ['sign', 'verify'],\n  )\n  const publicKey_raw = await globalThis.crypto.subtle.exportKey(\n    'raw',\n    keypair.publicKey,\n  )\n  const publicKey = PublicKey.from(new Uint8Array(publicKey_raw))\n  return {\n    privateKey: keypair.privateKey,\n    publicKey,\n  }\n}\n\nexport declare namespace createKeyPair {\n  type Options = {\n    /** A boolean value indicating whether it will be possible to export the private key using `globalThis.crypto.subtle.exportKey()`. */\n    extractable?: boolean | undefined\n  }\n\n  type ReturnType = Compute<{\n    privateKey: CryptoKey\n    publicKey: PublicKey.PublicKey\n  }>\n\n  type ErrorType = PublicKey.from.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Signs a payload with the provided `CryptoKey` private key and returns a P256 signature.\n *\n * @example\n * ```ts twoslash\n * import { WebCryptoP256 } from 'ox'\n *\n * const { privateKey } = await WebCryptoP256.createKeyPair()\n *\n * const signature = await WebCryptoP256.sign({ // [!code focus]\n *   payload: '0xdeadbeef', // [!code focus]\n *   privateKey, // [!code focus]\n * }) // [!code focus]\n * // @log: {\n * // @log:   r: 151231...4423n,\n * // @log:   s: 516123...5512n,\n * // @log: }\n * ```\n *\n * @param options - Options for signing the payload.\n * @returns The P256 ECDSA {@link ox#Signature.Signature}.\n */\nexport async function sign(\n  options: sign.Options,\n): Promise<Signature.Signature<false>> {\n  const { payload, privateKey } = options\n  const signature = await globalThis.crypto.subtle.sign(\n    {\n      name: 'ECDSA',\n      hash: 'SHA-256',\n    },\n    privateKey,\n    Bytes.from(payload),\n  )\n  const signature_bytes = Bytes.fromArray(new Uint8Array(signature))\n  const r = Bytes.toBigInt(Bytes.slice(signature_bytes, 0, 32))\n  let s = Bytes.toBigInt(Bytes.slice(signature_bytes, 32, 64))\n  if (s > p256.CURVE.n / 2n) s = p256.CURVE.n - s\n  return { r, s }\n}\n\nexport declare namespace sign {\n  type Options = {\n    /** Payload to sign. */\n    payload: Hex.Hex | Bytes.Bytes\n    /** ECDSA private key. */\n    privateKey: CryptoKey\n  }\n\n  type ErrorType = Bytes.fromArray.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Verifies a payload was signed by the provided public key.\n *\n * @example\n *\n * ```ts twoslash\n * import { WebCryptoP256 } from 'ox'\n *\n * const { privateKey, publicKey } = await WebCryptoP256.createKeyPair()\n * const signature = await WebCryptoP256.sign({ payload: '0xdeadbeef', privateKey })\n *\n * const verified = await WebCryptoP256.verify({ // [!code focus]\n *   payload: '0xdeadbeef', // [!code focus]\n *   publicKey, // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n * // @log: true\n * ```\n *\n * @param options - The verification options.\n * @returns Whether the payload was signed by the provided public key.\n */\nexport async function verify(options: verify.Options): Promise<boolean> {\n  const { payload, signature } = options\n\n  const publicKey = await globalThis.crypto.subtle.importKey(\n    'raw',\n    PublicKey.toBytes(options.publicKey),\n    { name: 'ECDSA', namedCurve: 'P-256' },\n    true,\n    ['verify'],\n  )\n\n  return await globalThis.crypto.subtle.verify(\n    {\n      name: 'ECDSA',\n      hash: 'SHA-256',\n    },\n    publicKey,\n    Bytes.concat(Bytes.fromNumber(signature.r), Bytes.fromNumber(signature.s)),\n    Bytes.from(payload),\n  )\n}\n\nexport declare namespace verify {\n  type Options = {\n    /** Public key that signed the payload. */\n    publicKey: PublicKey.PublicKey<boolean>\n    /** Signature of the payload. */\n    signature: Signature.Signature<false>\n    /** Payload that was signed. */\n    payload: Hex.Hex | Bytes.Bytes\n  }\n\n  type ErrorType = Errors.GlobalErrorType\n}\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,oBAAoB;AACzC,OAAO,KAAKC,KAAK,MAAM,YAAY;AAGnC,OAAO,KAAKC,SAAS,MAAM,gBAAgB;AAI3C;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,OAAO,eAAeC,aAAaA,CACjCC,OAAA,GAAiC,EAAE;EAEnC,MAAM;IAAEC,WAAW,GAAG;EAAK,CAAE,GAAGD,OAAO;EACvC,MAAME,OAAO,GAAG,MAAMC,UAAU,CAACC,MAAM,CAACC,MAAM,CAACC,WAAW,CACxD;IACEC,IAAI,EAAE,OAAO;IACbC,UAAU,EAAE;GACb,EACDP,WAAW,EACX,CAAC,MAAM,EAAE,QAAQ,CAAC,CACnB;EACD,MAAMQ,aAAa,GAAG,MAAMN,UAAU,CAACC,MAAM,CAACC,MAAM,CAACK,SAAS,CAC5D,KAAK,EACLR,OAAO,CAACS,SAAS,CAClB;EACD,MAAMA,SAAS,GAAGb,SAAS,CAACc,IAAI,CAAC,IAAIC,UAAU,CAACJ,aAAa,CAAC,CAAC;EAC/D,OAAO;IACLK,UAAU,EAAEZ,OAAO,CAACY,UAAU;IAC9BH;GACD;AACH;AAgBA;;;;;;;;;;;;;;;;;;;;;;AAsBA,OAAO,eAAeI,IAAIA,CACxBf,OAAqB;EAErB,MAAM;IAAEgB,OAAO;IAAEF;EAAU,CAAE,GAAGd,OAAO;EACvC,MAAMiB,SAAS,GAAG,MAAMd,UAAU,CAACC,MAAM,CAACC,MAAM,CAACU,IAAI,CACnD;IACER,IAAI,EAAE,OAAO;IACbW,IAAI,EAAE;GACP,EACDJ,UAAU,EACVjB,KAAK,CAACe,IAAI,CAACI,OAAO,CAAC,CACpB;EACD,MAAMG,eAAe,GAAGtB,KAAK,CAACuB,SAAS,CAAC,IAAIP,UAAU,CAACI,SAAS,CAAC,CAAC;EAClE,MAAMI,CAAC,GAAGxB,KAAK,CAACyB,QAAQ,CAACzB,KAAK,CAAC0B,KAAK,CAACJ,eAAe,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;EAC7D,IAAIK,CAAC,GAAG3B,KAAK,CAACyB,QAAQ,CAACzB,KAAK,CAAC0B,KAAK,CAACJ,eAAe,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;EAC5D,IAAIK,CAAC,GAAG5B,IAAI,CAAC6B,KAAK,CAACC,CAAC,GAAG,EAAE,EAAEF,CAAC,GAAG5B,IAAI,CAAC6B,KAAK,CAACC,CAAC,GAAGF,CAAC;EAC/C,OAAO;IAAEH,CAAC;IAAEG;EAAC,CAAE;AACjB;AAaA;;;;;;;;;;;;;;;;;;;;;;AAsBA,OAAO,eAAeG,MAAMA,CAAC3B,OAAuB;EAClD,MAAM;IAAEgB,OAAO;IAAEC;EAAS,CAAE,GAAGjB,OAAO;EAEtC,MAAMW,SAAS,GAAG,MAAMR,UAAU,CAACC,MAAM,CAACC,MAAM,CAACuB,SAAS,CACxD,KAAK,EACL9B,SAAS,CAAC+B,OAAO,CAAC7B,OAAO,CAACW,SAAS,CAAC,EACpC;IAAEJ,IAAI,EAAE,OAAO;IAAEC,UAAU,EAAE;EAAO,CAAE,EACtC,IAAI,EACJ,CAAC,QAAQ,CAAC,CACX;EAED,OAAO,MAAML,UAAU,CAACC,MAAM,CAACC,MAAM,CAACsB,MAAM,CAC1C;IACEpB,IAAI,EAAE,OAAO;IACbW,IAAI,EAAE;GACP,EACDP,SAAS,EACTd,KAAK,CAACiC,MAAM,CAACjC,KAAK,CAACkC,UAAU,CAACd,SAAS,CAACI,CAAC,CAAC,EAAExB,KAAK,CAACkC,UAAU,CAACd,SAAS,CAACO,CAAC,CAAC,CAAC,EAC1E3B,KAAK,CAACe,IAAI,CAACI,OAAO,CAAC,CACpB;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}