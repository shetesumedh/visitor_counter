{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.watchPendingTransactions = watchPendingTransactions;\nconst getAction_js_1 = require(\"../../utils/getAction.js\");\nconst observe_js_1 = require(\"../../utils/observe.js\");\nconst poll_js_1 = require(\"../../utils/poll.js\");\nconst stringify_js_1 = require(\"../../utils/stringify.js\");\nconst createPendingTransactionFilter_js_1 = require(\"./createPendingTransactionFilter.js\");\nconst getFilterChanges_js_1 = require(\"./getFilterChanges.js\");\nconst uninstallFilter_js_1 = require(\"./uninstallFilter.js\");\nfunction watchPendingTransactions(client, {\n  batch = true,\n  onError,\n  onTransactions,\n  poll: poll_,\n  pollingInterval = client.pollingInterval\n}) {\n  const enablePolling = typeof poll_ !== 'undefined' ? poll_ : client.transport.type !== 'webSocket' && client.transport.type !== 'ipc';\n  const pollPendingTransactions = () => {\n    const observerId = (0, stringify_js_1.stringify)(['watchPendingTransactions', client.uid, batch, pollingInterval]);\n    return (0, observe_js_1.observe)(observerId, {\n      onTransactions,\n      onError\n    }, emit => {\n      let filter;\n      const unwatch = (0, poll_js_1.poll)(async () => {\n        try {\n          if (!filter) {\n            try {\n              filter = await (0, getAction_js_1.getAction)(client, createPendingTransactionFilter_js_1.createPendingTransactionFilter, 'createPendingTransactionFilter')({});\n              return;\n            } catch (err) {\n              unwatch();\n              throw err;\n            }\n          }\n          const hashes = await (0, getAction_js_1.getAction)(client, getFilterChanges_js_1.getFilterChanges, 'getFilterChanges')({\n            filter\n          });\n          if (hashes.length === 0) return;\n          if (batch) emit.onTransactions(hashes);else for (const hash of hashes) emit.onTransactions([hash]);\n        } catch (err) {\n          emit.onError?.(err);\n        }\n      }, {\n        emitOnBegin: true,\n        interval: pollingInterval\n      });\n      return async () => {\n        if (filter) await (0, getAction_js_1.getAction)(client, uninstallFilter_js_1.uninstallFilter, 'uninstallFilter')({\n          filter\n        });\n        unwatch();\n      };\n    });\n  };\n  const subscribePendingTransactions = () => {\n    let active = true;\n    let unsubscribe = () => active = false;\n    (async () => {\n      try {\n        const {\n          unsubscribe: unsubscribe_\n        } = await client.transport.subscribe({\n          params: ['newPendingTransactions'],\n          onData(data) {\n            if (!active) return;\n            const transaction = data.result;\n            onTransactions([transaction]);\n          },\n          onError(error) {\n            onError?.(error);\n          }\n        });\n        unsubscribe = unsubscribe_;\n        if (!active) unsubscribe();\n      } catch (err) {\n        onError?.(err);\n      }\n    })();\n    return () => unsubscribe();\n  };\n  return enablePolling ? pollPendingTransactions() : subscribePendingTransactions();\n}","map":{"version":3,"names":["exports","watchPendingTransactions","getAction_js_1","require","observe_js_1","poll_js_1","stringify_js_1","createPendingTransactionFilter_js_1","getFilterChanges_js_1","uninstallFilter_js_1","client","batch","onError","onTransactions","poll","poll_","pollingInterval","enablePolling","transport","type","pollPendingTransactions","observerId","stringify","uid","observe","emit","filter","unwatch","getAction","createPendingTransactionFilter","err","hashes","getFilterChanges","length","hash","emitOnBegin","interval","uninstallFilter","subscribePendingTransactions","active","unsubscribe","unsubscribe_","subscribe","params","onData","data","transaction","result","error"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/viem/actions/public/watchPendingTransactions.ts"],"sourcesContent":["import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Filter } from '../../types/filter.js'\nimport type { Hash } from '../../types/misc.js'\nimport type { GetPollOptions } from '../../types/transport.js'\nimport { getAction } from '../../utils/getAction.js'\nimport { type ObserveErrorType, observe } from '../../utils/observe.js'\nimport { poll } from '../../utils/poll.js'\nimport { type StringifyErrorType, stringify } from '../../utils/stringify.js'\n\nimport { createPendingTransactionFilter } from './createPendingTransactionFilter.js'\nimport { getFilterChanges } from './getFilterChanges.js'\nimport { uninstallFilter } from './uninstallFilter.js'\n\nexport type OnTransactionsParameter = Hash[]\nexport type OnTransactionsFn = (transactions: OnTransactionsParameter) => void\n\nexport type WatchPendingTransactionsParameters<\n  transport extends Transport = Transport,\n> = {\n  /** The callback to call when an error occurred when trying to get for a new block. */\n  onError?: ((error: Error) => void) | undefined\n  /** The callback to call when new transactions are received. */\n  onTransactions: OnTransactionsFn\n} & GetPollOptions<transport>\n\nexport type WatchPendingTransactionsReturnType = () => void\n\nexport type WatchPendingTransactionsErrorType =\n  | StringifyErrorType\n  | ObserveErrorType\n  | ErrorType\n\n/**\n * Watches and returns pending transaction hashes.\n *\n * - Docs: https://viem.sh/docs/actions/public/watchPendingTransactions\n * - JSON-RPC Methods:\n *   - When `poll: true`\n *     - Calls [`eth_newPendingTransactionFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newpendingtransactionfilter) to initialize the filter.\n *     - Calls [`eth_getFilterChanges`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getFilterChanges) on a polling interval.\n *   - When `poll: false` & WebSocket Transport, uses a WebSocket subscription via [`eth_subscribe`](https://docs.alchemy.com/reference/eth-subscribe-polygon) and the `\"newPendingTransactions\"` event.\n *\n * This Action will batch up all the pending transactions found within the [`pollingInterval`](https://viem.sh/docs/actions/public/watchPendingTransactions#pollinginterval-optional), and invoke them via [`onTransactions`](https://viem.sh/docs/actions/public/watchPendingTransactions#ontransactions).\n *\n * @param client - Client to use\n * @param parameters - {@link WatchPendingTransactionsParameters}\n * @returns A function that can be invoked to stop watching for new pending transaction hashes. {@link WatchPendingTransactionsReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { watchPendingTransactions } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const unwatch = await watchPendingTransactions(client, {\n *   onTransactions: (hashes) => console.log(hashes),\n * })\n */\nexport function watchPendingTransactions<\n  transport extends Transport,\n  chain extends Chain | undefined,\n>(\n  client: Client<transport, chain>,\n  {\n    batch = true,\n    onError,\n    onTransactions,\n    poll: poll_,\n    pollingInterval = client.pollingInterval,\n  }: WatchPendingTransactionsParameters<transport>,\n) {\n  const enablePolling =\n    typeof poll_ !== 'undefined'\n      ? poll_\n      : client.transport.type !== 'webSocket' && client.transport.type !== 'ipc'\n\n  const pollPendingTransactions = () => {\n    const observerId = stringify([\n      'watchPendingTransactions',\n      client.uid,\n      batch,\n      pollingInterval,\n    ])\n    return observe(observerId, { onTransactions, onError }, (emit) => {\n      let filter: Filter<'transaction'>\n\n      const unwatch = poll(\n        async () => {\n          try {\n            if (!filter) {\n              try {\n                filter = await getAction(\n                  client,\n                  createPendingTransactionFilter,\n                  'createPendingTransactionFilter',\n                )({})\n                return\n              } catch (err) {\n                unwatch()\n                throw err\n              }\n            }\n\n            const hashes = await getAction(\n              client,\n              getFilterChanges,\n              'getFilterChanges',\n            )({ filter })\n            if (hashes.length === 0) return\n            if (batch) emit.onTransactions(hashes)\n            else for (const hash of hashes) emit.onTransactions([hash])\n          } catch (err) {\n            emit.onError?.(err as Error)\n          }\n        },\n        {\n          emitOnBegin: true,\n          interval: pollingInterval,\n        },\n      )\n\n      return async () => {\n        if (filter)\n          await getAction(\n            client,\n            uninstallFilter,\n            'uninstallFilter',\n          )({ filter })\n        unwatch()\n      }\n    })\n  }\n\n  const subscribePendingTransactions = () => {\n    let active = true\n    let unsubscribe = () => (active = false)\n    ;(async () => {\n      try {\n        const { unsubscribe: unsubscribe_ } = await client.transport.subscribe({\n          params: ['newPendingTransactions'],\n          onData(data: any) {\n            if (!active) return\n            const transaction = data.result\n            onTransactions([transaction])\n          },\n          onError(error: Error) {\n            onError?.(error)\n          },\n        })\n        unsubscribe = unsubscribe_\n        if (!active) unsubscribe()\n      } catch (err) {\n        onError?.(err as Error)\n      }\n    })()\n    return () => unsubscribe()\n  }\n\n  return enablePolling\n    ? pollPendingTransactions()\n    : subscribePendingTransactions()\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}