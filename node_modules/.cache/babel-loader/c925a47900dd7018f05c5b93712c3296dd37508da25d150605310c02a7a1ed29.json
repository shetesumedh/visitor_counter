{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTxpoolStatus = getTxpoolStatus;\nconst fromHex_js_1 = require(\"../../utils/encoding/fromHex.js\");\nasync function getTxpoolStatus(client) {\n  const {\n    pending,\n    queued\n  } = await client.request({\n    method: 'txpool_status'\n  });\n  return {\n    pending: (0, fromHex_js_1.hexToNumber)(pending),\n    queued: (0, fromHex_js_1.hexToNumber)(queued)\n  };\n}","map":{"version":3,"names":["exports","getTxpoolStatus","fromHex_js_1","require","client","pending","queued","request","method","hexToNumber"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/viem/actions/test/getTxpoolStatus.ts"],"sourcesContent":["import type {\n  TestClient,\n  TestClientMode,\n} from '../../clients/createTestClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport { hexToNumber } from '../../utils/encoding/fromHex.js'\n\nexport type GetTxpoolStatusReturnType = {\n  pending: number\n  queued: number\n}\n\nexport type GetTxpoolStatusErrorType = RequestErrorType | ErrorType\n\n/**\n * Returns a summary of all the transactions currently pending for inclusion in the next block(s), as well as the ones that are being scheduled for future execution only.\n *\n * - Docs: https://viem.sh/docs/actions/test/getTxpoolStatus\n *\n * @param client - Client to use\n * @returns Transaction pool status. {@link GetTxpoolStatusReturnType}\n *\n * @example\n * import { createTestClient, http } from 'viem'\n * import { foundry } from 'viem/chains'\n * import { getTxpoolStatus } from 'viem/test'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: 'foundry',\n *   transport: http(),\n * })\n * const status = await getTxpoolStatus(client)\n */\nexport async function getTxpoolStatus<\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n>(\n  client: TestClient<TestClientMode, Transport, chain, account, false>,\n): Promise<GetTxpoolStatusReturnType> {\n  const { pending, queued } = await client.request({\n    method: 'txpool_status',\n  })\n  return {\n    pending: hexToNumber(pending),\n    queued: hexToNumber(queued),\n  }\n}\n"],"mappings":";;;;;AAsCAA,OAAA,CAAAC,eAAA,GAAAA,eAAA;AA7BA,MAAAC,YAAA,GAAAC,OAAA;AA6BO,eAAeF,eAAeA,CAInCG,MAAoE;EAEpE,MAAM;IAAEC,OAAO;IAAEC;EAAM,CAAE,GAAG,MAAMF,MAAM,CAACG,OAAO,CAAC;IAC/CC,MAAM,EAAE;GACT,CAAC;EACF,OAAO;IACLH,OAAO,EAAE,IAAAH,YAAA,CAAAO,WAAW,EAACJ,OAAO,CAAC;IAC7BC,MAAM,EAAE,IAAAJ,YAAA,CAAAO,WAAW,EAACH,MAAM;GAC3B;AACH","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}