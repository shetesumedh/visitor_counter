{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.testActions = testActions;\nconst dropTransaction_js_1 = require(\"../../actions/test/dropTransaction.js\");\nconst dumpState_js_1 = require(\"../../actions/test/dumpState.js\");\nconst getAutomine_js_1 = require(\"../../actions/test/getAutomine.js\");\nconst getTxpoolContent_js_1 = require(\"../../actions/test/getTxpoolContent.js\");\nconst getTxpoolStatus_js_1 = require(\"../../actions/test/getTxpoolStatus.js\");\nconst impersonateAccount_js_1 = require(\"../../actions/test/impersonateAccount.js\");\nconst increaseTime_js_1 = require(\"../../actions/test/increaseTime.js\");\nconst inspectTxpool_js_1 = require(\"../../actions/test/inspectTxpool.js\");\nconst loadState_js_1 = require(\"../../actions/test/loadState.js\");\nconst mine_js_1 = require(\"../../actions/test/mine.js\");\nconst removeBlockTimestampInterval_js_1 = require(\"../../actions/test/removeBlockTimestampInterval.js\");\nconst reset_js_1 = require(\"../../actions/test/reset.js\");\nconst revert_js_1 = require(\"../../actions/test/revert.js\");\nconst sendUnsignedTransaction_js_1 = require(\"../../actions/test/sendUnsignedTransaction.js\");\nconst setAutomine_js_1 = require(\"../../actions/test/setAutomine.js\");\nconst setBalance_js_1 = require(\"../../actions/test/setBalance.js\");\nconst setBlockGasLimit_js_1 = require(\"../../actions/test/setBlockGasLimit.js\");\nconst setBlockTimestampInterval_js_1 = require(\"../../actions/test/setBlockTimestampInterval.js\");\nconst setCode_js_1 = require(\"../../actions/test/setCode.js\");\nconst setCoinbase_js_1 = require(\"../../actions/test/setCoinbase.js\");\nconst setIntervalMining_js_1 = require(\"../../actions/test/setIntervalMining.js\");\nconst setLoggingEnabled_js_1 = require(\"../../actions/test/setLoggingEnabled.js\");\nconst setMinGasPrice_js_1 = require(\"../../actions/test/setMinGasPrice.js\");\nconst setNextBlockBaseFeePerGas_js_1 = require(\"../../actions/test/setNextBlockBaseFeePerGas.js\");\nconst setNextBlockTimestamp_js_1 = require(\"../../actions/test/setNextBlockTimestamp.js\");\nconst setNonce_js_1 = require(\"../../actions/test/setNonce.js\");\nconst setRpcUrl_js_1 = require(\"../../actions/test/setRpcUrl.js\");\nconst setStorageAt_js_1 = require(\"../../actions/test/setStorageAt.js\");\nconst snapshot_js_1 = require(\"../../actions/test/snapshot.js\");\nconst stopImpersonatingAccount_js_1 = require(\"../../actions/test/stopImpersonatingAccount.js\");\nfunction testActions({\n  mode\n}) {\n  return client_ => {\n    const client = client_.extend(() => ({\n      mode\n    }));\n    return {\n      dropTransaction: args => (0, dropTransaction_js_1.dropTransaction)(client, args),\n      dumpState: () => (0, dumpState_js_1.dumpState)(client),\n      getAutomine: () => (0, getAutomine_js_1.getAutomine)(client),\n      getTxpoolContent: () => (0, getTxpoolContent_js_1.getTxpoolContent)(client),\n      getTxpoolStatus: () => (0, getTxpoolStatus_js_1.getTxpoolStatus)(client),\n      impersonateAccount: args => (0, impersonateAccount_js_1.impersonateAccount)(client, args),\n      increaseTime: args => (0, increaseTime_js_1.increaseTime)(client, args),\n      inspectTxpool: () => (0, inspectTxpool_js_1.inspectTxpool)(client),\n      loadState: args => (0, loadState_js_1.loadState)(client, args),\n      mine: args => (0, mine_js_1.mine)(client, args),\n      removeBlockTimestampInterval: () => (0, removeBlockTimestampInterval_js_1.removeBlockTimestampInterval)(client),\n      reset: args => (0, reset_js_1.reset)(client, args),\n      revert: args => (0, revert_js_1.revert)(client, args),\n      sendUnsignedTransaction: args => (0, sendUnsignedTransaction_js_1.sendUnsignedTransaction)(client, args),\n      setAutomine: args => (0, setAutomine_js_1.setAutomine)(client, args),\n      setBalance: args => (0, setBalance_js_1.setBalance)(client, args),\n      setBlockGasLimit: args => (0, setBlockGasLimit_js_1.setBlockGasLimit)(client, args),\n      setBlockTimestampInterval: args => (0, setBlockTimestampInterval_js_1.setBlockTimestampInterval)(client, args),\n      setCode: args => (0, setCode_js_1.setCode)(client, args),\n      setCoinbase: args => (0, setCoinbase_js_1.setCoinbase)(client, args),\n      setIntervalMining: args => (0, setIntervalMining_js_1.setIntervalMining)(client, args),\n      setLoggingEnabled: args => (0, setLoggingEnabled_js_1.setLoggingEnabled)(client, args),\n      setMinGasPrice: args => (0, setMinGasPrice_js_1.setMinGasPrice)(client, args),\n      setNextBlockBaseFeePerGas: args => (0, setNextBlockBaseFeePerGas_js_1.setNextBlockBaseFeePerGas)(client, args),\n      setNextBlockTimestamp: args => (0, setNextBlockTimestamp_js_1.setNextBlockTimestamp)(client, args),\n      setNonce: args => (0, setNonce_js_1.setNonce)(client, args),\n      setRpcUrl: args => (0, setRpcUrl_js_1.setRpcUrl)(client, args),\n      setStorageAt: args => (0, setStorageAt_js_1.setStorageAt)(client, args),\n      snapshot: () => (0, snapshot_js_1.snapshot)(client),\n      stopImpersonatingAccount: args => (0, stopImpersonatingAccount_js_1.stopImpersonatingAccount)(client, args)\n    };\n  };\n}","map":{"version":3,"names":["exports","testActions","dropTransaction_js_1","require","dumpState_js_1","getAutomine_js_1","getTxpoolContent_js_1","getTxpoolStatus_js_1","impersonateAccount_js_1","increaseTime_js_1","inspectTxpool_js_1","loadState_js_1","mine_js_1","removeBlockTimestampInterval_js_1","reset_js_1","revert_js_1","sendUnsignedTransaction_js_1","setAutomine_js_1","setBalance_js_1","setBlockGasLimit_js_1","setBlockTimestampInterval_js_1","setCode_js_1","setCoinbase_js_1","setIntervalMining_js_1","setLoggingEnabled_js_1","setMinGasPrice_js_1","setNextBlockBaseFeePerGas_js_1","setNextBlockTimestamp_js_1","setNonce_js_1","setRpcUrl_js_1","setStorageAt_js_1","snapshot_js_1","stopImpersonatingAccount_js_1","mode","client_","client","extend","dropTransaction","args","dumpState","getAutomine","getTxpoolContent","getTxpoolStatus","impersonateAccount","increaseTime","inspectTxpool","loadState","mine","removeBlockTimestampInterval","reset","revert","sendUnsignedTransaction","setAutomine","setBalance","setBlockGasLimit","setBlockTimestampInterval","setCode","setCoinbase","setIntervalMining","setLoggingEnabled","setMinGasPrice","setNextBlockBaseFeePerGas","setNextBlockTimestamp","setNonce","setRpcUrl","setStorageAt","snapshot","stopImpersonatingAccount"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/viem/clients/decorators/test.ts"],"sourcesContent":["import {\n  type DropTransactionParameters,\n  dropTransaction,\n} from '../../actions/test/dropTransaction.js'\nimport {\n  type DumpStateReturnType,\n  dumpState,\n} from '../../actions/test/dumpState.js'\nimport {\n  type GetAutomineReturnType,\n  getAutomine,\n} from '../../actions/test/getAutomine.js'\nimport {\n  type GetTxpoolContentReturnType,\n  getTxpoolContent,\n} from '../../actions/test/getTxpoolContent.js'\nimport {\n  type GetTxpoolStatusReturnType,\n  getTxpoolStatus,\n} from '../../actions/test/getTxpoolStatus.js'\nimport {\n  type ImpersonateAccountParameters,\n  impersonateAccount,\n} from '../../actions/test/impersonateAccount.js'\nimport {\n  type IncreaseTimeParameters,\n  increaseTime,\n} from '../../actions/test/increaseTime.js'\nimport {\n  type InspectTxpoolReturnType,\n  inspectTxpool,\n} from '../../actions/test/inspectTxpool.js'\nimport {\n  type LoadStateParameters,\n  type LoadStateReturnType,\n  loadState,\n} from '../../actions/test/loadState.js'\nimport { type MineParameters, mine } from '../../actions/test/mine.js'\nimport { removeBlockTimestampInterval } from '../../actions/test/removeBlockTimestampInterval.js'\nimport { type ResetParameters, reset } from '../../actions/test/reset.js'\nimport { type RevertParameters, revert } from '../../actions/test/revert.js'\nimport {\n  type SendUnsignedTransactionParameters,\n  type SendUnsignedTransactionReturnType,\n  sendUnsignedTransaction,\n} from '../../actions/test/sendUnsignedTransaction.js'\nimport { setAutomine } from '../../actions/test/setAutomine.js'\nimport {\n  type SetBalanceParameters,\n  setBalance,\n} from '../../actions/test/setBalance.js'\nimport {\n  type SetBlockGasLimitParameters,\n  setBlockGasLimit,\n} from '../../actions/test/setBlockGasLimit.js'\nimport {\n  type SetBlockTimestampIntervalParameters,\n  setBlockTimestampInterval,\n} from '../../actions/test/setBlockTimestampInterval.js'\nimport { type SetCodeParameters, setCode } from '../../actions/test/setCode.js'\nimport {\n  type SetCoinbaseParameters,\n  setCoinbase,\n} from '../../actions/test/setCoinbase.js'\nimport {\n  type SetIntervalMiningParameters,\n  setIntervalMining,\n} from '../../actions/test/setIntervalMining.js'\nimport { setLoggingEnabled } from '../../actions/test/setLoggingEnabled.js'\nimport {\n  type SetMinGasPriceParameters,\n  setMinGasPrice,\n} from '../../actions/test/setMinGasPrice.js'\nimport {\n  type SetNextBlockBaseFeePerGasParameters,\n  setNextBlockBaseFeePerGas,\n} from '../../actions/test/setNextBlockBaseFeePerGas.js'\nimport {\n  type SetNextBlockTimestampParameters,\n  setNextBlockTimestamp,\n} from '../../actions/test/setNextBlockTimestamp.js'\nimport {\n  type SetNonceParameters,\n  setNonce,\n} from '../../actions/test/setNonce.js'\nimport { setRpcUrl } from '../../actions/test/setRpcUrl.js'\nimport {\n  type SetStorageAtParameters,\n  setStorageAt,\n} from '../../actions/test/setStorageAt.js'\nimport { snapshot } from '../../actions/test/snapshot.js'\nimport {\n  type StopImpersonatingAccountParameters,\n  stopImpersonatingAccount,\n} from '../../actions/test/stopImpersonatingAccount.js'\nimport type { Account } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Quantity } from '../../types/rpc.js'\nimport type { Client } from '../createClient.js'\nimport type { TestClientMode } from '../createTestClient.js'\nimport type { Transport } from '../transports/createTransport.js'\n\nexport type TestActions = {\n  /**\n   * Removes a transaction from the mempool.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/dropTransaction\n   *\n   * @param args - {@link DropTransactionParameters}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.dropTransaction({\n   *   hash: '0xe58dceb6b20b03965bb678e27d141e151d7d4efc2334c2d6a49b9fac523f7364'\n   * })\n   */\n  dropTransaction: (args: DropTransactionParameters) => Promise<void>\n  /**\n   * Serializes the current state (including contracts code, contract's storage,\n   * accounts properties, etc.) into a savable data blob.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/dumpState\n   *\n   * @param client - Client to use\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.dumpState()\n   */\n  dumpState: () => Promise<DumpStateReturnType>\n  /**\n   * Returns the automatic mining status of the node.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/getAutomine\n   *\n   * @returns Whether or not the node is auto mining. {@link GetAutomineReturnType}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * const isAutomining = await client.getAutomine()\n   */\n  getAutomine: () => Promise<GetAutomineReturnType>\n  /**\n   * Returns the details of all transactions currently pending for inclusion in the next block(s), as well as the ones that are being scheduled for future execution only.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/getTxpoolContent\n   *\n   * @returns Transaction pool content. {@link GetTxpoolContentReturnType}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * const content = await client.getTxpoolContent()\n   */\n  getTxpoolContent: () => Promise<GetTxpoolContentReturnType>\n  /**\n   * Returns a summary of all the transactions currently pending for inclusion in the next block(s), as well as the ones that are being scheduled for future execution only.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/getTxpoolStatus\n   *\n   * @returns Transaction pool status. {@link GetTxpoolStatusReturnType}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * const status = await client.getTxpoolStatus()\n   */\n  getTxpoolStatus: () => Promise<GetTxpoolStatusReturnType>\n  /**\n   * Impersonate an account or contract address. This lets you send transactions from that account even if you don't have access to its private key.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/impersonateAccount\n   *\n   * @param args - {@link ImpersonateAccountParameters}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.impersonateAccount({\n   *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   * })\n   */\n  impersonateAccount: (args: ImpersonateAccountParameters) => Promise<void>\n  /**\n   * Jump forward in time by the given amount of time, in seconds.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/increaseTime\n   *\n   * @param args – {@link IncreaseTimeParameters}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.increaseTime({\n   *   seconds: 420,\n   * })\n   */\n  increaseTime: (args: IncreaseTimeParameters) => Promise<Quantity>\n  /**\n   * Returns a summary of all the transactions currently pending for inclusion in the next block(s), as well as the ones that are being scheduled for future execution only.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/inspectTxpool\n   *\n   * @returns Transaction pool inspection data. {@link InspectTxpoolReturnType}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * const data = await client.inspectTxpool()\n   */\n  inspectTxpool: () => Promise<InspectTxpoolReturnType>\n  /**\n   * Adds state previously dumped with `dumpState` to the current chain.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/loadState\n   *\n   * @param client - Client to use\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.loadState({ state: '0x...' })\n   */\n  loadState: (args: LoadStateParameters) => Promise<LoadStateReturnType>\n  /**\n   * Mine a specified number of blocks.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/mine\n   *\n   * @param client - Client to use\n   * @param args – {@link MineParameters}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.mine({ blocks: 1 })\n   */\n  mine: (args: MineParameters) => Promise<void>\n  /**\n   * Removes [`setBlockTimestampInterval`](https://viem.sh/docs/actions/test/setBlockTimestampInterval) if it exists.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/removeBlockTimestampInterval\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   * import { removeBlockTimestampInterval } from 'viem/test'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.removeBlockTimestampInterval()\n   */\n  removeBlockTimestampInterval: () => Promise<void>\n  /**\n   * Resets fork back to its original state.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/reset\n   *\n   * @param args – {@link ResetParameters}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.reset({ blockNumber: 69420n })\n   */\n  reset: (args?: ResetParameters | undefined) => Promise<void>\n  /**\n   * Revert the state of the blockchain at the current block.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/revert\n   *\n   * @param args – {@link RevertParameters}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.revert({ id: '0x…' })\n   */\n  revert: (args: RevertParameters) => Promise<void>\n  /**\n   * Executes a transaction regardless of the signature.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/sendUnsignedTransaction\n   *\n   * @param args – {@link SendUnsignedTransactionParameters}\n   * @returns The transaction hash. {@link SendUnsignedTransactionReturnType}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * const hash = await client.sendUnsignedTransaction({\n   *   from: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n   *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n   *   value: 1000000000000000000n,\n   * })\n   */\n  sendUnsignedTransaction: <chain extends Chain | undefined>(\n    args: SendUnsignedTransactionParameters<chain>,\n  ) => Promise<SendUnsignedTransactionReturnType>\n  /**\n   * Enables or disables the automatic mining of new blocks with each new transaction submitted to the network.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/setAutomine\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.setAutomine()\n   */\n  setAutomine: (args: boolean) => Promise<void>\n  /**\n   * Modifies the balance of an account.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/setBalance\n   *\n   * @param args – {@link SetBalanceParameters}\n   *\n   * @example\n   * import { createTestClient, http, parseEther } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.setBalance({\n   *   address: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n   *   value: parseEther('1'),\n   * })\n   */\n  setBalance: (args: SetBalanceParameters) => Promise<void>\n  /**\n   * Sets the block's gas limit.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/setBlockGasLimit\n   *\n   * @param args – {@link SetBlockGasLimitParameters}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.setBlockGasLimit({ gasLimit: 420_000n })\n   */\n  setBlockGasLimit: (args: SetBlockGasLimitParameters) => Promise<void>\n  /**\n   * Similar to [`increaseTime`](https://viem.sh/docs/actions/test/increaseTime), but sets a block timestamp `interval`. The timestamp of future blocks will be computed as `lastBlock_timestamp` + `interval`.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/setBlockTimestampInterval\n   *\n   * @param args – {@link SetBlockTimestampIntervalParameters}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.setBlockTimestampInterval({ interval: 5 })\n   */\n  setBlockTimestampInterval: (\n    args: SetBlockTimestampIntervalParameters,\n  ) => Promise<void>\n  /**\n   * Modifies the bytecode stored at an account's address.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/setCode\n   *\n   * @param args – {@link SetCodeParameters}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.setCode({\n   *   address: '0xe846c6fcf817734ca4527b28ccb4aea2b6663c79',\n   *   bytecode: '0x60806040526000600355600019600955600c80546001600160a01b031916737a250d5630b4cf539739df…',\n   * })\n   */\n  setCode: (args: SetCodeParameters) => Promise<void>\n  /**\n   * Sets the coinbase address to be used in new blocks.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/setCoinbase\n   *\n   * @param args – {@link SetCoinbaseParameters}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.setCoinbase({\n   *   address: '0xe846c6fcf817734ca4527b28ccb4aea2b6663c79',\n   * })\n   */\n  setCoinbase: (args: SetCoinbaseParameters) => Promise<void>\n  /**\n   * Sets the automatic mining interval (in seconds) of blocks. Setting the interval to 0 will disable automatic mining.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/setIntervalMining\n   *\n   * @param args – {@link SetIntervalMiningParameters}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.setIntervalMining({ interval: 5 })\n   */\n  setIntervalMining: (args: SetIntervalMiningParameters) => Promise<void>\n  /**\n   * Enable or disable logging on the test node network.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/setLoggingEnabled\n   *\n   * @param client - Client to use\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.setLoggingEnabled()\n   */\n  setLoggingEnabled: (args: boolean) => Promise<void>\n  /**\n   * Change the minimum gas price accepted by the network (in wei).\n   *\n   * - Docs: https://viem.sh/docs/actions/test/setMinGasPrice\n   *\n   * Note: `setMinGasPrice` can only be used on clients that do not have EIP-1559 enabled.\n   *\n   * @param args – {@link SetBlockGasLimitParameters}\n   *\n   * @example\n   * import { createTestClient, http, parseGwei } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.setMinGasPrice({\n   *   gasPrice: parseGwei('20'),\n   * })\n   */\n  setMinGasPrice: (args: SetMinGasPriceParameters) => Promise<void>\n  /**\n   * Sets the next block's base fee per gas.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/setNextBlockBaseFeePerGas\n   *\n   * @param args – {@link SetNextBlockBaseFeePerGasParameters}\n   *\n   * @example\n   * import { createTestClient, http, parseGwei } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.setNextBlockBaseFeePerGas({\n   *   baseFeePerGas: parseGwei('20'),\n   * })\n   */\n  setNextBlockBaseFeePerGas: (\n    args: SetNextBlockBaseFeePerGasParameters,\n  ) => Promise<void>\n  /**\n   * Sets the next block's timestamp.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/setNextBlockTimestamp\n   *\n   * @param args – {@link SetNextBlockTimestampParameters}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.setNextBlockTimestamp({ timestamp: 1671744314n })\n   */\n  setNextBlockTimestamp: (\n    args: SetNextBlockTimestampParameters,\n  ) => Promise<void>\n  /**\n   * Modifies (overrides) the nonce of an account.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/setNonce\n   *\n   * @param args – {@link SetNonceParameters}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.setNonce({\n   *   address: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n   *   nonce: 420,\n   * })\n   */\n  setNonce: (args: SetNonceParameters) => Promise<void>\n  /**\n   * Sets the backend RPC URL.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/setRpcUrl\n   *\n   * @param jsonRpcUrl – RPC URL\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.setRpcUrl('https://eth-mainnet.g.alchemy.com/v2')\n   */\n  setRpcUrl: (args: string) => Promise<void>\n  /**\n   * Writes to a slot of an account's storage.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/setStorageAt\n   *\n   * @param args – {@link SetStorageAtParameters}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.setStorageAt({\n   *   address: '0xe846c6fcf817734ca4527b28ccb4aea2b6663c79',\n   *   index: 2,\n   *   value: '0x0000000000000000000000000000000000000000000000000000000000000069',\n   * })\n   */\n  setStorageAt: (args: SetStorageAtParameters) => Promise<void>\n  /**\n   * Snapshot the state of the blockchain at the current block.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/snapshot\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   * import { snapshot } from 'viem/test'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.snapshot()\n   */\n  snapshot: () => Promise<Quantity>\n  /**\n   * Stop impersonating an account after having previously used [`impersonateAccount`](https://viem.sh/docs/actions/test/impersonateAccount).\n   *\n   * - Docs: https://viem.sh/docs/actions/test/stopImpersonatingAccount\n   *\n   * @param args – {@link StopImpersonatingAccountParameters}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   * import { stopImpersonatingAccount } from 'viem/test'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.stopImpersonatingAccount({\n   *   address: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n   * })\n   */\n  stopImpersonatingAccount: (\n    args: StopImpersonatingAccountParameters,\n  ) => Promise<void>\n}\n\nexport function testActions<mode extends TestClientMode>({\n  mode,\n}: { mode: mode }): <\n  transport extends Transport = Transport,\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n>(\n  client: Client<transport, chain, account>,\n) => TestActions {\n  return <\n    transport extends Transport = Transport,\n    chain extends Chain | undefined = Chain | undefined,\n    account extends Account | undefined = Account | undefined,\n  >(\n    client_: Client<transport, chain, account>,\n  ): TestActions => {\n    const client = client_.extend(() => ({\n      mode,\n    }))\n    return {\n      dropTransaction: (args) => dropTransaction(client, args),\n      dumpState: () => dumpState(client),\n      getAutomine: () => getAutomine(client),\n      getTxpoolContent: () => getTxpoolContent(client),\n      getTxpoolStatus: () => getTxpoolStatus(client),\n      impersonateAccount: (args) => impersonateAccount(client, args),\n      increaseTime: (args) => increaseTime(client, args),\n      inspectTxpool: () => inspectTxpool(client),\n      loadState: (args) => loadState(client, args),\n      mine: (args) => mine(client, args),\n      removeBlockTimestampInterval: () => removeBlockTimestampInterval(client),\n      reset: (args) => reset(client, args),\n      revert: (args) => revert(client, args),\n      sendUnsignedTransaction: (args) =>\n        sendUnsignedTransaction(client, args as any),\n      setAutomine: (args) => setAutomine(client, args),\n      setBalance: (args) => setBalance(client, args),\n      setBlockGasLimit: (args) => setBlockGasLimit(client, args),\n      setBlockTimestampInterval: (args) =>\n        setBlockTimestampInterval(client, args),\n      setCode: (args) => setCode(client, args),\n      setCoinbase: (args) => setCoinbase(client, args),\n      setIntervalMining: (args) => setIntervalMining(client, args),\n      setLoggingEnabled: (args) => setLoggingEnabled(client, args),\n      setMinGasPrice: (args) => setMinGasPrice(client, args),\n      setNextBlockBaseFeePerGas: (args) =>\n        setNextBlockBaseFeePerGas(client, args),\n      setNextBlockTimestamp: (args) => setNextBlockTimestamp(client, args),\n      setNonce: (args) => setNonce(client, args),\n      setRpcUrl: (args) => setRpcUrl(client, args),\n      setStorageAt: (args) => setStorageAt(client, args),\n      snapshot: () => snapshot(client),\n      stopImpersonatingAccount: (args) =>\n        stopImpersonatingAccount(client, args),\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}