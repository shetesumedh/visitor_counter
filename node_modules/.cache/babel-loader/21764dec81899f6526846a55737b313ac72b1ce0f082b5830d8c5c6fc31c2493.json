{"ast":null,"code":"import { getBytecode } from '../actions/getBytecode.js';\nimport { filterQueryOptions } from './utils.js';\nexport function getBytecodeQueryOptions(config, options = {}) {\n  return {\n    async queryFn({\n      queryKey\n    }) {\n      const {\n        address,\n        scopeKey: _,\n        ...parameters\n      } = queryKey[1];\n      if (!address) throw new Error('address is required');\n      const bytecode = await getBytecode(config, {\n        ...parameters,\n        address\n      });\n      return bytecode ?? null;\n    },\n    queryKey: getBytecodeQueryKey(options)\n  };\n}\nexport function getBytecodeQueryKey(options) {\n  return ['getBytecode', filterQueryOptions(options)];\n}","map":{"version":3,"names":["getBytecode","filterQueryOptions","getBytecodeQueryOptions","config","options","queryFn","queryKey","address","scopeKey","_","parameters","Error","bytecode","getBytecodeQueryKey"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/@wagmi/core/src/query/getBytecode.ts"],"sourcesContent":["import type { QueryOptions } from '@tanstack/query-core'\n\nimport {\n  type GetBytecodeErrorType,\n  type GetBytecodeParameters,\n  type GetBytecodeReturnType,\n  getBytecode,\n} from '../actions/getBytecode.js'\nimport type { Config } from '../createConfig.js'\nimport type { ScopeKeyParameter } from '../types/properties.js'\nimport type { Compute, ExactPartial } from '../types/utils.js'\nimport { filterQueryOptions } from './utils.js'\n\nexport type GetBytecodeOptions<config extends Config> = Compute<\n  ExactPartial<GetBytecodeParameters<config>> & ScopeKeyParameter\n>\n\nexport function getBytecodeQueryOptions<config extends Config>(\n  config: config,\n  options: GetBytecodeOptions<config> = {},\n) {\n  return {\n    async queryFn({ queryKey }) {\n      const { address, scopeKey: _, ...parameters } = queryKey[1]\n      if (!address) throw new Error('address is required')\n      const bytecode = await getBytecode(config, { ...parameters, address })\n      return (bytecode ?? null) as any\n    },\n    queryKey: getBytecodeQueryKey(options),\n  } as const satisfies QueryOptions<\n    GetBytecodeQueryFnData,\n    GetBytecodeErrorType,\n    GetBytecodeData,\n    GetBytecodeQueryKey<config>\n  >\n}\nexport type GetBytecodeQueryFnData = GetBytecodeReturnType\n\nexport type GetBytecodeData = GetBytecodeQueryFnData\n\nexport function getBytecodeQueryKey<config extends Config>(\n  options: GetBytecodeOptions<config>,\n) {\n  return ['getBytecode', filterQueryOptions(options)] as const\n}\n\nexport type GetBytecodeQueryKey<config extends Config> = ReturnType<\n  typeof getBytecodeQueryKey<config>\n>\n"],"mappings":"AAEA,SAIEA,WAAW,QACN,2BAA2B;AAIlC,SAASC,kBAAkB,QAAQ,YAAY;AAM/C,OAAM,SAAUC,uBAAuBA,CACrCC,MAAc,EACdC,OAAA,GAAsC,EAAE;EAExC,OAAO;IACL,MAAMC,OAAOA,CAAC;MAAEC;IAAQ,CAAE;MACxB,MAAM;QAAEC,OAAO;QAAEC,QAAQ,EAAEC,CAAC;QAAE,GAAGC;MAAU,CAAE,GAAGJ,QAAQ,CAAC,CAAC,CAAC;MAC3D,IAAI,CAACC,OAAO,EAAE,MAAM,IAAII,KAAK,CAAC,qBAAqB,CAAC;MACpD,MAAMC,QAAQ,GAAG,MAAMZ,WAAW,CAACG,MAAM,EAAE;QAAE,GAAGO,UAAU;QAAEH;MAAO,CAAE,CAAC;MACtE,OAAQK,QAAQ,IAAI,IAAI;IAC1B,CAAC;IACDN,QAAQ,EAAEO,mBAAmB,CAACT,OAAO;GAMtC;AACH;AAKA,OAAM,SAAUS,mBAAmBA,CACjCT,OAAmC;EAEnC,OAAO,CAAC,aAAa,EAAEH,kBAAkB,CAACG,OAAO,CAAC,CAAU;AAC9D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}