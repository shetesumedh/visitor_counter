{"ast":null,"code":"import { ens_normalize } from '@adraffy/ens-normalize';\nimport * as Bytes from './Bytes.js';\nimport * as Hash from './Hash.js';\nimport * as Hex from './Hex.js';\nimport * as internal from './internal/ens.js';\n/**\n * Hashes ENS label.\n *\n * Since ENS labels prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS labels](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `labelhash`. You can use the built-in {@link ox#Ens.(normalize:function)} function for this.\n *\n * @example\n * ```ts twoslash\n * import { Ens } from 'ox'\n * Ens.labelhash('eth')\n * '0x4f5b812789fc606be1b3b16908db13fc7a9adf7ca72641f84d75b47069d3d7f0'\n * ```\n *\n * @param label - ENS label.\n * @returns ENS labelhash.\n */\nexport function labelhash(label) {\n  const result = new Uint8Array(32).fill(0);\n  if (!label) return Hex.fromBytes(result);\n  return internal.unwrapLabelhash(label) || Hash.keccak256(Hex.fromString(label));\n}\n/**\n * Hashes ENS name.\n *\n * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `namehash`. You can use the built-in {@link ox#Ens.(normalize:function)} function for this.\n *\n * @example\n * ```ts twoslash\n * import { Ens } from 'ox'\n * Ens.namehash('wevm.eth')\n * // @log: '0xf246651c1b9a6b141d19c2604e9a58f567973833990f830d882534a747801359'\n * ```\n *\n * @param name - ENS name.\n * @returns ENS namehash.\n */\nexport function namehash(name) {\n  let result = new Uint8Array(32).fill(0);\n  if (!name) return Hex.fromBytes(result);\n  const labels = name.split('.');\n  // Iterate in reverse order building up hash\n  for (let i = labels.length - 1; i >= 0; i -= 1) {\n    const hashFromEncodedLabel = internal.unwrapLabelhash(labels[i]);\n    const hashed = hashFromEncodedLabel ? Bytes.fromHex(hashFromEncodedLabel) : Hash.keccak256(Bytes.fromString(labels[i]), {\n      as: 'Bytes'\n    });\n    result = Hash.keccak256(Bytes.concat(result, hashed), {\n      as: 'Bytes'\n    });\n  }\n  return Hex.fromBytes(result);\n}\n/**\n * Normalizes ENS name according to [ENSIP-15](https://github.com/ensdomains/docs/blob/9edf9443de4333a0ea7ec658a870672d5d180d53/ens-improvement-proposals/ensip-15-normalization-standard.md).\n *\n * For more info see [ENS documentation](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) on name processing.\n *\n * @example\n * ```ts twoslash\n * import { Ens } from 'ox'\n * Ens.normalize('wevm.eth')\n * // @log: 'wevm.eth'\n * ```\n *\n * @param name - ENS name.\n * @returns Normalized ENS name.\n */\nexport function normalize(name) {\n  return ens_normalize(name);\n}","map":{"version":3,"names":["ens_normalize","Bytes","Hash","Hex","internal","labelhash","label","result","Uint8Array","fill","fromBytes","unwrapLabelhash","keccak256","fromString","namehash","name","labels","split","i","length","hashFromEncodedLabel","hashed","fromHex","as","concat","normalize"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/ox/core/Ens.ts"],"sourcesContent":["import { ens_normalize } from '@adraffy/ens-normalize'\nimport * as Bytes from './Bytes.js'\nimport type * as Errors from './Errors.js'\nimport * as Hash from './Hash.js'\nimport * as Hex from './Hex.js'\nimport * as internal from './internal/ens.js'\n\n/**\n * Hashes ENS label.\n *\n * Since ENS labels prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS labels](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `labelhash`. You can use the built-in {@link ox#Ens.(normalize:function)} function for this.\n *\n * @example\n * ```ts twoslash\n * import { Ens } from 'ox'\n * Ens.labelhash('eth')\n * '0x4f5b812789fc606be1b3b16908db13fc7a9adf7ca72641f84d75b47069d3d7f0'\n * ```\n *\n * @param label - ENS label.\n * @returns ENS labelhash.\n */\nexport function labelhash(label: string) {\n  const result = new Uint8Array(32).fill(0)\n  if (!label) return Hex.fromBytes(result)\n  return (\n    internal.unwrapLabelhash(label) || Hash.keccak256(Hex.fromString(label))\n  )\n}\n\nexport declare namespace labelhash {\n  type ErrorType =\n    | Hex.fromBytes.ErrorType\n    | internal.unwrapLabelhash.ErrorType\n    | Hash.keccak256.ErrorType\n    | Hex.fromString.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Hashes ENS name.\n *\n * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `namehash`. You can use the built-in {@link ox#Ens.(normalize:function)} function for this.\n *\n * @example\n * ```ts twoslash\n * import { Ens } from 'ox'\n * Ens.namehash('wevm.eth')\n * // @log: '0xf246651c1b9a6b141d19c2604e9a58f567973833990f830d882534a747801359'\n * ```\n *\n * @param name - ENS name.\n * @returns ENS namehash.\n */\nexport function namehash(name: string) {\n  let result = new Uint8Array(32).fill(0)\n  if (!name) return Hex.fromBytes(result)\n\n  const labels = name.split('.')\n  // Iterate in reverse order building up hash\n  for (let i = labels.length - 1; i >= 0; i -= 1) {\n    const hashFromEncodedLabel = internal.unwrapLabelhash(labels[i]!)\n    const hashed = hashFromEncodedLabel\n      ? Bytes.fromHex(hashFromEncodedLabel)\n      : Hash.keccak256(Bytes.fromString(labels[i]!), { as: 'Bytes' })\n    result = Hash.keccak256(Bytes.concat(result, hashed), { as: 'Bytes' })\n  }\n\n  return Hex.fromBytes(result)\n}\n\nexport declare namespace namehash {\n  type ErrorType =\n    | Hex.fromBytes.ErrorType\n    | internal.unwrapLabelhash.ErrorType\n    | Bytes.fromHex.ErrorType\n    | Hash.keccak256.ErrorType\n    | Bytes.fromString.ErrorType\n    | Bytes.concat.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Normalizes ENS name according to [ENSIP-15](https://github.com/ensdomains/docs/blob/9edf9443de4333a0ea7ec658a870672d5d180d53/ens-improvement-proposals/ensip-15-normalization-standard.md).\n *\n * For more info see [ENS documentation](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) on name processing.\n *\n * @example\n * ```ts twoslash\n * import { Ens } from 'ox'\n * Ens.normalize('wevm.eth')\n * // @log: 'wevm.eth'\n * ```\n *\n * @param name - ENS name.\n * @returns Normalized ENS name.\n */\nexport function normalize(name: string): string {\n  return ens_normalize(name)\n}\n\nexport declare namespace normalize {\n  type ErrorType = Errors.GlobalErrorType\n}\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,wBAAwB;AACtD,OAAO,KAAKC,KAAK,MAAM,YAAY;AAEnC,OAAO,KAAKC,IAAI,MAAM,WAAW;AACjC,OAAO,KAAKC,GAAG,MAAM,UAAU;AAC/B,OAAO,KAAKC,QAAQ,MAAM,mBAAmB;AAE7C;;;;;;;;;;;;;;;AAeA,OAAM,SAAUC,SAASA,CAACC,KAAa;EACrC,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;EACzC,IAAI,CAACH,KAAK,EAAE,OAAOH,GAAG,CAACO,SAAS,CAACH,MAAM,CAAC;EACxC,OACEH,QAAQ,CAACO,eAAe,CAACL,KAAK,CAAC,IAAIJ,IAAI,CAACU,SAAS,CAACT,GAAG,CAACU,UAAU,CAACP,KAAK,CAAC,CAAC;AAE5E;AAWA;;;;;;;;;;;;;;;AAeA,OAAM,SAAUQ,QAAQA,CAACC,IAAY;EACnC,IAAIR,MAAM,GAAG,IAAIC,UAAU,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;EACvC,IAAI,CAACM,IAAI,EAAE,OAAOZ,GAAG,CAACO,SAAS,CAACH,MAAM,CAAC;EAEvC,MAAMS,MAAM,GAAGD,IAAI,CAACE,KAAK,CAAC,GAAG,CAAC;EAC9B;EACA,KAAK,IAAIC,CAAC,GAAGF,MAAM,CAACG,MAAM,GAAG,CAAC,EAAED,CAAC,IAAI,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAE;IAC9C,MAAME,oBAAoB,GAAGhB,QAAQ,CAACO,eAAe,CAACK,MAAM,CAACE,CAAC,CAAE,CAAC;IACjE,MAAMG,MAAM,GAAGD,oBAAoB,GAC/BnB,KAAK,CAACqB,OAAO,CAACF,oBAAoB,CAAC,GACnClB,IAAI,CAACU,SAAS,CAACX,KAAK,CAACY,UAAU,CAACG,MAAM,CAACE,CAAC,CAAE,CAAC,EAAE;MAAEK,EAAE,EAAE;IAAO,CAAE,CAAC;IACjEhB,MAAM,GAAGL,IAAI,CAACU,SAAS,CAACX,KAAK,CAACuB,MAAM,CAACjB,MAAM,EAAEc,MAAM,CAAC,EAAE;MAAEE,EAAE,EAAE;IAAO,CAAE,CAAC;EACxE;EAEA,OAAOpB,GAAG,CAACO,SAAS,CAACH,MAAM,CAAC;AAC9B;AAaA;;;;;;;;;;;;;;;AAeA,OAAM,SAAUkB,SAASA,CAACV,IAAY;EACpC,OAAOf,aAAa,CAACe,IAAI,CAAC;AAC5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}