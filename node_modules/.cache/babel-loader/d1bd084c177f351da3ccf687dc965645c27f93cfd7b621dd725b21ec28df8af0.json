{"ast":null,"code":"import { estimateMaxPriorityFeePerGas } from '../actions/estimateMaxPriorityFeePerGas.js';\nimport { filterQueryOptions } from './utils.js';\nexport function estimateMaxPriorityFeePerGasQueryOptions(config, options = {}) {\n  return {\n    async queryFn({\n      queryKey\n    }) {\n      const {\n        scopeKey: _,\n        ...parameters\n      } = queryKey[1];\n      return estimateMaxPriorityFeePerGas(config, parameters);\n    },\n    queryKey: estimateMaxPriorityFeePerGasQueryKey(options)\n  };\n}\nexport function estimateMaxPriorityFeePerGasQueryKey(options = {}) {\n  return ['estimateMaxPriorityFeePerGas', filterQueryOptions(options)];\n}","map":{"version":3,"names":["estimateMaxPriorityFeePerGas","filterQueryOptions","estimateMaxPriorityFeePerGasQueryOptions","config","options","queryFn","queryKey","scopeKey","_","parameters","estimateMaxPriorityFeePerGasQueryKey"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/@wagmi/core/src/query/estimateMaxPriorityFeePerGas.ts"],"sourcesContent":["import type { QueryOptions } from '@tanstack/query-core'\n\nimport {\n  type EstimateMaxPriorityFeePerGasErrorType,\n  type EstimateMaxPriorityFeePerGasParameters,\n  type EstimateMaxPriorityFeePerGasReturnType,\n  estimateMaxPriorityFeePerGas,\n} from '../actions/estimateMaxPriorityFeePerGas.js'\nimport type { Config } from '../createConfig.js'\nimport type { ScopeKeyParameter } from '../types/properties.js'\nimport type { Compute, ExactPartial } from '../types/utils.js'\nimport { filterQueryOptions } from './utils.js'\n\nexport type EstimateMaxPriorityFeePerGasOptions<config extends Config> =\n  Compute<\n    ExactPartial<EstimateMaxPriorityFeePerGasParameters<config>> &\n      ScopeKeyParameter\n  >\n\nexport function estimateMaxPriorityFeePerGasQueryOptions<config extends Config>(\n  config: config,\n  options: EstimateMaxPriorityFeePerGasOptions<config> = {},\n) {\n  return {\n    async queryFn({ queryKey }) {\n      const { scopeKey: _, ...parameters } = queryKey[1]\n      return estimateMaxPriorityFeePerGas(config, parameters)\n    },\n    queryKey: estimateMaxPriorityFeePerGasQueryKey(options),\n  } as const satisfies QueryOptions<\n    EstimateMaxPriorityFeePerGasQueryFnData,\n    EstimateMaxPriorityFeePerGasErrorType,\n    EstimateMaxPriorityFeePerGasData,\n    EstimateMaxPriorityFeePerGasQueryKey<config>\n  >\n}\n\nexport type EstimateMaxPriorityFeePerGasQueryFnData =\n  EstimateMaxPriorityFeePerGasReturnType\n\nexport type EstimateMaxPriorityFeePerGasData =\n  EstimateMaxPriorityFeePerGasQueryFnData\n\nexport function estimateMaxPriorityFeePerGasQueryKey<config extends Config>(\n  options: EstimateMaxPriorityFeePerGasOptions<config> = {},\n) {\n  return ['estimateMaxPriorityFeePerGas', filterQueryOptions(options)] as const\n}\n\nexport type EstimateMaxPriorityFeePerGasQueryKey<config extends Config> =\n  ReturnType<typeof estimateMaxPriorityFeePerGasQueryKey<config>>\n"],"mappings":"AAEA,SAIEA,4BAA4B,QACvB,4CAA4C;AAInD,SAASC,kBAAkB,QAAQ,YAAY;AAQ/C,OAAM,SAAUC,wCAAwCA,CACtDC,MAAc,EACdC,OAAA,GAAuD,EAAE;EAEzD,OAAO;IACL,MAAMC,OAAOA,CAAC;MAAEC;IAAQ,CAAE;MACxB,MAAM;QAAEC,QAAQ,EAAEC,CAAC;QAAE,GAAGC;MAAU,CAAE,GAAGH,QAAQ,CAAC,CAAC,CAAC;MAClD,OAAON,4BAA4B,CAACG,MAAM,EAAEM,UAAU,CAAC;IACzD,CAAC;IACDH,QAAQ,EAAEI,oCAAoC,CAACN,OAAO;GAMvD;AACH;AAQA,OAAM,SAAUM,oCAAoCA,CAClDN,OAAA,GAAuD,EAAE;EAEzD,OAAO,CAAC,8BAA8B,EAAEH,kBAAkB,CAACG,OAAO,CAAC,CAAU;AAC/E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}