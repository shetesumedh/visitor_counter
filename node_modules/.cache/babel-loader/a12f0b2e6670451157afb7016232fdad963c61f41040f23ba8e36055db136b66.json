{"ast":null,"code":"import { Signature } from 'ox';\nimport { hexToBytes, numberToHex, stringToBytes, trim } from 'viem';\nexport function base64ToBase64Url(base64) {\n  return base64.replaceAll('+', '-').replaceAll('/', '_').replace(/=+$/, '');\n}\nexport function arrayBufferToBase64Url(buffer) {\n  // First convert to regular base64\n  const base64String = btoa(String.fromCharCode(...new Uint8Array(buffer)));\n  // Then convert to base64url\n  return base64ToBase64Url(base64String);\n}\nexport function convertCredentialToJSON({\n  webauthn,\n  signature,\n  id\n}) {\n  const signatureRaw = Signature.fromHex(signature);\n  return {\n    id,\n    rawId: arrayBufferToBase64Url(stringToBytes(id)),\n    response: {\n      authenticatorData: arrayBufferToBase64Url(hexToBytes(webauthn.authenticatorData)),\n      clientDataJSON: arrayBufferToBase64Url(stringToBytes(webauthn.clientDataJSON)),\n      signature: arrayBufferToBase64Url(asn1EncodeSignature(signatureRaw.r, signatureRaw.s))\n    },\n    type: JSON.parse(webauthn.clientDataJSON).type\n  };\n}\nexport function asn1EncodeSignature(r, s) {\n  // Convert r and s to byte arrays and remove any leading zeros\n  const rBytes = hexToBytes(trim(numberToHex(r)));\n  const sBytes = hexToBytes(trim(numberToHex(s)));\n  // Calculate lengths\n  const rLength = rBytes.length;\n  const sLength = sBytes.length;\n  const totalLength = rLength + sLength + 4; // 4 additional bytes for type and length fields\n  // Create the signature buffer\n  const signature = new Uint8Array(totalLength + 2); // +2 for sequence header\n  // Sequence header\n  signature[0] = 0x30; // ASN.1 sequence tag\n  signature[1] = totalLength;\n  // Encode r value\n  signature[2] = 0x02; // ASN.1 integer tag\n  signature[3] = rLength;\n  signature.set(rBytes, 4);\n  // Encode s value\n  signature[rLength + 4] = 0x02; // ASN.1 integer tag\n  signature[rLength + 5] = sLength;\n  signature.set(sBytes, rLength + 6);\n  return signature;\n}","map":{"version":3,"names":["Signature","hexToBytes","numberToHex","stringToBytes","trim","base64ToBase64Url","base64","replaceAll","replace","arrayBufferToBase64Url","buffer","base64String","btoa","String","fromCharCode","Uint8Array","convertCredentialToJSON","webauthn","signature","id","signatureRaw","fromHex","rawId","response","authenticatorData","clientDataJSON","asn1EncodeSignature","r","s","type","JSON","parse","rBytes","sBytes","rLength","length","sLength","totalLength","set"],"sources":["../../src/util/encoding.ts"],"sourcesContent":[null],"mappings":"AAAA,SAASA,SAAS,QAAsB,IAAI;AAC5C,SAAyBC,UAAU,EAAEC,WAAW,EAAEC,aAAa,EAAEC,IAAI,QAAQ,MAAM;AAEnF,OAAM,SAAUC,iBAAiBA,CAACC,MAAc;EAC9C,OAAOA,MAAM,CAACC,UAAU,CAAC,GAAG,EAAE,GAAG,CAAC,CAACA,UAAU,CAAC,GAAG,EAAE,GAAG,CAAC,CAACC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;AAC5E;AAEA,OAAM,SAAUC,sBAAsBA,CAACC,MAA+B;EACpE;EACA,MAAMC,YAAY,GAAGC,IAAI,CAACC,MAAM,CAACC,YAAY,CAAC,GAAG,IAAIC,UAAU,CAACL,MAAM,CAAC,CAAC,CAAC;EAEzE;EACA,OAAOL,iBAAiB,CAACM,YAAY,CAAC;AACxC;AAEA,OAAM,SAAUK,uBAAuBA,CAAC;EACtCC,QAAQ;EACRC,SAAS;EACTC;AAAE,CAKH;EACC,MAAMC,YAAY,GAAGpB,SAAS,CAACqB,OAAO,CAACH,SAAS,CAAC;EACjD,OAAO;IACLC,EAAE;IACFG,KAAK,EAAEb,sBAAsB,CAACN,aAAa,CAACgB,EAAE,CAAC,CAAC;IAChDI,QAAQ,EAAE;MACRC,iBAAiB,EAAEf,sBAAsB,CAACR,UAAU,CAACgB,QAAQ,CAACO,iBAAiB,CAAC,CAAC;MACjFC,cAAc,EAAEhB,sBAAsB,CAACN,aAAa,CAACc,QAAQ,CAACQ,cAAc,CAAC,CAAC;MAC9EP,SAAS,EAAET,sBAAsB,CAACiB,mBAAmB,CAACN,YAAY,CAACO,CAAC,EAAEP,YAAY,CAACQ,CAAC,CAAC;KACtF;IACDC,IAAI,EAAEC,IAAI,CAACC,KAAK,CAACd,QAAQ,CAACQ,cAAc,CAAC,CAACI;GAC3C;AACH;AAEA,OAAM,SAAUH,mBAAmBA,CAACC,CAAS,EAAEC,CAAS;EACtD;EACA,MAAMI,MAAM,GAAG/B,UAAU,CAACG,IAAI,CAACF,WAAW,CAACyB,CAAC,CAAC,CAAC,CAAC;EAC/C,MAAMM,MAAM,GAAGhC,UAAU,CAACG,IAAI,CAACF,WAAW,CAAC0B,CAAC,CAAC,CAAC,CAAC;EAE/C;EACA,MAAMM,OAAO,GAAGF,MAAM,CAACG,MAAM;EAC7B,MAAMC,OAAO,GAAGH,MAAM,CAACE,MAAM;EAC7B,MAAME,WAAW,GAAGH,OAAO,GAAGE,OAAO,GAAG,CAAC,CAAC,CAAC;EAE3C;EACA,MAAMlB,SAAS,GAAG,IAAIH,UAAU,CAACsB,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC;EAEnD;EACAnB,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;EACrBA,SAAS,CAAC,CAAC,CAAC,GAAGmB,WAAW;EAE1B;EACAnB,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;EACrBA,SAAS,CAAC,CAAC,CAAC,GAAGgB,OAAO;EACtBhB,SAAS,CAACoB,GAAG,CAACN,MAAM,EAAE,CAAC,CAAC;EAExB;EACAd,SAAS,CAACgB,OAAO,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;EAC/BhB,SAAS,CAACgB,OAAO,GAAG,CAAC,CAAC,GAAGE,OAAO;EAChClB,SAAS,CAACoB,GAAG,CAACL,MAAM,EAAEC,OAAO,GAAG,CAAC,CAAC;EAElC,OAAOhB,SAAS;AAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}