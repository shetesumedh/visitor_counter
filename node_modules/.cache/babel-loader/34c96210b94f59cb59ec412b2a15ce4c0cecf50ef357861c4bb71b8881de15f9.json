{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.standardErrors = void 0;\nconst constants_1 = require(\"./constants\");\nconst utils_1 = require(\"./utils\");\nexports.standardErrors = {\n  rpc: {\n    parse: arg => getEthJsonRpcError(constants_1.standardErrorCodes.rpc.parse, arg),\n    invalidRequest: arg => getEthJsonRpcError(constants_1.standardErrorCodes.rpc.invalidRequest, arg),\n    invalidParams: arg => getEthJsonRpcError(constants_1.standardErrorCodes.rpc.invalidParams, arg),\n    methodNotFound: arg => getEthJsonRpcError(constants_1.standardErrorCodes.rpc.methodNotFound, arg),\n    internal: arg => getEthJsonRpcError(constants_1.standardErrorCodes.rpc.internal, arg),\n    server: opts => {\n      if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {\n        throw new Error('Ethereum RPC Server errors must provide single object argument.');\n      }\n      const {\n        code\n      } = opts;\n      if (!Number.isInteger(code) || code > -32005 || code < -32099) {\n        throw new Error('\"code\" must be an integer such that: -32099 <= code <= -32005');\n      }\n      return getEthJsonRpcError(code, opts);\n    },\n    invalidInput: arg => getEthJsonRpcError(constants_1.standardErrorCodes.rpc.invalidInput, arg),\n    resourceNotFound: arg => getEthJsonRpcError(constants_1.standardErrorCodes.rpc.resourceNotFound, arg),\n    resourceUnavailable: arg => getEthJsonRpcError(constants_1.standardErrorCodes.rpc.resourceUnavailable, arg),\n    transactionRejected: arg => getEthJsonRpcError(constants_1.standardErrorCodes.rpc.transactionRejected, arg),\n    methodNotSupported: arg => getEthJsonRpcError(constants_1.standardErrorCodes.rpc.methodNotSupported, arg),\n    limitExceeded: arg => getEthJsonRpcError(constants_1.standardErrorCodes.rpc.limitExceeded, arg)\n  },\n  provider: {\n    userRejectedRequest: arg => {\n      return getEthProviderError(constants_1.standardErrorCodes.provider.userRejectedRequest, arg);\n    },\n    unauthorized: arg => {\n      return getEthProviderError(constants_1.standardErrorCodes.provider.unauthorized, arg);\n    },\n    unsupportedMethod: arg => {\n      return getEthProviderError(constants_1.standardErrorCodes.provider.unsupportedMethod, arg);\n    },\n    disconnected: arg => {\n      return getEthProviderError(constants_1.standardErrorCodes.provider.disconnected, arg);\n    },\n    chainDisconnected: arg => {\n      return getEthProviderError(constants_1.standardErrorCodes.provider.chainDisconnected, arg);\n    },\n    unsupportedChain: arg => {\n      return getEthProviderError(constants_1.standardErrorCodes.provider.unsupportedChain, arg);\n    },\n    custom: opts => {\n      if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {\n        throw new Error('Ethereum Provider custom errors must provide single object argument.');\n      }\n      const {\n        code,\n        message,\n        data\n      } = opts;\n      if (!message || typeof message !== 'string') {\n        throw new Error('\"message\" must be a nonempty string');\n      }\n      return new EthereumProviderError(code, message, data);\n    }\n  }\n};\n// Internal\nfunction getEthJsonRpcError(code, arg) {\n  const [message, data] = parseOpts(arg);\n  return new EthereumRpcError(code, message || (0, utils_1.getMessageFromCode)(code), data);\n}\nfunction getEthProviderError(code, arg) {\n  const [message, data] = parseOpts(arg);\n  return new EthereumProviderError(code, message || (0, utils_1.getMessageFromCode)(code), data);\n}\nfunction parseOpts(arg) {\n  if (arg) {\n    if (typeof arg === 'string') {\n      return [arg];\n    } else if (typeof arg === 'object' && !Array.isArray(arg)) {\n      const {\n        message,\n        data\n      } = arg;\n      if (message && typeof message !== 'string') {\n        throw new Error('Must specify string message.');\n      }\n      return [message || undefined, data];\n    }\n  }\n  return [];\n}\nclass EthereumRpcError extends Error {\n  constructor(code, message, data) {\n    if (!Number.isInteger(code)) {\n      throw new Error('\"code\" must be an integer.');\n    }\n    if (!message || typeof message !== 'string') {\n      throw new Error('\"message\" must be a nonempty string.');\n    }\n    super(message);\n    this.code = code;\n    if (data !== undefined) {\n      this.data = data;\n    }\n  }\n}\nclass EthereumProviderError extends EthereumRpcError {\n  /**\n   * Create an Ethereum Provider JSON-RPC error.\n   * `code` must be an integer in the 1000 <= 4999 range.\n   */\n  constructor(code, message, data) {\n    if (!isValidEthProviderCode(code)) {\n      throw new Error('\"code\" must be an integer such that: 1000 <= code <= 4999');\n    }\n    super(code, message, data);\n  }\n}\nfunction isValidEthProviderCode(code) {\n  return Number.isInteger(code) && code >= 1000 && code <= 4999;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","standardErrors","constants_1","require","utils_1","rpc","parse","arg","getEthJsonRpcError","standardErrorCodes","invalidRequest","invalidParams","methodNotFound","internal","server","opts","Array","isArray","Error","code","Number","isInteger","invalidInput","resourceNotFound","resourceUnavailable","transactionRejected","methodNotSupported","limitExceeded","provider","userRejectedRequest","getEthProviderError","unauthorized","unsupportedMethod","disconnected","chainDisconnected","unsupportedChain","custom","message","data","EthereumProviderError","parseOpts","EthereumRpcError","getMessageFromCode","undefined","constructor","isValidEthProviderCode"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/cbw-sdk/dist/core/error/errors.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.standardErrors = void 0;\nconst constants_1 = require(\"./constants\");\nconst utils_1 = require(\"./utils\");\nexports.standardErrors = {\n    rpc: {\n        parse: (arg) => getEthJsonRpcError(constants_1.standardErrorCodes.rpc.parse, arg),\n        invalidRequest: (arg) => getEthJsonRpcError(constants_1.standardErrorCodes.rpc.invalidRequest, arg),\n        invalidParams: (arg) => getEthJsonRpcError(constants_1.standardErrorCodes.rpc.invalidParams, arg),\n        methodNotFound: (arg) => getEthJsonRpcError(constants_1.standardErrorCodes.rpc.methodNotFound, arg),\n        internal: (arg) => getEthJsonRpcError(constants_1.standardErrorCodes.rpc.internal, arg),\n        server: (opts) => {\n            if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {\n                throw new Error('Ethereum RPC Server errors must provide single object argument.');\n            }\n            const { code } = opts;\n            if (!Number.isInteger(code) || code > -32005 || code < -32099) {\n                throw new Error('\"code\" must be an integer such that: -32099 <= code <= -32005');\n            }\n            return getEthJsonRpcError(code, opts);\n        },\n        invalidInput: (arg) => getEthJsonRpcError(constants_1.standardErrorCodes.rpc.invalidInput, arg),\n        resourceNotFound: (arg) => getEthJsonRpcError(constants_1.standardErrorCodes.rpc.resourceNotFound, arg),\n        resourceUnavailable: (arg) => getEthJsonRpcError(constants_1.standardErrorCodes.rpc.resourceUnavailable, arg),\n        transactionRejected: (arg) => getEthJsonRpcError(constants_1.standardErrorCodes.rpc.transactionRejected, arg),\n        methodNotSupported: (arg) => getEthJsonRpcError(constants_1.standardErrorCodes.rpc.methodNotSupported, arg),\n        limitExceeded: (arg) => getEthJsonRpcError(constants_1.standardErrorCodes.rpc.limitExceeded, arg),\n    },\n    provider: {\n        userRejectedRequest: (arg) => {\n            return getEthProviderError(constants_1.standardErrorCodes.provider.userRejectedRequest, arg);\n        },\n        unauthorized: (arg) => {\n            return getEthProviderError(constants_1.standardErrorCodes.provider.unauthorized, arg);\n        },\n        unsupportedMethod: (arg) => {\n            return getEthProviderError(constants_1.standardErrorCodes.provider.unsupportedMethod, arg);\n        },\n        disconnected: (arg) => {\n            return getEthProviderError(constants_1.standardErrorCodes.provider.disconnected, arg);\n        },\n        chainDisconnected: (arg) => {\n            return getEthProviderError(constants_1.standardErrorCodes.provider.chainDisconnected, arg);\n        },\n        unsupportedChain: (arg) => {\n            return getEthProviderError(constants_1.standardErrorCodes.provider.unsupportedChain, arg);\n        },\n        custom: (opts) => {\n            if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {\n                throw new Error('Ethereum Provider custom errors must provide single object argument.');\n            }\n            const { code, message, data } = opts;\n            if (!message || typeof message !== 'string') {\n                throw new Error('\"message\" must be a nonempty string');\n            }\n            return new EthereumProviderError(code, message, data);\n        },\n    },\n};\n// Internal\nfunction getEthJsonRpcError(code, arg) {\n    const [message, data] = parseOpts(arg);\n    return new EthereumRpcError(code, message || (0, utils_1.getMessageFromCode)(code), data);\n}\nfunction getEthProviderError(code, arg) {\n    const [message, data] = parseOpts(arg);\n    return new EthereumProviderError(code, message || (0, utils_1.getMessageFromCode)(code), data);\n}\nfunction parseOpts(arg) {\n    if (arg) {\n        if (typeof arg === 'string') {\n            return [arg];\n        }\n        else if (typeof arg === 'object' && !Array.isArray(arg)) {\n            const { message, data } = arg;\n            if (message && typeof message !== 'string') {\n                throw new Error('Must specify string message.');\n            }\n            return [message || undefined, data];\n        }\n    }\n    return [];\n}\nclass EthereumRpcError extends Error {\n    constructor(code, message, data) {\n        if (!Number.isInteger(code)) {\n            throw new Error('\"code\" must be an integer.');\n        }\n        if (!message || typeof message !== 'string') {\n            throw new Error('\"message\" must be a nonempty string.');\n        }\n        super(message);\n        this.code = code;\n        if (data !== undefined) {\n            this.data = data;\n        }\n    }\n}\nclass EthereumProviderError extends EthereumRpcError {\n    /**\n     * Create an Ethereum Provider JSON-RPC error.\n     * `code` must be an integer in the 1000 <= 4999 range.\n     */\n    constructor(code, message, data) {\n        if (!isValidEthProviderCode(code)) {\n            throw new Error('\"code\" must be an integer such that: 1000 <= code <= 4999');\n        }\n        super(code, message, data);\n    }\n}\nfunction isValidEthProviderCode(code) {\n    return Number.isInteger(code) && code >= 1000 && code <= 4999;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}