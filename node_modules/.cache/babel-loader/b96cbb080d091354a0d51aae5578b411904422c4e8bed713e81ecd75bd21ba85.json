{"ast":null,"code":"'use client';\n\nimport { watchAccount } from '@wagmi/core';\nimport { useEffect } from 'react';\nimport { useConfig } from './useConfig.js';\n/** https://wagmi.sh/react/api/hooks/useAccountEffect */\nexport function useAccountEffect(parameters = {}) {\n  const {\n    onConnect,\n    onDisconnect\n  } = parameters;\n  const config = useConfig(parameters);\n  useEffect(() => {\n    return watchAccount(config, {\n      onChange(data, prevData) {\n        if ((prevData.status === 'reconnecting' || prevData.status === 'connecting' && prevData.address === undefined) && data.status === 'connected') {\n          const {\n            address,\n            addresses,\n            chain,\n            chainId,\n            connector\n          } = data;\n          const isReconnected = prevData.status === 'reconnecting' ||\n          // if `previousAccount.status` is `undefined`, the connector connected immediately.\n          prevData.status === undefined;\n          onConnect?.({\n            address,\n            addresses,\n            chain,\n            chainId,\n            connector,\n            isReconnected\n          });\n        } else if (prevData.status === 'connected' && data.status === 'disconnected') onDisconnect?.();\n      }\n    });\n  }, [config, onConnect, onDisconnect]);\n}","map":{"version":3,"names":["watchAccount","useEffect","useConfig","useAccountEffect","parameters","onConnect","onDisconnect","config","onChange","data","prevData","status","address","undefined","addresses","chain","chainId","connector","isReconnected"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/wagmi/src/hooks/useAccountEffect.ts"],"sourcesContent":["'use client'\n\nimport { type GetAccountReturnType, watchAccount } from '@wagmi/core'\nimport type { Compute } from '@wagmi/core/internal'\nimport { useEffect } from 'react'\n\nimport type { ConfigParameter } from '../types/properties.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseAccountEffectParameters = Compute<\n  {\n    onConnect?(\n      data: Compute<\n        Pick<\n          Extract<GetAccountReturnType, { status: 'connected' }>,\n          'address' | 'addresses' | 'chain' | 'chainId' | 'connector'\n        > & {\n          isReconnected: boolean\n        }\n      >,\n    ): void\n    onDisconnect?(): void\n  } & ConfigParameter\n>\n\n/** https://wagmi.sh/react/api/hooks/useAccountEffect */\nexport function useAccountEffect(parameters: UseAccountEffectParameters = {}) {\n  const { onConnect, onDisconnect } = parameters\n\n  const config = useConfig(parameters)\n\n  useEffect(() => {\n    return watchAccount(config, {\n      onChange(data, prevData) {\n        if (\n          (prevData.status === 'reconnecting' ||\n            (prevData.status === 'connecting' &&\n              prevData.address === undefined)) &&\n          data.status === 'connected'\n        ) {\n          const { address, addresses, chain, chainId, connector } = data\n          const isReconnected =\n            prevData.status === 'reconnecting' ||\n            // if `previousAccount.status` is `undefined`, the connector connected immediately.\n            prevData.status === undefined\n          onConnect?.({\n            address,\n            addresses,\n            chain,\n            chainId,\n            connector,\n            isReconnected,\n          })\n        } else if (\n          prevData.status === 'connected' &&\n          data.status === 'disconnected'\n        )\n          onDisconnect?.()\n      },\n    })\n  }, [config, onConnect, onDisconnect])\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,SAAoCA,YAAY,QAAQ,aAAa;AAErE,SAASC,SAAS,QAAQ,OAAO;AAGjC,SAASC,SAAS,QAAQ,gBAAgB;AAkB1C;AACA,OAAM,SAAUC,gBAAgBA,CAACC,UAAA,GAAyC,EAAE;EAC1E,MAAM;IAAEC,SAAS;IAAEC;EAAY,CAAE,GAAGF,UAAU;EAE9C,MAAMG,MAAM,GAAGL,SAAS,CAACE,UAAU,CAAC;EAEpCH,SAAS,CAAC,MAAK;IACb,OAAOD,YAAY,CAACO,MAAM,EAAE;MAC1BC,QAAQA,CAACC,IAAI,EAAEC,QAAQ;QACrB,IACE,CAACA,QAAQ,CAACC,MAAM,KAAK,cAAc,IAChCD,QAAQ,CAACC,MAAM,KAAK,YAAY,IAC/BD,QAAQ,CAACE,OAAO,KAAKC,SAAU,KACnCJ,IAAI,CAACE,MAAM,KAAK,WAAW,EAC3B;UACA,MAAM;YAAEC,OAAO;YAAEE,SAAS;YAAEC,KAAK;YAAEC,OAAO;YAAEC;UAAS,CAAE,GAAGR,IAAI;UAC9D,MAAMS,aAAa,GACjBR,QAAQ,CAACC,MAAM,KAAK,cAAc;UAClC;UACAD,QAAQ,CAACC,MAAM,KAAKE,SAAS;UAC/BR,SAAS,GAAG;YACVO,OAAO;YACPE,SAAS;YACTC,KAAK;YACLC,OAAO;YACPC,SAAS;YACTC;WACD,CAAC;QACJ,CAAC,MAAM,IACLR,QAAQ,CAACC,MAAM,KAAK,WAAW,IAC/BF,IAAI,CAACE,MAAM,KAAK,cAAc,EAE9BL,YAAY,GAAE,CAAE;MACpB;KACD,CAAC;EACJ,CAAC,EAAE,CAACC,MAAM,EAAEF,SAAS,EAAEC,YAAY,CAAC,CAAC;AACvC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}