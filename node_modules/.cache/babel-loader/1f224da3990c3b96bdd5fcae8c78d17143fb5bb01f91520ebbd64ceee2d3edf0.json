{"ast":null,"code":"import { signMessage } from '../actions/signMessage.js';\nimport { signTypedData } from '../actions/signTypedData.js';\n/**\n * A suite of Actions based on [Solady contracts](https://github.com/Vectorized/solady).\n *\n * @example\n * import { createPublicClient, createWalletClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { erc7739Actions } from 'viem/experimental'\n *\n * const walletClient = createWalletClient({\n *   chain: mainnet,\n *   transport: http(),\n * }).extend(erc7739Actions())\n *\n * const result = await walletClient.signMessage({...})\n */\nexport function erc7739Actions(parameters = {}) {\n  const {\n    verifier\n  } = parameters;\n  return client => {\n    return {\n      signMessage: parameters => signMessage(client, {\n        verifier,\n        ...parameters\n      }),\n      signTypedData: parameters => signTypedData(client, {\n        verifier,\n        ...parameters\n      })\n    };\n  };\n}","map":{"version":3,"names":["signMessage","signTypedData","erc7739Actions","parameters","verifier","client"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/viem/experimental/erc7739/decorators/erc7739.ts"],"sourcesContent":["import type { Address, TypedData } from 'abitype'\nimport type { Client } from '../../../clients/createClient.js'\nimport type { Transport } from '../../../clients/transports/createTransport.js'\nimport type { Account } from '../../../types/account.js'\nimport type { Chain } from '../../../types/chain.js'\nimport {\n  type SignMessageParameters,\n  type SignMessageReturnType,\n  signMessage,\n} from '../actions/signMessage.js'\nimport {\n  type SignTypedDataParameters,\n  type SignTypedDataReturnType,\n  signTypedData,\n} from '../actions/signTypedData.js'\n\nexport type Erc7739Actions<\n  account extends Account | undefined = Account | undefined,\n  verifier extends Address | undefined = Address | undefined,\n> = {\n  /**\n   * Signs a [EIP-191](https://eips.ethereum.org/EIPS/eip-191) personal sign message via [ERC-7739 `PersonalSign` format](https://eips.ethereum.org/EIPS/eip-7702).\n   *\n   * This Action is suitable to sign messages for Smart Accounts that implement (or conform to) [ERC-7739](https://eips.ethereum.org/EIPS/eip-7702) (e.g. Solady's [ERC1271.sol](https://github.com/Vectorized/solady/blob/main/src/accounts/ERC1271.sol)).\n   *\n   * - Docs: https://viem.sh/experimental/erc7739/signMessage\n   *\n   * With the calculated signature, you can:\n   * - use [`verifyMessage`](https://viem.sh/docs/utilities/verifyMessage) to verify the signature,\n   *\n   * @param client - Client to use\n   * @param parameters - {@link SignMessageParameters}\n   * @returns The signed message. {@link SignMessageReturnType}\n   *\n   * @example\n   * ```ts\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { erc7739Actions } from 'viem/experimental/erc7739'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * }).extend(erc7739Actions())\n   *\n   * const signature = await client.signMessage({\n   *   account: '0xE8Df82fA4E10e6A12a9Dab552bceA2acd26De9bb',\n   *   message: 'hello world',\n   *   verifier: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   * })\n   * ```\n   *\n   * @example Account & Signer Hoisting\n   * ```ts\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { erc7739Actions } from 'viem/experimental/erc7739'\n   *\n   * const client = createWalletClient({\n   *   account: '0xE8Df82fA4E10e6A12a9Dab552bceA2acd26De9bb',\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * }).extend(erc7739Actions({ verifier: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e' }))\n   *\n   * const signature = await client.signMessage({\n   *   message: 'hello world',\n   * })\n   * ```\n   */\n  signMessage: <accountOverride extends Account | undefined = undefined>(\n    parameters: SignMessageParameters<account, accountOverride, verifier>,\n  ) => Promise<SignMessageReturnType>\n  /**\n   * Signs an [EIP-712](https://eips.ethereum.org/EIPS/eip-712) typed data message via [ERC-7739 `TypedDataSign` format](https://eips.ethereum.org/EIPS/eip-7702).\n   *\n   * This Action is suitable to sign messages for Smart Accounts that implement (or conform to) [ERC-7739](https://eips.ethereum.org/EIPS/eip-7702) (e.g. Solady's [ERC1271.sol](https://github.com/Vectorized/solady/blob/main/src/accounts/ERC1271.sol)).\n   *\n   * - Docs: https://viem.sh/experimental/erc7739/signTypedData\n   *\n   * @param client - Client to use\n   * @param parameters - {@link SignTypedDataParameters}\n   * @returns The signed data. {@link SignTypedDataReturnType}\n   *\n   * @example\n   * ```ts\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { erc7739Actions } from 'viem/experimental/erc7739'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * }).extend(erc7739Actions())\n   *\n   * const signature = await client.signTypedData({\n   *   account: '0xE8Df82fA4E10e6A12a9Dab552bceA2acd26De9bb',\n   *   domain: {\n   *     name: 'Ether Mail',\n   *     version: '1',\n   *     chainId: 1,\n   *     verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n   *   },\n   *   types: {\n   *     Person: [\n   *       { name: 'name', type: 'string' },\n   *       { name: 'wallet', type: 'address' },\n   *     ],\n   *     Mail: [\n   *       { name: 'from', type: 'Person' },\n   *       { name: 'to', type: 'Person' },\n   *       { name: 'contents', type: 'string' },\n   *     ],\n   *   },\n   *   primaryType: 'Mail',\n   *   message: {\n   *     from: {\n   *       name: 'Cow',\n   *       wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n   *     },\n   *     to: {\n   *       name: 'Bob',\n   *       wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n   *     },\n   *     contents: 'Hello, Bob!',\n   *   },\n   *   verifier: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   * })\n   * ```\n   *\n   * @example Account & Signer Hoisting\n   * ```ts\n   * import { createWalletClient, http } from 'viem'\n   * import { privateKeyToAccount } from 'viem/accounts'\n   * import { mainnet } from 'viem/chains'\n   * import { erc7739Actions } from 'viem/experimental/erc7739'\n   *\n   * const client = createWalletClient({\n   *   account: '0xE8Df82fA4E10e6A12a9Dab552bceA2acd26De9bb',\n   *   chain: mainnet,\n   *   transport: http(),\n   * }).extend(erc7739Actions({ verifier: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e' }))\n   *\n   * const signature = await client.signTypedData({\n   *   domain: {\n   *     name: 'Ether Mail',\n   *     version: '1',\n   *     chainId: 1,\n   *     verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n   *   },\n   *   types: {\n   *     Person: [\n   *       { name: 'name', type: 'string' },\n   *       { name: 'wallet', type: 'address' },\n   *     ],\n   *     Mail: [\n   *       { name: 'from', type: 'Person' },\n   *       { name: 'to', type: 'Person' },\n   *       { name: 'contents', type: 'string' },\n   *     ],\n   *   },\n   *   primaryType: 'Mail',\n   *   message: {\n   *     from: {\n   *       name: 'Cow',\n   *       wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n   *     },\n   *     to: {\n   *       name: 'Bob',\n   *       wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n   *     },\n   *     contents: 'Hello, Bob!',\n   *   },\n   * })\n   * ```\n   */\n  signTypedData: <\n    const typedData extends TypedData | Record<string, unknown>,\n    primaryType extends keyof typedData | 'EIP712Domain',\n    accountOverride extends Account | undefined = undefined,\n  >(\n    parameters: SignTypedDataParameters<\n      typedData,\n      primaryType,\n      account,\n      accountOverride\n    >,\n  ) => Promise<SignTypedDataReturnType>\n}\n\nexport type Erc7739ActionsParameters<\n  verifier extends Account | Address | undefined =\n    | Account\n    | Address\n    | undefined,\n> = {\n  verifier?: verifier | undefined\n}\n\n/**\n * A suite of Actions based on [Solady contracts](https://github.com/Vectorized/solady).\n *\n * @example\n * import { createPublicClient, createWalletClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { erc7739Actions } from 'viem/experimental'\n *\n * const walletClient = createWalletClient({\n *   chain: mainnet,\n *   transport: http(),\n * }).extend(erc7739Actions())\n *\n * const result = await walletClient.signMessage({...})\n */\nexport function erc7739Actions<\n  verifier extends Address | undefined = undefined,\n>(parameters: Erc7739ActionsParameters<verifier> = {}) {\n  const { verifier } = parameters\n  return <\n    transport extends Transport,\n    chain extends Chain | undefined = Chain | undefined,\n    account extends Account | undefined = Account | undefined,\n  >(\n    client: Client<transport, chain, account>,\n  ): Erc7739Actions<account, verifier> => {\n    return {\n      signMessage: (parameters) =>\n        signMessage(client, { verifier, ...parameters }),\n      signTypedData: (parameters) =>\n        signTypedData(client, { verifier, ...(parameters as any) }),\n    }\n  }\n}\n"],"mappings":"AAKA,SAGEA,WAAW,QACN,2BAA2B;AAClC,SAGEC,aAAa,QACR,6BAA6B;AAwLpC;;;;;;;;;;;;;;;AAeA,OAAM,SAAUC,cAAcA,CAE5BC,UAAA,GAAiD,EAAE;EACnD,MAAM;IAAEC;EAAQ,CAAE,GAAGD,UAAU;EAC/B,OAKEE,MAAyC,IACJ;IACrC,OAAO;MACLL,WAAW,EAAGG,UAAU,IACtBH,WAAW,CAACK,MAAM,EAAE;QAAED,QAAQ;QAAE,GAAGD;MAAU,CAAE,CAAC;MAClDF,aAAa,EAAGE,UAAU,IACxBF,aAAa,CAACI,MAAM,EAAE;QAAED,QAAQ;QAAE,GAAID;MAAkB,CAAE;KAC7D;EACH,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}