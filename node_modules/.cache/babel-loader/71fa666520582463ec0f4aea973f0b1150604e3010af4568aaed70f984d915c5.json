{"ast":null,"code":"\"use strict\";\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n// TODO: Address linting issues\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CoinbaseWalletProvider = void 0;\n// Copyright (c) 2018-2023 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst eventemitter3_1 = require(\"eventemitter3\");\nconst error_1 = require(\"../core/error\");\nconst util_1 = require(\"../core/util\");\nconst MobileRelay_1 = require(\"../relay/mobile/MobileRelay\");\nconst RelayAbstract_1 = require(\"../relay/RelayAbstract\");\nconst Session_1 = require(\"../relay/Session\");\nconst Web3Response_1 = require(\"../relay/walletlink/type/Web3Response\");\nconst eth_eip712_util_1 = __importDefault(require(\"../vendor-js/eth-eip712-util\"));\nconst DiagnosticLogger_1 = require(\"./DiagnosticLogger\");\nconst FilterPolyfill_1 = require(\"./FilterPolyfill\");\nconst SubscriptionManager_1 = require(\"./SubscriptionManager\");\nconst DEFAULT_CHAIN_ID_KEY = 'DefaultChainId';\nconst DEFAULT_JSON_RPC_URL = 'DefaultJsonRpcUrl';\nclass CoinbaseWalletProvider extends eventemitter3_1.EventEmitter {\n  constructor(options) {\n    var _a, _b;\n    super();\n    this._filterPolyfill = new FilterPolyfill_1.FilterPolyfill(this);\n    this._subscriptionManager = new SubscriptionManager_1.SubscriptionManager(this);\n    this._relay = null;\n    this._addresses = [];\n    this.hasMadeFirstChainChangedEmission = false;\n    this.setProviderInfo = this.setProviderInfo.bind(this);\n    this.updateProviderInfo = this.updateProviderInfo.bind(this);\n    this.getChainId = this.getChainId.bind(this);\n    this.setAppInfo = this.setAppInfo.bind(this);\n    this.enable = this.enable.bind(this);\n    this.close = this.close.bind(this);\n    this.send = this.send.bind(this);\n    this.sendAsync = this.sendAsync.bind(this);\n    this.request = this.request.bind(this);\n    this._setAddresses = this._setAddresses.bind(this);\n    this.scanQRCode = this.scanQRCode.bind(this);\n    this.genericRequest = this.genericRequest.bind(this);\n    this._chainIdFromOpts = options.chainId;\n    this._jsonRpcUrlFromOpts = options.jsonRpcUrl;\n    this._overrideIsMetaMask = options.overrideIsMetaMask;\n    this._relayProvider = options.relayProvider;\n    this._storage = options.storage;\n    this._relayEventManager = options.relayEventManager;\n    this.diagnostic = options.diagnosticLogger;\n    this.reloadOnDisconnect = true;\n    this.isCoinbaseWallet = (_a = options.overrideIsCoinbaseWallet) !== null && _a !== void 0 ? _a : true;\n    this.isCoinbaseBrowser = (_b = options.overrideIsCoinbaseBrowser) !== null && _b !== void 0 ? _b : false;\n    this.qrUrl = options.qrUrl;\n    const chainId = this.getChainId();\n    const chainIdStr = (0, util_1.prepend0x)(chainId.toString(16));\n    // indicate that we've connected, for EIP-1193 compliance\n    this.emit('connect', {\n      chainIdStr\n    });\n    const cachedAddresses = this._storage.getItem(RelayAbstract_1.LOCAL_STORAGE_ADDRESSES_KEY);\n    if (cachedAddresses) {\n      const addresses = cachedAddresses.split(' ');\n      if (addresses[0] !== '') {\n        this._addresses = addresses.map(address => (0, util_1.ensureAddressString)(address));\n        this.emit('accountsChanged', addresses);\n      }\n    }\n    this._subscriptionManager.events.on('notification', notification => {\n      this.emit('message', {\n        type: notification.method,\n        data: notification.params\n      });\n    });\n    if (this._isAuthorized()) {\n      void this.initializeRelay();\n    }\n    window.addEventListener('message', event => {\n      var _a;\n      // Used to verify the source and window are correct before proceeding\n      if (event.origin !== location.origin || event.source !== window) {\n        return;\n      }\n      if (event.data.type !== 'walletLinkMessage') return; // compatibility with CBW extension\n      if (event.data.data.action === 'dappChainSwitched') {\n        const _chainId = event.data.data.chainId;\n        const jsonRpcUrl = (_a = event.data.data.jsonRpcUrl) !== null && _a !== void 0 ? _a : this.jsonRpcUrl;\n        this.updateProviderInfo(jsonRpcUrl, Number(_chainId));\n      }\n    });\n  }\n  /** @deprecated Use `.request({ method: 'eth_accounts' })` instead. */\n  get selectedAddress() {\n    return this._addresses[0] || undefined;\n  }\n  /** @deprecated Use the chain ID. If you still need the network ID, use `.request({ method: 'net_version' })`. */\n  get networkVersion() {\n    return this.getChainId().toString(10);\n  }\n  /** @deprecated Use `.request({ method: 'eth_chainId' })` instead. */\n  get chainId() {\n    return (0, util_1.prepend0x)(this.getChainId().toString(16));\n  }\n  get isWalletLink() {\n    // backward compatibility\n    return true;\n  }\n  /**\n   * Some DApps (i.e. Alpha Homora) seem to require the window.ethereum object return\n   * true for this method.\n   */\n  get isMetaMask() {\n    return this._overrideIsMetaMask;\n  }\n  get host() {\n    return this.jsonRpcUrl;\n  }\n  get connected() {\n    return true;\n  }\n  isConnected() {\n    return true;\n  }\n  get jsonRpcUrl() {\n    var _a;\n    return (_a = this._storage.getItem(DEFAULT_JSON_RPC_URL)) !== null && _a !== void 0 ? _a : this._jsonRpcUrlFromOpts;\n  }\n  set jsonRpcUrl(value) {\n    this._storage.setItem(DEFAULT_JSON_RPC_URL, value);\n  }\n  disableReloadOnDisconnect() {\n    this.reloadOnDisconnect = false;\n  }\n  setProviderInfo(jsonRpcUrl, chainId) {\n    if (!this.isCoinbaseBrowser) {\n      this._chainIdFromOpts = chainId;\n      this._jsonRpcUrlFromOpts = jsonRpcUrl;\n    }\n    this.updateProviderInfo(this.jsonRpcUrl, this.getChainId());\n  }\n  updateProviderInfo(jsonRpcUrl, chainId) {\n    this.jsonRpcUrl = jsonRpcUrl;\n    // emit chainChanged event if necessary\n    const originalChainId = this.getChainId();\n    this._storage.setItem(DEFAULT_CHAIN_ID_KEY, chainId.toString(10));\n    const chainChanged = (0, util_1.ensureIntNumber)(chainId) !== originalChainId;\n    if (chainChanged || !this.hasMadeFirstChainChangedEmission) {\n      this.emit('chainChanged', this.getChainId());\n      this.hasMadeFirstChainChangedEmission = true;\n    }\n  }\n  async watchAsset(type, address, symbol, decimals, image, chainId) {\n    const relay = await this.initializeRelay();\n    const result = await relay.watchAsset(type, address, symbol, decimals, image, chainId === null || chainId === void 0 ? void 0 : chainId.toString()).promise;\n    if ((0, Web3Response_1.isErrorResponse)(result)) return false;\n    return !!result.result;\n  }\n  async addEthereumChain(chainId, rpcUrls, blockExplorerUrls, chainName, iconUrls, nativeCurrency) {\n    var _a, _b;\n    if ((0, util_1.ensureIntNumber)(chainId) === this.getChainId()) {\n      return false;\n    }\n    const relay = await this.initializeRelay();\n    const isWhitelistedNetworkOrStandalone = relay.inlineAddEthereumChain(chainId.toString());\n    if (!this._isAuthorized() && !isWhitelistedNetworkOrStandalone) {\n      await relay.requestEthereumAccounts().promise;\n    }\n    const res = await relay.addEthereumChain(chainId.toString(), rpcUrls, iconUrls, blockExplorerUrls, chainName, nativeCurrency).promise;\n    if ((0, Web3Response_1.isErrorResponse)(res)) return false;\n    if (((_a = res.result) === null || _a === void 0 ? void 0 : _a.isApproved) === true) {\n      this.updateProviderInfo(rpcUrls[0], chainId);\n    }\n    return ((_b = res.result) === null || _b === void 0 ? void 0 : _b.isApproved) === true;\n  }\n  async switchEthereumChain(chainId) {\n    const relay = await this.initializeRelay();\n    const res = await relay.switchEthereumChain(chainId.toString(10), this.selectedAddress || undefined).promise;\n    // backward compatibility\n    if ((0, Web3Response_1.isErrorResponse)(res)) {\n      if (!res.errorCode) return;\n      if (res.errorCode === error_1.standardErrorCodes.provider.unsupportedChain) {\n        throw error_1.standardErrors.provider.unsupportedChain();\n      } else {\n        throw error_1.standardErrors.provider.custom({\n          message: res.errorMessage,\n          code: res.errorCode\n        });\n      }\n    }\n    const switchResponse = res.result;\n    if (switchResponse.isApproved && switchResponse.rpcUrl.length > 0) {\n      this.updateProviderInfo(switchResponse.rpcUrl, chainId);\n    }\n  }\n  setAppInfo(appName, appLogoUrl) {\n    void this.initializeRelay().then(relay => relay.setAppInfo(appName, appLogoUrl));\n  }\n  /** @deprecated Use `.request({ method: 'eth_requestAccounts' })` instead. */\n  async enable() {\n    var _a;\n    (_a = this.diagnostic) === null || _a === void 0 ? void 0 : _a.log(DiagnosticLogger_1.EVENTS.ETH_ACCOUNTS_STATE, {\n      method: 'provider::enable',\n      addresses_length: this._addresses.length,\n      sessionIdHash: this._relay ? Session_1.Session.hash(this._relay.session.id) : undefined\n    });\n    if (this._isAuthorized()) {\n      return [...this._addresses];\n    }\n    return await this.send('eth_requestAccounts');\n  }\n  async close() {\n    const relay = await this.initializeRelay();\n    relay.resetAndReload();\n  }\n  send(requestOrMethod, callbackOrParams) {\n    // send<T>(method, params): Promise<T>\n    try {\n      const result = this._send(requestOrMethod, callbackOrParams);\n      if (result instanceof Promise) {\n        return result.catch(error => {\n          throw (0, error_1.serializeError)(error, requestOrMethod);\n        });\n      }\n    } catch (error) {\n      throw (0, error_1.serializeError)(error, requestOrMethod);\n    }\n  }\n  _send(requestOrMethod, callbackOrParams) {\n    if (typeof requestOrMethod === 'string') {\n      const method = requestOrMethod;\n      const params = Array.isArray(callbackOrParams) ? callbackOrParams : callbackOrParams !== undefined ? [callbackOrParams] : [];\n      const request = {\n        jsonrpc: '2.0',\n        id: 0,\n        method,\n        params\n      };\n      return this._sendRequestAsync(request).then(res => res.result);\n    }\n    // send(JSONRPCRequest | JSONRPCRequest[], callback): void\n    if (typeof callbackOrParams === 'function') {\n      const request = requestOrMethod;\n      const callback = callbackOrParams;\n      return this._sendAsync(request, callback);\n    }\n    // send(JSONRPCRequest[]): JSONRPCResponse[]\n    if (Array.isArray(requestOrMethod)) {\n      const requests = requestOrMethod;\n      return requests.map(r => this._sendRequest(r));\n    }\n    // send(JSONRPCRequest): JSONRPCResponse\n    const req = requestOrMethod;\n    return this._sendRequest(req);\n  }\n  async sendAsync(request, callback) {\n    try {\n      return this._sendAsync(request, callback).catch(error => {\n        throw (0, error_1.serializeError)(error, request);\n      });\n    } catch (error) {\n      return Promise.reject((0, error_1.serializeError)(error, request));\n    }\n  }\n  async _sendAsync(request, callback) {\n    if (typeof callback !== 'function') {\n      throw new Error('callback is required');\n    }\n    // send(JSONRPCRequest[], callback): void\n    if (Array.isArray(request)) {\n      const arrayCb = callback;\n      this._sendMultipleRequestsAsync(request).then(responses => arrayCb(null, responses)).catch(err => arrayCb(err, null));\n      return;\n    }\n    // send(JSONRPCRequest, callback): void\n    const cb = callback;\n    return this._sendRequestAsync(request).then(response => cb(null, response)).catch(err => cb(err, null));\n  }\n  async request(args) {\n    try {\n      return this._request(args).catch(error => {\n        throw (0, error_1.serializeError)(error, args.method);\n      });\n    } catch (error) {\n      return Promise.reject((0, error_1.serializeError)(error, args.method));\n    }\n  }\n  async _request(args) {\n    if (!args || typeof args !== 'object' || Array.isArray(args)) {\n      throw error_1.standardErrors.rpc.invalidRequest({\n        message: 'Expected a single, non-array, object argument.',\n        data: args\n      });\n    }\n    const {\n      method,\n      params\n    } = args;\n    if (typeof method !== 'string' || method.length === 0) {\n      throw error_1.standardErrors.rpc.invalidRequest({\n        message: \"'args.method' must be a non-empty string.\",\n        data: args\n      });\n    }\n    if (params !== undefined && !Array.isArray(params) && (typeof params !== 'object' || params === null)) {\n      throw error_1.standardErrors.rpc.invalidRequest({\n        message: \"'args.params' must be an object or array if provided.\",\n        data: args\n      });\n    }\n    const newParams = params === undefined ? [] : params;\n    // Coinbase Wallet Requests\n    const id = this._relayEventManager.makeRequestId();\n    const result = await this._sendRequestAsync({\n      method,\n      params: newParams,\n      jsonrpc: '2.0',\n      id\n    });\n    return result.result;\n  }\n  async scanQRCode(match) {\n    const relay = await this.initializeRelay();\n    const res = await relay.scanQRCode((0, util_1.ensureRegExpString)(match)).promise;\n    if ((0, Web3Response_1.isErrorResponse)(res)) {\n      throw (0, error_1.serializeError)(res.errorMessage, 'scanQRCode');\n    } else if (typeof res.result !== 'string') {\n      throw (0, error_1.serializeError)('result was not a string', 'scanQRCode');\n    }\n    return res.result;\n  }\n  async genericRequest(data, action) {\n    const relay = await this.initializeRelay();\n    const res = await relay.genericRequest(data, action).promise;\n    if ((0, Web3Response_1.isErrorResponse)(res)) {\n      throw (0, error_1.serializeError)(res.errorMessage, 'generic');\n    } else if (typeof res.result !== 'string') {\n      throw (0, error_1.serializeError)('result was not a string', 'generic');\n    }\n    return res.result;\n  }\n  /**\n   * @beta\n   * This method is currently in beta. While it is available for use, please note that it is still under testing and may undergo significant changes.\n   *\n   * @remarks\n   * IMPORTANT: Signature validation is not performed by this method. Users of this method are advised to perform their own signature validation.\n   * Common web3 frontend libraries such as ethers.js and viem provide the `verifyMessage` utility function that can be used for signature validation.\n   *\n   * It combines `eth_requestAccounts` and \"Sign-In with Ethereum\" (EIP-4361) into a single call.\n   * The returned account and signed message can be used to authenticate the user.\n   *\n   * @param {Object} params - An object with the following properties:\n   * - `nonce` {string}: A unique string to prevent replay attacks.\n   * - `statement` {string}: An optional human-readable ASCII assertion that the user will sign.\n   * - `resources` {string[]}: An optional list of information the user wishes to have resolved as part of authentication by the relying party.\n   *\n   * @returns {Promise<ConnectAndSignInResponse>} A promise that resolves to an object with the following properties:\n   * - `accounts` {string[]}: The Ethereum accounts of the user.\n   * - `message` {string}: The overall message that the user signed. Hex encoded.\n   * - `signature` {string}: The signature of the message, signed with the user's private key. Hex encoded.\n   */\n  async connectAndSignIn(params) {\n    // NOTE: It was intentionally built by following the pattern of the existing eth_requestAccounts method\n    // to maintain consistency and avoid introducing a new pattern.\n    // We acknowledge the need for a better design, and it is planned to address and improve it in a future refactor.\n    var _a;\n    (_a = this.diagnostic) === null || _a === void 0 ? void 0 : _a.log(DiagnosticLogger_1.EVENTS.ETH_ACCOUNTS_STATE, {\n      method: 'provider::connectAndSignIn',\n      sessionIdHash: this._relay ? Session_1.Session.hash(this._relay.session.id) : undefined\n    });\n    let res;\n    try {\n      const relay = await this.initializeRelay();\n      if (!(relay instanceof MobileRelay_1.MobileRelay)) {\n        throw new Error('connectAndSignIn is only supported on mobile');\n      }\n      res = await relay.connectAndSignIn(params).promise;\n      if ((0, Web3Response_1.isErrorResponse)(res)) {\n        throw new Error(res.errorMessage);\n      }\n    } catch (err) {\n      if (typeof err.message === 'string' && err.message.match(/(denied|rejected)/i)) {\n        throw error_1.standardErrors.provider.userRejectedRequest('User denied account authorization');\n      }\n      throw err;\n    }\n    if (!res.result) {\n      throw new Error('accounts received is empty');\n    }\n    const {\n      accounts\n    } = res.result;\n    this._setAddresses(accounts);\n    if (!this.isCoinbaseBrowser) {\n      await this.switchEthereumChain(this.getChainId());\n    }\n    return res.result;\n  }\n  async selectProvider(providerOptions) {\n    const relay = await this.initializeRelay();\n    const res = await relay.selectProvider(providerOptions).promise;\n    if ((0, Web3Response_1.isErrorResponse)(res)) {\n      throw (0, error_1.serializeError)(res.errorMessage, 'selectProvider');\n    } else if (typeof res.result !== 'string') {\n      throw (0, error_1.serializeError)('result was not a string', 'selectProvider');\n    }\n    return res.result;\n  }\n  supportsSubscriptions() {\n    return false;\n  }\n  subscribe() {\n    throw new Error('Subscriptions are not supported');\n  }\n  unsubscribe() {\n    throw new Error('Subscriptions are not supported');\n  }\n  disconnect() {\n    return true;\n  }\n  _sendRequest(request) {\n    const response = {\n      jsonrpc: '2.0',\n      id: request.id\n    };\n    const {\n      method\n    } = request;\n    response.result = this._handleSynchronousMethods(request);\n    if (response.result === undefined) {\n      throw new Error(`Coinbase Wallet does not support calling ${method} synchronously without ` + `a callback. Please provide a callback parameter to call ${method} ` + `asynchronously.`);\n    }\n    return response;\n  }\n  _setAddresses(addresses, _) {\n    if (!Array.isArray(addresses)) {\n      throw new Error('addresses is not an array');\n    }\n    const newAddresses = addresses.map(address => (0, util_1.ensureAddressString)(address));\n    if (JSON.stringify(newAddresses) === JSON.stringify(this._addresses)) {\n      return;\n    }\n    this._addresses = newAddresses;\n    this.emit('accountsChanged', this._addresses);\n    this._storage.setItem(RelayAbstract_1.LOCAL_STORAGE_ADDRESSES_KEY, newAddresses.join(' '));\n  }\n  _sendRequestAsync(request) {\n    return new Promise((resolve, reject) => {\n      try {\n        const syncResult = this._handleSynchronousMethods(request);\n        if (syncResult !== undefined) {\n          return resolve({\n            jsonrpc: '2.0',\n            id: request.id,\n            result: syncResult\n          });\n        }\n        const filterPromise = this._handleAsynchronousFilterMethods(request);\n        if (filterPromise !== undefined) {\n          filterPromise.then(res => resolve(Object.assign(Object.assign({}, res), {\n            id: request.id\n          }))).catch(err => reject(err));\n          return;\n        }\n        const subscriptionPromise = this._handleSubscriptionMethods(request);\n        if (subscriptionPromise !== undefined) {\n          subscriptionPromise.then(res => resolve({\n            jsonrpc: '2.0',\n            id: request.id,\n            result: res.result\n          })).catch(err => reject(err));\n          return;\n        }\n      } catch (err) {\n        return reject(err);\n      }\n      this._handleAsynchronousMethods(request).then(res => res && resolve(Object.assign(Object.assign({}, res), {\n        id: request.id\n      }))).catch(err => reject(err));\n    });\n  }\n  _sendMultipleRequestsAsync(requests) {\n    return Promise.all(requests.map(r => this._sendRequestAsync(r)));\n  }\n  _handleSynchronousMethods(request) {\n    const {\n      method\n    } = request;\n    const params = request.params || [];\n    switch (method) {\n      case 'eth_accounts':\n        return this._eth_accounts();\n      case 'eth_coinbase':\n        return this._eth_coinbase();\n      case 'eth_uninstallFilter':\n        return this._eth_uninstallFilter(params);\n      case 'net_version':\n        return this._net_version();\n      case 'eth_chainId':\n        return this._eth_chainId();\n      default:\n        return undefined;\n    }\n  }\n  async _handleAsynchronousMethods(request) {\n    const {\n      method\n    } = request;\n    const params = request.params || [];\n    switch (method) {\n      case 'eth_requestAccounts':\n        return this._eth_requestAccounts();\n      case 'eth_sign':\n        return this._eth_sign(params);\n      case 'eth_ecRecover':\n        return this._eth_ecRecover(params);\n      case 'personal_sign':\n        return this._personal_sign(params);\n      case 'personal_ecRecover':\n        return this._personal_ecRecover(params);\n      case 'eth_signTransaction':\n        return this._eth_signTransaction(params);\n      case 'eth_sendRawTransaction':\n        return this._eth_sendRawTransaction(params);\n      case 'eth_sendTransaction':\n        return this._eth_sendTransaction(params);\n      case 'eth_signTypedData_v1':\n        return this._eth_signTypedData_v1(params);\n      case 'eth_signTypedData_v2':\n        return this._throwUnsupportedMethodError();\n      case 'eth_signTypedData_v3':\n        return this._eth_signTypedData_v3(params);\n      case 'eth_signTypedData_v4':\n      case 'eth_signTypedData':\n        return this._eth_signTypedData_v4(params);\n      case 'cbWallet_arbitrary':\n        return this._cbwallet_arbitrary(params);\n      case 'wallet_addEthereumChain':\n        return this._wallet_addEthereumChain(params);\n      case 'wallet_switchEthereumChain':\n        return this._wallet_switchEthereumChain(params);\n      case 'wallet_watchAsset':\n        return this._wallet_watchAsset(params);\n    }\n    const relay = await this.initializeRelay();\n    return relay.makeEthereumJSONRPCRequest(request, this.jsonRpcUrl).catch(err => {\n      var _a;\n      if (err.code === error_1.standardErrorCodes.rpc.methodNotFound || err.code === error_1.standardErrorCodes.rpc.methodNotSupported) {\n        (_a = this.diagnostic) === null || _a === void 0 ? void 0 : _a.log(DiagnosticLogger_1.EVENTS.METHOD_NOT_IMPLEMENTED, {\n          method: request.method,\n          sessionIdHash: this._relay ? Session_1.Session.hash(this._relay.session.id) : undefined\n        });\n      }\n      throw err;\n    });\n  }\n  _handleAsynchronousFilterMethods(request) {\n    const {\n      method\n    } = request;\n    const params = request.params || [];\n    switch (method) {\n      case 'eth_newFilter':\n        return this._eth_newFilter(params);\n      case 'eth_newBlockFilter':\n        return this._eth_newBlockFilter();\n      case 'eth_newPendingTransactionFilter':\n        return this._eth_newPendingTransactionFilter();\n      case 'eth_getFilterChanges':\n        return this._eth_getFilterChanges(params);\n      case 'eth_getFilterLogs':\n        return this._eth_getFilterLogs(params);\n    }\n    return undefined;\n  }\n  _handleSubscriptionMethods(request) {\n    switch (request.method) {\n      case 'eth_subscribe':\n      case 'eth_unsubscribe':\n        return this._subscriptionManager.handleRequest(request);\n    }\n    return undefined;\n  }\n  _isKnownAddress(addressString) {\n    try {\n      const addressStr = (0, util_1.ensureAddressString)(addressString);\n      const lowercaseAddresses = this._addresses.map(address => (0, util_1.ensureAddressString)(address));\n      return lowercaseAddresses.includes(addressStr);\n    } catch (_a) {\n      // noop\n    }\n    return false;\n  }\n  _ensureKnownAddress(addressString) {\n    var _a;\n    if (!this._isKnownAddress(addressString)) {\n      (_a = this.diagnostic) === null || _a === void 0 ? void 0 : _a.log(DiagnosticLogger_1.EVENTS.UNKNOWN_ADDRESS_ENCOUNTERED);\n      throw new Error('Unknown Ethereum address');\n    }\n  }\n  _prepareTransactionParams(tx) {\n    const fromAddress = tx.from ? (0, util_1.ensureAddressString)(tx.from) : this.selectedAddress;\n    if (!fromAddress) {\n      throw new Error('Ethereum address is unavailable');\n    }\n    this._ensureKnownAddress(fromAddress);\n    const toAddress = tx.to ? (0, util_1.ensureAddressString)(tx.to) : null;\n    const weiValue = tx.value != null ? (0, util_1.ensureBN)(tx.value) : new bn_js_1.default(0);\n    const data = tx.data ? (0, util_1.ensureBuffer)(tx.data) : Buffer.alloc(0);\n    const nonce = tx.nonce != null ? (0, util_1.ensureIntNumber)(tx.nonce) : null;\n    const gasPriceInWei = tx.gasPrice != null ? (0, util_1.ensureBN)(tx.gasPrice) : null;\n    const maxFeePerGas = tx.maxFeePerGas != null ? (0, util_1.ensureBN)(tx.maxFeePerGas) : null;\n    const maxPriorityFeePerGas = tx.maxPriorityFeePerGas != null ? (0, util_1.ensureBN)(tx.maxPriorityFeePerGas) : null;\n    const gasLimit = tx.gas != null ? (0, util_1.ensureBN)(tx.gas) : null;\n    const chainId = tx.chainId ? (0, util_1.ensureIntNumber)(tx.chainId) : this.getChainId();\n    return {\n      fromAddress,\n      toAddress,\n      weiValue,\n      data,\n      nonce,\n      gasPriceInWei,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      gasLimit,\n      chainId\n    };\n  }\n  _isAuthorized() {\n    return this._addresses.length > 0;\n  }\n  _requireAuthorization() {\n    if (!this._isAuthorized()) {\n      throw error_1.standardErrors.provider.unauthorized({});\n    }\n  }\n  _throwUnsupportedMethodError() {\n    throw error_1.standardErrors.provider.unsupportedMethod({});\n  }\n  async _signEthereumMessage(message, address, addPrefix, typedDataJson) {\n    this._ensureKnownAddress(address);\n    try {\n      const relay = await this.initializeRelay();\n      const res = await relay.signEthereumMessage(message, address, addPrefix, typedDataJson).promise;\n      if ((0, Web3Response_1.isErrorResponse)(res)) {\n        throw new Error(res.errorMessage);\n      }\n      return {\n        jsonrpc: '2.0',\n        id: 0,\n        result: res.result\n      };\n    } catch (err) {\n      if (typeof err.message === 'string' && err.message.match(/(denied|rejected)/i)) {\n        throw error_1.standardErrors.provider.userRejectedRequest('User denied message signature');\n      }\n      throw err;\n    }\n  }\n  async _ethereumAddressFromSignedMessage(message, signature, addPrefix) {\n    const relay = await this.initializeRelay();\n    const res = await relay.ethereumAddressFromSignedMessage(message, signature, addPrefix).promise;\n    if ((0, Web3Response_1.isErrorResponse)(res)) {\n      throw new Error(res.errorMessage);\n    }\n    return {\n      jsonrpc: '2.0',\n      id: 0,\n      result: res.result\n    };\n  }\n  _eth_accounts() {\n    return [...this._addresses];\n  }\n  _eth_coinbase() {\n    return this.selectedAddress || null;\n  }\n  _net_version() {\n    return this.getChainId().toString(10);\n  }\n  _eth_chainId() {\n    return (0, util_1.hexStringFromIntNumber)(this.getChainId());\n  }\n  getChainId() {\n    const chainIdStr = this._storage.getItem(DEFAULT_CHAIN_ID_KEY);\n    if (!chainIdStr) {\n      return (0, util_1.ensureIntNumber)(this._chainIdFromOpts);\n    }\n    const chainId = parseInt(chainIdStr, 10);\n    return (0, util_1.ensureIntNumber)(chainId);\n  }\n  async _eth_requestAccounts() {\n    var _a;\n    (_a = this.diagnostic) === null || _a === void 0 ? void 0 : _a.log(DiagnosticLogger_1.EVENTS.ETH_ACCOUNTS_STATE, {\n      method: 'provider::_eth_requestAccounts',\n      addresses_length: this._addresses.length,\n      sessionIdHash: this._relay ? Session_1.Session.hash(this._relay.session.id) : undefined\n    });\n    if (this._isAuthorized()) {\n      return Promise.resolve({\n        jsonrpc: '2.0',\n        id: 0,\n        result: this._addresses\n      });\n    }\n    let res;\n    try {\n      const relay = await this.initializeRelay();\n      res = await relay.requestEthereumAccounts().promise;\n      if ((0, Web3Response_1.isErrorResponse)(res)) {\n        throw new Error(res.errorMessage);\n      }\n    } catch (err) {\n      if (typeof err.message === 'string' && err.message.match(/(denied|rejected)/i)) {\n        throw error_1.standardErrors.provider.userRejectedRequest('User denied account authorization');\n      }\n      throw err;\n    }\n    if (!res.result) {\n      throw new Error('accounts received is empty');\n    }\n    this._setAddresses(res.result);\n    if (!this.isCoinbaseBrowser) {\n      await this.switchEthereumChain(this.getChainId());\n    }\n    return {\n      jsonrpc: '2.0',\n      id: 0,\n      result: this._addresses\n    };\n  }\n  _eth_sign(params) {\n    this._requireAuthorization();\n    const address = (0, util_1.ensureAddressString)(params[0]);\n    const message = (0, util_1.ensureBuffer)(params[1]);\n    return this._signEthereumMessage(message, address, false);\n  }\n  _eth_ecRecover(params) {\n    const message = (0, util_1.ensureBuffer)(params[0]);\n    const signature = (0, util_1.ensureBuffer)(params[1]);\n    return this._ethereumAddressFromSignedMessage(message, signature, false);\n  }\n  _personal_sign(params) {\n    this._requireAuthorization();\n    const message = (0, util_1.ensureBuffer)(params[0]);\n    const address = (0, util_1.ensureAddressString)(params[1]);\n    return this._signEthereumMessage(message, address, true);\n  }\n  _personal_ecRecover(params) {\n    const message = (0, util_1.ensureBuffer)(params[0]);\n    const signature = (0, util_1.ensureBuffer)(params[1]);\n    return this._ethereumAddressFromSignedMessage(message, signature, true);\n  }\n  async _eth_signTransaction(params) {\n    this._requireAuthorization();\n    const tx = this._prepareTransactionParams(params[0] || {});\n    try {\n      const relay = await this.initializeRelay();\n      const res = await relay.signEthereumTransaction(tx).promise;\n      if ((0, Web3Response_1.isErrorResponse)(res)) {\n        throw new Error(res.errorMessage);\n      }\n      return {\n        jsonrpc: '2.0',\n        id: 0,\n        result: res.result\n      };\n    } catch (err) {\n      if (typeof err.message === 'string' && err.message.match(/(denied|rejected)/i)) {\n        throw error_1.standardErrors.provider.userRejectedRequest('User denied transaction signature');\n      }\n      throw err;\n    }\n  }\n  async _eth_sendRawTransaction(params) {\n    const signedTransaction = (0, util_1.ensureBuffer)(params[0]);\n    const relay = await this.initializeRelay();\n    const res = await relay.submitEthereumTransaction(signedTransaction, this.getChainId()).promise;\n    if ((0, Web3Response_1.isErrorResponse)(res)) {\n      throw new Error(res.errorMessage);\n    }\n    return {\n      jsonrpc: '2.0',\n      id: 0,\n      result: res.result\n    };\n  }\n  async _eth_sendTransaction(params) {\n    this._requireAuthorization();\n    const tx = this._prepareTransactionParams(params[0] || {});\n    try {\n      const relay = await this.initializeRelay();\n      const res = await relay.signAndSubmitEthereumTransaction(tx).promise;\n      if ((0, Web3Response_1.isErrorResponse)(res)) {\n        throw new Error(res.errorMessage);\n      }\n      return {\n        jsonrpc: '2.0',\n        id: 0,\n        result: res.result\n      };\n    } catch (err) {\n      if (typeof err.message === 'string' && err.message.match(/(denied|rejected)/i)) {\n        throw error_1.standardErrors.provider.userRejectedRequest('User denied transaction signature');\n      }\n      throw err;\n    }\n  }\n  async _eth_signTypedData_v1(params) {\n    this._requireAuthorization();\n    const typedData = (0, util_1.ensureParsedJSONObject)(params[0]);\n    const address = (0, util_1.ensureAddressString)(params[1]);\n    this._ensureKnownAddress(address);\n    const message = eth_eip712_util_1.default.hashForSignTypedDataLegacy({\n      data: typedData\n    });\n    const typedDataJSON = JSON.stringify(typedData, null, 2);\n    return this._signEthereumMessage(message, address, false, typedDataJSON);\n  }\n  async _eth_signTypedData_v3(params) {\n    this._requireAuthorization();\n    const address = (0, util_1.ensureAddressString)(params[0]);\n    const typedData = (0, util_1.ensureParsedJSONObject)(params[1]);\n    this._ensureKnownAddress(address);\n    const message = eth_eip712_util_1.default.hashForSignTypedData_v3({\n      data: typedData\n    });\n    const typedDataJSON = JSON.stringify(typedData, null, 2);\n    return this._signEthereumMessage(message, address, false, typedDataJSON);\n  }\n  async _eth_signTypedData_v4(params) {\n    this._requireAuthorization();\n    const address = (0, util_1.ensureAddressString)(params[0]);\n    const typedData = (0, util_1.ensureParsedJSONObject)(params[1]);\n    this._ensureKnownAddress(address);\n    const message = eth_eip712_util_1.default.hashForSignTypedData_v4({\n      data: typedData\n    });\n    const typedDataJSON = JSON.stringify(typedData, null, 2);\n    return this._signEthereumMessage(message, address, false, typedDataJSON);\n  }\n  /** @deprecated */\n  async _cbwallet_arbitrary(params) {\n    const action = params[0];\n    const data = params[1];\n    if (typeof data !== 'string') {\n      throw new Error('parameter must be a string');\n    }\n    if (typeof action !== 'object' || action === null) {\n      throw new Error('parameter must be an object');\n    }\n    const result = await this.genericRequest(action, data);\n    return {\n      jsonrpc: '2.0',\n      id: 0,\n      result\n    };\n  }\n  async _wallet_addEthereumChain(params) {\n    var _a, _b, _c, _d;\n    const request = params[0];\n    if (((_a = request.rpcUrls) === null || _a === void 0 ? void 0 : _a.length) === 0) {\n      return {\n        jsonrpc: '2.0',\n        id: 0,\n        error: {\n          code: 2,\n          message: `please pass in at least 1 rpcUrl`\n        }\n      };\n    }\n    if (!request.chainName || request.chainName.trim() === '') {\n      throw error_1.standardErrors.rpc.invalidParams('chainName is a required field');\n    }\n    if (!request.nativeCurrency) {\n      throw error_1.standardErrors.rpc.invalidParams('nativeCurrency is a required field');\n    }\n    const chainIdNumber = parseInt(request.chainId, 16);\n    const success = await this.addEthereumChain(chainIdNumber, (_b = request.rpcUrls) !== null && _b !== void 0 ? _b : [], (_c = request.blockExplorerUrls) !== null && _c !== void 0 ? _c : [], request.chainName, (_d = request.iconUrls) !== null && _d !== void 0 ? _d : [], request.nativeCurrency);\n    if (success) {\n      return {\n        jsonrpc: '2.0',\n        id: 0,\n        result: null\n      };\n    }\n    return {\n      jsonrpc: '2.0',\n      id: 0,\n      error: {\n        code: 2,\n        message: `unable to add ethereum chain`\n      }\n    };\n  }\n  async _wallet_switchEthereumChain(params) {\n    const request = params[0];\n    await this.switchEthereumChain(parseInt(request.chainId, 16));\n    return {\n      jsonrpc: '2.0',\n      id: 0,\n      result: null\n    };\n  }\n  async _wallet_watchAsset(params) {\n    const request = Array.isArray(params) ? params[0] : params;\n    if (!request.type) {\n      throw error_1.standardErrors.rpc.invalidParams('Type is required');\n    }\n    if ((request === null || request === void 0 ? void 0 : request.type) !== 'ERC20') {\n      throw error_1.standardErrors.rpc.invalidParams(`Asset of type '${request.type}' is not supported`);\n    }\n    if (!(request === null || request === void 0 ? void 0 : request.options)) {\n      throw error_1.standardErrors.rpc.invalidParams('Options are required');\n    }\n    if (!(request === null || request === void 0 ? void 0 : request.options.address)) {\n      throw error_1.standardErrors.rpc.invalidParams('Address is required');\n    }\n    const chainId = this.getChainId();\n    const {\n      address,\n      symbol,\n      image,\n      decimals\n    } = request.options;\n    const res = await this.watchAsset(request.type, address, symbol, decimals, image, chainId);\n    return {\n      jsonrpc: '2.0',\n      id: 0,\n      result: res\n    };\n  }\n  _eth_uninstallFilter(params) {\n    const filterId = (0, util_1.ensureHexString)(params[0]);\n    return this._filterPolyfill.uninstallFilter(filterId);\n  }\n  async _eth_newFilter(params) {\n    const param = params[0];\n    const filterId = await this._filterPolyfill.newFilter(param);\n    return {\n      jsonrpc: '2.0',\n      id: 0,\n      result: filterId\n    };\n  }\n  async _eth_newBlockFilter() {\n    const filterId = await this._filterPolyfill.newBlockFilter();\n    return {\n      jsonrpc: '2.0',\n      id: 0,\n      result: filterId\n    };\n  }\n  async _eth_newPendingTransactionFilter() {\n    const filterId = await this._filterPolyfill.newPendingTransactionFilter();\n    return {\n      jsonrpc: '2.0',\n      id: 0,\n      result: filterId\n    };\n  }\n  _eth_getFilterChanges(params) {\n    const filterId = (0, util_1.ensureHexString)(params[0]);\n    return this._filterPolyfill.getFilterChanges(filterId);\n  }\n  _eth_getFilterLogs(params) {\n    const filterId = (0, util_1.ensureHexString)(params[0]);\n    return this._filterPolyfill.getFilterLogs(filterId);\n  }\n  initializeRelay() {\n    if (this._relay) {\n      return Promise.resolve(this._relay);\n    }\n    return this._relayProvider().then(relay => {\n      relay.setAccountsCallback((accounts, isDisconnect) => this._setAddresses(accounts, isDisconnect));\n      relay.setChainCallback((chainId, jsonRpcUrl) => {\n        this.updateProviderInfo(jsonRpcUrl, parseInt(chainId, 10));\n      });\n      relay.setDappDefaultChainCallback(this._chainIdFromOpts);\n      this._relay = relay;\n      return relay;\n    });\n  }\n}\nexports.CoinbaseWalletProvider = CoinbaseWalletProvider;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","CoinbaseWalletProvider","bn_js_1","require","eventemitter3_1","error_1","util_1","MobileRelay_1","RelayAbstract_1","Session_1","Web3Response_1","eth_eip712_util_1","DiagnosticLogger_1","FilterPolyfill_1","SubscriptionManager_1","DEFAULT_CHAIN_ID_KEY","DEFAULT_JSON_RPC_URL","EventEmitter","constructor","options","_a","_b","_filterPolyfill","FilterPolyfill","_subscriptionManager","SubscriptionManager","_relay","_addresses","hasMadeFirstChainChangedEmission","setProviderInfo","bind","updateProviderInfo","getChainId","setAppInfo","enable","close","send","sendAsync","request","_setAddresses","scanQRCode","genericRequest","_chainIdFromOpts","chainId","_jsonRpcUrlFromOpts","jsonRpcUrl","_overrideIsMetaMask","overrideIsMetaMask","_relayProvider","relayProvider","_storage","storage","_relayEventManager","relayEventManager","diagnostic","diagnosticLogger","reloadOnDisconnect","isCoinbaseWallet","overrideIsCoinbaseWallet","isCoinbaseBrowser","overrideIsCoinbaseBrowser","qrUrl","chainIdStr","prepend0x","toString","emit","cachedAddresses","getItem","LOCAL_STORAGE_ADDRESSES_KEY","addresses","split","map","address","ensureAddressString","events","on","notification","type","method","data","params","_isAuthorized","initializeRelay","window","addEventListener","event","origin","location","source","action","_chainId","Number","selectedAddress","undefined","networkVersion","isWalletLink","isMetaMask","host","connected","isConnected","setItem","disableReloadOnDisconnect","originalChainId","chainChanged","ensureIntNumber","watchAsset","symbol","decimals","image","relay","result","promise","isErrorResponse","addEthereumChain","rpcUrls","blockExplorerUrls","chainName","iconUrls","nativeCurrency","isWhitelistedNetworkOrStandalone","inlineAddEthereumChain","requestEthereumAccounts","res","isApproved","switchEthereumChain","errorCode","standardErrorCodes","provider","unsupportedChain","standardErrors","custom","message","errorMessage","code","switchResponse","rpcUrl","length","appName","appLogoUrl","then","log","EVENTS","ETH_ACCOUNTS_STATE","addresses_length","sessionIdHash","Session","hash","session","id","resetAndReload","requestOrMethod","callbackOrParams","_send","Promise","catch","error","serializeError","Array","isArray","jsonrpc","_sendRequestAsync","callback","_sendAsync","requests","r","_sendRequest","req","reject","Error","arrayCb","_sendMultipleRequestsAsync","responses","err","cb","response","args","_request","rpc","invalidRequest","newParams","makeRequestId","match","ensureRegExpString","connectAndSignIn","MobileRelay","userRejectedRequest","accounts","selectProvider","providerOptions","supportsSubscriptions","subscribe","unsubscribe","disconnect","_handleSynchronousMethods","_","newAddresses","JSON","stringify","join","resolve","syncResult","filterPromise","_handleAsynchronousFilterMethods","assign","subscriptionPromise","_handleSubscriptionMethods","_handleAsynchronousMethods","all","_eth_accounts","_eth_coinbase","_eth_uninstallFilter","_net_version","_eth_chainId","_eth_requestAccounts","_eth_sign","_eth_ecRecover","_personal_sign","_personal_ecRecover","_eth_signTransaction","_eth_sendRawTransaction","_eth_sendTransaction","_eth_signTypedData_v1","_throwUnsupportedMethodError","_eth_signTypedData_v3","_eth_signTypedData_v4","_cbwallet_arbitrary","_wallet_addEthereumChain","_wallet_switchEthereumChain","_wallet_watchAsset","makeEthereumJSONRPCRequest","methodNotFound","methodNotSupported","METHOD_NOT_IMPLEMENTED","_eth_newFilter","_eth_newBlockFilter","_eth_newPendingTransactionFilter","_eth_getFilterChanges","_eth_getFilterLogs","handleRequest","_isKnownAddress","addressString","addressStr","lowercaseAddresses","includes","_ensureKnownAddress","UNKNOWN_ADDRESS_ENCOUNTERED","_prepareTransactionParams","tx","fromAddress","from","toAddress","to","weiValue","ensureBN","default","ensureBuffer","Buffer","alloc","nonce","gasPriceInWei","gasPrice","maxFeePerGas","maxPriorityFeePerGas","gasLimit","gas","_requireAuthorization","unauthorized","unsupportedMethod","_signEthereumMessage","addPrefix","typedDataJson","signEthereumMessage","_ethereumAddressFromSignedMessage","signature","ethereumAddressFromSignedMessage","hexStringFromIntNumber","parseInt","signEthereumTransaction","signedTransaction","submitEthereumTransaction","signAndSubmitEthereumTransaction","typedData","ensureParsedJSONObject","hashForSignTypedDataLegacy","typedDataJSON","hashForSignTypedData_v3","hashForSignTypedData_v4","_c","_d","trim","invalidParams","chainIdNumber","success","filterId","ensureHexString","uninstallFilter","param","newFilter","newBlockFilter","newPendingTransactionFilter","getFilterChanges","getFilterLogs","setAccountsCallback","isDisconnect","setChainCallback","setDappDefaultChainCallback"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/cbw-sdk/dist/provider/CoinbaseWalletProvider.js"],"sourcesContent":["\"use strict\";\n/* eslint-disable @typescript-eslint/no-explicit-any */\n// TODO: Address linting issues\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CoinbaseWalletProvider = void 0;\n// Copyright (c) 2018-2023 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst eventemitter3_1 = require(\"eventemitter3\");\nconst error_1 = require(\"../core/error\");\nconst util_1 = require(\"../core/util\");\nconst MobileRelay_1 = require(\"../relay/mobile/MobileRelay\");\nconst RelayAbstract_1 = require(\"../relay/RelayAbstract\");\nconst Session_1 = require(\"../relay/Session\");\nconst Web3Response_1 = require(\"../relay/walletlink/type/Web3Response\");\nconst eth_eip712_util_1 = __importDefault(require(\"../vendor-js/eth-eip712-util\"));\nconst DiagnosticLogger_1 = require(\"./DiagnosticLogger\");\nconst FilterPolyfill_1 = require(\"./FilterPolyfill\");\nconst SubscriptionManager_1 = require(\"./SubscriptionManager\");\nconst DEFAULT_CHAIN_ID_KEY = 'DefaultChainId';\nconst DEFAULT_JSON_RPC_URL = 'DefaultJsonRpcUrl';\nclass CoinbaseWalletProvider extends eventemitter3_1.EventEmitter {\n    constructor(options) {\n        var _a, _b;\n        super();\n        this._filterPolyfill = new FilterPolyfill_1.FilterPolyfill(this);\n        this._subscriptionManager = new SubscriptionManager_1.SubscriptionManager(this);\n        this._relay = null;\n        this._addresses = [];\n        this.hasMadeFirstChainChangedEmission = false;\n        this.setProviderInfo = this.setProviderInfo.bind(this);\n        this.updateProviderInfo = this.updateProviderInfo.bind(this);\n        this.getChainId = this.getChainId.bind(this);\n        this.setAppInfo = this.setAppInfo.bind(this);\n        this.enable = this.enable.bind(this);\n        this.close = this.close.bind(this);\n        this.send = this.send.bind(this);\n        this.sendAsync = this.sendAsync.bind(this);\n        this.request = this.request.bind(this);\n        this._setAddresses = this._setAddresses.bind(this);\n        this.scanQRCode = this.scanQRCode.bind(this);\n        this.genericRequest = this.genericRequest.bind(this);\n        this._chainIdFromOpts = options.chainId;\n        this._jsonRpcUrlFromOpts = options.jsonRpcUrl;\n        this._overrideIsMetaMask = options.overrideIsMetaMask;\n        this._relayProvider = options.relayProvider;\n        this._storage = options.storage;\n        this._relayEventManager = options.relayEventManager;\n        this.diagnostic = options.diagnosticLogger;\n        this.reloadOnDisconnect = true;\n        this.isCoinbaseWallet = (_a = options.overrideIsCoinbaseWallet) !== null && _a !== void 0 ? _a : true;\n        this.isCoinbaseBrowser = (_b = options.overrideIsCoinbaseBrowser) !== null && _b !== void 0 ? _b : false;\n        this.qrUrl = options.qrUrl;\n        const chainId = this.getChainId();\n        const chainIdStr = (0, util_1.prepend0x)(chainId.toString(16));\n        // indicate that we've connected, for EIP-1193 compliance\n        this.emit('connect', { chainIdStr });\n        const cachedAddresses = this._storage.getItem(RelayAbstract_1.LOCAL_STORAGE_ADDRESSES_KEY);\n        if (cachedAddresses) {\n            const addresses = cachedAddresses.split(' ');\n            if (addresses[0] !== '') {\n                this._addresses = addresses.map((address) => (0, util_1.ensureAddressString)(address));\n                this.emit('accountsChanged', addresses);\n            }\n        }\n        this._subscriptionManager.events.on('notification', (notification) => {\n            this.emit('message', {\n                type: notification.method,\n                data: notification.params,\n            });\n        });\n        if (this._isAuthorized()) {\n            void this.initializeRelay();\n        }\n        window.addEventListener('message', (event) => {\n            var _a;\n            // Used to verify the source and window are correct before proceeding\n            if (event.origin !== location.origin || event.source !== window) {\n                return;\n            }\n            if (event.data.type !== 'walletLinkMessage')\n                return; // compatibility with CBW extension\n            if (event.data.data.action === 'dappChainSwitched') {\n                const _chainId = event.data.data.chainId;\n                const jsonRpcUrl = (_a = event.data.data.jsonRpcUrl) !== null && _a !== void 0 ? _a : this.jsonRpcUrl;\n                this.updateProviderInfo(jsonRpcUrl, Number(_chainId));\n            }\n        });\n    }\n    /** @deprecated Use `.request({ method: 'eth_accounts' })` instead. */\n    get selectedAddress() {\n        return this._addresses[0] || undefined;\n    }\n    /** @deprecated Use the chain ID. If you still need the network ID, use `.request({ method: 'net_version' })`. */\n    get networkVersion() {\n        return this.getChainId().toString(10);\n    }\n    /** @deprecated Use `.request({ method: 'eth_chainId' })` instead. */\n    get chainId() {\n        return (0, util_1.prepend0x)(this.getChainId().toString(16));\n    }\n    get isWalletLink() {\n        // backward compatibility\n        return true;\n    }\n    /**\n     * Some DApps (i.e. Alpha Homora) seem to require the window.ethereum object return\n     * true for this method.\n     */\n    get isMetaMask() {\n        return this._overrideIsMetaMask;\n    }\n    get host() {\n        return this.jsonRpcUrl;\n    }\n    get connected() {\n        return true;\n    }\n    isConnected() {\n        return true;\n    }\n    get jsonRpcUrl() {\n        var _a;\n        return (_a = this._storage.getItem(DEFAULT_JSON_RPC_URL)) !== null && _a !== void 0 ? _a : this._jsonRpcUrlFromOpts;\n    }\n    set jsonRpcUrl(value) {\n        this._storage.setItem(DEFAULT_JSON_RPC_URL, value);\n    }\n    disableReloadOnDisconnect() {\n        this.reloadOnDisconnect = false;\n    }\n    setProviderInfo(jsonRpcUrl, chainId) {\n        if (!this.isCoinbaseBrowser) {\n            this._chainIdFromOpts = chainId;\n            this._jsonRpcUrlFromOpts = jsonRpcUrl;\n        }\n        this.updateProviderInfo(this.jsonRpcUrl, this.getChainId());\n    }\n    updateProviderInfo(jsonRpcUrl, chainId) {\n        this.jsonRpcUrl = jsonRpcUrl;\n        // emit chainChanged event if necessary\n        const originalChainId = this.getChainId();\n        this._storage.setItem(DEFAULT_CHAIN_ID_KEY, chainId.toString(10));\n        const chainChanged = (0, util_1.ensureIntNumber)(chainId) !== originalChainId;\n        if (chainChanged || !this.hasMadeFirstChainChangedEmission) {\n            this.emit('chainChanged', this.getChainId());\n            this.hasMadeFirstChainChangedEmission = true;\n        }\n    }\n    async watchAsset(type, address, symbol, decimals, image, chainId) {\n        const relay = await this.initializeRelay();\n        const result = await relay.watchAsset(type, address, symbol, decimals, image, chainId === null || chainId === void 0 ? void 0 : chainId.toString()).promise;\n        if ((0, Web3Response_1.isErrorResponse)(result))\n            return false;\n        return !!result.result;\n    }\n    async addEthereumChain(chainId, rpcUrls, blockExplorerUrls, chainName, iconUrls, nativeCurrency) {\n        var _a, _b;\n        if ((0, util_1.ensureIntNumber)(chainId) === this.getChainId()) {\n            return false;\n        }\n        const relay = await this.initializeRelay();\n        const isWhitelistedNetworkOrStandalone = relay.inlineAddEthereumChain(chainId.toString());\n        if (!this._isAuthorized() && !isWhitelistedNetworkOrStandalone) {\n            await relay.requestEthereumAccounts().promise;\n        }\n        const res = await relay.addEthereumChain(chainId.toString(), rpcUrls, iconUrls, blockExplorerUrls, chainName, nativeCurrency).promise;\n        if ((0, Web3Response_1.isErrorResponse)(res))\n            return false;\n        if (((_a = res.result) === null || _a === void 0 ? void 0 : _a.isApproved) === true) {\n            this.updateProviderInfo(rpcUrls[0], chainId);\n        }\n        return ((_b = res.result) === null || _b === void 0 ? void 0 : _b.isApproved) === true;\n    }\n    async switchEthereumChain(chainId) {\n        const relay = await this.initializeRelay();\n        const res = await relay.switchEthereumChain(chainId.toString(10), this.selectedAddress || undefined).promise;\n        // backward compatibility\n        if ((0, Web3Response_1.isErrorResponse)(res)) {\n            if (!res.errorCode)\n                return;\n            if (res.errorCode === error_1.standardErrorCodes.provider.unsupportedChain) {\n                throw error_1.standardErrors.provider.unsupportedChain();\n            }\n            else {\n                throw error_1.standardErrors.provider.custom({\n                    message: res.errorMessage,\n                    code: res.errorCode,\n                });\n            }\n        }\n        const switchResponse = res.result;\n        if (switchResponse.isApproved && switchResponse.rpcUrl.length > 0) {\n            this.updateProviderInfo(switchResponse.rpcUrl, chainId);\n        }\n    }\n    setAppInfo(appName, appLogoUrl) {\n        void this.initializeRelay().then((relay) => relay.setAppInfo(appName, appLogoUrl));\n    }\n    /** @deprecated Use `.request({ method: 'eth_requestAccounts' })` instead. */\n    async enable() {\n        var _a;\n        (_a = this.diagnostic) === null || _a === void 0 ? void 0 : _a.log(DiagnosticLogger_1.EVENTS.ETH_ACCOUNTS_STATE, {\n            method: 'provider::enable',\n            addresses_length: this._addresses.length,\n            sessionIdHash: this._relay ? Session_1.Session.hash(this._relay.session.id) : undefined,\n        });\n        if (this._isAuthorized()) {\n            return [...this._addresses];\n        }\n        return await this.send('eth_requestAccounts');\n    }\n    async close() {\n        const relay = await this.initializeRelay();\n        relay.resetAndReload();\n    }\n    send(requestOrMethod, callbackOrParams) {\n        // send<T>(method, params): Promise<T>\n        try {\n            const result = this._send(requestOrMethod, callbackOrParams);\n            if (result instanceof Promise) {\n                return result.catch((error) => {\n                    throw (0, error_1.serializeError)(error, requestOrMethod);\n                });\n            }\n        }\n        catch (error) {\n            throw (0, error_1.serializeError)(error, requestOrMethod);\n        }\n    }\n    _send(requestOrMethod, callbackOrParams) {\n        if (typeof requestOrMethod === 'string') {\n            const method = requestOrMethod;\n            const params = Array.isArray(callbackOrParams)\n                ? callbackOrParams\n                : callbackOrParams !== undefined\n                    ? [callbackOrParams]\n                    : [];\n            const request = {\n                jsonrpc: '2.0',\n                id: 0,\n                method,\n                params,\n            };\n            return this._sendRequestAsync(request).then((res) => res.result);\n        }\n        // send(JSONRPCRequest | JSONRPCRequest[], callback): void\n        if (typeof callbackOrParams === 'function') {\n            const request = requestOrMethod;\n            const callback = callbackOrParams;\n            return this._sendAsync(request, callback);\n        }\n        // send(JSONRPCRequest[]): JSONRPCResponse[]\n        if (Array.isArray(requestOrMethod)) {\n            const requests = requestOrMethod;\n            return requests.map((r) => this._sendRequest(r));\n        }\n        // send(JSONRPCRequest): JSONRPCResponse\n        const req = requestOrMethod;\n        return this._sendRequest(req);\n    }\n    async sendAsync(request, callback) {\n        try {\n            return this._sendAsync(request, callback).catch((error) => {\n                throw (0, error_1.serializeError)(error, request);\n            });\n        }\n        catch (error) {\n            return Promise.reject((0, error_1.serializeError)(error, request));\n        }\n    }\n    async _sendAsync(request, callback) {\n        if (typeof callback !== 'function') {\n            throw new Error('callback is required');\n        }\n        // send(JSONRPCRequest[], callback): void\n        if (Array.isArray(request)) {\n            const arrayCb = callback;\n            this._sendMultipleRequestsAsync(request)\n                .then((responses) => arrayCb(null, responses))\n                .catch((err) => arrayCb(err, null));\n            return;\n        }\n        // send(JSONRPCRequest, callback): void\n        const cb = callback;\n        return this._sendRequestAsync(request)\n            .then((response) => cb(null, response))\n            .catch((err) => cb(err, null));\n    }\n    async request(args) {\n        try {\n            return this._request(args).catch((error) => {\n                throw (0, error_1.serializeError)(error, args.method);\n            });\n        }\n        catch (error) {\n            return Promise.reject((0, error_1.serializeError)(error, args.method));\n        }\n    }\n    async _request(args) {\n        if (!args || typeof args !== 'object' || Array.isArray(args)) {\n            throw error_1.standardErrors.rpc.invalidRequest({\n                message: 'Expected a single, non-array, object argument.',\n                data: args,\n            });\n        }\n        const { method, params } = args;\n        if (typeof method !== 'string' || method.length === 0) {\n            throw error_1.standardErrors.rpc.invalidRequest({\n                message: \"'args.method' must be a non-empty string.\",\n                data: args,\n            });\n        }\n        if (params !== undefined &&\n            !Array.isArray(params) &&\n            (typeof params !== 'object' || params === null)) {\n            throw error_1.standardErrors.rpc.invalidRequest({\n                message: \"'args.params' must be an object or array if provided.\",\n                data: args,\n            });\n        }\n        const newParams = params === undefined ? [] : params;\n        // Coinbase Wallet Requests\n        const id = this._relayEventManager.makeRequestId();\n        const result = await this._sendRequestAsync({\n            method,\n            params: newParams,\n            jsonrpc: '2.0',\n            id,\n        });\n        return result.result;\n    }\n    async scanQRCode(match) {\n        const relay = await this.initializeRelay();\n        const res = await relay.scanQRCode((0, util_1.ensureRegExpString)(match)).promise;\n        if ((0, Web3Response_1.isErrorResponse)(res)) {\n            throw (0, error_1.serializeError)(res.errorMessage, 'scanQRCode');\n        }\n        else if (typeof res.result !== 'string') {\n            throw (0, error_1.serializeError)('result was not a string', 'scanQRCode');\n        }\n        return res.result;\n    }\n    async genericRequest(data, action) {\n        const relay = await this.initializeRelay();\n        const res = await relay.genericRequest(data, action).promise;\n        if ((0, Web3Response_1.isErrorResponse)(res)) {\n            throw (0, error_1.serializeError)(res.errorMessage, 'generic');\n        }\n        else if (typeof res.result !== 'string') {\n            throw (0, error_1.serializeError)('result was not a string', 'generic');\n        }\n        return res.result;\n    }\n    /**\n     * @beta\n     * This method is currently in beta. While it is available for use, please note that it is still under testing and may undergo significant changes.\n     *\n     * @remarks\n     * IMPORTANT: Signature validation is not performed by this method. Users of this method are advised to perform their own signature validation.\n     * Common web3 frontend libraries such as ethers.js and viem provide the `verifyMessage` utility function that can be used for signature validation.\n     *\n     * It combines `eth_requestAccounts` and \"Sign-In with Ethereum\" (EIP-4361) into a single call.\n     * The returned account and signed message can be used to authenticate the user.\n     *\n     * @param {Object} params - An object with the following properties:\n     * - `nonce` {string}: A unique string to prevent replay attacks.\n     * - `statement` {string}: An optional human-readable ASCII assertion that the user will sign.\n     * - `resources` {string[]}: An optional list of information the user wishes to have resolved as part of authentication by the relying party.\n     *\n     * @returns {Promise<ConnectAndSignInResponse>} A promise that resolves to an object with the following properties:\n     * - `accounts` {string[]}: The Ethereum accounts of the user.\n     * - `message` {string}: The overall message that the user signed. Hex encoded.\n     * - `signature` {string}: The signature of the message, signed with the user's private key. Hex encoded.\n     */\n    async connectAndSignIn(params) {\n        // NOTE: It was intentionally built by following the pattern of the existing eth_requestAccounts method\n        // to maintain consistency and avoid introducing a new pattern.\n        // We acknowledge the need for a better design, and it is planned to address and improve it in a future refactor.\n        var _a;\n        (_a = this.diagnostic) === null || _a === void 0 ? void 0 : _a.log(DiagnosticLogger_1.EVENTS.ETH_ACCOUNTS_STATE, {\n            method: 'provider::connectAndSignIn',\n            sessionIdHash: this._relay ? Session_1.Session.hash(this._relay.session.id) : undefined,\n        });\n        let res;\n        try {\n            const relay = await this.initializeRelay();\n            if (!(relay instanceof MobileRelay_1.MobileRelay)) {\n                throw new Error('connectAndSignIn is only supported on mobile');\n            }\n            res = await relay.connectAndSignIn(params).promise;\n            if ((0, Web3Response_1.isErrorResponse)(res)) {\n                throw new Error(res.errorMessage);\n            }\n        }\n        catch (err) {\n            if (typeof err.message === 'string' && err.message.match(/(denied|rejected)/i)) {\n                throw error_1.standardErrors.provider.userRejectedRequest('User denied account authorization');\n            }\n            throw err;\n        }\n        if (!res.result) {\n            throw new Error('accounts received is empty');\n        }\n        const { accounts } = res.result;\n        this._setAddresses(accounts);\n        if (!this.isCoinbaseBrowser) {\n            await this.switchEthereumChain(this.getChainId());\n        }\n        return res.result;\n    }\n    async selectProvider(providerOptions) {\n        const relay = await this.initializeRelay();\n        const res = await relay.selectProvider(providerOptions).promise;\n        if ((0, Web3Response_1.isErrorResponse)(res)) {\n            throw (0, error_1.serializeError)(res.errorMessage, 'selectProvider');\n        }\n        else if (typeof res.result !== 'string') {\n            throw (0, error_1.serializeError)('result was not a string', 'selectProvider');\n        }\n        return res.result;\n    }\n    supportsSubscriptions() {\n        return false;\n    }\n    subscribe() {\n        throw new Error('Subscriptions are not supported');\n    }\n    unsubscribe() {\n        throw new Error('Subscriptions are not supported');\n    }\n    disconnect() {\n        return true;\n    }\n    _sendRequest(request) {\n        const response = {\n            jsonrpc: '2.0',\n            id: request.id,\n        };\n        const { method } = request;\n        response.result = this._handleSynchronousMethods(request);\n        if (response.result === undefined) {\n            throw new Error(`Coinbase Wallet does not support calling ${method} synchronously without ` +\n                `a callback. Please provide a callback parameter to call ${method} ` +\n                `asynchronously.`);\n        }\n        return response;\n    }\n    _setAddresses(addresses, _) {\n        if (!Array.isArray(addresses)) {\n            throw new Error('addresses is not an array');\n        }\n        const newAddresses = addresses.map((address) => (0, util_1.ensureAddressString)(address));\n        if (JSON.stringify(newAddresses) === JSON.stringify(this._addresses)) {\n            return;\n        }\n        this._addresses = newAddresses;\n        this.emit('accountsChanged', this._addresses);\n        this._storage.setItem(RelayAbstract_1.LOCAL_STORAGE_ADDRESSES_KEY, newAddresses.join(' '));\n    }\n    _sendRequestAsync(request) {\n        return new Promise((resolve, reject) => {\n            try {\n                const syncResult = this._handleSynchronousMethods(request);\n                if (syncResult !== undefined) {\n                    return resolve({\n                        jsonrpc: '2.0',\n                        id: request.id,\n                        result: syncResult,\n                    });\n                }\n                const filterPromise = this._handleAsynchronousFilterMethods(request);\n                if (filterPromise !== undefined) {\n                    filterPromise\n                        .then((res) => resolve(Object.assign(Object.assign({}, res), { id: request.id })))\n                        .catch((err) => reject(err));\n                    return;\n                }\n                const subscriptionPromise = this._handleSubscriptionMethods(request);\n                if (subscriptionPromise !== undefined) {\n                    subscriptionPromise\n                        .then((res) => resolve({\n                        jsonrpc: '2.0',\n                        id: request.id,\n                        result: res.result,\n                    }))\n                        .catch((err) => reject(err));\n                    return;\n                }\n            }\n            catch (err) {\n                return reject(err);\n            }\n            this._handleAsynchronousMethods(request)\n                .then((res) => res && resolve(Object.assign(Object.assign({}, res), { id: request.id })))\n                .catch((err) => reject(err));\n        });\n    }\n    _sendMultipleRequestsAsync(requests) {\n        return Promise.all(requests.map((r) => this._sendRequestAsync(r)));\n    }\n    _handleSynchronousMethods(request) {\n        const { method } = request;\n        const params = request.params || [];\n        switch (method) {\n            case 'eth_accounts':\n                return this._eth_accounts();\n            case 'eth_coinbase':\n                return this._eth_coinbase();\n            case 'eth_uninstallFilter':\n                return this._eth_uninstallFilter(params);\n            case 'net_version':\n                return this._net_version();\n            case 'eth_chainId':\n                return this._eth_chainId();\n            default:\n                return undefined;\n        }\n    }\n    async _handleAsynchronousMethods(request) {\n        const { method } = request;\n        const params = request.params || [];\n        switch (method) {\n            case 'eth_requestAccounts':\n                return this._eth_requestAccounts();\n            case 'eth_sign':\n                return this._eth_sign(params);\n            case 'eth_ecRecover':\n                return this._eth_ecRecover(params);\n            case 'personal_sign':\n                return this._personal_sign(params);\n            case 'personal_ecRecover':\n                return this._personal_ecRecover(params);\n            case 'eth_signTransaction':\n                return this._eth_signTransaction(params);\n            case 'eth_sendRawTransaction':\n                return this._eth_sendRawTransaction(params);\n            case 'eth_sendTransaction':\n                return this._eth_sendTransaction(params);\n            case 'eth_signTypedData_v1':\n                return this._eth_signTypedData_v1(params);\n            case 'eth_signTypedData_v2':\n                return this._throwUnsupportedMethodError();\n            case 'eth_signTypedData_v3':\n                return this._eth_signTypedData_v3(params);\n            case 'eth_signTypedData_v4':\n            case 'eth_signTypedData':\n                return this._eth_signTypedData_v4(params);\n            case 'cbWallet_arbitrary':\n                return this._cbwallet_arbitrary(params);\n            case 'wallet_addEthereumChain':\n                return this._wallet_addEthereumChain(params);\n            case 'wallet_switchEthereumChain':\n                return this._wallet_switchEthereumChain(params);\n            case 'wallet_watchAsset':\n                return this._wallet_watchAsset(params);\n        }\n        const relay = await this.initializeRelay();\n        return relay.makeEthereumJSONRPCRequest(request, this.jsonRpcUrl).catch((err) => {\n            var _a;\n            if (err.code === error_1.standardErrorCodes.rpc.methodNotFound ||\n                err.code === error_1.standardErrorCodes.rpc.methodNotSupported) {\n                (_a = this.diagnostic) === null || _a === void 0 ? void 0 : _a.log(DiagnosticLogger_1.EVENTS.METHOD_NOT_IMPLEMENTED, {\n                    method: request.method,\n                    sessionIdHash: this._relay ? Session_1.Session.hash(this._relay.session.id) : undefined,\n                });\n            }\n            throw err;\n        });\n    }\n    _handleAsynchronousFilterMethods(request) {\n        const { method } = request;\n        const params = request.params || [];\n        switch (method) {\n            case 'eth_newFilter':\n                return this._eth_newFilter(params);\n            case 'eth_newBlockFilter':\n                return this._eth_newBlockFilter();\n            case 'eth_newPendingTransactionFilter':\n                return this._eth_newPendingTransactionFilter();\n            case 'eth_getFilterChanges':\n                return this._eth_getFilterChanges(params);\n            case 'eth_getFilterLogs':\n                return this._eth_getFilterLogs(params);\n        }\n        return undefined;\n    }\n    _handleSubscriptionMethods(request) {\n        switch (request.method) {\n            case 'eth_subscribe':\n            case 'eth_unsubscribe':\n                return this._subscriptionManager.handleRequest(request);\n        }\n        return undefined;\n    }\n    _isKnownAddress(addressString) {\n        try {\n            const addressStr = (0, util_1.ensureAddressString)(addressString);\n            const lowercaseAddresses = this._addresses.map((address) => (0, util_1.ensureAddressString)(address));\n            return lowercaseAddresses.includes(addressStr);\n        }\n        catch (_a) {\n            // noop\n        }\n        return false;\n    }\n    _ensureKnownAddress(addressString) {\n        var _a;\n        if (!this._isKnownAddress(addressString)) {\n            (_a = this.diagnostic) === null || _a === void 0 ? void 0 : _a.log(DiagnosticLogger_1.EVENTS.UNKNOWN_ADDRESS_ENCOUNTERED);\n            throw new Error('Unknown Ethereum address');\n        }\n    }\n    _prepareTransactionParams(tx) {\n        const fromAddress = tx.from ? (0, util_1.ensureAddressString)(tx.from) : this.selectedAddress;\n        if (!fromAddress) {\n            throw new Error('Ethereum address is unavailable');\n        }\n        this._ensureKnownAddress(fromAddress);\n        const toAddress = tx.to ? (0, util_1.ensureAddressString)(tx.to) : null;\n        const weiValue = tx.value != null ? (0, util_1.ensureBN)(tx.value) : new bn_js_1.default(0);\n        const data = tx.data ? (0, util_1.ensureBuffer)(tx.data) : Buffer.alloc(0);\n        const nonce = tx.nonce != null ? (0, util_1.ensureIntNumber)(tx.nonce) : null;\n        const gasPriceInWei = tx.gasPrice != null ? (0, util_1.ensureBN)(tx.gasPrice) : null;\n        const maxFeePerGas = tx.maxFeePerGas != null ? (0, util_1.ensureBN)(tx.maxFeePerGas) : null;\n        const maxPriorityFeePerGas = tx.maxPriorityFeePerGas != null ? (0, util_1.ensureBN)(tx.maxPriorityFeePerGas) : null;\n        const gasLimit = tx.gas != null ? (0, util_1.ensureBN)(tx.gas) : null;\n        const chainId = tx.chainId ? (0, util_1.ensureIntNumber)(tx.chainId) : this.getChainId();\n        return {\n            fromAddress,\n            toAddress,\n            weiValue,\n            data,\n            nonce,\n            gasPriceInWei,\n            maxFeePerGas,\n            maxPriorityFeePerGas,\n            gasLimit,\n            chainId,\n        };\n    }\n    _isAuthorized() {\n        return this._addresses.length > 0;\n    }\n    _requireAuthorization() {\n        if (!this._isAuthorized()) {\n            throw error_1.standardErrors.provider.unauthorized({});\n        }\n    }\n    _throwUnsupportedMethodError() {\n        throw error_1.standardErrors.provider.unsupportedMethod({});\n    }\n    async _signEthereumMessage(message, address, addPrefix, typedDataJson) {\n        this._ensureKnownAddress(address);\n        try {\n            const relay = await this.initializeRelay();\n            const res = await relay.signEthereumMessage(message, address, addPrefix, typedDataJson)\n                .promise;\n            if ((0, Web3Response_1.isErrorResponse)(res)) {\n                throw new Error(res.errorMessage);\n            }\n            return { jsonrpc: '2.0', id: 0, result: res.result };\n        }\n        catch (err) {\n            if (typeof err.message === 'string' && err.message.match(/(denied|rejected)/i)) {\n                throw error_1.standardErrors.provider.userRejectedRequest('User denied message signature');\n            }\n            throw err;\n        }\n    }\n    async _ethereumAddressFromSignedMessage(message, signature, addPrefix) {\n        const relay = await this.initializeRelay();\n        const res = await relay.ethereumAddressFromSignedMessage(message, signature, addPrefix).promise;\n        if ((0, Web3Response_1.isErrorResponse)(res)) {\n            throw new Error(res.errorMessage);\n        }\n        return { jsonrpc: '2.0', id: 0, result: res.result };\n    }\n    _eth_accounts() {\n        return [...this._addresses];\n    }\n    _eth_coinbase() {\n        return this.selectedAddress || null;\n    }\n    _net_version() {\n        return this.getChainId().toString(10);\n    }\n    _eth_chainId() {\n        return (0, util_1.hexStringFromIntNumber)(this.getChainId());\n    }\n    getChainId() {\n        const chainIdStr = this._storage.getItem(DEFAULT_CHAIN_ID_KEY);\n        if (!chainIdStr) {\n            return (0, util_1.ensureIntNumber)(this._chainIdFromOpts);\n        }\n        const chainId = parseInt(chainIdStr, 10);\n        return (0, util_1.ensureIntNumber)(chainId);\n    }\n    async _eth_requestAccounts() {\n        var _a;\n        (_a = this.diagnostic) === null || _a === void 0 ? void 0 : _a.log(DiagnosticLogger_1.EVENTS.ETH_ACCOUNTS_STATE, {\n            method: 'provider::_eth_requestAccounts',\n            addresses_length: this._addresses.length,\n            sessionIdHash: this._relay ? Session_1.Session.hash(this._relay.session.id) : undefined,\n        });\n        if (this._isAuthorized()) {\n            return Promise.resolve({\n                jsonrpc: '2.0',\n                id: 0,\n                result: this._addresses,\n            });\n        }\n        let res;\n        try {\n            const relay = await this.initializeRelay();\n            res = await relay.requestEthereumAccounts().promise;\n            if ((0, Web3Response_1.isErrorResponse)(res)) {\n                throw new Error(res.errorMessage);\n            }\n        }\n        catch (err) {\n            if (typeof err.message === 'string' && err.message.match(/(denied|rejected)/i)) {\n                throw error_1.standardErrors.provider.userRejectedRequest('User denied account authorization');\n            }\n            throw err;\n        }\n        if (!res.result) {\n            throw new Error('accounts received is empty');\n        }\n        this._setAddresses(res.result);\n        if (!this.isCoinbaseBrowser) {\n            await this.switchEthereumChain(this.getChainId());\n        }\n        return { jsonrpc: '2.0', id: 0, result: this._addresses };\n    }\n    _eth_sign(params) {\n        this._requireAuthorization();\n        const address = (0, util_1.ensureAddressString)(params[0]);\n        const message = (0, util_1.ensureBuffer)(params[1]);\n        return this._signEthereumMessage(message, address, false);\n    }\n    _eth_ecRecover(params) {\n        const message = (0, util_1.ensureBuffer)(params[0]);\n        const signature = (0, util_1.ensureBuffer)(params[1]);\n        return this._ethereumAddressFromSignedMessage(message, signature, false);\n    }\n    _personal_sign(params) {\n        this._requireAuthorization();\n        const message = (0, util_1.ensureBuffer)(params[0]);\n        const address = (0, util_1.ensureAddressString)(params[1]);\n        return this._signEthereumMessage(message, address, true);\n    }\n    _personal_ecRecover(params) {\n        const message = (0, util_1.ensureBuffer)(params[0]);\n        const signature = (0, util_1.ensureBuffer)(params[1]);\n        return this._ethereumAddressFromSignedMessage(message, signature, true);\n    }\n    async _eth_signTransaction(params) {\n        this._requireAuthorization();\n        const tx = this._prepareTransactionParams(params[0] || {});\n        try {\n            const relay = await this.initializeRelay();\n            const res = await relay.signEthereumTransaction(tx).promise;\n            if ((0, Web3Response_1.isErrorResponse)(res)) {\n                throw new Error(res.errorMessage);\n            }\n            return { jsonrpc: '2.0', id: 0, result: res.result };\n        }\n        catch (err) {\n            if (typeof err.message === 'string' && err.message.match(/(denied|rejected)/i)) {\n                throw error_1.standardErrors.provider.userRejectedRequest('User denied transaction signature');\n            }\n            throw err;\n        }\n    }\n    async _eth_sendRawTransaction(params) {\n        const signedTransaction = (0, util_1.ensureBuffer)(params[0]);\n        const relay = await this.initializeRelay();\n        const res = await relay.submitEthereumTransaction(signedTransaction, this.getChainId()).promise;\n        if ((0, Web3Response_1.isErrorResponse)(res)) {\n            throw new Error(res.errorMessage);\n        }\n        return { jsonrpc: '2.0', id: 0, result: res.result };\n    }\n    async _eth_sendTransaction(params) {\n        this._requireAuthorization();\n        const tx = this._prepareTransactionParams(params[0] || {});\n        try {\n            const relay = await this.initializeRelay();\n            const res = await relay.signAndSubmitEthereumTransaction(tx).promise;\n            if ((0, Web3Response_1.isErrorResponse)(res)) {\n                throw new Error(res.errorMessage);\n            }\n            return { jsonrpc: '2.0', id: 0, result: res.result };\n        }\n        catch (err) {\n            if (typeof err.message === 'string' && err.message.match(/(denied|rejected)/i)) {\n                throw error_1.standardErrors.provider.userRejectedRequest('User denied transaction signature');\n            }\n            throw err;\n        }\n    }\n    async _eth_signTypedData_v1(params) {\n        this._requireAuthorization();\n        const typedData = (0, util_1.ensureParsedJSONObject)(params[0]);\n        const address = (0, util_1.ensureAddressString)(params[1]);\n        this._ensureKnownAddress(address);\n        const message = eth_eip712_util_1.default.hashForSignTypedDataLegacy({ data: typedData });\n        const typedDataJSON = JSON.stringify(typedData, null, 2);\n        return this._signEthereumMessage(message, address, false, typedDataJSON);\n    }\n    async _eth_signTypedData_v3(params) {\n        this._requireAuthorization();\n        const address = (0, util_1.ensureAddressString)(params[0]);\n        const typedData = (0, util_1.ensureParsedJSONObject)(params[1]);\n        this._ensureKnownAddress(address);\n        const message = eth_eip712_util_1.default.hashForSignTypedData_v3({ data: typedData });\n        const typedDataJSON = JSON.stringify(typedData, null, 2);\n        return this._signEthereumMessage(message, address, false, typedDataJSON);\n    }\n    async _eth_signTypedData_v4(params) {\n        this._requireAuthorization();\n        const address = (0, util_1.ensureAddressString)(params[0]);\n        const typedData = (0, util_1.ensureParsedJSONObject)(params[1]);\n        this._ensureKnownAddress(address);\n        const message = eth_eip712_util_1.default.hashForSignTypedData_v4({ data: typedData });\n        const typedDataJSON = JSON.stringify(typedData, null, 2);\n        return this._signEthereumMessage(message, address, false, typedDataJSON);\n    }\n    /** @deprecated */\n    async _cbwallet_arbitrary(params) {\n        const action = params[0];\n        const data = params[1];\n        if (typeof data !== 'string') {\n            throw new Error('parameter must be a string');\n        }\n        if (typeof action !== 'object' || action === null) {\n            throw new Error('parameter must be an object');\n        }\n        const result = await this.genericRequest(action, data);\n        return { jsonrpc: '2.0', id: 0, result };\n    }\n    async _wallet_addEthereumChain(params) {\n        var _a, _b, _c, _d;\n        const request = params[0];\n        if (((_a = request.rpcUrls) === null || _a === void 0 ? void 0 : _a.length) === 0) {\n            return {\n                jsonrpc: '2.0',\n                id: 0,\n                error: { code: 2, message: `please pass in at least 1 rpcUrl` },\n            };\n        }\n        if (!request.chainName || request.chainName.trim() === '') {\n            throw error_1.standardErrors.rpc.invalidParams('chainName is a required field');\n        }\n        if (!request.nativeCurrency) {\n            throw error_1.standardErrors.rpc.invalidParams('nativeCurrency is a required field');\n        }\n        const chainIdNumber = parseInt(request.chainId, 16);\n        const success = await this.addEthereumChain(chainIdNumber, (_b = request.rpcUrls) !== null && _b !== void 0 ? _b : [], (_c = request.blockExplorerUrls) !== null && _c !== void 0 ? _c : [], request.chainName, (_d = request.iconUrls) !== null && _d !== void 0 ? _d : [], request.nativeCurrency);\n        if (success) {\n            return { jsonrpc: '2.0', id: 0, result: null };\n        }\n        return {\n            jsonrpc: '2.0',\n            id: 0,\n            error: { code: 2, message: `unable to add ethereum chain` },\n        };\n    }\n    async _wallet_switchEthereumChain(params) {\n        const request = params[0];\n        await this.switchEthereumChain(parseInt(request.chainId, 16));\n        return { jsonrpc: '2.0', id: 0, result: null };\n    }\n    async _wallet_watchAsset(params) {\n        const request = (Array.isArray(params) ? params[0] : params);\n        if (!request.type) {\n            throw error_1.standardErrors.rpc.invalidParams('Type is required');\n        }\n        if ((request === null || request === void 0 ? void 0 : request.type) !== 'ERC20') {\n            throw error_1.standardErrors.rpc.invalidParams(`Asset of type '${request.type}' is not supported`);\n        }\n        if (!(request === null || request === void 0 ? void 0 : request.options)) {\n            throw error_1.standardErrors.rpc.invalidParams('Options are required');\n        }\n        if (!(request === null || request === void 0 ? void 0 : request.options.address)) {\n            throw error_1.standardErrors.rpc.invalidParams('Address is required');\n        }\n        const chainId = this.getChainId();\n        const { address, symbol, image, decimals } = request.options;\n        const res = await this.watchAsset(request.type, address, symbol, decimals, image, chainId);\n        return { jsonrpc: '2.0', id: 0, result: res };\n    }\n    _eth_uninstallFilter(params) {\n        const filterId = (0, util_1.ensureHexString)(params[0]);\n        return this._filterPolyfill.uninstallFilter(filterId);\n    }\n    async _eth_newFilter(params) {\n        const param = params[0];\n        const filterId = await this._filterPolyfill.newFilter(param);\n        return { jsonrpc: '2.0', id: 0, result: filterId };\n    }\n    async _eth_newBlockFilter() {\n        const filterId = await this._filterPolyfill.newBlockFilter();\n        return { jsonrpc: '2.0', id: 0, result: filterId };\n    }\n    async _eth_newPendingTransactionFilter() {\n        const filterId = await this._filterPolyfill.newPendingTransactionFilter();\n        return { jsonrpc: '2.0', id: 0, result: filterId };\n    }\n    _eth_getFilterChanges(params) {\n        const filterId = (0, util_1.ensureHexString)(params[0]);\n        return this._filterPolyfill.getFilterChanges(filterId);\n    }\n    _eth_getFilterLogs(params) {\n        const filterId = (0, util_1.ensureHexString)(params[0]);\n        return this._filterPolyfill.getFilterLogs(filterId);\n    }\n    initializeRelay() {\n        if (this._relay) {\n            return Promise.resolve(this._relay);\n        }\n        return this._relayProvider().then((relay) => {\n            relay.setAccountsCallback((accounts, isDisconnect) => this._setAddresses(accounts, isDisconnect));\n            relay.setChainCallback((chainId, jsonRpcUrl) => {\n                this.updateProviderInfo(jsonRpcUrl, parseInt(chainId, 10));\n            });\n            relay.setDappDefaultChainCallback(this._chainIdFromOpts);\n            this._relay = relay;\n            return relay;\n        });\n    }\n}\nexports.CoinbaseWalletProvider = CoinbaseWalletProvider;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}