{"ast":null,"code":"'use client';\n\nimport { useQueryClient } from '@tanstack/react-query';\nimport { getBlockNumberQueryOptions } from '@wagmi/core/query';\nimport { useQuery } from '../utils/query.js';\nimport { useChainId } from './useChainId.js';\nimport { useConfig } from './useConfig.js';\nimport { useWatchBlockNumber } from './useWatchBlockNumber.js';\n/** https://wagmi.sh/react/api/hooks/useBlockNumber */\nexport function useBlockNumber(parameters = {}) {\n  const {\n    query = {},\n    watch\n  } = parameters;\n  const config = useConfig(parameters);\n  const queryClient = useQueryClient();\n  const configChainId = useChainId({\n    config\n  });\n  const chainId = parameters.chainId ?? configChainId;\n  const options = getBlockNumberQueryOptions(config, {\n    ...parameters,\n    chainId\n  });\n  useWatchBlockNumber({\n    ...{\n      config: parameters.config,\n      chainId: parameters.chainId,\n      ...(typeof watch === 'object' ? watch : {})\n    },\n    enabled: Boolean((query.enabled ?? true) && (typeof watch === 'object' ? watch.enabled : watch)),\n    onBlockNumber(blockNumber) {\n      queryClient.setQueryData(options.queryKey, blockNumber);\n    }\n  });\n  return useQuery({\n    ...query,\n    ...options\n  });\n}","map":{"version":3,"names":["useQueryClient","getBlockNumberQueryOptions","useQuery","useChainId","useConfig","useWatchBlockNumber","useBlockNumber","parameters","query","watch","config","queryClient","configChainId","chainId","options","enabled","Boolean","onBlockNumber","blockNumber","setQueryData","queryKey"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/wagmi/src/hooks/useBlockNumber.ts"],"sourcesContent":["'use client'\n\nimport { useQueryClient } from '@tanstack/react-query'\nimport type {\n  Config,\n  GetBlockNumberErrorType,\n  ResolvedRegister,\n} from '@wagmi/core'\nimport type {\n  Compute,\n  UnionCompute,\n  UnionStrictOmit,\n} from '@wagmi/core/internal'\nimport {\n  type GetBlockNumberData,\n  type GetBlockNumberOptions,\n  type GetBlockNumberQueryFnData,\n  type GetBlockNumberQueryKey,\n  getBlockNumberQueryOptions,\n} from '@wagmi/core/query'\n\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\nimport {\n  type UseWatchBlockNumberParameters,\n  useWatchBlockNumber,\n} from './useWatchBlockNumber.js'\n\nexport type UseBlockNumberParameters<\n  config extends Config = Config,\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n  selectData = GetBlockNumberData,\n> = Compute<\n  GetBlockNumberOptions<config, chainId> &\n    ConfigParameter<config> &\n    QueryParameter<\n      GetBlockNumberQueryFnData,\n      GetBlockNumberErrorType,\n      selectData,\n      GetBlockNumberQueryKey<config, chainId>\n    > & {\n      watch?:\n        | boolean\n        | UnionCompute<\n            UnionStrictOmit<\n              UseWatchBlockNumberParameters<config, chainId>,\n              'chainId' | 'config' | 'onBlockNumber' | 'onError'\n            >\n          >\n        | undefined\n    }\n>\n\nexport type UseBlockNumberReturnType<selectData = GetBlockNumberData> =\n  UseQueryReturnType<selectData, GetBlockNumberErrorType>\n\n/** https://wagmi.sh/react/api/hooks/useBlockNumber */\nexport function useBlockNumber<\n  config extends Config = ResolvedRegister['config'],\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n  selectData = GetBlockNumberData,\n>(\n  parameters: UseBlockNumberParameters<config, chainId, selectData> = {},\n): UseBlockNumberReturnType<selectData> {\n  const { query = {}, watch } = parameters\n\n  const config = useConfig(parameters)\n  const queryClient = useQueryClient()\n  const configChainId = useChainId({ config })\n  const chainId = parameters.chainId ?? configChainId\n\n  const options = getBlockNumberQueryOptions(config, {\n    ...parameters,\n    chainId,\n  })\n\n  useWatchBlockNumber({\n    ...({\n      config: parameters.config,\n      chainId: parameters.chainId,\n      ...(typeof watch === 'object' ? watch : {}),\n    } as UseWatchBlockNumberParameters),\n    enabled: Boolean(\n      (query.enabled ?? true) &&\n        (typeof watch === 'object' ? watch.enabled : watch),\n    ),\n    onBlockNumber(blockNumber) {\n      queryClient.setQueryData(options.queryKey, blockNumber)\n    },\n  })\n\n  return useQuery({ ...query, ...options })\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,SAASA,cAAc,QAAQ,uBAAuB;AAWtD,SAKEC,0BAA0B,QACrB,mBAAmB;AAG1B,SAAkCC,QAAQ,QAAQ,mBAAmB;AACrE,SAASC,UAAU,QAAQ,iBAAiB;AAC5C,SAASC,SAAS,QAAQ,gBAAgB;AAC1C,SAEEC,mBAAmB,QACd,0BAA0B;AA+BjC;AACA,OAAM,SAAUC,cAAcA,CAM5BC,UAAA,GAAoE,EAAE;EAEtE,MAAM;IAAEC,KAAK,GAAG,EAAE;IAAEC;EAAK,CAAE,GAAGF,UAAU;EAExC,MAAMG,MAAM,GAAGN,SAAS,CAACG,UAAU,CAAC;EACpC,MAAMI,WAAW,GAAGX,cAAc,EAAE;EACpC,MAAMY,aAAa,GAAGT,UAAU,CAAC;IAAEO;EAAM,CAAE,CAAC;EAC5C,MAAMG,OAAO,GAAGN,UAAU,CAACM,OAAO,IAAID,aAAa;EAEnD,MAAME,OAAO,GAAGb,0BAA0B,CAACS,MAAM,EAAE;IACjD,GAAGH,UAAU;IACbM;GACD,CAAC;EAEFR,mBAAmB,CAAC;IAClB,GAAI;MACFK,MAAM,EAAEH,UAAU,CAACG,MAAM;MACzBG,OAAO,EAAEN,UAAU,CAACM,OAAO;MAC3B,IAAI,OAAOJ,KAAK,KAAK,QAAQ,GAAGA,KAAK,GAAG,EAAE;KACT;IACnCM,OAAO,EAAEC,OAAO,CACd,CAACR,KAAK,CAACO,OAAO,IAAI,IAAI,MACnB,OAAON,KAAK,KAAK,QAAQ,GAAGA,KAAK,CAACM,OAAO,GAAGN,KAAK,CAAC,CACtD;IACDQ,aAAaA,CAACC,WAAW;MACvBP,WAAW,CAACQ,YAAY,CAACL,OAAO,CAACM,QAAQ,EAAEF,WAAW,CAAC;IACzD;GACD,CAAC;EAEF,OAAOhB,QAAQ,CAAC;IAAE,GAAGM,KAAK;IAAE,GAAGM;EAAO,CAAE,CAAC;AAC3C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}