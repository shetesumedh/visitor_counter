{"ast":null,"code":"import { getGasPrice } from '../actions/getGasPrice.js';\nimport { filterQueryOptions } from './utils.js';\nexport function getGasPriceQueryOptions(config, options = {}) {\n  return {\n    async queryFn({\n      queryKey\n    }) {\n      const {\n        scopeKey: _,\n        ...parameters\n      } = queryKey[1];\n      const gasPrice = await getGasPrice(config, parameters);\n      return gasPrice ?? null;\n    },\n    queryKey: getGasPriceQueryKey(options)\n  };\n}\nexport function getGasPriceQueryKey(options = {}) {\n  return ['gasPrice', filterQueryOptions(options)];\n}","map":{"version":3,"names":["getGasPrice","filterQueryOptions","getGasPriceQueryOptions","config","options","queryFn","queryKey","scopeKey","_","parameters","gasPrice","getGasPriceQueryKey"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/@wagmi/core/src/query/getGasPrice.ts"],"sourcesContent":["import type { QueryOptions } from '@tanstack/query-core'\n\nimport {\n  type GetGasPriceErrorType,\n  type GetGasPriceParameters,\n  type GetGasPriceReturnType,\n  getGasPrice,\n} from '../actions/getGasPrice.js'\nimport type { Config } from '../createConfig.js'\nimport type { ScopeKeyParameter } from '../types/properties.js'\nimport type { Compute, ExactPartial } from '../types/utils.js'\nimport { filterQueryOptions } from './utils.js'\n\nexport type GetGasPriceOptions<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n> = Compute<\n  ExactPartial<GetGasPriceParameters<config, chainId>> & ScopeKeyParameter\n>\n\nexport function getGasPriceQueryOptions<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n>(config: config, options: GetGasPriceOptions<config, chainId> = {}) {\n  return {\n    async queryFn({ queryKey }) {\n      const { scopeKey: _, ...parameters } = queryKey[1]\n      const gasPrice = await getGasPrice(config, parameters)\n      return gasPrice ?? null\n    },\n    queryKey: getGasPriceQueryKey(options),\n  } as const satisfies QueryOptions<\n    GetGasPriceQueryFnData,\n    GetGasPriceErrorType,\n    GetGasPriceData,\n    GetGasPriceQueryKey<config, chainId>\n  >\n}\n\nexport type GetGasPriceQueryFnData = GetGasPriceReturnType\n\nexport type GetGasPriceData = GetGasPriceQueryFnData\n\nexport function getGasPriceQueryKey<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n>(options: GetGasPriceOptions<config, chainId> = {}) {\n  return ['gasPrice', filterQueryOptions(options)] as const\n}\n\nexport type GetGasPriceQueryKey<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n> = ReturnType<typeof getGasPriceQueryKey<config, chainId>>\n"],"mappings":"AAEA,SAIEA,WAAW,QACN,2BAA2B;AAIlC,SAASC,kBAAkB,QAAQ,YAAY;AAS/C,OAAM,SAAUC,uBAAuBA,CAGrCC,MAAc,EAAEC,OAAA,GAA+C,EAAE;EACjE,OAAO;IACL,MAAMC,OAAOA,CAAC;MAAEC;IAAQ,CAAE;MACxB,MAAM;QAAEC,QAAQ,EAAEC,CAAC;QAAE,GAAGC;MAAU,CAAE,GAAGH,QAAQ,CAAC,CAAC,CAAC;MAClD,MAAMI,QAAQ,GAAG,MAAMV,WAAW,CAACG,MAAM,EAAEM,UAAU,CAAC;MACtD,OAAOC,QAAQ,IAAI,IAAI;IACzB,CAAC;IACDJ,QAAQ,EAAEK,mBAAmB,CAACP,OAAO;GAMtC;AACH;AAMA,OAAM,SAAUO,mBAAmBA,CAGjCP,OAAA,GAA+C,EAAE;EACjD,OAAO,CAAC,UAAU,EAAEH,kBAAkB,CAACG,OAAO,CAAC,CAAU;AAC3D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}