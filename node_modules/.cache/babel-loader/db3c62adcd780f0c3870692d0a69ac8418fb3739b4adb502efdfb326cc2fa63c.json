{"ast":null,"code":"/** @see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-4844.md#parameters */\nexport const versionedHashVersion = 1;\n/**\n * Defines a KZG interface.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import * as cKzg from 'c-kzg'\n * import { Kzg } from 'ox'\n * import { Paths } from 'ox/trusted-setups'\n *\n * cKzg.loadTrustedSetup(Paths.mainnet)\n *\n * const kzg = Kzg.from(cKzg)\n * ```\n *\n * @param value - The KZG object to convert.\n * @returns The KZG interface object.\n */\nexport function from(value) {\n  const {\n    blobToKzgCommitment,\n    computeBlobKzgProof\n  } = value;\n  return {\n    blobToKzgCommitment,\n    computeBlobKzgProof\n  };\n}","map":{"version":3,"names":["versionedHashVersion","from","value","blobToKzgCommitment","computeBlobKzgProof"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/ox/core/Kzg.ts"],"sourcesContent":["import type * as Bytes from './Bytes.js'\nimport type * as Errors from './Errors.js'\n\n/** @see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-4844.md#parameters */\nexport const versionedHashVersion = 1\n\n/** Root type for a KZG interface. */\nexport type Kzg = {\n  /**\n   * Convert a blob to a KZG commitment.\n   */\n  blobToKzgCommitment(blob: Bytes.Bytes): Bytes.Bytes\n  /**\n   * Given a blob, return the KZG proof that is used to verify it against the\n   * commitment.\n   */\n  computeBlobKzgProof(blob: Bytes.Bytes, commitment: Bytes.Bytes): Bytes.Bytes\n}\n\n/**\n * Defines a KZG interface.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import * as cKzg from 'c-kzg'\n * import { Kzg } from 'ox'\n * import { Paths } from 'ox/trusted-setups'\n *\n * cKzg.loadTrustedSetup(Paths.mainnet)\n *\n * const kzg = Kzg.from(cKzg)\n * ```\n *\n * @param value - The KZG object to convert.\n * @returns The KZG interface object.\n */\nexport function from(value: Kzg): Kzg {\n  const { blobToKzgCommitment, computeBlobKzgProof } = value\n  return {\n    blobToKzgCommitment,\n    computeBlobKzgProof,\n  }\n}\n\nexport declare namespace from {\n  type ErrorType = Errors.GlobalErrorType\n}\n"],"mappings":"AAGA;AACA,OAAO,MAAMA,oBAAoB,GAAG,CAAC;AAerC;;;;;;;;;;;;;;;;;;AAkBA,OAAM,SAAUC,IAAIA,CAACC,KAAU;EAC7B,MAAM;IAAEC,mBAAmB;IAAEC;EAAmB,CAAE,GAAGF,KAAK;EAC1D,OAAO;IACLC,mBAAmB;IACnBC;GACD;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}