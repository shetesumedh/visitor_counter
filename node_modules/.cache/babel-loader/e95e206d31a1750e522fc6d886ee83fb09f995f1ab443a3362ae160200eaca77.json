{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getCapabilities = getCapabilities;\nconst parseAccount_js_1 = require(\"../../accounts/utils/parseAccount.js\");\nconst toHex_js_1 = require(\"../../utils/encoding/toHex.js\");\nasync function getCapabilities(client, parameters = {}) {\n  const {\n    account = client.account,\n    chainId\n  } = parameters;\n  const account_ = account ? (0, parseAccount_js_1.parseAccount)(account) : undefined;\n  const params = chainId ? [account_?.address, [(0, toHex_js_1.numberToHex)(chainId)]] : [account_?.address];\n  const capabilities_raw = await client.request({\n    method: 'wallet_getCapabilities',\n    params\n  });\n  const capabilities = {};\n  for (const [chainId, capabilities_] of Object.entries(capabilities_raw)) {\n    capabilities[Number(chainId)] = {};\n    for (let [key, value] of Object.entries(capabilities_)) {\n      if (key === 'addSubAccount') key = 'unstable_addSubAccount';\n      capabilities[Number(chainId)][key] = value;\n    }\n  }\n  return typeof chainId === 'number' ? capabilities[chainId] : capabilities;\n}","map":{"version":3,"names":["exports","getCapabilities","parseAccount_js_1","require","toHex_js_1","client","parameters","account","chainId","account_","parseAccount","undefined","params","address","numberToHex","capabilities_raw","request","method","capabilities","capabilities_","Object","entries","Number","key","value"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/viem/actions/wallet/getCapabilities.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport { parseAccount } from '../../accounts/utils/parseAccount.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../../types/account.js'\nimport type {\n  Capabilities,\n  ChainIdToCapabilities,\n  ExtractCapabilities,\n} from '../../types/capabilities.js'\nimport type { Prettify } from '../../types/utils.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport { numberToHex } from '../../utils/encoding/toHex.js'\n\nexport type GetCapabilitiesParameters<\n  chainId extends number | undefined = undefined,\n> = {\n  account?: Account | Address | undefined\n  chainId?: chainId | number | undefined\n}\n\nexport type GetCapabilitiesReturnType<\n  chainId extends number | undefined = undefined,\n> = Prettify<\n  chainId extends number\n    ? ExtractCapabilities<'getCapabilities', 'ReturnType'>\n    : ChainIdToCapabilities<\n        Capabilities<ExtractCapabilities<'getCapabilities', 'ReturnType'>>,\n        number\n      >\n>\n\nexport type GetCapabilitiesErrorType = RequestErrorType | ErrorType\n\n/**\n * Extract capabilities that a connected wallet supports (e.g. paymasters, session keys, etc).\n *\n * - Docs: https://viem.sh/docs/actions/wallet/getCapabilities\n * - JSON-RPC Methods: [`wallet_getCapabilities`](https://eips.ethereum.org/EIPS/eip-5792)\n *\n * @param client - Client to use\n * @returns The wallet's capabilities. {@link GetCapabilitiesReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getCapabilities } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const capabilities = await getCapabilities(client)\n */\nexport async function getCapabilities<\n  chainId extends number | undefined = undefined,\n>(\n  client: Client<Transport>,\n  parameters: GetCapabilitiesParameters<chainId> = {},\n): Promise<GetCapabilitiesReturnType<chainId>> {\n  const { account = client.account, chainId } = parameters\n\n  const account_ = account ? parseAccount(account) : undefined\n\n  const params = chainId\n    ? ([account_?.address, [numberToHex(chainId)]] as const)\n    : ([account_?.address] as const)\n  const capabilities_raw = await client.request({\n    method: 'wallet_getCapabilities',\n    params,\n  })\n\n  const capabilities = {} as ChainIdToCapabilities<\n    ExtractCapabilities<'getCapabilities', 'ReturnType'>,\n    number\n  >\n  for (const [chainId, capabilities_] of Object.entries(capabilities_raw)) {\n    capabilities[Number(chainId)] = {}\n    for (let [key, value] of Object.entries(capabilities_)) {\n      if (key === 'addSubAccount') key = 'unstable_addSubAccount'\n      capabilities[Number(chainId)][key] = value\n    }\n  }\n  return (\n    typeof chainId === 'number' ? capabilities[chainId] : capabilities\n  ) as never\n}\n"],"mappings":";;;;;AAwDAA,OAAA,CAAAC,eAAA,GAAAA,eAAA;AAtDA,MAAAC,iBAAA,GAAAC,OAAA;AAYA,MAAAC,UAAA,GAAAD,OAAA;AA0CO,eAAeF,eAAeA,CAGnCI,MAAyB,EACzBC,UAAA,GAAiD,EAAE;EAEnD,MAAM;IAAEC,OAAO,GAAGF,MAAM,CAACE,OAAO;IAAEC;EAAO,CAAE,GAAGF,UAAU;EAExD,MAAMG,QAAQ,GAAGF,OAAO,GAAG,IAAAL,iBAAA,CAAAQ,YAAY,EAACH,OAAO,CAAC,GAAGI,SAAS;EAE5D,MAAMC,MAAM,GAAGJ,OAAO,GACjB,CAACC,QAAQ,EAAEI,OAAO,EAAE,CAAC,IAAAT,UAAA,CAAAU,WAAW,EAACN,OAAO,CAAC,CAAC,CAAW,GACrD,CAACC,QAAQ,EAAEI,OAAO,CAAW;EAClC,MAAME,gBAAgB,GAAG,MAAMV,MAAM,CAACW,OAAO,CAAC;IAC5CC,MAAM,EAAE,wBAAwB;IAChCL;GACD,CAAC;EAEF,MAAMM,YAAY,GAAG,EAGpB;EACD,KAAK,MAAM,CAACV,OAAO,EAAEW,aAAa,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACN,gBAAgB,CAAC,EAAE;IACvEG,YAAY,CAACI,MAAM,CAACd,OAAO,CAAC,CAAC,GAAG,EAAE;IAClC,KAAK,IAAI,CAACe,GAAG,EAAEC,KAAK,CAAC,IAAIJ,MAAM,CAACC,OAAO,CAACF,aAAa,CAAC,EAAE;MACtD,IAAII,GAAG,KAAK,eAAe,EAAEA,GAAG,GAAG,wBAAwB;MAC3DL,YAAY,CAACI,MAAM,CAACd,OAAO,CAAC,CAAC,CAACe,GAAG,CAAC,GAAGC,KAAK;IAC5C;EACF;EACA,OACE,OAAOhB,OAAO,KAAK,QAAQ,GAAGU,YAAY,CAACV,OAAO,CAAC,GAAGU,YAAY;AAEtE","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}