{"ast":null,"code":"'use client';\n\nimport { simulateContractQueryOptions } from '@wagmi/core/query';\nimport { useQuery } from '../utils/query.js';\nimport { useChainId } from './useChainId.js';\nimport { useConfig } from './useConfig.js';\nimport { useConnectorClient } from './useConnectorClient.js';\n/** https://wagmi.sh/react/api/hooks/useSimulateContract */\nexport function useSimulateContract(parameters = {}) {\n  const {\n    abi,\n    address,\n    connector,\n    functionName,\n    query = {}\n  } = parameters;\n  const config = useConfig(parameters);\n  const {\n    data: connectorClient\n  } = useConnectorClient({\n    config,\n    connector,\n    query: {\n      enabled: parameters.account === undefined\n    }\n  });\n  const chainId = useChainId({\n    config\n  });\n  const options = simulateContractQueryOptions(config, {\n    ...parameters,\n    account: parameters.account ?? connectorClient?.account,\n    chainId: parameters.chainId ?? chainId\n  });\n  const enabled = Boolean(abi && address && functionName && (query.enabled ?? true));\n  return useQuery({\n    ...query,\n    ...options,\n    enabled\n  });\n}","map":{"version":3,"names":["simulateContractQueryOptions","useQuery","useChainId","useConfig","useConnectorClient","useSimulateContract","parameters","abi","address","connector","functionName","query","config","data","connectorClient","enabled","account","undefined","chainId","options","Boolean"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/wagmi/src/hooks/useSimulateContract.ts"],"sourcesContent":["'use client'\n\nimport type {\n  Config,\n  ResolvedRegister,\n  SimulateContractErrorType,\n} from '@wagmi/core'\nimport {\n  type SimulateContractData,\n  type SimulateContractOptions,\n  type SimulateContractQueryFnData,\n  type SimulateContractQueryKey,\n  simulateContractQueryOptions,\n} from '@wagmi/core/query'\nimport type { Abi, ContractFunctionArgs, ContractFunctionName } from 'viem'\n\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\nimport { useConnectorClient } from './useConnectorClient.js'\n\nexport type UseSimulateContractParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  functionName extends ContractFunctionName<\n    abi,\n    'nonpayable' | 'payable'\n  > = ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n  args extends ContractFunctionArgs<\n    abi,\n    'nonpayable' | 'payable',\n    functionName\n  > = ContractFunctionArgs<abi, 'nonpayable' | 'payable', functionName>,\n  config extends Config = Config,\n  chainId extends config['chains'][number]['id'] | undefined = undefined,\n  selectData = SimulateContractData<abi, functionName, args, config, chainId>,\n> = SimulateContractOptions<abi, functionName, args, config, chainId> &\n  ConfigParameter<config> &\n  QueryParameter<\n    SimulateContractQueryFnData<abi, functionName, args, config, chainId>,\n    SimulateContractErrorType,\n    selectData,\n    SimulateContractQueryKey<abi, functionName, args, config, chainId>\n  >\n\nexport type UseSimulateContractReturnType<\n  abi extends Abi | readonly unknown[] = Abi,\n  functionName extends ContractFunctionName<\n    abi,\n    'nonpayable' | 'payable'\n  > = ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n  args extends ContractFunctionArgs<\n    abi,\n    'nonpayable' | 'payable',\n    functionName\n  > = ContractFunctionArgs<abi, 'nonpayable' | 'payable', functionName>,\n  config extends Config = Config,\n  chainId extends config['chains'][number]['id'] | undefined = undefined,\n  selectData = SimulateContractData<abi, functionName, args, config, chainId>,\n> = UseQueryReturnType<selectData, SimulateContractErrorType>\n\n/** https://wagmi.sh/react/api/hooks/useSimulateContract */\nexport function useSimulateContract<\n  const abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n  args extends ContractFunctionArgs<\n    abi,\n    'nonpayable' | 'payable',\n    functionName\n  >,\n  config extends Config = ResolvedRegister['config'],\n  chainId extends config['chains'][number]['id'] | undefined = undefined,\n  selectData = SimulateContractData<abi, functionName, args, config, chainId>,\n>(\n  parameters: UseSimulateContractParameters<\n    abi,\n    functionName,\n    args,\n    config,\n    chainId,\n    selectData\n  > = {} as any,\n): UseSimulateContractReturnType<\n  abi,\n  functionName,\n  args,\n  config,\n  chainId,\n  selectData\n> {\n  const { abi, address, connector, functionName, query = {} } = parameters\n\n  const config = useConfig(parameters)\n  const { data: connectorClient } = useConnectorClient({\n    config,\n    connector,\n    query: { enabled: parameters.account === undefined },\n  })\n  const chainId = useChainId({ config })\n\n  const options = simulateContractQueryOptions<\n    config,\n    abi,\n    functionName,\n    args,\n    chainId\n  >(config, {\n    ...parameters,\n    account: parameters.account ?? connectorClient?.account,\n    chainId: parameters.chainId ?? chainId,\n  })\n  const enabled = Boolean(\n    abi && address && functionName && (query.enabled ?? true),\n  )\n\n  return useQuery({ ...query, ...options, enabled })\n}\n"],"mappings":"AAAA,YAAY;;AAOZ,SAKEA,4BAA4B,QACvB,mBAAmB;AAI1B,SAAkCC,QAAQ,QAAQ,mBAAmB;AACrE,SAASC,UAAU,QAAQ,iBAAiB;AAC5C,SAASC,SAAS,QAAQ,gBAAgB;AAC1C,SAASC,kBAAkB,QAAQ,yBAAyB;AAyC5D;AACA,OAAM,SAAUC,mBAAmBA,CAYjCC,UAAA,GAOI,EAAS;EASb,MAAM;IAAEC,GAAG;IAAEC,OAAO;IAAEC,SAAS;IAAEC,YAAY;IAAEC,KAAK,GAAG;EAAE,CAAE,GAAGL,UAAU;EAExE,MAAMM,MAAM,GAAGT,SAAS,CAACG,UAAU,CAAC;EACpC,MAAM;IAAEO,IAAI,EAAEC;EAAe,CAAE,GAAGV,kBAAkB,CAAC;IACnDQ,MAAM;IACNH,SAAS;IACTE,KAAK,EAAE;MAAEI,OAAO,EAAET,UAAU,CAACU,OAAO,KAAKC;IAAS;GACnD,CAAC;EACF,MAAMC,OAAO,GAAGhB,UAAU,CAAC;IAAEU;EAAM,CAAE,CAAC;EAEtC,MAAMO,OAAO,GAAGnB,4BAA4B,CAM1CY,MAAM,EAAE;IACR,GAAGN,UAAU;IACbU,OAAO,EAAEV,UAAU,CAACU,OAAO,IAAIF,eAAe,EAAEE,OAAO;IACvDE,OAAO,EAAEZ,UAAU,CAACY,OAAO,IAAIA;GAChC,CAAC;EACF,MAAMH,OAAO,GAAGK,OAAO,CACrBb,GAAG,IAAIC,OAAO,IAAIE,YAAY,KAAKC,KAAK,CAACI,OAAO,IAAI,IAAI,CAAC,CAC1D;EAED,OAAOd,QAAQ,CAAC;IAAE,GAAGU,KAAK;IAAE,GAAGQ,OAAO;IAAEJ;EAAO,CAAE,CAAC;AACpD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}