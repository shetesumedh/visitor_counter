{"ast":null,"code":"import { verifyMessage } from '../actions/verifyMessage.js';\nimport { filterQueryOptions } from './utils.js';\nexport function verifyMessageQueryOptions(config, options = {}) {\n  return {\n    async queryFn({\n      queryKey\n    }) {\n      const {\n        address,\n        message,\n        signature\n      } = queryKey[1];\n      if (!address || !message || !signature) throw new Error('address, message, and signature are required');\n      const {\n        scopeKey: _,\n        ...parameters\n      } = queryKey[1];\n      const verified = await verifyMessage(config, parameters);\n      return verified ?? null;\n    },\n    queryKey: verifyMessageQueryKey(options)\n  };\n}\nexport function verifyMessageQueryKey(options) {\n  return ['verifyMessage', filterQueryOptions(options)];\n}","map":{"version":3,"names":["verifyMessage","filterQueryOptions","verifyMessageQueryOptions","config","options","queryFn","queryKey","address","message","signature","Error","scopeKey","_","parameters","verified","verifyMessageQueryKey"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/@wagmi/core/src/query/verifyMessage.ts"],"sourcesContent":["import type { QueryOptions } from '@tanstack/query-core'\n\nimport {\n  type VerifyMessageErrorType,\n  type VerifyMessageParameters,\n  type VerifyMessageReturnType,\n  verifyMessage,\n} from '../actions/verifyMessage.js'\nimport type { Config } from '../createConfig.js'\nimport type { ScopeKeyParameter } from '../types/properties.js'\nimport type { Compute, ExactPartial } from '../types/utils.js'\nimport { filterQueryOptions } from './utils.js'\n\nexport type VerifyMessageOptions<config extends Config> = Compute<\n  ExactPartial<VerifyMessageParameters<config>> & ScopeKeyParameter\n>\n\nexport function verifyMessageQueryOptions<config extends Config>(\n  config: config,\n  options: VerifyMessageOptions<config> = {},\n) {\n  return {\n    async queryFn({ queryKey }) {\n      const { address, message, signature } = queryKey[1]\n      if (!address || !message || !signature)\n        throw new Error('address, message, and signature are required')\n\n      const { scopeKey: _, ...parameters } = queryKey[1]\n\n      const verified = await verifyMessage(\n        config,\n        parameters as VerifyMessageParameters,\n      )\n      return verified ?? null\n    },\n    queryKey: verifyMessageQueryKey(options),\n  } as const satisfies QueryOptions<\n    VerifyMessageQueryFnData,\n    VerifyMessageErrorType,\n    VerifyMessageData,\n    VerifyMessageQueryKey<config>\n  >\n}\nexport type VerifyMessageQueryFnData = VerifyMessageReturnType\n\nexport type VerifyMessageData = VerifyMessageQueryFnData\n\nexport function verifyMessageQueryKey<config extends Config>(\n  options: VerifyMessageOptions<config>,\n) {\n  return ['verifyMessage', filterQueryOptions(options)] as const\n}\n\nexport type VerifyMessageQueryKey<config extends Config> = ReturnType<\n  typeof verifyMessageQueryKey<config>\n>\n"],"mappings":"AAEA,SAIEA,aAAa,QACR,6BAA6B;AAIpC,SAASC,kBAAkB,QAAQ,YAAY;AAM/C,OAAM,SAAUC,yBAAyBA,CACvCC,MAAc,EACdC,OAAA,GAAwC,EAAE;EAE1C,OAAO;IACL,MAAMC,OAAOA,CAAC;MAAEC;IAAQ,CAAE;MACxB,MAAM;QAAEC,OAAO;QAAEC,OAAO;QAAEC;MAAS,CAAE,GAAGH,QAAQ,CAAC,CAAC,CAAC;MACnD,IAAI,CAACC,OAAO,IAAI,CAACC,OAAO,IAAI,CAACC,SAAS,EACpC,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;MAEjE,MAAM;QAAEC,QAAQ,EAAEC,CAAC;QAAE,GAAGC;MAAU,CAAE,GAAGP,QAAQ,CAAC,CAAC,CAAC;MAElD,MAAMQ,QAAQ,GAAG,MAAMd,aAAa,CAClCG,MAAM,EACNU,UAAqC,CACtC;MACD,OAAOC,QAAQ,IAAI,IAAI;IACzB,CAAC;IACDR,QAAQ,EAAES,qBAAqB,CAACX,OAAO;GAMxC;AACH;AAKA,OAAM,SAAUW,qBAAqBA,CACnCX,OAAqC;EAErC,OAAO,CAAC,eAAe,EAAEH,kBAAkB,CAACG,OAAO,CAAC,CAAU;AAChE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}