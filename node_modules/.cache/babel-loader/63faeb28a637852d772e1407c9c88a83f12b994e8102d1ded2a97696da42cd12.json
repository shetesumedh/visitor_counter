{"ast":null,"code":"import { signMessage } from '../actions/signMessage.js';\nexport function signMessageMutationOptions(config) {\n  return {\n    mutationFn(variables) {\n      return signMessage(config, variables);\n    },\n    mutationKey: ['signMessage']\n  };\n}","map":{"version":3,"names":["signMessage","signMessageMutationOptions","config","mutationFn","variables","mutationKey"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/@wagmi/core/src/query/signMessage.ts"],"sourcesContent":["import type { MutationOptions } from '@tanstack/query-core'\n\nimport {\n  type SignMessageErrorType,\n  type SignMessageParameters,\n  type SignMessageReturnType,\n  signMessage,\n} from '../actions/signMessage.js'\nimport type { Config } from '../createConfig.js'\nimport type { Compute } from '../types/utils.js'\nimport type { Mutate, MutateAsync } from './types.js'\n\nexport function signMessageMutationOptions(config: Config) {\n  return {\n    mutationFn(variables) {\n      return signMessage(config, variables)\n    },\n    mutationKey: ['signMessage'],\n  } as const satisfies MutationOptions<\n    SignMessageData,\n    SignMessageErrorType,\n    SignMessageVariables\n  >\n}\n\nexport type SignMessageData = SignMessageReturnType\n\nexport type SignMessageVariables = Compute<SignMessageParameters>\n\nexport type SignMessageMutate<context = unknown> = Mutate<\n  SignMessageData,\n  SignMessageErrorType,\n  SignMessageVariables,\n  context\n>\n\nexport type SignMessageMutateAsync<context = unknown> = MutateAsync<\n  SignMessageData,\n  SignMessageErrorType,\n  SignMessageVariables,\n  context\n>\n"],"mappings":"AAEA,SAIEA,WAAW,QACN,2BAA2B;AAKlC,OAAM,SAAUC,0BAA0BA,CAACC,MAAc;EACvD,OAAO;IACLC,UAAUA,CAACC,SAAS;MAClB,OAAOJ,WAAW,CAACE,MAAM,EAAEE,SAAS,CAAC;IACvC,CAAC;IACDC,WAAW,EAAE,CAAC,aAAa;GAK5B;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}