{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mine = mine;\nconst toHex_js_1 = require(\"../../utils/encoding/toHex.js\");\nasync function mine(client, {\n  blocks,\n  interval\n}) {\n  if (client.mode === 'ganache') await client.request({\n    method: 'evm_mine',\n    params: [{\n      blocks: (0, toHex_js_1.numberToHex)(blocks)\n    }]\n  });else await client.request({\n    method: `${client.mode}_mine`,\n    params: [(0, toHex_js_1.numberToHex)(blocks), (0, toHex_js_1.numberToHex)(interval || 0)]\n  });\n}","map":{"version":3,"names":["exports","mine","toHex_js_1","require","client","blocks","interval","mode","request","method","params","numberToHex"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/viem/actions/test/mine.ts"],"sourcesContent":["import type {\n  TestClient,\n  TestClientMode,\n} from '../../clients/createTestClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport { numberToHex } from '../../utils/encoding/toHex.js'\n\nexport type MineParameters = {\n  /** Number of blocks to mine. */\n  blocks: number\n  /** Interval between each block in seconds. */\n  interval?: number | undefined\n}\n\nexport type MineErrorType = RequestErrorType | ErrorType\n\n/**\n * Mine a specified number of blocks.\n *\n * - Docs: https://viem.sh/docs/actions/test/mine\n *\n * @param client - Client to use\n * @param parameters â€“ {@link MineParameters}\n *\n * @example\n * import { createTestClient, http } from 'viem'\n * import { foundry } from 'viem/chains'\n * import { mine } from 'viem/test'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: 'foundry',\n *   transport: http(),\n * })\n * await mine(client, { blocks: 1 })\n */\nexport async function mine<\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n>(\n  client: TestClient<TestClientMode, Transport, chain, account, false>,\n  { blocks, interval }: MineParameters,\n) {\n  if (client.mode === 'ganache')\n    await client.request({\n      method: 'evm_mine',\n      params: [{ blocks: numberToHex(blocks) }],\n    })\n  else\n    await client.request({\n      method: `${client.mode}_mine`,\n      params: [numberToHex(blocks), numberToHex(interval || 0)],\n    })\n}\n"],"mappings":";;;;;AAwCAA,OAAA,CAAAC,IAAA,GAAAA,IAAA;AA/BA,MAAAC,UAAA,GAAAC,OAAA;AA+BO,eAAeF,IAAIA,CAIxBG,MAAoE,EACpE;EAAEC,MAAM;EAAEC;AAAQ,CAAkB;EAEpC,IAAIF,MAAM,CAACG,IAAI,KAAK,SAAS,EAC3B,MAAMH,MAAM,CAACI,OAAO,CAAC;IACnBC,MAAM,EAAE,UAAU;IAClBC,MAAM,EAAE,CAAC;MAAEL,MAAM,EAAE,IAAAH,UAAA,CAAAS,WAAW,EAACN,MAAM;IAAC,CAAE;GACzC,CAAC,MAEF,MAAMD,MAAM,CAACI,OAAO,CAAC;IACnBC,MAAM,EAAE,GAAGL,MAAM,CAACG,IAAI,OAAO;IAC7BG,MAAM,EAAE,CAAC,IAAAR,UAAA,CAAAS,WAAW,EAACN,MAAM,CAAC,EAAE,IAAAH,UAAA,CAAAS,WAAW,EAACL,QAAQ,IAAI,CAAC,CAAC;GACzD,CAAC;AACN","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}