{"ast":null,"code":"import * as Authorization from './Authorization.js';\nimport * as Hex from './Hex.js';\nimport * as Signature from './Signature.js';\n/** Type to RPC Type mapping. */\nexport const toRpcType = {\n  legacy: '0x0',\n  eip2930: '0x1',\n  eip1559: '0x2',\n  eip4844: '0x3',\n  eip7702: '0x4'\n};\n/** RPC Type to Type mapping. */\nexport const fromRpcType = {\n  '0x0': 'legacy',\n  '0x1': 'eip2930',\n  '0x2': 'eip1559',\n  '0x3': 'eip4844',\n  '0x4': 'eip7702'\n};\n/**\n * Converts an {@link ox#Transaction.Rpc} to an {@link ox#Transaction.Transaction}.\n *\n * @example\n * ```ts twoslash\n * import { Transaction } from 'ox'\n *\n * const transaction = Transaction.fromRpc({\n *   hash: '0x353fdfc38a2f26115daadee9f5b8392ce62b84f410957967e2ed56b35338cdd0',\n *   nonce: '0x357',\n *   blockHash:\n *     '0xc350d807505fb835650f0013632c5515592987ba169bbc6626d9fc54d91f0f0b',\n *   blockNumber: '0x12f296f',\n *   transactionIndex: '0x2',\n *   from: '0x814e5e0e31016b9a7f138c76b7e7b2bb5c1ab6a6',\n *   to: '0x3fc91a3afd70395cd496c647d5a6cc9d4b2b7fad',\n *   value: '0x9b6e64a8ec60000',\n *   gas: '0x43f5d',\n *   maxFeePerGas: '0x2ca6ae494',\n *   maxPriorityFeePerGas: '0x41cc3c0',\n *   input:\n *     '0x3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000006643504700000000000000000000000000000000000000000000000000000000000000040b080604000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000009b6e64a8ec600000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000009b6e64a8ec60000000000000000000000000000000000000000000000000000019124bb5ae978c000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000c56c7a0eaa804f854b536a5f3d5f49d2ec4b12b80000000000000000000000000000000000000000000000000000000000000060000000000000000000000000c56c7a0eaa804f854b536a5f3d5f49d2ec4b12b8000000000000000000000000000000fee13a103a10d593b9ae06b3e05f2e7e1c00000000000000000000000000000000000000000000000000000000000000190000000000000000000000000000000000000000000000000000000000000060000000000000000000000000c56c7a0eaa804f854b536a5f3d5f49d2ec4b12b800000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000190240001b9872b',\n *   r: '0x635dc2033e60185bb36709c29c75d64ea51dfbd91c32ef4be198e4ceb169fb4d',\n *   s: '0x50c2667ac4c771072746acfdcf1f1483336dcca8bd2df47cd83175dbe60f0540',\n *   yParity: '0x0',\n *   chainId: '0x1',\n *   accessList: [],\n *   type: '0x2',\n * })\n * ```\n *\n * @param transaction - The RPC transaction to convert.\n * @returns An instantiated {@link ox#Transaction.Transaction}.\n */\nexport function fromRpc(transaction, _options = {}) {\n  if (!transaction) return null;\n  const signature = Signature.extract(transaction);\n  const transaction_ = {\n    ...transaction,\n    ...signature\n  };\n  transaction_.blockNumber = transaction.blockNumber ? BigInt(transaction.blockNumber) : null;\n  transaction_.data = transaction.input;\n  transaction_.gas = BigInt(transaction.gas ?? 0n);\n  transaction_.nonce = BigInt(transaction.nonce ?? 0n);\n  transaction_.transactionIndex = transaction.transactionIndex ? Number(transaction.transactionIndex) : null;\n  transaction_.value = BigInt(transaction.value ?? 0n);\n  if (transaction.authorizationList) transaction_.authorizationList = Authorization.fromRpcList(transaction.authorizationList);\n  if (transaction.chainId) transaction_.chainId = Number(transaction.chainId);\n  if (transaction.gasPrice) transaction_.gasPrice = BigInt(transaction.gasPrice);\n  if (transaction.maxFeePerBlobGas) transaction_.maxFeePerBlobGas = BigInt(transaction.maxFeePerBlobGas);\n  if (transaction.maxFeePerGas) transaction_.maxFeePerGas = BigInt(transaction.maxFeePerGas);\n  if (transaction.maxPriorityFeePerGas) transaction_.maxPriorityFeePerGas = BigInt(transaction.maxPriorityFeePerGas);\n  if (transaction.type) transaction_.type = fromRpcType[transaction.type] ?? transaction.type;\n  if (signature) transaction_.v = Signature.yParityToV(signature.yParity);\n  return transaction_;\n}\n/**\n * Converts an {@link ox#Transaction.Transaction} to an {@link ox#Transaction.Rpc}.\n *\n * @example\n * ```ts twoslash\n * import { Transaction } from 'ox'\n *\n * const transaction = Transaction.toRpc({\n *   accessList: [],\n *   blockHash:\n *     '0xc350d807505fb835650f0013632c5515592987ba169bbc6626d9fc54d91f0f0b',\n *   blockNumber: 19868015n,\n *   chainId: 1,\n *   from: '0x814e5e0e31016b9a7f138c76b7e7b2bb5c1ab6a6',\n *   gas: 278365n,\n *   hash: '0x353fdfc38a2f26115daadee9f5b8392ce62b84f410957967e2ed56b35338cdd0',\n *   input:\n *     '0x3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000006643504700000000000000000000000000000000000000000000000000000000000000040b080604000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000009b6e64a8ec600000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000009b6e64a8ec60000000000000000000000000000000000000000000000000000019124bb5ae978c000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000c56c7a0eaa804f854b536a5f3d5f49d2ec4b12b80000000000000000000000000000000000000000000000000000000000000060000000000000000000000000c56c7a0eaa804f854b536a5f3d5f49d2ec4b12b8000000000000000000000000000000fee13a103a10d593b9ae06b3e05f2e7e1c00000000000000000000000000000000000000000000000000000000000000190000000000000000000000000000000000000000000000000000000000000060000000000000000000000000c56c7a0eaa804f854b536a5f3d5f49d2ec4b12b800000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000190240001b9872b',\n *   maxFeePerGas: 11985937556n,\n *   maxPriorityFeePerGas: 68993984n,\n *   nonce: 855n,\n *   r: 44944627813007772897391531230081695102703289123332187696115181104739239197517n,\n *   s: 36528503505192438307355164441104001310566505351980369085208178712678799181120n,\n *   to: '0x3fc91a3afd70395cd496c647d5a6cc9d4b2b7fad',\n *   transactionIndex: 2,\n *   type: 'eip1559',\n *   v: 27,\n *   value: 700000000000000000n,\n *   yParity: 0,\n * })\n * ```\n *\n * @param transaction - The transaction to convert.\n * @returns An RPC-formatted transaction.\n */\nexport function toRpc(transaction, _options) {\n  const rpc = {};\n  rpc.blockHash = transaction.blockHash;\n  rpc.blockNumber = typeof transaction.blockNumber === 'bigint' ? Hex.fromNumber(transaction.blockNumber) : null;\n  rpc.from = transaction.from;\n  rpc.gas = Hex.fromNumber(transaction.gas ?? 0n);\n  rpc.hash = transaction.hash;\n  rpc.input = transaction.input;\n  rpc.nonce = Hex.fromNumber(transaction.nonce ?? 0n);\n  rpc.to = transaction.to;\n  rpc.transactionIndex = transaction.transactionIndex ? Hex.fromNumber(transaction.transactionIndex) : null;\n  rpc.type = toRpcType[transaction.type] ?? transaction.type;\n  rpc.value = Hex.fromNumber(transaction.value ?? 0n);\n  if (transaction.accessList) rpc.accessList = transaction.accessList;\n  if (transaction.authorizationList) rpc.authorizationList = Authorization.toRpcList(transaction.authorizationList);\n  if (transaction.blobVersionedHashes) rpc.blobVersionedHashes = transaction.blobVersionedHashes;\n  if (transaction.chainId) rpc.chainId = Hex.fromNumber(transaction.chainId);\n  if (typeof transaction.gasPrice === 'bigint') rpc.gasPrice = Hex.fromNumber(transaction.gasPrice);\n  if (typeof transaction.maxFeePerBlobGas === 'bigint') rpc.maxFeePerBlobGas = Hex.fromNumber(transaction.maxFeePerBlobGas);\n  if (typeof transaction.maxFeePerGas === 'bigint') rpc.maxFeePerGas = Hex.fromNumber(transaction.maxFeePerGas);\n  if (typeof transaction.maxPriorityFeePerGas === 'bigint') rpc.maxPriorityFeePerGas = Hex.fromNumber(transaction.maxPriorityFeePerGas);\n  if (typeof transaction.r === 'bigint') rpc.r = Hex.fromNumber(transaction.r, {\n    size: 32\n  });\n  if (typeof transaction.s === 'bigint') rpc.s = Hex.fromNumber(transaction.s, {\n    size: 32\n  });\n  if (typeof transaction.v === 'number') rpc.v = Hex.fromNumber(transaction.v, {\n    size: 1\n  });\n  if (typeof transaction.yParity === 'number') rpc.yParity = transaction.yParity === 0 ? '0x0' : '0x1';\n  return rpc;\n}","map":{"version":3,"names":["Authorization","Hex","Signature","toRpcType","legacy","eip2930","eip1559","eip4844","eip7702","fromRpcType","fromRpc","transaction","_options","signature","extract","transaction_","blockNumber","BigInt","data","input","gas","nonce","transactionIndex","Number","value","authorizationList","fromRpcList","chainId","gasPrice","maxFeePerBlobGas","maxFeePerGas","maxPriorityFeePerGas","type","v","yParityToV","yParity","toRpc","rpc","blockHash","fromNumber","from","hash","to","accessList","toRpcList","blobVersionedHashes","r","size","s"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/ox/core/Transaction.ts"],"sourcesContent":["import type * as AccessList from './AccessList.js'\nimport type * as Address from './Address.js'\nimport * as Authorization from './Authorization.js'\nimport type * as Errors from './Errors.js'\nimport * as Hex from './Hex.js'\nimport * as Signature from './Signature.js'\nimport type { Compute, UnionCompute } from './internal/types.js'\nimport type { OneOf } from './internal/types.js'\n\n/**\n * A Transaction as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/main/src/schemas/transaction.yaml).\n */\nexport type Transaction<\n  pending extends boolean = false,\n  bigintType = bigint,\n  numberType = number,\n> = UnionCompute<\n  OneOf<\n    | Legacy<pending, bigintType, numberType>\n    | Eip1559<pending, bigintType, numberType>\n    | Eip2930<pending, bigintType, numberType>\n    | Eip4844<pending, bigintType, numberType>\n    | Eip7702<pending, bigintType, numberType>\n    | (Base & { type: Hex.Hex })\n  >\n>\n\n/**\n * An RPC Transaction as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/main/src/schemas/transaction.yaml).\n */\nexport type Rpc<pending extends boolean = false> = UnionCompute<\n  OneOf<\n    | LegacyRpc<pending>\n    | Eip1559Rpc<pending>\n    | Eip2930Rpc<pending>\n    | Eip4844Rpc<pending>\n    | Eip7702Rpc<pending>\n    | (BaseRpc & { type: Hex.Hex })\n  >\n>\n\n/** Base properties of a Transaction as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/main/src/schemas/transaction.yaml). */\nexport type Base<\n  type extends string = string,\n  pending extends boolean = false,\n  bigintType = bigint,\n  numberType = number,\n> = Compute<{\n  /** Hash of the block that contains this transaction, or `null` if pending. */\n  blockHash: pending extends true ? null : Hex.Hex\n  /** Number of block containing this transaction or `null` if pending */\n  blockNumber: pending extends true ? null : bigintType\n  /** Chain ID that this transaction is valid on. */\n  chainId: numberType\n  /** @alias `input` Added for TransactionEnvelope - Transaction compatibility. */\n  data?: Hex.Hex | undefined\n  /** Sender of this transaction */\n  from: Address.Address\n  /** Hash of this transaction */\n  hash: Hex.Hex\n  /** Contract code or a hashed method call with encoded args */\n  input: Hex.Hex\n  /** Gas provided for transaction execution */\n  gas: bigintType\n  /** Unique number identifying this transaction */\n  nonce: bigintType\n  /** Transaction recipient. `null` if the transaction is a contract creation. */\n  to: Address.Address | null\n  /** Index of this transaction in the block or `null` if pending */\n  transactionIndex: pending extends true ? null : numberType\n  /** Transaction type */\n  type: type\n  /** Value in wei sent with this transaction */\n  value: bigintType\n  /** ECDSA signature r. */\n  r: bigintType\n  /** ECDSA signature s. */\n  s: bigintType\n  /** ECDSA signature yParity. */\n  yParity: numberType\n  /** @deprecated ECDSA signature v (for backwards compatibility). */\n  v?: numberType | undefined\n}>\n\n/** Base properties of an RPC Transaction as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/main/src/schemas/transaction.yaml). */\nexport type BaseRpc<\n  type extends string = string,\n  pending extends boolean = false,\n> = Base<type, pending, Hex.Hex, Hex.Hex>\n\n/** An [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559) Transaction as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/main/src/schemas/transaction.yaml). */\nexport type Eip1559<\n  pending extends boolean = false,\n  bigintType = bigint,\n  numberType = number,\n  type extends string = 'eip1559',\n> = Compute<\n  Base<type, pending, bigintType, numberType> & {\n    /** EIP-2930 Access List. */\n    accessList: AccessList.AccessList\n    /** Effective gas price paid by the sender in wei. */\n    gasPrice?: bigintType | undefined\n    /** Total fee per gas in wei (gasPrice/baseFeePerGas + maxPriorityFeePerGas). */\n    maxFeePerGas: bigintType\n    /** Max priority fee per gas (in wei). */\n    maxPriorityFeePerGas: bigintType\n  }\n>\n\n/** An [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559) RPC Transaction as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/main/src/schemas/transaction.yaml). */\nexport type Eip1559Rpc<pending extends boolean = false> = Compute<\n  Eip1559<pending, Hex.Hex, Hex.Hex, ToRpcType['eip1559']>\n>\n\n/** An [EIP-2930](https://eips.ethereum.org/EIPS/eip-2930) Transaction as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/main/src/schemas/transaction.yaml). */\nexport type Eip2930<\n  pending extends boolean = false,\n  bigintType = bigint,\n  numberType = number,\n  type extends string = 'eip2930',\n> = Compute<\n  Base<type, pending, bigintType, numberType> & {\n    /** EIP-2930 Access List. */\n    accessList: AccessList.AccessList\n    /** The gas price willing to be paid by the sender (in wei). */\n    gasPrice: bigintType\n  }\n>\n\n/** An RPC [EIP-2930](https://eips.ethereum.org/EIPS/eip-2930) Transaction as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/main/src/schemas/transaction.yaml). */\nexport type Eip2930Rpc<pending extends boolean = false> = Compute<\n  Eip2930<pending, Hex.Hex, Hex.Hex, ToRpcType['eip2930']>\n>\n\n/** An [EIP-4844](https://eips.ethereum.org/EIPS/eip-4844) Transaction as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/main/src/schemas/transaction.yaml). */\nexport type Eip4844<\n  pending extends boolean = false,\n  bigintType = bigint,\n  numberType = number,\n  type extends string = 'eip4844',\n> = Compute<\n  Base<type, pending, bigintType, numberType> & {\n    /** EIP-2930 Access List. */\n    accessList: AccessList.AccessList\n    /** List of versioned blob hashes associated with the transaction's blobs. */\n    blobVersionedHashes: readonly Hex.Hex[]\n    /** Total fee per blob gas in wei. */\n    maxFeePerBlobGas: bigintType\n    /** Total fee per gas in wei (gasPrice/baseFeePerGas + maxPriorityFeePerGas). */\n    maxFeePerGas: bigintType\n    /** Max priority fee per gas (in wei). */\n    maxPriorityFeePerGas: bigintType\n  }\n>\n\n/** An RPC [EIP-4844](https://eips.ethereum.org/EIPS/eip-4844) Transaction as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/main/src/schemas/transaction.yaml). */\nexport type Eip4844Rpc<pending extends boolean = false> = Compute<\n  Eip4844<pending, Hex.Hex, Hex.Hex, ToRpcType['eip4844']>\n>\n\n/** An [EIP-7702](https://eips.ethereum.org/EIPS/eip-7702) Transaction as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/main/src/schemas/transaction.yaml). */\nexport type Eip7702<\n  pending extends boolean = false,\n  bigintType = bigint,\n  numberType = number,\n  type extends string = 'eip7702',\n> = Compute<\n  Base<type, pending, bigintType, numberType> & {\n    /** EIP-2930 Access List. */\n    accessList: AccessList.AccessList\n    /** EIP-7702 Authorization list for the transaction. */\n    authorizationList: Authorization.ListSigned<bigintType, numberType>\n    /** Total fee per gas in wei (gasPrice/baseFeePerGas + maxPriorityFeePerGas). */\n    maxFeePerGas: bigintType\n    /** Max priority fee per gas (in wei). */\n    maxPriorityFeePerGas: bigintType\n  }\n>\n\n/** An RPC [EIP-7702](https://eips.ethereum.org/EIPS/eip-7702) Transaction as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/main/src/schemas/transaction.yaml). */\nexport type Eip7702Rpc<pending extends boolean = false> = Compute<\n  Eip7702<pending, Hex.Hex, Hex.Hex, ToRpcType['eip7702']>\n>\n\n/** An legacy Transaction as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/main/src/schemas/transaction.yaml). */\nexport type Legacy<\n  pending extends boolean = false,\n  bigintType = bigint,\n  numberType = number,\n  type extends string = 'legacy',\n> = Compute<\n  Omit<\n    Base<type, pending, bigintType, numberType>,\n    'chainId' | 'v' | 'yParity'\n  > & {\n    chainId?: numberType | undefined\n    /** The gas price willing to be paid by the sender (in wei). */\n    gasPrice: bigintType\n    /** ECDSA signature v. */\n    v: numberType\n    /** ECDSA signature yParity. */\n    yParity?: numberType | undefined\n  }\n>\n\n/** A legacy RPC Transaction as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/main/src/schemas/transaction.yaml). */\nexport type LegacyRpc<pending extends boolean = false> = Compute<\n  Legacy<pending, Hex.Hex, Hex.Hex, ToRpcType['legacy']>\n>\n\n/** Type to RPC Type mapping. */\nexport const toRpcType = {\n  legacy: '0x0',\n  eip2930: '0x1',\n  eip1559: '0x2',\n  eip4844: '0x3',\n  eip7702: '0x4',\n} as const\n\n/** Type to RPC Type mapping. */\nexport type ToRpcType = typeof toRpcType & {\n  [type: string]: `0x${string}`\n}\n\n/** RPC Type to Type mapping. */\nexport const fromRpcType = {\n  '0x0': 'legacy',\n  '0x1': 'eip2930',\n  '0x2': 'eip1559',\n  '0x3': 'eip4844',\n  '0x4': 'eip7702',\n} as const\n\n/** RPC Type to Type mapping. */\n\nexport type FromRpcType = typeof fromRpcType & {\n  [type: `0x${string}`]: string\n}\n\n/**\n * Converts an {@link ox#Transaction.Rpc} to an {@link ox#Transaction.Transaction}.\n *\n * @example\n * ```ts twoslash\n * import { Transaction } from 'ox'\n *\n * const transaction = Transaction.fromRpc({\n *   hash: '0x353fdfc38a2f26115daadee9f5b8392ce62b84f410957967e2ed56b35338cdd0',\n *   nonce: '0x357',\n *   blockHash:\n *     '0xc350d807505fb835650f0013632c5515592987ba169bbc6626d9fc54d91f0f0b',\n *   blockNumber: '0x12f296f',\n *   transactionIndex: '0x2',\n *   from: '0x814e5e0e31016b9a7f138c76b7e7b2bb5c1ab6a6',\n *   to: '0x3fc91a3afd70395cd496c647d5a6cc9d4b2b7fad',\n *   value: '0x9b6e64a8ec60000',\n *   gas: '0x43f5d',\n *   maxFeePerGas: '0x2ca6ae494',\n *   maxPriorityFeePerGas: '0x41cc3c0',\n *   input:\n *     '0x3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000006643504700000000000000000000000000000000000000000000000000000000000000040b080604000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000009b6e64a8ec600000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000009b6e64a8ec60000000000000000000000000000000000000000000000000000019124bb5ae978c000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000c56c7a0eaa804f854b536a5f3d5f49d2ec4b12b80000000000000000000000000000000000000000000000000000000000000060000000000000000000000000c56c7a0eaa804f854b536a5f3d5f49d2ec4b12b8000000000000000000000000000000fee13a103a10d593b9ae06b3e05f2e7e1c00000000000000000000000000000000000000000000000000000000000000190000000000000000000000000000000000000000000000000000000000000060000000000000000000000000c56c7a0eaa804f854b536a5f3d5f49d2ec4b12b800000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000190240001b9872b',\n *   r: '0x635dc2033e60185bb36709c29c75d64ea51dfbd91c32ef4be198e4ceb169fb4d',\n *   s: '0x50c2667ac4c771072746acfdcf1f1483336dcca8bd2df47cd83175dbe60f0540',\n *   yParity: '0x0',\n *   chainId: '0x1',\n *   accessList: [],\n *   type: '0x2',\n * })\n * ```\n *\n * @param transaction - The RPC transaction to convert.\n * @returns An instantiated {@link ox#Transaction.Transaction}.\n */\nexport function fromRpc<\n  const transaction extends Rpc | null,\n  pending extends boolean = false,\n>(\n  transaction: transaction | Rpc<pending> | null,\n  _options: fromRpc.Options<pending> = {},\n): transaction extends Rpc<pending> ? Transaction<pending> : null {\n  if (!transaction) return null as never\n\n  const signature = Signature.extract(transaction)\n\n  const transaction_ = {\n    ...transaction,\n    ...signature,\n  } as unknown as Transaction<boolean>\n\n  transaction_.blockNumber = transaction.blockNumber\n    ? BigInt(transaction.blockNumber)\n    : null\n  transaction_.data = transaction.input\n  transaction_.gas = BigInt(transaction.gas ?? 0n)\n  transaction_.nonce = BigInt(transaction.nonce ?? 0n)\n  transaction_.transactionIndex = transaction.transactionIndex\n    ? Number(transaction.transactionIndex)\n    : null\n  transaction_.value = BigInt(transaction.value ?? 0n)\n\n  if (transaction.authorizationList)\n    transaction_.authorizationList = Authorization.fromRpcList(\n      transaction.authorizationList,\n    )\n  if (transaction.chainId) transaction_.chainId = Number(transaction.chainId)\n  if (transaction.gasPrice) transaction_.gasPrice = BigInt(transaction.gasPrice)\n  if (transaction.maxFeePerBlobGas)\n    transaction_.maxFeePerBlobGas = BigInt(transaction.maxFeePerBlobGas)\n  if (transaction.maxFeePerGas)\n    transaction_.maxFeePerGas = BigInt(transaction.maxFeePerGas)\n  if (transaction.maxPriorityFeePerGas)\n    transaction_.maxPriorityFeePerGas = BigInt(transaction.maxPriorityFeePerGas)\n  if (transaction.type)\n    transaction_.type =\n      (fromRpcType as any)[transaction.type] ?? transaction.type\n  if (signature) transaction_.v = Signature.yParityToV(signature.yParity)\n\n  return transaction_ as never\n}\n\nexport declare namespace fromRpc {\n  type Options<pending extends boolean = false> = {\n    pending?: pending | boolean | undefined\n  }\n\n  type ErrorType = Signature.extract.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Converts an {@link ox#Transaction.Transaction} to an {@link ox#Transaction.Rpc}.\n *\n * @example\n * ```ts twoslash\n * import { Transaction } from 'ox'\n *\n * const transaction = Transaction.toRpc({\n *   accessList: [],\n *   blockHash:\n *     '0xc350d807505fb835650f0013632c5515592987ba169bbc6626d9fc54d91f0f0b',\n *   blockNumber: 19868015n,\n *   chainId: 1,\n *   from: '0x814e5e0e31016b9a7f138c76b7e7b2bb5c1ab6a6',\n *   gas: 278365n,\n *   hash: '0x353fdfc38a2f26115daadee9f5b8392ce62b84f410957967e2ed56b35338cdd0',\n *   input:\n *     '0x3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000006643504700000000000000000000000000000000000000000000000000000000000000040b080604000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000009b6e64a8ec600000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000009b6e64a8ec60000000000000000000000000000000000000000000000000000019124bb5ae978c000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000c56c7a0eaa804f854b536a5f3d5f49d2ec4b12b80000000000000000000000000000000000000000000000000000000000000060000000000000000000000000c56c7a0eaa804f854b536a5f3d5f49d2ec4b12b8000000000000000000000000000000fee13a103a10d593b9ae06b3e05f2e7e1c00000000000000000000000000000000000000000000000000000000000000190000000000000000000000000000000000000000000000000000000000000060000000000000000000000000c56c7a0eaa804f854b536a5f3d5f49d2ec4b12b800000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000190240001b9872b',\n *   maxFeePerGas: 11985937556n,\n *   maxPriorityFeePerGas: 68993984n,\n *   nonce: 855n,\n *   r: 44944627813007772897391531230081695102703289123332187696115181104739239197517n,\n *   s: 36528503505192438307355164441104001310566505351980369085208178712678799181120n,\n *   to: '0x3fc91a3afd70395cd496c647d5a6cc9d4b2b7fad',\n *   transactionIndex: 2,\n *   type: 'eip1559',\n *   v: 27,\n *   value: 700000000000000000n,\n *   yParity: 0,\n * })\n * ```\n *\n * @param transaction - The transaction to convert.\n * @returns An RPC-formatted transaction.\n */\nexport function toRpc<pending extends boolean = false>(\n  transaction: Transaction<pending>,\n  _options?: toRpc.Options<pending>,\n): Rpc<pending> {\n  const rpc = {} as Rpc<boolean>\n\n  rpc.blockHash = transaction.blockHash\n  rpc.blockNumber =\n    typeof transaction.blockNumber === 'bigint'\n      ? Hex.fromNumber(transaction.blockNumber)\n      : null\n  rpc.from = transaction.from\n  rpc.gas = Hex.fromNumber(transaction.gas ?? 0n)\n  rpc.hash = transaction.hash\n  rpc.input = transaction.input\n  rpc.nonce = Hex.fromNumber(transaction.nonce ?? 0n)\n  rpc.to = transaction.to\n  rpc.transactionIndex = transaction.transactionIndex\n    ? Hex.fromNumber(transaction.transactionIndex)\n    : null\n  rpc.type = (toRpcType as any)[transaction.type] ?? transaction.type\n  rpc.value = Hex.fromNumber(transaction.value ?? 0n)\n\n  if (transaction.accessList) rpc.accessList = transaction.accessList\n  if (transaction.authorizationList)\n    rpc.authorizationList = Authorization.toRpcList(\n      transaction.authorizationList,\n    )\n  if (transaction.blobVersionedHashes)\n    rpc.blobVersionedHashes = transaction.blobVersionedHashes\n  if (transaction.chainId) rpc.chainId = Hex.fromNumber(transaction.chainId)\n  if (typeof transaction.gasPrice === 'bigint')\n    rpc.gasPrice = Hex.fromNumber(transaction.gasPrice)\n  if (typeof transaction.maxFeePerBlobGas === 'bigint')\n    rpc.maxFeePerBlobGas = Hex.fromNumber(transaction.maxFeePerBlobGas)\n  if (typeof transaction.maxFeePerGas === 'bigint')\n    rpc.maxFeePerGas = Hex.fromNumber(transaction.maxFeePerGas)\n  if (typeof transaction.maxPriorityFeePerGas === 'bigint')\n    rpc.maxPriorityFeePerGas = Hex.fromNumber(transaction.maxPriorityFeePerGas)\n  if (typeof transaction.r === 'bigint')\n    rpc.r = Hex.fromNumber(transaction.r, { size: 32 })\n  if (typeof transaction.s === 'bigint')\n    rpc.s = Hex.fromNumber(transaction.s, { size: 32 })\n  if (typeof transaction.v === 'number')\n    rpc.v = Hex.fromNumber(transaction.v, { size: 1 })\n  if (typeof transaction.yParity === 'number')\n    rpc.yParity = transaction.yParity === 0 ? '0x0' : '0x1'\n\n  return rpc as Rpc<pending>\n}\n\nexport declare namespace toRpc {\n  type Options<pending extends boolean = false> = {\n    pending?: pending | boolean | undefined\n  }\n\n  type ErrorType = Signature.extract.ErrorType | Errors.GlobalErrorType\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}