{"ast":null,"code":"import { hashTypedData } from '../../utils/signature/hashTypedData.js';\nimport { sign } from './sign.js';\n/**\n * @description Signs typed data and calculates an Ethereum-specific signature in [EIP-191 format](https://eips.ethereum.org/EIPS/eip-191):\n * `keccak256(\"\\x19Ethereum Signed Message:\\n\" + len(message) + message))`.\n *\n * @returns The signature.\n */\nexport async function signTypedData(parameters) {\n  const {\n    privateKey,\n    ...typedData\n  } = parameters;\n  return await sign({\n    hash: hashTypedData(typedData),\n    privateKey,\n    to: 'hex'\n  });\n}","map":{"version":3,"names":["hashTypedData","sign","signTypedData","parameters","privateKey","typedData","hash","to"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/viem/accounts/utils/signTypedData.ts"],"sourcesContent":["import type { TypedData } from 'abitype'\n\nimport type { Hex } from '../../types/misc.js'\nimport type { TypedDataDefinition } from '../../types/typedData.js'\nimport {\n  type HashTypedDataErrorType,\n  hashTypedData,\n} from '../../utils/signature/hashTypedData.js'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport { type SignErrorType, sign } from './sign.js'\n\nexport type SignTypedDataParameters<\n  typedData extends TypedData | Record<string, unknown> = TypedData,\n  primaryType extends keyof typedData | 'EIP712Domain' = keyof typedData,\n> = TypedDataDefinition<typedData, primaryType> & {\n  /** The private key to sign with. */\n  privateKey: Hex\n}\n\nexport type SignTypedDataReturnType = Hex\n\nexport type SignTypedDataErrorType =\n  | HashTypedDataErrorType\n  | SignErrorType\n  | ErrorType\n\n/**\n * @description Signs typed data and calculates an Ethereum-specific signature in [EIP-191 format](https://eips.ethereum.org/EIPS/eip-191):\n * `keccak256(\"\\x19Ethereum Signed Message:\\n\" + len(message) + message))`.\n *\n * @returns The signature.\n */\nexport async function signTypedData<\n  const typedData extends TypedData | Record<string, unknown>,\n  primaryType extends keyof typedData | 'EIP712Domain',\n>(\n  parameters: SignTypedDataParameters<typedData, primaryType>,\n): Promise<SignTypedDataReturnType> {\n  const { privateKey, ...typedData } =\n    parameters as unknown as SignTypedDataParameters\n  return await sign({\n    hash: hashTypedData(typedData),\n    privateKey,\n    to: 'hex',\n  })\n}\n"],"mappings":"AAIA,SAEEA,aAAa,QACR,wCAAwC;AAG/C,SAA6BC,IAAI,QAAQ,WAAW;AAiBpD;;;;;;AAMA,OAAO,eAAeC,aAAaA,CAIjCC,UAA2D;EAE3D,MAAM;IAAEC,UAAU;IAAE,GAAGC;EAAS,CAAE,GAChCF,UAAgD;EAClD,OAAO,MAAMF,IAAI,CAAC;IAChBK,IAAI,EAAEN,aAAa,CAACK,SAAS,CAAC;IAC9BD,UAAU;IACVG,EAAE,EAAE;GACL,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}