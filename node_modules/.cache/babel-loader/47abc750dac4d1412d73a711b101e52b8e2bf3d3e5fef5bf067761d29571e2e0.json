{"ast":null,"code":"import { ContractFunctionExecutionError, formatUnits, hexToString, trim } from 'viem';\nimport { getUnit } from '../utils/getUnit.js';\nimport { readContracts } from './readContracts.js';\n/** @deprecated */\nexport async function getToken(config, parameters) {\n  const {\n    address,\n    chainId,\n    formatUnits: unit = 18\n  } = parameters;\n  function getAbi(type) {\n    return [{\n      type: 'function',\n      name: 'decimals',\n      stateMutability: 'view',\n      inputs: [],\n      outputs: [{\n        type: 'uint8'\n      }]\n    }, {\n      type: 'function',\n      name: 'name',\n      stateMutability: 'view',\n      inputs: [],\n      outputs: [{\n        type\n      }]\n    }, {\n      type: 'function',\n      name: 'symbol',\n      stateMutability: 'view',\n      inputs: [],\n      outputs: [{\n        type\n      }]\n    }, {\n      type: 'function',\n      name: 'totalSupply',\n      stateMutability: 'view',\n      inputs: [],\n      outputs: [{\n        type: 'uint256'\n      }]\n    }];\n  }\n  try {\n    const abi = getAbi('string');\n    const contractConfig = {\n      address,\n      abi,\n      chainId\n    };\n    const [decimals, name, symbol, totalSupply] = await readContracts(config, {\n      allowFailure: true,\n      contracts: [{\n        ...contractConfig,\n        functionName: 'decimals'\n      }, {\n        ...contractConfig,\n        functionName: 'name'\n      }, {\n        ...contractConfig,\n        functionName: 'symbol'\n      }, {\n        ...contractConfig,\n        functionName: 'totalSupply'\n      }]\n    });\n    // throw if `name` or `symbol` failed\n    if (name.error instanceof ContractFunctionExecutionError) throw name.error;\n    if (symbol.error instanceof ContractFunctionExecutionError) throw symbol.error;\n    // `decimals` and `totalSupply` are required\n    if (decimals.error) throw decimals.error;\n    if (totalSupply.error) throw totalSupply.error;\n    return {\n      address,\n      decimals: decimals.result,\n      name: name.result,\n      symbol: symbol.result,\n      totalSupply: {\n        formatted: formatUnits(totalSupply.result, getUnit(unit)),\n        value: totalSupply.result\n      }\n    };\n  } catch (error) {\n    // In the chance that there is an error upon decoding the contract result,\n    // it could be likely that the contract data is represented as bytes32 instead\n    // of a string.\n    if (error instanceof ContractFunctionExecutionError) {\n      const abi = getAbi('bytes32');\n      const contractConfig = {\n        address,\n        abi,\n        chainId\n      };\n      const [decimals, name, symbol, totalSupply] = await readContracts(config, {\n        allowFailure: false,\n        contracts: [{\n          ...contractConfig,\n          functionName: 'decimals'\n        }, {\n          ...contractConfig,\n          functionName: 'name'\n        }, {\n          ...contractConfig,\n          functionName: 'symbol'\n        }, {\n          ...contractConfig,\n          functionName: 'totalSupply'\n        }]\n      });\n      return {\n        address,\n        decimals,\n        name: hexToString(trim(name, {\n          dir: 'right'\n        })),\n        symbol: hexToString(trim(symbol, {\n          dir: 'right'\n        })),\n        totalSupply: {\n          formatted: formatUnits(totalSupply, getUnit(unit)),\n          value: totalSupply\n        }\n      };\n    }\n    throw error;\n  }\n}","map":{"version":3,"names":["ContractFunctionExecutionError","formatUnits","hexToString","trim","getUnit","readContracts","getToken","config","parameters","address","chainId","unit","getAbi","type","name","stateMutability","inputs","outputs","abi","contractConfig","decimals","symbol","totalSupply","allowFailure","contracts","functionName","error","result","formatted","value","dir"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/@wagmi/core/src/actions/getToken.ts"],"sourcesContent":["import type { Address, Hex } from 'viem'\nimport {\n  ContractFunctionExecutionError,\n  formatUnits,\n  hexToString,\n  trim,\n} from 'viem'\n\nimport type { Config } from '../createConfig.js'\nimport type { ChainIdParameter } from '../types/properties.js'\nimport type { Unit } from '../types/unit.js'\nimport type { Compute } from '../types/utils.js'\nimport { getUnit } from '../utils/getUnit.js'\nimport { type ReadContractsErrorType, readContracts } from './readContracts.js'\n\nexport type GetTokenParameters<config extends Config = Config> = Compute<\n  ChainIdParameter<config> & {\n    address: Address\n    formatUnits?: Unit | undefined\n  }\n>\n\nexport type GetTokenReturnType = {\n  address: Address\n  decimals: number\n  name: string | undefined\n  symbol: string | undefined\n  totalSupply: {\n    formatted: string\n    value: bigint\n  }\n}\n\nexport type GetTokenErrorType = ReadContractsErrorType\n\n/** @deprecated */\nexport async function getToken<config extends Config>(\n  config: config,\n  parameters: GetTokenParameters<config>,\n): Promise<GetTokenReturnType> {\n  const { address, chainId, formatUnits: unit = 18 } = parameters\n\n  function getAbi<type extends 'bytes32' | 'string'>(type: type) {\n    return [\n      {\n        type: 'function',\n        name: 'decimals',\n        stateMutability: 'view',\n        inputs: [],\n        outputs: [{ type: 'uint8' }],\n      },\n      {\n        type: 'function',\n        name: 'name',\n        stateMutability: 'view',\n        inputs: [],\n        outputs: [{ type }],\n      },\n      {\n        type: 'function',\n        name: 'symbol',\n        stateMutability: 'view',\n        inputs: [],\n        outputs: [{ type }],\n      },\n      {\n        type: 'function',\n        name: 'totalSupply',\n        stateMutability: 'view',\n        inputs: [],\n        outputs: [{ type: 'uint256' }],\n      },\n    ] as const\n  }\n\n  try {\n    const abi = getAbi('string')\n    const contractConfig = { address, abi, chainId } as const\n    const [decimals, name, symbol, totalSupply] = await readContracts(config, {\n      allowFailure: true,\n      contracts: [\n        { ...contractConfig, functionName: 'decimals' },\n        { ...contractConfig, functionName: 'name' },\n        { ...contractConfig, functionName: 'symbol' },\n        { ...contractConfig, functionName: 'totalSupply' },\n      ] as const,\n    })\n\n    // throw if `name` or `symbol` failed\n    if (name.error instanceof ContractFunctionExecutionError) throw name.error\n    if (symbol.error instanceof ContractFunctionExecutionError)\n      throw symbol.error\n\n    // `decimals` and `totalSupply` are required\n    if (decimals.error) throw decimals.error\n    if (totalSupply.error) throw totalSupply.error\n\n    return {\n      address,\n      decimals: decimals.result,\n      name: name.result,\n      symbol: symbol.result,\n      totalSupply: {\n        formatted: formatUnits(totalSupply.result!, getUnit(unit)),\n        value: totalSupply.result,\n      },\n    }\n  } catch (error) {\n    // In the chance that there is an error upon decoding the contract result,\n    // it could be likely that the contract data is represented as bytes32 instead\n    // of a string.\n    if (error instanceof ContractFunctionExecutionError) {\n      const abi = getAbi('bytes32')\n      const contractConfig = { address, abi, chainId } as const\n      const [decimals, name, symbol, totalSupply] = await readContracts(\n        config,\n        {\n          allowFailure: false,\n          contracts: [\n            { ...contractConfig, functionName: 'decimals' },\n            { ...contractConfig, functionName: 'name' },\n            { ...contractConfig, functionName: 'symbol' },\n            { ...contractConfig, functionName: 'totalSupply' },\n          ] as const,\n        },\n      )\n      return {\n        address,\n        decimals,\n        name: hexToString(trim(name as Hex, { dir: 'right' })),\n        symbol: hexToString(trim(symbol as Hex, { dir: 'right' })),\n        totalSupply: {\n          formatted: formatUnits(totalSupply, getUnit(unit)),\n          value: totalSupply,\n        },\n      }\n    }\n\n    throw error\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}