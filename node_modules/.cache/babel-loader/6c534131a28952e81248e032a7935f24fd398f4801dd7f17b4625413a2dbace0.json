{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SubscribeBlockTracker = void 0;\nconst json_rpc_random_id_1 = __importDefault(require(\"json-rpc-random-id\"));\nconst BaseBlockTracker_1 = require(\"./BaseBlockTracker\");\nconst createRandomId = (0, json_rpc_random_id_1.default)();\nclass SubscribeBlockTracker extends BaseBlockTracker_1.BaseBlockTracker {\n  constructor(opts = {}) {\n    // parse + validate args\n    if (!opts.provider) {\n      throw new Error('SubscribeBlockTracker - no provider specified.');\n    }\n    // BaseBlockTracker constructor\n    super(opts);\n    // config\n    this._provider = opts.provider;\n    this._subscriptionId = null;\n  }\n  async checkForLatestBlock() {\n    return await this.getLatestBlock();\n  }\n  async _start() {\n    if (this._subscriptionId === undefined || this._subscriptionId === null) {\n      try {\n        const blockNumber = await this._call('eth_blockNumber');\n        this._subscriptionId = await this._call('eth_subscribe', 'newHeads');\n        this._provider.on('data', this._handleSubData.bind(this));\n        this._newPotentialLatest(blockNumber);\n      } catch (e) {\n        this.emit('error', e);\n      }\n    }\n  }\n  async _end() {\n    if (this._subscriptionId !== null && this._subscriptionId !== undefined) {\n      try {\n        await this._call('eth_unsubscribe', this._subscriptionId);\n        this._subscriptionId = null;\n      } catch (e) {\n        this.emit('error', e);\n      }\n    }\n  }\n  _call(method, ...params) {\n    return new Promise((resolve, reject) => {\n      this._provider.sendAsync({\n        id: createRandomId(),\n        method,\n        params,\n        jsonrpc: '2.0'\n      }, (err, res) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(res.result);\n        }\n      });\n    });\n  }\n  _handleSubData(_, response) {\n    var _a;\n    if (response.method === 'eth_subscription' && ((_a = response.params) === null || _a === void 0 ? void 0 : _a.subscription) === this._subscriptionId) {\n      this._newPotentialLatest(response.params.result.number);\n    }\n  }\n}\nexports.SubscribeBlockTracker = SubscribeBlockTracker;","map":{"version":3,"names":["json_rpc_random_id_1","__importDefault","require","BaseBlockTracker_1","createRandomId","default","SubscribeBlockTracker","BaseBlockTracker","constructor","opts","provider","Error","_provider","_subscriptionId","checkForLatestBlock","getLatestBlock","_start","undefined","blockNumber","_call","on","_handleSubData","bind","_newPotentialLatest","e","emit","_end","method","params","Promise","resolve","reject","sendAsync","id","jsonrpc","err","res","result","_","response","_a","subscription","number","exports"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/eth-block-tracker/src/SubscribeBlockTracker.ts"],"sourcesContent":["import getCreateRandomId from 'json-rpc-random-id';\nimport { JsonRpcNotification, JsonRpcSuccess } from 'json-rpc-engine';\nimport type { SafeEventEmitterProvider } from '@metamask/eth-json-rpc-provider';\nimport { BaseBlockTracker } from './BaseBlockTracker';\n\nconst createRandomId = getCreateRandomId();\n\nexport interface SubscribeBlockTrackerOptions {\n  provider?: SafeEventEmitterProvider;\n  blockResetDuration?: number;\n  usePastBlocks?: boolean;\n}\n\ninterface SubscriptionNotificationParams {\n  subscription: string;\n  result: { number: string };\n}\n\nexport class SubscribeBlockTracker extends BaseBlockTracker {\n  private _provider: SafeEventEmitterProvider;\n\n  private _subscriptionId: string | null;\n\n  constructor(opts: SubscribeBlockTrackerOptions = {}) {\n    // parse + validate args\n    if (!opts.provider) {\n      throw new Error('SubscribeBlockTracker - no provider specified.');\n    }\n\n    // BaseBlockTracker constructor\n    super(opts);\n    // config\n    this._provider = opts.provider;\n    this._subscriptionId = null;\n  }\n\n  async checkForLatestBlock(): Promise<string> {\n    return await this.getLatestBlock();\n  }\n\n  protected async _start(): Promise<void> {\n    if (this._subscriptionId === undefined || this._subscriptionId === null) {\n      try {\n        const blockNumber = (await this._call('eth_blockNumber')) as string;\n        this._subscriptionId = (await this._call(\n          'eth_subscribe',\n          'newHeads',\n        )) as string;\n        this._provider.on('data', this._handleSubData.bind(this));\n        this._newPotentialLatest(blockNumber);\n      } catch (e) {\n        this.emit('error', e);\n      }\n    }\n  }\n\n  protected async _end() {\n    if (this._subscriptionId !== null && this._subscriptionId !== undefined) {\n      try {\n        await this._call('eth_unsubscribe', this._subscriptionId);\n        this._subscriptionId = null;\n      } catch (e) {\n        this.emit('error', e);\n      }\n    }\n  }\n\n  private _call(method: string, ...params: unknown[]): Promise<unknown> {\n    return new Promise((resolve, reject) => {\n      this._provider.sendAsync(\n        {\n          id: createRandomId(),\n          method,\n          params,\n          jsonrpc: '2.0',\n        },\n        (err, res) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve((res as JsonRpcSuccess<unknown>).result);\n          }\n        },\n      );\n    });\n  }\n\n  private _handleSubData(\n    _: unknown,\n    response: JsonRpcNotification<SubscriptionNotificationParams>,\n  ): void {\n    if (\n      response.method === 'eth_subscription' &&\n      response.params?.subscription === this._subscriptionId\n    ) {\n      this._newPotentialLatest(response.params.result.number);\n    }\n  }\n}\n"],"mappings":";;;;;;;;;;;AAAA,MAAAA,oBAAA,GAAAC,eAAA,CAAAC,OAAA;AAGA,MAAAC,kBAAA,GAAAD,OAAA;AAEA,MAAME,cAAc,GAAG,IAAAJ,oBAAA,CAAAK,OAAiB,GAAE;AAa1C,MAAaC,qBAAsB,SAAQH,kBAAA,CAAAI,gBAAgB;EAKzDC,YAAYC,IAAA,GAAqC,EAAE;IACjD;IACA,IAAI,CAACA,IAAI,CAACC,QAAQ,EAAE;MAClB,MAAM,IAAIC,KAAK,CAAC,gDAAgD,CAAC;;IAGnE;IACA,KAAK,CAACF,IAAI,CAAC;IACX;IACA,IAAI,CAACG,SAAS,GAAGH,IAAI,CAACC,QAAQ;IAC9B,IAAI,CAACG,eAAe,GAAG,IAAI;EAC7B;EAEA,MAAMC,mBAAmBA,CAAA;IACvB,OAAO,MAAM,IAAI,CAACC,cAAc,EAAE;EACpC;EAEU,MAAMC,MAAMA,CAAA;IACpB,IAAI,IAAI,CAACH,eAAe,KAAKI,SAAS,IAAI,IAAI,CAACJ,eAAe,KAAK,IAAI,EAAE;MACvE,IAAI;QACF,MAAMK,WAAW,GAAI,MAAM,IAAI,CAACC,KAAK,CAAC,iBAAiB,CAAY;QACnE,IAAI,CAACN,eAAe,GAAI,MAAM,IAAI,CAACM,KAAK,CACtC,eAAe,EACf,UAAU,CACA;QACZ,IAAI,CAACP,SAAS,CAACQ,EAAE,CAAC,MAAM,EAAE,IAAI,CAACC,cAAc,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;QACzD,IAAI,CAACC,mBAAmB,CAACL,WAAW,CAAC;OACtC,CAAC,OAAOM,CAAC,EAAE;QACV,IAAI,CAACC,IAAI,CAAC,OAAO,EAAED,CAAC,CAAC;;;EAG3B;EAEU,MAAME,IAAIA,CAAA;IAClB,IAAI,IAAI,CAACb,eAAe,KAAK,IAAI,IAAI,IAAI,CAACA,eAAe,KAAKI,SAAS,EAAE;MACvE,IAAI;QACF,MAAM,IAAI,CAACE,KAAK,CAAC,iBAAiB,EAAE,IAAI,CAACN,eAAe,CAAC;QACzD,IAAI,CAACA,eAAe,GAAG,IAAI;OAC5B,CAAC,OAAOW,CAAC,EAAE;QACV,IAAI,CAACC,IAAI,CAAC,OAAO,EAAED,CAAC,CAAC;;;EAG3B;EAEQL,KAAKA,CAACQ,MAAc,EAAE,GAAGC,MAAiB;IAChD,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;MACrC,IAAI,CAACnB,SAAS,CAACoB,SAAS,CACtB;QACEC,EAAE,EAAE7B,cAAc,EAAE;QACpBuB,MAAM;QACNC,MAAM;QACNM,OAAO,EAAE;OACV,EACD,CAACC,GAAG,EAAEC,GAAG,KAAI;QACX,IAAID,GAAG,EAAE;UACPJ,MAAM,CAACI,GAAG,CAAC;SACZ,MAAM;UACLL,OAAO,CAAEM,GAA+B,CAACC,MAAM,CAAC;;MAEpD,CAAC,CACF;IACH,CAAC,CAAC;EACJ;EAEQhB,cAAcA,CACpBiB,CAAU,EACVC,QAA6D;;IAE7D,IACEA,QAAQ,CAACZ,MAAM,KAAK,kBAAkB,IACtC,EAAAa,EAAA,GAAAD,QAAQ,CAACX,MAAM,cAAAY,EAAA,uBAAAA,EAAA,CAAEC,YAAY,MAAK,IAAI,CAAC5B,eAAe,EACtD;MACA,IAAI,CAACU,mBAAmB,CAACgB,QAAQ,CAACX,MAAM,CAACS,MAAM,CAACK,MAAM,CAAC;;EAE3D;;AA/EFC,OAAA,CAAArC,qBAAA,GAAAA,qBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}