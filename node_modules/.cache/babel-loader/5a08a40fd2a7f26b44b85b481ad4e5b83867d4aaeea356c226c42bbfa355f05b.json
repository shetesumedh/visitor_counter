{"ast":null,"code":"import { requestAddresses } from '../../../actions/wallet/requestAddresses.js';\nimport { numberToHex } from '../../../utils/encoding/toHex.js';\n/**\n * Requests to connect account(s) with optional capabilities.\n *\n * - Docs: https://viem.sh/experimental/erc7846/connect\n * - JSON-RPC Methods: [`wallet_connect`](https://github.com/ethereum/ERCs/blob/abd1c9f4eda2d6ad06ade0e3af314637a27d1ee7/ERCS/erc-7846.md)\n *\n * @param client - Client to use\n * @param parameters - {@link ConnectParameters}\n * @returns List of accounts managed by a wallet {@link ConnectReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { connect } from 'viem/experimental/erc7846'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const response = await connect(client)\n */\nexport async function connect(client, parameters = {}) {\n  const capabilities = formatRequestCapabilities(parameters.capabilities);\n  const response = await (async () => {\n    try {\n      return await client.request({\n        method: 'wallet_connect',\n        params: [{\n          capabilities,\n          version: '1'\n        }]\n      }, {\n        dedupe: true,\n        retryCount: 0\n      });\n    } catch (e) {\n      const error = e;\n      // If the wallet does not support `wallet_connect`, and has no\n      // capabilities, attempt to use `eth_requestAccounts` instead.\n      if (!parameters.capabilities && (error.name === 'InvalidInputRpcError' || error.name === 'InvalidParamsRpcError' || error.name === 'MethodNotFoundRpcError' || error.name === 'MethodNotSupportedRpcError' || error.name === 'UnsupportedProviderMethodError')) {\n        const addresses = await requestAddresses(client);\n        return {\n          accounts: addresses.map(address => ({\n            address,\n            capabilities: {}\n          }))\n        };\n      }\n      throw error;\n    }\n  })();\n  return {\n    ...response,\n    accounts: (response.accounts ?? []).map(account => ({\n      ...account,\n      capabilities: formatResponseCapabilities(account.capabilities)\n    }))\n  };\n}\nfunction formatRequestCapabilities(capabilities) {\n  const {\n    unstable_addSubAccount,\n    unstable_getSubAccounts: getSubAccounts,\n    unstable_signInWithEthereum,\n    ...rest\n  } = capabilities ?? {};\n  const addSubAccount = unstable_addSubAccount ? {\n    ...unstable_addSubAccount,\n    account: {\n      ...unstable_addSubAccount.account,\n      ...(unstable_addSubAccount.account.chainId ? {\n        chainId: numberToHex(unstable_addSubAccount.account.chainId)\n      } : {})\n    }\n  } : undefined;\n  const {\n    chainId,\n    expirationTime,\n    issuedAt,\n    notBefore\n  } = unstable_signInWithEthereum ?? {};\n  const signInWithEthereum = unstable_signInWithEthereum ? {\n    ...unstable_signInWithEthereum,\n    chainId: numberToHex(chainId),\n    ...(expirationTime ? {\n      expirationTime: expirationTime.toISOString()\n    } : {}),\n    ...(issuedAt ? {\n      issuedAt: issuedAt.toISOString()\n    } : {}),\n    ...(notBefore ? {\n      notBefore: notBefore.toISOString()\n    } : {})\n  } : undefined;\n  return {\n    ...rest,\n    ...(addSubAccount ? {\n      addSubAccount\n    } : {}),\n    ...(getSubAccounts ? {\n      getSubAccounts\n    } : {}),\n    ...(signInWithEthereum ? {\n      signInWithEthereum\n    } : {})\n  };\n}\nfunction formatResponseCapabilities(capabilities) {\n  return Object.entries(capabilities ?? {}).reduce((capabilities, [key, value]) => {\n    const k = (() => {\n      if (key === 'signInWithEthereum') return 'unstable_signInWithEthereum';\n      if (key === 'subAccounts') return 'unstable_subAccounts';\n      return key;\n    })();\n    capabilities[k] = value;\n    return capabilities;\n  }, {});\n}","map":{"version":3,"names":["requestAddresses","numberToHex","connect","client","parameters","capabilities","formatRequestCapabilities","response","request","method","params","version","dedupe","retryCount","e","error","name","addresses","accounts","map","address","account","formatResponseCapabilities","unstable_addSubAccount","unstable_getSubAccounts","getSubAccounts","unstable_signInWithEthereum","rest","addSubAccount","chainId","undefined","expirationTime","issuedAt","notBefore","signInWithEthereum","toISOString","Object","entries","reduce","key","value","k"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/viem/experimental/erc7846/actions/connect.ts"],"sourcesContent":["import type { Address } from 'abitype'\nimport {\n  type RequestAddressesErrorType,\n  requestAddresses,\n} from '../../../actions/wallet/requestAddresses.js'\nimport type { Client } from '../../../clients/createClient.js'\nimport type { Transport } from '../../../clients/transports/createTransport.js'\nimport type { BaseError } from '../../../errors/base.js'\nimport type { ExtractCapabilities } from '../../../types/capabilities.js'\nimport type { Chain } from '../../../types/chain.js'\nimport type { Prettify } from '../../../types/utils.js'\nimport type { RequestErrorType } from '../../../utils/buildRequest.js'\nimport { numberToHex } from '../../../utils/encoding/toHex.js'\n\nexport type ConnectParameters = Prettify<{\n  capabilities?: ExtractCapabilities<'connect', 'Request'> | undefined\n}>\n\nexport type ConnectReturnType = Prettify<{\n  accounts: readonly {\n    address: Address\n    capabilities?: ExtractCapabilities<'connect', 'ReturnType'> | undefined\n  }[]\n}>\n\nexport type ConnectErrorType = RequestErrorType | RequestAddressesErrorType\n\n/**\n * Requests to connect account(s) with optional capabilities.\n *\n * - Docs: https://viem.sh/experimental/erc7846/connect\n * - JSON-RPC Methods: [`wallet_connect`](https://github.com/ethereum/ERCs/blob/abd1c9f4eda2d6ad06ade0e3af314637a27d1ee7/ERCS/erc-7846.md)\n *\n * @param client - Client to use\n * @param parameters - {@link ConnectParameters}\n * @returns List of accounts managed by a wallet {@link ConnectReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { connect } from 'viem/experimental/erc7846'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const response = await connect(client)\n */\nexport async function connect<chain extends Chain | undefined>(\n  client: Client<Transport, chain>,\n  parameters: ConnectParameters = {},\n): Promise<ConnectReturnType> {\n  const capabilities = formatRequestCapabilities(parameters.capabilities)\n\n  const response = await (async () => {\n    try {\n      return await client.request(\n        { method: 'wallet_connect', params: [{ capabilities, version: '1' }] },\n        { dedupe: true, retryCount: 0 },\n      )\n    } catch (e) {\n      const error = e as BaseError\n\n      // If the wallet does not support `wallet_connect`, and has no\n      // capabilities, attempt to use `eth_requestAccounts` instead.\n      if (\n        !parameters.capabilities &&\n        (error.name === 'InvalidInputRpcError' ||\n          error.name === 'InvalidParamsRpcError' ||\n          error.name === 'MethodNotFoundRpcError' ||\n          error.name === 'MethodNotSupportedRpcError' ||\n          error.name === 'UnsupportedProviderMethodError')\n      ) {\n        const addresses = await requestAddresses(client)\n        return {\n          accounts: addresses.map((address) => ({\n            address,\n            capabilities: {},\n          })),\n        }\n      }\n\n      throw error\n    }\n  })()\n\n  return {\n    ...response,\n    accounts: (response.accounts ?? []).map((account) => ({\n      ...account,\n      capabilities: formatResponseCapabilities(account.capabilities),\n    })),\n  }\n}\n\nfunction formatRequestCapabilities(\n  capabilities: ExtractCapabilities<'connect', 'Request'> | undefined,\n) {\n  const {\n    unstable_addSubAccount,\n    unstable_getSubAccounts: getSubAccounts,\n    unstable_signInWithEthereum,\n    ...rest\n  } = capabilities ?? {}\n\n  const addSubAccount = unstable_addSubAccount\n    ? {\n        ...unstable_addSubAccount,\n        account: {\n          ...unstable_addSubAccount.account,\n          ...(unstable_addSubAccount.account.chainId\n            ? {\n                chainId: numberToHex(unstable_addSubAccount.account.chainId),\n              }\n            : {}),\n        },\n      }\n    : undefined\n\n  const { chainId, expirationTime, issuedAt, notBefore } =\n    unstable_signInWithEthereum ?? {}\n  const signInWithEthereum = unstable_signInWithEthereum\n    ? {\n        ...unstable_signInWithEthereum,\n        chainId: numberToHex(chainId!),\n        ...(expirationTime\n          ? {\n              expirationTime: expirationTime.toISOString(),\n            }\n          : {}),\n        ...(issuedAt\n          ? {\n              issuedAt: issuedAt.toISOString(),\n            }\n          : {}),\n        ...(notBefore\n          ? {\n              notBefore: notBefore.toISOString(),\n            }\n          : {}),\n      }\n    : undefined\n\n  return {\n    ...rest,\n    ...(addSubAccount\n      ? {\n          addSubAccount,\n        }\n      : {}),\n    ...(getSubAccounts\n      ? {\n          getSubAccounts,\n        }\n      : {}),\n    ...(signInWithEthereum\n      ? {\n          signInWithEthereum,\n        }\n      : {}),\n  }\n}\n\nfunction formatResponseCapabilities(\n  capabilities: ExtractCapabilities<'connect', 'ReturnType'> | undefined,\n) {\n  return Object.entries(capabilities ?? {}).reduce(\n    (capabilities, [key, value]) => {\n      const k = (() => {\n        if (key === 'signInWithEthereum') return 'unstable_signInWithEthereum'\n        if (key === 'subAccounts') return 'unstable_subAccounts'\n        return key\n      })()\n      capabilities[k] = value\n      return capabilities\n    },\n    {} as Record<string, unknown>,\n  )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}