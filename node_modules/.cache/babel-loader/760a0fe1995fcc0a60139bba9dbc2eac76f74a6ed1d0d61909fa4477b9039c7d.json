{"ast":null,"code":"const COOP_ERROR_MESSAGE = `Coinbase Wallet SDK requires the Cross-Origin-Opener-Policy header to not be set to 'same-origin'. This is to ensure that the SDK can communicate with the Coinbase Smart Wallet app.\n\nPlease see https://www.smartwallet.dev/guides/tips/popup-tips#cross-origin-opener-policy for more information.`;\n/**\n * Creates a checker for the Cross-Origin-Opener-Policy (COOP).\n *\n * @returns An object with methods to get and check the Cross-Origin-Opener-Policy.\n *\n * @method getCrossOriginOpenerPolicy\n * Retrieves current Cross-Origin-Opener-Policy.\n * @throws Will throw an error if the policy has not been checked yet.\n *\n * @method checkCrossOriginOpenerPolicy\n * Checks the Cross-Origin-Opener-Policy of the current environment.\n * If in a non-browser environment, sets the policy to 'non-browser-env'.\n * If in a browser environment, fetches the policy from the current origin.\n * Logs an error if the policy is 'same-origin'.\n */\nconst createCoopChecker = () => {\n  let crossOriginOpenerPolicy;\n  return {\n    getCrossOriginOpenerPolicy: () => {\n      if (crossOriginOpenerPolicy === undefined) {\n        return 'undefined';\n      }\n      return crossOriginOpenerPolicy;\n    },\n    checkCrossOriginOpenerPolicy: async () => {\n      if (typeof window === 'undefined') {\n        // Non-browser environment\n        crossOriginOpenerPolicy = 'non-browser-env';\n        return;\n      }\n      try {\n        const url = `${window.location.origin}${window.location.pathname}`;\n        const response = await fetch(url, {\n          method: 'HEAD'\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const result = response.headers.get('Cross-Origin-Opener-Policy');\n        crossOriginOpenerPolicy = result !== null && result !== void 0 ? result : 'null';\n        if (crossOriginOpenerPolicy === 'same-origin') {\n          console.error(COOP_ERROR_MESSAGE);\n        }\n      } catch (error) {\n        console.error('Error checking Cross-Origin-Opener-Policy:', error.message);\n        crossOriginOpenerPolicy = 'error';\n      }\n    }\n  };\n};\nexport const {\n  checkCrossOriginOpenerPolicy,\n  getCrossOriginOpenerPolicy\n} = createCoopChecker();","map":{"version":3,"names":["COOP_ERROR_MESSAGE","createCoopChecker","crossOriginOpenerPolicy","getCrossOriginOpenerPolicy","undefined","checkCrossOriginOpenerPolicy","window","url","location","origin","pathname","response","fetch","method","ok","Error","status","result","headers","get","console","error","message"],"sources":["../../src/util/checkCrossOriginOpenerPolicy.ts"],"sourcesContent":[null],"mappings":"AAAA,MAAMA,kBAAkB,GAAG;;+GAEoF;AAE/G;;;;;;;;;;;;;;;AAeA,MAAMC,iBAAiB,GAAGA,CAAA,KAAK;EAC7B,IAAIC,uBAA2C;EAE/C,OAAO;IACLC,0BAA0B,EAAEA,CAAA,KAAK;MAC/B,IAAID,uBAAuB,KAAKE,SAAS,EAAE;QACzC,OAAO,WAAW;MACpB;MAEA,OAAOF,uBAAuB;IAChC,CAAC;IACDG,4BAA4B,EAAE,MAAAA,CAAA,KAAW;MACvC,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE;QACjC;QACAJ,uBAAuB,GAAG,iBAAiB;QAC3C;MACF;MAEA,IAAI;QACF,MAAMK,GAAG,GAAG,GAAGD,MAAM,CAACE,QAAQ,CAACC,MAAM,GAAGH,MAAM,CAACE,QAAQ,CAACE,QAAQ,EAAE;QAClE,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACL,GAAG,EAAE;UAChCM,MAAM,EAAE;SACT,CAAC;QAEF,IAAI,CAACF,QAAQ,CAACG,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBJ,QAAQ,CAACK,MAAM,EAAE,CAAC;QAC3D;QAEA,MAAMC,MAAM,GAAGN,QAAQ,CAACO,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;QACjEjB,uBAAuB,GAAGe,MAAM,aAANA,MAAM,cAANA,MAAM,GAAI,MAAM;QAE1C,IAAIf,uBAAuB,KAAK,aAAa,EAAE;UAC7CkB,OAAO,CAACC,KAAK,CAACrB,kBAAkB,CAAC;QACnC;MACF,CAAC,CAAC,OAAOqB,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,4CAA4C,EAAGA,KAAe,CAACC,OAAO,CAAC;QACrFpB,uBAAuB,GAAG,OAAO;MACnC;IACF;GACD;AACH,CAAC;AAED,OAAO,MAAM;EAAEG,4BAA4B;EAAEF;AAA0B,CAAE,GAAGF,iBAAiB,EAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}