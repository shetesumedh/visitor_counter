{"ast":null,"code":"import { parseAbi } from 'abitype';\nimport { getCode } from '../../actions/public/getCode.js';\nimport { readContract } from '../../actions/public/readContract.js';\nimport { getAction } from '../../utils/getAction.js';\nimport { createNonceManager } from '../../utils/nonceManager.js';\nimport { serializeErc6492Signature } from '../../utils/signature/serializeErc6492Signature.js';\n/**\n * @description Creates a Smart Account with a provided account implementation.\n *\n * @param parameters - {@link ToSmartAccountParameters}\n * @returns A Smart Account. {@link ToSmartAccountReturnType}\n */\nexport async function toSmartAccount(implementation) {\n  const {\n    extend,\n    nonceKeyManager = createNonceManager({\n      source: {\n        get() {\n          return Date.now();\n        },\n        set() {}\n      }\n    }),\n    ...rest\n  } = implementation;\n  let deployed = false;\n  const address = await implementation.getAddress();\n  return {\n    ...extend,\n    ...rest,\n    address,\n    async getFactoryArgs() {\n      if ('isDeployed' in this && (await this.isDeployed())) return {\n        factory: undefined,\n        factoryData: undefined\n      };\n      return implementation.getFactoryArgs();\n    },\n    async getNonce(parameters) {\n      const key = parameters?.key ?? BigInt(await nonceKeyManager.consume({\n        address,\n        chainId: implementation.client.chain.id,\n        client: implementation.client\n      }));\n      if (implementation.getNonce) return await implementation.getNonce({\n        ...parameters,\n        key\n      });\n      const nonce = await readContract(implementation.client, {\n        abi: parseAbi(['function getNonce(address, uint192) pure returns (uint256)']),\n        address: implementation.entryPoint.address,\n        functionName: 'getNonce',\n        args: [address, key]\n      });\n      return nonce;\n    },\n    async isDeployed() {\n      if (deployed) return true;\n      const code = await getAction(implementation.client, getCode, 'getCode')({\n        address\n      });\n      deployed = Boolean(code);\n      return deployed;\n    },\n    ...(implementation.sign ? {\n      async sign(parameters) {\n        const [{\n          factory,\n          factoryData\n        }, signature] = await Promise.all([this.getFactoryArgs(), implementation.sign(parameters)]);\n        if (factory && factoryData) return serializeErc6492Signature({\n          address: factory,\n          data: factoryData,\n          signature\n        });\n        return signature;\n      }\n    } : {}),\n    async signMessage(parameters) {\n      const [{\n        factory,\n        factoryData\n      }, signature] = await Promise.all([this.getFactoryArgs(), implementation.signMessage(parameters)]);\n      if (factory && factoryData && factory !== '0x7702') return serializeErc6492Signature({\n        address: factory,\n        data: factoryData,\n        signature\n      });\n      return signature;\n    },\n    async signTypedData(parameters) {\n      const [{\n        factory,\n        factoryData\n      }, signature] = await Promise.all([this.getFactoryArgs(), implementation.signTypedData(parameters)]);\n      if (factory && factoryData && factory !== '0x7702') return serializeErc6492Signature({\n        address: factory,\n        data: factoryData,\n        signature\n      });\n      return signature;\n    },\n    type: 'smart'\n  };\n}","map":{"version":3,"names":["parseAbi","getCode","readContract","getAction","createNonceManager","serializeErc6492Signature","toSmartAccount","implementation","extend","nonceKeyManager","source","get","Date","now","set","rest","deployed","address","getAddress","getFactoryArgs","isDeployed","factory","undefined","factoryData","getNonce","parameters","key","BigInt","consume","chainId","client","chain","id","nonce","abi","entryPoint","functionName","args","code","Boolean","sign","signature","Promise","all","data","signMessage","signTypedData","type"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/viem/account-abstraction/accounts/toSmartAccount.ts"],"sourcesContent":["import { type Abi, parseAbi } from 'abitype'\n\nimport { getCode } from '../../actions/public/getCode.js'\nimport { readContract } from '../../actions/public/readContract.js'\nimport type { Prettify } from '../../types/utils.js'\nimport { getAction } from '../../utils/getAction.js'\nimport { createNonceManager } from '../../utils/nonceManager.js'\nimport { serializeErc6492Signature } from '../../utils/signature/serializeErc6492Signature.js'\nimport type { EntryPointVersion } from '../types/entryPointVersion.js'\nimport type { SmartAccount, SmartAccountImplementation } from './types.js'\n\nexport type ToSmartAccountParameters<\n  entryPointAbi extends Abi | readonly unknown[] = Abi,\n  entryPointVersion extends EntryPointVersion = EntryPointVersion,\n  extend extends object = object,\n> = SmartAccountImplementation<entryPointAbi, entryPointVersion, extend>\n\nexport type ToSmartAccountReturnType<\n  implementation extends\n    SmartAccountImplementation = SmartAccountImplementation,\n> = Prettify<SmartAccount<implementation>>\n\n/**\n * @description Creates a Smart Account with a provided account implementation.\n *\n * @param parameters - {@link ToSmartAccountParameters}\n * @returns A Smart Account. {@link ToSmartAccountReturnType}\n */\nexport async function toSmartAccount<\n  implementation extends SmartAccountImplementation,\n>(\n  implementation: implementation,\n): Promise<ToSmartAccountReturnType<implementation>> {\n  const {\n    extend,\n    nonceKeyManager = createNonceManager({\n      source: {\n        get() {\n          return Date.now()\n        },\n        set() {},\n      },\n    }),\n    ...rest\n  } = implementation\n\n  let deployed = false\n\n  const address = await implementation.getAddress()\n\n  return {\n    ...extend,\n    ...rest,\n    address,\n    async getFactoryArgs() {\n      if ('isDeployed' in this && (await this.isDeployed()))\n        return { factory: undefined, factoryData: undefined }\n      return implementation.getFactoryArgs()\n    },\n    async getNonce(parameters) {\n      const key =\n        parameters?.key ??\n        BigInt(\n          await nonceKeyManager.consume({\n            address,\n            chainId: implementation.client.chain!.id!,\n            client: implementation.client,\n          }),\n        )\n\n      if (implementation.getNonce)\n        return await implementation.getNonce({ ...parameters, key })\n\n      const nonce = await readContract(implementation.client, {\n        abi: parseAbi([\n          'function getNonce(address, uint192) pure returns (uint256)',\n        ]),\n        address: implementation.entryPoint.address,\n        functionName: 'getNonce',\n        args: [address, key],\n      })\n      return nonce\n    },\n    async isDeployed() {\n      if (deployed) return true\n      const code = await getAction(\n        implementation.client,\n        getCode,\n        'getCode',\n      )({\n        address,\n      })\n      deployed = Boolean(code)\n      return deployed\n    },\n    ...(implementation.sign\n      ? {\n          async sign(parameters) {\n            const [{ factory, factoryData }, signature] = await Promise.all([\n              this.getFactoryArgs(),\n              implementation.sign!(parameters),\n            ])\n            if (factory && factoryData)\n              return serializeErc6492Signature({\n                address: factory,\n                data: factoryData,\n                signature,\n              })\n            return signature\n          },\n        }\n      : {}),\n    async signMessage(parameters) {\n      const [{ factory, factoryData }, signature] = await Promise.all([\n        this.getFactoryArgs(),\n        implementation.signMessage(parameters),\n      ])\n      if (factory && factoryData && factory !== '0x7702')\n        return serializeErc6492Signature({\n          address: factory,\n          data: factoryData,\n          signature,\n        })\n      return signature\n    },\n    async signTypedData(parameters) {\n      const [{ factory, factoryData }, signature] = await Promise.all([\n        this.getFactoryArgs(),\n        implementation.signTypedData(parameters),\n      ])\n      if (factory && factoryData && factory !== '0x7702')\n        return serializeErc6492Signature({\n          address: factory,\n          data: factoryData,\n          signature,\n        })\n      return signature\n    },\n    type: 'smart',\n  } as ToSmartAccountReturnType<implementation>\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}