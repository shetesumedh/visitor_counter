{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isNegativeLE = void 0;\nexports.mod = mod;\nexports.pow = pow;\nexports.pow2 = pow2;\nexports.invert = invert;\nexports.tonelliShanks = tonelliShanks;\nexports.FpSqrt = FpSqrt;\nexports.validateField = validateField;\nexports.FpPow = FpPow;\nexports.FpInvertBatch = FpInvertBatch;\nexports.FpDiv = FpDiv;\nexports.FpLegendre = FpLegendre;\nexports.FpIsSquare = FpIsSquare;\nexports.nLength = nLength;\nexports.Field = Field;\nexports.FpSqrtOdd = FpSqrtOdd;\nexports.FpSqrtEven = FpSqrtEven;\nexports.hashToPrivateScalar = hashToPrivateScalar;\nexports.getFieldBytesLength = getFieldBytesLength;\nexports.getMinHashLength = getMinHashLength;\nexports.mapHashToField = mapHashToField;\n/**\n * Utils for modular division and fields.\n * Field over 11 is a finite (Galois) field is integer number operations `mod 11`.\n * There is no division: it is replaced by modular multiplicative inverse.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nconst utils_ts_1 = require(\"../utils.js\");\n// prettier-ignore\nconst _0n = BigInt(0),\n  _1n = BigInt(1),\n  _2n = /* @__PURE__ */BigInt(2),\n  _3n = /* @__PURE__ */BigInt(3);\n// prettier-ignore\nconst _4n = /* @__PURE__ */BigInt(4),\n  _5n = /* @__PURE__ */BigInt(5);\nconst _8n = /* @__PURE__ */BigInt(8);\n// Calculates a modulo b\nfunction mod(a, b) {\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\nfunction pow(num, power, modulo) {\n  return FpPow(Field(modulo), num, power);\n}\n/** Does `x^(2^power)` mod p. `pow2(30, 4)` == `30^(2^4)` */\nfunction pow2(x, power, modulo) {\n  let res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= modulo;\n  }\n  return res;\n}\n/**\n * Inverses number over modulo.\n * Implemented using [Euclidean GCD](https://brilliant.org/wiki/extended-euclidean-algorithm/).\n */\nfunction invert(number, modulo) {\n  if (number === _0n) throw new Error('invert: expected non-zero number');\n  if (modulo <= _0n) throw new Error('invert: expected positive modulus, got ' + modulo);\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n  let a = mod(number, modulo);\n  let b = modulo;\n  // prettier-ignore\n  let x = _0n,\n    y = _1n,\n    u = _1n,\n    v = _0n;\n  while (a !== _0n) {\n    // JIT applies optimization if those two lines follow each other\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    // prettier-ignore\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n// Not all roots are possible! Example which will throw:\n// const NUM =\n// n = 72057594037927816n;\n// Fp = Field(BigInt('0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab'));\nfunction sqrt3mod4(Fp, n) {\n  const p1div4 = (Fp.ORDER + _1n) / _4n;\n  const root = Fp.pow(n, p1div4);\n  // Throw if root^2 != n\n  if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n  return root;\n}\nfunction sqrt5mod8(Fp, n) {\n  const p5div8 = (Fp.ORDER - _5n) / _8n;\n  const n2 = Fp.mul(n, _2n);\n  const v = Fp.pow(n2, p5div8);\n  const nv = Fp.mul(n, v);\n  const i = Fp.mul(Fp.mul(nv, _2n), v);\n  const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n  if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n  return root;\n}\n// TODO: Commented-out for now. Provide test vectors.\n// Tonelli is too slow for extension fields Fp2.\n// That means we can't use sqrt (c1, c2...) even for initialization constants.\n// if (P % _16n === _9n) return sqrt9mod16;\n// // prettier-ignore\n// function sqrt9mod16<T>(Fp: IField<T>, n: T, p7div16?: bigint) {\n//   if (p7div16 === undefined) p7div16 = (Fp.ORDER + BigInt(7)) / _16n;\n//   const c1 = Fp.sqrt(Fp.neg(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n//   const c2 = Fp.sqrt(c1);             //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n//   const c3 = Fp.sqrt(Fp.neg(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n//   const c4 = p7div16;                 //  4. c4 = (q + 7) / 16        # Integer arithmetic\n//   let tv1 = Fp.pow(n, c4);            //  1. tv1 = x^c4\n//   let tv2 = Fp.mul(c1, tv1);          //  2. tv2 = c1 * tv1\n//   const tv3 = Fp.mul(c2, tv1);        //  3. tv3 = c2 * tv1\n//   let tv4 = Fp.mul(c3, tv1);          //  4. tv4 = c3 * tv1\n//   const e1 = Fp.eql(Fp.sqr(tv2), n);  //  5.  e1 = (tv2^2) == x\n//   const e2 = Fp.eql(Fp.sqr(tv3), n);  //  6.  e2 = (tv3^2) == x\n//   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n//   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n//   const e3 = Fp.eql(Fp.sqr(tv2), n);  //  9.  e3 = (tv2^2) == x\n//   return Fp.cmov(tv1, tv2, e3); // 10.  z = CMOV(tv1, tv2, e3) # Select the sqrt from tv1 and tv2\n// }\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nfunction tonelliShanks(P) {\n  // Initialization (precomputation).\n  // Caching initialization could boost perf by 7%.\n  if (P < BigInt(3)) throw new Error('sqrt is not defined for small field');\n  // Factor P - 1 = Q * 2^S, where Q is odd\n  let Q = P - _1n;\n  let S = 0;\n  while (Q % _2n === _0n) {\n    Q /= _2n;\n    S++;\n  }\n  // Find the first quadratic non-residue Z >= 2\n  let Z = _2n;\n  const _Fp = Field(P);\n  while (FpLegendre(_Fp, Z) === 1) {\n    // Basic primality test for P. After x iterations, chance of\n    // not finding quadratic non-residue is 2^x, so 2^1000.\n    if (Z++ > 1000) throw new Error('Cannot find square root: probably non-prime P');\n  }\n  // Fast-path; usually done before Z, but we do \"primality test\".\n  if (S === 1) return sqrt3mod4;\n  // Slow-path\n  // TODO: test on Fp2 and others\n  let cc = _Fp.pow(Z, Q); // c = z^Q\n  const Q1div2 = (Q + _1n) / _2n;\n  return function tonelliSlow(Fp, n) {\n    if (Fp.is0(n)) return n;\n    // Check if n is a quadratic residue using Legendre symbol\n    if (FpLegendre(Fp, n) !== 1) throw new Error('Cannot find square root');\n    // Initialize variables for the main loop\n    let M = S;\n    let c = Fp.mul(Fp.ONE, cc); // c = z^Q, move cc from field _Fp into field Fp\n    let t = Fp.pow(n, Q); // t = n^Q, first guess at the fudge factor\n    let R = Fp.pow(n, Q1div2); // R = n^((Q+1)/2), first guess at the square root\n    // Main loop\n    // while t != 1\n    while (!Fp.eql(t, Fp.ONE)) {\n      if (Fp.is0(t)) return Fp.ZERO; // if t=0 return R=0\n      let i = 1;\n      // Find the smallest i >= 1 such that t^(2^i) ≡ 1 (mod P)\n      let t_tmp = Fp.sqr(t); // t^(2^1)\n      while (!Fp.eql(t_tmp, Fp.ONE)) {\n        i++;\n        t_tmp = Fp.sqr(t_tmp); // t^(2^2)...\n        if (i === M) throw new Error('Cannot find square root');\n      }\n      // Calculate the exponent for b: 2^(M - i - 1)\n      const exponent = _1n << BigInt(M - i - 1); // bigint is important\n      const b = Fp.pow(c, exponent); // b = 2^(M - i - 1)\n      // Update variables\n      M = i;\n      c = Fp.sqr(b); // c = b^2\n      t = Fp.mul(t, c); // t = (t * b^2)\n      R = Fp.mul(R, b); // R = R*b\n    }\n    return R;\n  };\n}\n/**\n * Square root for a finite field. Will try optimized versions first:\n *\n * 1. P ≡ 3 (mod 4)\n * 2. P ≡ 5 (mod 8)\n * 3. Tonelli-Shanks algorithm\n *\n * Different algorithms can give different roots, it is up to user to decide which one they want.\n * For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n */\nfunction FpSqrt(P) {\n  // P ≡ 3 (mod 4) => √n = n^((P+1)/4)\n  if (P % _4n === _3n) return sqrt3mod4;\n  // P ≡ 5 (mod 8) => Atkin algorithm, page 10 of https://eprint.iacr.org/2012/685.pdf\n  if (P % _8n === _5n) return sqrt5mod8;\n  // P ≡ 9 (mod 16) not implemented, see above\n  // Tonelli-Shanks algorithm\n  return tonelliShanks(P);\n}\n// Little-endian check for first LE bit (last BE bit);\nconst isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;\nexports.isNegativeLE = isNegativeLE;\n// prettier-ignore\nconst FIELD_FIELDS = ['create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr', 'eql', 'add', 'sub', 'mul', 'pow', 'div', 'addN', 'subN', 'mulN', 'sqrN'];\nfunction validateField(field) {\n  const initial = {\n    ORDER: 'bigint',\n    MASK: 'bigint',\n    BYTES: 'number',\n    BITS: 'number'\n  };\n  const opts = FIELD_FIELDS.reduce((map, val) => {\n    map[val] = 'function';\n    return map;\n  }, initial);\n  (0, utils_ts_1._validateObject)(field, opts);\n  // const max = 16384;\n  // if (field.BYTES < 1 || field.BYTES > max) throw new Error('invalid field');\n  // if (field.BITS < 1 || field.BITS > 8 * max) throw new Error('invalid field');\n  return field;\n}\n// Generic field functions\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nfunction FpPow(Fp, num, power) {\n  if (power < _0n) throw new Error('invalid exponent, negatives unsupported');\n  if (power === _0n) return Fp.ONE;\n  if (power === _1n) return num;\n  let p = Fp.ONE;\n  let d = num;\n  while (power > _0n) {\n    if (power & _1n) p = Fp.mul(p, d);\n    d = Fp.sqr(d);\n    power >>= _1n;\n  }\n  return p;\n}\n/**\n * Efficiently invert an array of Field elements.\n * Exception-free. Will return `undefined` for 0 elements.\n * @param passZero map 0 to 0 (instead of undefined)\n */\nfunction FpInvertBatch(Fp, nums, passZero = false) {\n  const inverted = new Array(nums.length).fill(passZero ? Fp.ZERO : undefined);\n  // Walk from first to last, multiply them by each other MOD p\n  const multipliedAcc = nums.reduce((acc, num, i) => {\n    if (Fp.is0(num)) return acc;\n    inverted[i] = acc;\n    return Fp.mul(acc, num);\n  }, Fp.ONE);\n  // Invert last element\n  const invertedAcc = Fp.inv(multipliedAcc);\n  // Walk from last to first, multiply them by inverted each other MOD p\n  nums.reduceRight((acc, num, i) => {\n    if (Fp.is0(num)) return acc;\n    inverted[i] = Fp.mul(acc, inverted[i]);\n    return Fp.mul(acc, num);\n  }, invertedAcc);\n  return inverted;\n}\n// TODO: remove\nfunction FpDiv(Fp, lhs, rhs) {\n  return Fp.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, Fp.ORDER) : Fp.inv(rhs));\n}\n/**\n * Legendre symbol.\n * Legendre constant is used to calculate Legendre symbol (a | p)\n * which denotes the value of a^((p-1)/2) (mod p).\n *\n * * (a | p) ≡ 1    if a is a square (mod p), quadratic residue\n * * (a | p) ≡ -1   if a is not a square (mod p), quadratic non residue\n * * (a | p) ≡ 0    if a ≡ 0 (mod p)\n */\nfunction FpLegendre(Fp, n) {\n  // We can use 3rd argument as optional cache of this value\n  // but seems unneeded for now. The operation is very fast.\n  const p1mod2 = (Fp.ORDER - _1n) / _2n;\n  const powered = Fp.pow(n, p1mod2);\n  const yes = Fp.eql(powered, Fp.ONE);\n  const zero = Fp.eql(powered, Fp.ZERO);\n  const no = Fp.eql(powered, Fp.neg(Fp.ONE));\n  if (!yes && !zero && !no) throw new Error('invalid Legendre symbol result');\n  return yes ? 1 : zero ? 0 : -1;\n}\n// This function returns True whenever the value x is a square in the field F.\nfunction FpIsSquare(Fp, n) {\n  const l = FpLegendre(Fp, n);\n  return l === 1;\n}\n// CURVE.n lengths\nfunction nLength(n, nBitLength) {\n  // Bit size, byte size of CURVE.n\n  if (nBitLength !== undefined) (0, utils_ts_1.anumber)(nBitLength);\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n  const nByteLength = Math.ceil(_nBitLength / 8);\n  return {\n    nBitLength: _nBitLength,\n    nByteLength\n  };\n}\n/**\n * Creates a finite field. Major performance optimizations:\n * * 1. Denormalized operations like mulN instead of mul.\n * * 2. Identical object shape: never add or remove keys.\n * * 3. `Object.freeze`.\n * Fragile: always run a benchmark on a change.\n * Security note: operations don't check 'isValid' for all elements for performance reasons,\n * it is caller responsibility to check this.\n * This is low-level code, please make sure you know what you're doing.\n *\n * Note about field properties:\n * * CHARACTERISTIC p = prime number, number of elements in main subgroup.\n * * ORDER q = similar to cofactor in curves, may be composite `q = p^m`.\n *\n * @param ORDER field order, probably prime, or could be composite\n * @param bitLen how many bits the field consumes\n * @param isLE (default: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nfunction Field(ORDER, bitLenOrOpts, isLE = false, opts = {}) {\n  if (ORDER <= _0n) throw new Error('invalid field: expected ORDER > 0, got ' + ORDER);\n  let _nbitLength = undefined;\n  let _sqrt = undefined;\n  if (typeof bitLenOrOpts === 'object' && bitLenOrOpts != null) {\n    if (opts.sqrt || isLE) throw new Error('cannot specify opts in two arguments');\n    const _opts = bitLenOrOpts;\n    if (_opts.BITS) _nbitLength = _opts.BITS;\n    if (_opts.sqrt) _sqrt = _opts.sqrt;\n    if (typeof _opts.isLE === 'boolean') isLE = _opts.isLE;\n  } else {\n    if (typeof bitLenOrOpts === 'number') _nbitLength = bitLenOrOpts;\n    if (opts.sqrt) _sqrt = opts.sqrt;\n  }\n  const {\n    nBitLength: BITS,\n    nByteLength: BYTES\n  } = nLength(ORDER, _nbitLength);\n  if (BYTES > 2048) throw new Error('invalid field: expected ORDER of <= 2048 bytes');\n  let sqrtP; // cached sqrtP\n  const f = Object.freeze({\n    ORDER,\n    isLE,\n    BITS,\n    BYTES,\n    MASK: (0, utils_ts_1.bitMask)(BITS),\n    ZERO: _0n,\n    ONE: _1n,\n    create: num => mod(num, ORDER),\n    isValid: num => {\n      if (typeof num !== 'bigint') throw new Error('invalid field element: expected bigint, got ' + typeof num);\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n    },\n    is0: num => num === _0n,\n    // is valid and invertible\n    isValidNot0: num => !f.is0(num) && f.isValid(num),\n    isOdd: num => (num & _1n) === _1n,\n    neg: num => mod(-num, ORDER),\n    eql: (lhs, rhs) => lhs === rhs,\n    sqr: num => mod(num * num, ORDER),\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n    pow: (num, power) => FpPow(f, num, power),\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n    // Same as above, but doesn't normalize\n    sqrN: num => num * num,\n    addN: (lhs, rhs) => lhs + rhs,\n    subN: (lhs, rhs) => lhs - rhs,\n    mulN: (lhs, rhs) => lhs * rhs,\n    inv: num => invert(num, ORDER),\n    sqrt: _sqrt || (n => {\n      if (!sqrtP) sqrtP = FpSqrt(ORDER);\n      return sqrtP(f, n);\n    }),\n    toBytes: num => isLE ? (0, utils_ts_1.numberToBytesLE)(num, BYTES) : (0, utils_ts_1.numberToBytesBE)(num, BYTES),\n    fromBytes: bytes => {\n      if (bytes.length !== BYTES) throw new Error('Field.fromBytes: expected ' + BYTES + ' bytes, got ' + bytes.length);\n      return isLE ? (0, utils_ts_1.bytesToNumberLE)(bytes) : (0, utils_ts_1.bytesToNumberBE)(bytes);\n    },\n    // TODO: we don't need it here, move out to separate fn\n    invertBatch: lst => FpInvertBatch(f, lst),\n    // We can't move this out because Fp6, Fp12 implement it\n    // and it's unclear what to return in there.\n    cmov: (a, b, c) => c ? b : a\n  });\n  return Object.freeze(f);\n}\nfunction FpSqrtOdd(Fp, elm) {\n  if (!Fp.isOdd) throw new Error(\"Field doesn't have isOdd\");\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? root : Fp.neg(root);\n}\nfunction FpSqrtEven(Fp, elm) {\n  if (!Fp.isOdd) throw new Error(\"Field doesn't have isOdd\");\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use `mapKeyToField` instead\n */\nfunction hashToPrivateScalar(hash, groupOrder, isLE = false) {\n  hash = (0, utils_ts_1.ensureBytes)('privateHash', hash);\n  const hashLen = hash.length;\n  const minLen = nLength(groupOrder).nByteLength + 8;\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024) throw new Error('hashToPrivateScalar: expected ' + minLen + '-1024 bytes of input, got ' + hashLen);\n  const num = isLE ? (0, utils_ts_1.bytesToNumberLE)(hash) : (0, utils_ts_1.bytesToNumberBE)(hash);\n  return mod(num, groupOrder - _1n) + _1n;\n}\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nfunction getFieldBytesLength(fieldOrder) {\n  if (typeof fieldOrder !== 'bigint') throw new Error('field order must be bigint');\n  const bitLength = fieldOrder.toString(2).length;\n  return Math.ceil(bitLength / 8);\n}\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nfunction getMinHashLength(fieldOrder) {\n  const length = getFieldBytesLength(fieldOrder);\n  return length + Math.ceil(length / 2);\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nfunction mapHashToField(key, fieldOrder, isLE = false) {\n  const len = key.length;\n  const fieldLen = getFieldBytesLength(fieldOrder);\n  const minLen = getMinHashLength(fieldOrder);\n  // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n  if (len < 16 || len < minLen || len > 1024) throw new Error('expected ' + minLen + '-1024 bytes of input, got ' + len);\n  const num = isLE ? (0, utils_ts_1.bytesToNumberLE)(key) : (0, utils_ts_1.bytesToNumberBE)(key);\n  // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n  const reduced = mod(num, fieldOrder - _1n) + _1n;\n  return isLE ? (0, utils_ts_1.numberToBytesLE)(reduced, fieldLen) : (0, utils_ts_1.numberToBytesBE)(reduced, fieldLen);\n}","map":{"version":3,"names":["exports","mod","pow","pow2","invert","tonelliShanks","FpSqrt","validateField","FpPow","FpInvertBatch","FpDiv","FpLegendre","FpIsSquare","nLength","Field","FpSqrtOdd","FpSqrtEven","hashToPrivateScalar","getFieldBytesLength","getMinHashLength","mapHashToField","utils_ts_1","require","_0n","BigInt","_1n","_2n","_3n","_4n","_5n","_8n","a","b","result","num","power","modulo","x","res","number","Error","y","u","v","q","r","m","n","gcd","sqrt3mod4","Fp","p1div4","ORDER","root","eql","sqr","sqrt5mod8","p5div8","n2","mul","nv","i","sub","ONE","P","Q","S","Z","_Fp","cc","Q1div2","tonelliSlow","is0","M","c","t","R","ZERO","t_tmp","exponent","isNegativeLE","FIELD_FIELDS","field","initial","MASK","BYTES","BITS","opts","reduce","map","val","_validateObject","p","d","nums","passZero","inverted","Array","length","fill","undefined","multipliedAcc","acc","invertedAcc","inv","reduceRight","lhs","rhs","p1mod2","powered","yes","zero","no","neg","l","nBitLength","anumber","_nBitLength","toString","nByteLength","Math","ceil","bitLenOrOpts","isLE","_nbitLength","_sqrt","sqrt","_opts","sqrtP","f","Object","freeze","bitMask","create","isValid","isValidNot0","isOdd","add","div","sqrN","addN","subN","mulN","toBytes","numberToBytesLE","numberToBytesBE","fromBytes","bytes","bytesToNumberLE","bytesToNumberBE","invertBatch","lst","cmov","elm","hash","groupOrder","ensureBytes","hashLen","minLen","fieldOrder","bitLength","key","len","fieldLen","reduced"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/viem/node_modules/@noble/curves/src/abstract/modular.ts"],"sourcesContent":["/**\n * Utils for modular division and fields.\n * Field over 11 is a finite (Galois) field is integer number operations `mod 11`.\n * There is no division: it is replaced by modular multiplicative inverse.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport {\n  _validateObject,\n  anumber,\n  bitMask,\n  bytesToNumberBE,\n  bytesToNumberLE,\n  ensureBytes,\n  numberToBytesBE,\n  numberToBytesLE,\n} from '../utils.ts';\n\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = /* @__PURE__ */ BigInt(2), _3n = /* @__PURE__ */ BigInt(3);\n// prettier-ignore\nconst _4n = /* @__PURE__ */ BigInt(4), _5n = /* @__PURE__ */ BigInt(5);\nconst _8n = /* @__PURE__ */ BigInt(8);\n\n// Calculates a modulo b\nexport function mod(a: bigint, b: bigint): bigint {\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\nexport function pow(num: bigint, power: bigint, modulo: bigint): bigint {\n  return FpPow(Field(modulo), num, power);\n}\n\n/** Does `x^(2^power)` mod p. `pow2(30, 4)` == `30^(2^4)` */\nexport function pow2(x: bigint, power: bigint, modulo: bigint): bigint {\n  let res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= modulo;\n  }\n  return res;\n}\n\n/**\n * Inverses number over modulo.\n * Implemented using [Euclidean GCD](https://brilliant.org/wiki/extended-euclidean-algorithm/).\n */\nexport function invert(number: bigint, modulo: bigint): bigint {\n  if (number === _0n) throw new Error('invert: expected non-zero number');\n  if (modulo <= _0n) throw new Error('invert: expected positive modulus, got ' + modulo);\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n  let a = mod(number, modulo);\n  let b = modulo;\n  // prettier-ignore\n  let x = _0n, y = _1n, u = _1n, v = _0n;\n  while (a !== _0n) {\n    // JIT applies optimization if those two lines follow each other\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    // prettier-ignore\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n\n// Not all roots are possible! Example which will throw:\n// const NUM =\n// n = 72057594037927816n;\n// Fp = Field(BigInt('0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab'));\nfunction sqrt3mod4<T>(Fp: IField<T>, n: T) {\n  const p1div4 = (Fp.ORDER + _1n) / _4n;\n  const root = Fp.pow(n, p1div4);\n  // Throw if root^2 != n\n  if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n  return root;\n}\n\nfunction sqrt5mod8<T>(Fp: IField<T>, n: T) {\n  const p5div8 = (Fp.ORDER - _5n) / _8n;\n  const n2 = Fp.mul(n, _2n);\n  const v = Fp.pow(n2, p5div8);\n  const nv = Fp.mul(n, v);\n  const i = Fp.mul(Fp.mul(nv, _2n), v);\n  const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n  if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n  return root;\n}\n\n// TODO: Commented-out for now. Provide test vectors.\n// Tonelli is too slow for extension fields Fp2.\n// That means we can't use sqrt (c1, c2...) even for initialization constants.\n// if (P % _16n === _9n) return sqrt9mod16;\n// // prettier-ignore\n// function sqrt9mod16<T>(Fp: IField<T>, n: T, p7div16?: bigint) {\n//   if (p7div16 === undefined) p7div16 = (Fp.ORDER + BigInt(7)) / _16n;\n//   const c1 = Fp.sqrt(Fp.neg(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n//   const c2 = Fp.sqrt(c1);             //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n//   const c3 = Fp.sqrt(Fp.neg(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n//   const c4 = p7div16;                 //  4. c4 = (q + 7) / 16        # Integer arithmetic\n//   let tv1 = Fp.pow(n, c4);            //  1. tv1 = x^c4\n//   let tv2 = Fp.mul(c1, tv1);          //  2. tv2 = c1 * tv1\n//   const tv3 = Fp.mul(c2, tv1);        //  3. tv3 = c2 * tv1\n//   let tv4 = Fp.mul(c3, tv1);          //  4. tv4 = c3 * tv1\n//   const e1 = Fp.eql(Fp.sqr(tv2), n);  //  5.  e1 = (tv2^2) == x\n//   const e2 = Fp.eql(Fp.sqr(tv3), n);  //  6.  e2 = (tv3^2) == x\n//   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n//   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n//   const e3 = Fp.eql(Fp.sqr(tv2), n);  //  9.  e3 = (tv2^2) == x\n//   return Fp.cmov(tv1, tv2, e3); // 10.  z = CMOV(tv1, tv2, e3) # Select the sqrt from tv1 and tv2\n// }\n\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P: bigint): <T>(Fp: IField<T>, n: T) => T {\n  // Initialization (precomputation).\n  // Caching initialization could boost perf by 7%.\n  if (P < BigInt(3)) throw new Error('sqrt is not defined for small field');\n  // Factor P - 1 = Q * 2^S, where Q is odd\n  let Q = P - _1n;\n  let S = 0;\n  while (Q % _2n === _0n) {\n    Q /= _2n;\n    S++;\n  }\n\n  // Find the first quadratic non-residue Z >= 2\n  let Z = _2n;\n  const _Fp = Field(P);\n  while (FpLegendre(_Fp, Z) === 1) {\n    // Basic primality test for P. After x iterations, chance of\n    // not finding quadratic non-residue is 2^x, so 2^1000.\n    if (Z++ > 1000) throw new Error('Cannot find square root: probably non-prime P');\n  }\n  // Fast-path; usually done before Z, but we do \"primality test\".\n  if (S === 1) return sqrt3mod4;\n\n  // Slow-path\n  // TODO: test on Fp2 and others\n  let cc = _Fp.pow(Z, Q); // c = z^Q\n  const Q1div2 = (Q + _1n) / _2n;\n  return function tonelliSlow<T>(Fp: IField<T>, n: T): T {\n    if (Fp.is0(n)) return n;\n    // Check if n is a quadratic residue using Legendre symbol\n    if (FpLegendre(Fp, n) !== 1) throw new Error('Cannot find square root');\n\n    // Initialize variables for the main loop\n    let M = S;\n    let c = Fp.mul(Fp.ONE, cc); // c = z^Q, move cc from field _Fp into field Fp\n    let t = Fp.pow(n, Q); // t = n^Q, first guess at the fudge factor\n    let R = Fp.pow(n, Q1div2); // R = n^((Q+1)/2), first guess at the square root\n\n    // Main loop\n    // while t != 1\n    while (!Fp.eql(t, Fp.ONE)) {\n      if (Fp.is0(t)) return Fp.ZERO; // if t=0 return R=0\n      let i = 1;\n\n      // Find the smallest i >= 1 such that t^(2^i) ≡ 1 (mod P)\n      let t_tmp = Fp.sqr(t); // t^(2^1)\n      while (!Fp.eql(t_tmp, Fp.ONE)) {\n        i++;\n        t_tmp = Fp.sqr(t_tmp); // t^(2^2)...\n        if (i === M) throw new Error('Cannot find square root');\n      }\n\n      // Calculate the exponent for b: 2^(M - i - 1)\n      const exponent = _1n << BigInt(M - i - 1); // bigint is important\n      const b = Fp.pow(c, exponent); // b = 2^(M - i - 1)\n\n      // Update variables\n      M = i;\n      c = Fp.sqr(b); // c = b^2\n      t = Fp.mul(t, c); // t = (t * b^2)\n      R = Fp.mul(R, b); // R = R*b\n    }\n    return R;\n  };\n}\n\n/**\n * Square root for a finite field. Will try optimized versions first:\n *\n * 1. P ≡ 3 (mod 4)\n * 2. P ≡ 5 (mod 8)\n * 3. Tonelli-Shanks algorithm\n *\n * Different algorithms can give different roots, it is up to user to decide which one they want.\n * For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n */\nexport function FpSqrt(P: bigint): <T>(Fp: IField<T>, n: T) => T {\n  // P ≡ 3 (mod 4) => √n = n^((P+1)/4)\n  if (P % _4n === _3n) return sqrt3mod4;\n  // P ≡ 5 (mod 8) => Atkin algorithm, page 10 of https://eprint.iacr.org/2012/685.pdf\n  if (P % _8n === _5n) return sqrt5mod8;\n  // P ≡ 9 (mod 16) not implemented, see above\n  // Tonelli-Shanks algorithm\n  return tonelliShanks(P);\n}\n\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num: bigint, modulo: bigint): boolean =>\n  (mod(num, modulo) & _1n) === _1n;\n\n/** Field is not always over prime: for example, Fp2 has ORDER(q)=p^m. */\nexport interface IField<T> {\n  ORDER: bigint;\n  isLE: boolean;\n  BYTES: number;\n  BITS: number;\n  MASK: bigint;\n  ZERO: T;\n  ONE: T;\n  // 1-arg\n  create: (num: T) => T;\n  isValid: (num: T) => boolean;\n  is0: (num: T) => boolean;\n  isValidNot0: (num: T) => boolean;\n  neg(num: T): T;\n  inv(num: T): T;\n  sqrt(num: T): T;\n  sqr(num: T): T;\n  // 2-args\n  eql(lhs: T, rhs: T): boolean;\n  add(lhs: T, rhs: T): T;\n  sub(lhs: T, rhs: T): T;\n  mul(lhs: T, rhs: T | bigint): T;\n  pow(lhs: T, power: bigint): T;\n  div(lhs: T, rhs: T | bigint): T;\n  // N for NonNormalized (for now)\n  addN(lhs: T, rhs: T): T;\n  subN(lhs: T, rhs: T): T;\n  mulN(lhs: T, rhs: T | bigint): T;\n  sqrN(num: T): T;\n\n  // Optional\n  // Should be same as sgn0 function in\n  // [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#section-4.1).\n  // NOTE: sgn0 is 'negative in LE', which is same as odd. And negative in LE is kinda strange definition anyway.\n  isOdd?(num: T): boolean; // Odd instead of even since we have it for Fp2\n  // legendre?(num: T): T;\n  invertBatch: (lst: T[]) => T[];\n  toBytes(num: T): Uint8Array;\n  fromBytes(bytes: Uint8Array): T;\n  // If c is False, CMOV returns a, otherwise it returns b.\n  cmov(a: T, b: T, c: boolean): T;\n}\n// prettier-ignore\nconst FIELD_FIELDS = [\n  'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n  'eql', 'add', 'sub', 'mul', 'pow', 'div',\n  'addN', 'subN', 'mulN', 'sqrN'\n] as const;\nexport function validateField<T>(field: IField<T>): IField<T> {\n  const initial = {\n    ORDER: 'bigint',\n    MASK: 'bigint',\n    BYTES: 'number',\n    BITS: 'number',\n  } as Record<string, string>;\n  const opts = FIELD_FIELDS.reduce((map, val: string) => {\n    map[val] = 'function';\n    return map;\n  }, initial);\n  _validateObject(field, opts);\n  // const max = 16384;\n  // if (field.BYTES < 1 || field.BYTES > max) throw new Error('invalid field');\n  // if (field.BITS < 1 || field.BITS > 8 * max) throw new Error('invalid field');\n  return field;\n}\n\n// Generic field functions\n\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow<T>(Fp: IField<T>, num: T, power: bigint): T {\n  if (power < _0n) throw new Error('invalid exponent, negatives unsupported');\n  if (power === _0n) return Fp.ONE;\n  if (power === _1n) return num;\n  let p = Fp.ONE;\n  let d = num;\n  while (power > _0n) {\n    if (power & _1n) p = Fp.mul(p, d);\n    d = Fp.sqr(d);\n    power >>= _1n;\n  }\n  return p;\n}\n\n/**\n * Efficiently invert an array of Field elements.\n * Exception-free. Will return `undefined` for 0 elements.\n * @param passZero map 0 to 0 (instead of undefined)\n */\nexport function FpInvertBatch<T>(Fp: IField<T>, nums: T[], passZero = false): T[] {\n  const inverted = new Array(nums.length).fill(passZero ? Fp.ZERO : undefined);\n  // Walk from first to last, multiply them by each other MOD p\n  const multipliedAcc = nums.reduce((acc, num, i) => {\n    if (Fp.is0(num)) return acc;\n    inverted[i] = acc;\n    return Fp.mul(acc, num);\n  }, Fp.ONE);\n  // Invert last element\n  const invertedAcc = Fp.inv(multipliedAcc);\n  // Walk from last to first, multiply them by inverted each other MOD p\n  nums.reduceRight((acc, num, i) => {\n    if (Fp.is0(num)) return acc;\n    inverted[i] = Fp.mul(acc, inverted[i]);\n    return Fp.mul(acc, num);\n  }, invertedAcc);\n  return inverted;\n}\n\n// TODO: remove\nexport function FpDiv<T>(Fp: IField<T>, lhs: T, rhs: T | bigint): T {\n  return Fp.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, Fp.ORDER) : Fp.inv(rhs));\n}\n\n/**\n * Legendre symbol.\n * Legendre constant is used to calculate Legendre symbol (a | p)\n * which denotes the value of a^((p-1)/2) (mod p).\n *\n * * (a | p) ≡ 1    if a is a square (mod p), quadratic residue\n * * (a | p) ≡ -1   if a is not a square (mod p), quadratic non residue\n * * (a | p) ≡ 0    if a ≡ 0 (mod p)\n */\nexport function FpLegendre<T>(Fp: IField<T>, n: T): -1 | 0 | 1 {\n  // We can use 3rd argument as optional cache of this value\n  // but seems unneeded for now. The operation is very fast.\n  const p1mod2 = (Fp.ORDER - _1n) / _2n;\n  const powered = Fp.pow(n, p1mod2);\n  const yes = Fp.eql(powered, Fp.ONE);\n  const zero = Fp.eql(powered, Fp.ZERO);\n  const no = Fp.eql(powered, Fp.neg(Fp.ONE));\n  if (!yes && !zero && !no) throw new Error('invalid Legendre symbol result');\n  return yes ? 1 : zero ? 0 : -1;\n}\n\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare<T>(Fp: IField<T>, n: T): boolean {\n  const l = FpLegendre(Fp, n);\n  return l === 1;\n}\n\nexport type NLength = { nByteLength: number; nBitLength: number };\n// CURVE.n lengths\nexport function nLength(n: bigint, nBitLength?: number): NLength {\n  // Bit size, byte size of CURVE.n\n  if (nBitLength !== undefined) anumber(nBitLength);\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n  const nByteLength = Math.ceil(_nBitLength / 8);\n  return { nBitLength: _nBitLength, nByteLength };\n}\n\ntype FpField = IField<bigint> & Required<Pick<IField<bigint>, 'isOdd'>>;\ntype SqrtFn = (n: bigint) => bigint;\ntype FieldOpts = Partial<{ sqrt: SqrtFn; isLE: boolean; BITS: number }>;\n/**\n * Creates a finite field. Major performance optimizations:\n * * 1. Denormalized operations like mulN instead of mul.\n * * 2. Identical object shape: never add or remove keys.\n * * 3. `Object.freeze`.\n * Fragile: always run a benchmark on a change.\n * Security note: operations don't check 'isValid' for all elements for performance reasons,\n * it is caller responsibility to check this.\n * This is low-level code, please make sure you know what you're doing.\n *\n * Note about field properties:\n * * CHARACTERISTIC p = prime number, number of elements in main subgroup.\n * * ORDER q = similar to cofactor in curves, may be composite `q = p^m`.\n *\n * @param ORDER field order, probably prime, or could be composite\n * @param bitLen how many bits the field consumes\n * @param isLE (default: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(\n  ORDER: bigint,\n  bitLenOrOpts?: number | FieldOpts,\n  isLE = false,\n  opts: { sqrt?: SqrtFn } = {}\n): Readonly<FpField> {\n  if (ORDER <= _0n) throw new Error('invalid field: expected ORDER > 0, got ' + ORDER);\n  let _nbitLength: number | undefined = undefined;\n  let _sqrt: SqrtFn | undefined = undefined;\n  if (typeof bitLenOrOpts === 'object' && bitLenOrOpts != null) {\n    if (opts.sqrt || isLE) throw new Error('cannot specify opts in two arguments');\n    const _opts = bitLenOrOpts;\n    if (_opts.BITS) _nbitLength = _opts.BITS;\n    if (_opts.sqrt) _sqrt = _opts.sqrt;\n    if (typeof _opts.isLE === 'boolean') isLE = _opts.isLE;\n  } else {\n    if (typeof bitLenOrOpts === 'number') _nbitLength = bitLenOrOpts;\n    if (opts.sqrt) _sqrt = opts.sqrt;\n  }\n  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, _nbitLength);\n  if (BYTES > 2048) throw new Error('invalid field: expected ORDER of <= 2048 bytes');\n  let sqrtP: ReturnType<typeof FpSqrt>; // cached sqrtP\n  const f: Readonly<FpField> = Object.freeze({\n    ORDER,\n    isLE,\n    BITS,\n    BYTES,\n    MASK: bitMask(BITS),\n    ZERO: _0n,\n    ONE: _1n,\n    create: (num) => mod(num, ORDER),\n    isValid: (num) => {\n      if (typeof num !== 'bigint')\n        throw new Error('invalid field element: expected bigint, got ' + typeof num);\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n    },\n    is0: (num) => num === _0n,\n    // is valid and invertible\n    isValidNot0: (num: bigint) => !f.is0(num) && f.isValid(num),\n    isOdd: (num) => (num & _1n) === _1n,\n    neg: (num) => mod(-num, ORDER),\n    eql: (lhs, rhs) => lhs === rhs,\n\n    sqr: (num) => mod(num * num, ORDER),\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n    pow: (num, power) => FpPow(f, num, power),\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n\n    // Same as above, but doesn't normalize\n    sqrN: (num) => num * num,\n    addN: (lhs, rhs) => lhs + rhs,\n    subN: (lhs, rhs) => lhs - rhs,\n    mulN: (lhs, rhs) => lhs * rhs,\n\n    inv: (num) => invert(num, ORDER),\n    sqrt:\n      _sqrt ||\n      ((n) => {\n        if (!sqrtP) sqrtP = FpSqrt(ORDER);\n        return sqrtP(f, n);\n      }),\n    toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n    fromBytes: (bytes) => {\n      if (bytes.length !== BYTES)\n        throw new Error('Field.fromBytes: expected ' + BYTES + ' bytes, got ' + bytes.length);\n      return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n    },\n    // TODO: we don't need it here, move out to separate fn\n    invertBatch: (lst) => FpInvertBatch(f, lst),\n    // We can't move this out because Fp6, Fp12 implement it\n    // and it's unclear what to return in there.\n    cmov: (a, b, c) => (c ? b : a),\n  } as FpField);\n  return Object.freeze(f);\n}\n\nexport function FpSqrtOdd<T>(Fp: IField<T>, elm: T): T {\n  if (!Fp.isOdd) throw new Error(\"Field doesn't have isOdd\");\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? root : Fp.neg(root);\n}\n\nexport function FpSqrtEven<T>(Fp: IField<T>, elm: T): T {\n  if (!Fp.isOdd) throw new Error(\"Field doesn't have isOdd\");\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use `mapKeyToField` instead\n */\nexport function hashToPrivateScalar(\n  hash: string | Uint8Array,\n  groupOrder: bigint,\n  isLE = false\n): bigint {\n  hash = ensureBytes('privateHash', hash);\n  const hashLen = hash.length;\n  const minLen = nLength(groupOrder).nByteLength + 8;\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n    throw new Error(\n      'hashToPrivateScalar: expected ' + minLen + '-1024 bytes of input, got ' + hashLen\n    );\n  const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n  return mod(num, groupOrder - _1n) + _1n;\n}\n\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder: bigint): number {\n  if (typeof fieldOrder !== 'bigint') throw new Error('field order must be bigint');\n  const bitLength = fieldOrder.toString(2).length;\n  return Math.ceil(bitLength / 8);\n}\n\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder: bigint): number {\n  const length = getFieldBytesLength(fieldOrder);\n  return length + Math.ceil(length / 2);\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key: Uint8Array, fieldOrder: bigint, isLE = false): Uint8Array {\n  const len = key.length;\n  const fieldLen = getFieldBytesLength(fieldOrder);\n  const minLen = getMinHashLength(fieldOrder);\n  // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n  if (len < 16 || len < minLen || len > 1024)\n    throw new Error('expected ' + minLen + '-1024 bytes of input, got ' + len);\n  const num = isLE ? bytesToNumberLE(key) : bytesToNumberBE(key);\n  // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n  const reduced = mod(num, fieldOrder - _1n) + _1n;\n  return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}