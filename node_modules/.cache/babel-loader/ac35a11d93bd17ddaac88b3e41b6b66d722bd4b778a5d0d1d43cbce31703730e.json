{"ast":null,"code":"'use client';\n\nimport { getTransactionConfirmationsQueryOptions } from '@wagmi/core/query';\nimport { useQuery } from '../utils/query.js';\nimport { useChainId } from './useChainId.js';\nimport { useConfig } from './useConfig.js';\n/** https://wagmi.sh/react/api/hooks/useTransactionConfirmations */\nexport function useTransactionConfirmations(parameters = {}) {\n  const {\n    hash,\n    transactionReceipt,\n    query = {}\n  } = parameters;\n  const config = useConfig(parameters);\n  const chainId = useChainId({\n    config\n  });\n  const options = getTransactionConfirmationsQueryOptions(config, {\n    ...parameters,\n    chainId: parameters.chainId ?? chainId\n  });\n  const enabled = Boolean(!(hash && transactionReceipt) && (hash || transactionReceipt) && (query.enabled ?? true));\n  return useQuery({\n    ...query,\n    ...options,\n    enabled\n  });\n}","map":{"version":3,"names":["getTransactionConfirmationsQueryOptions","useQuery","useChainId","useConfig","useTransactionConfirmations","parameters","hash","transactionReceipt","query","config","chainId","options","enabled","Boolean"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/wagmi/src/hooks/useTransactionConfirmations.ts"],"sourcesContent":["'use client'\n\nimport type {\n  Config,\n  GetTransactionConfirmationsErrorType,\n  ResolvedRegister,\n} from '@wagmi/core'\nimport {\n  type GetTransactionConfirmationsData,\n  type GetTransactionConfirmationsOptions,\n  type GetTransactionConfirmationsQueryFnData,\n  type GetTransactionConfirmationsQueryKey,\n  getTransactionConfirmationsQueryOptions,\n} from '@wagmi/core/query'\n\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseTransactionConfirmationsParameters<\n  config extends Config = Config,\n  chainId extends config['chains'][number]['id'] | undefined = undefined,\n  selectData = GetTransactionConfirmationsData,\n> = GetTransactionConfirmationsOptions<config, chainId> &\n  ConfigParameter<config> &\n  QueryParameter<\n    GetTransactionConfirmationsQueryFnData,\n    GetTransactionConfirmationsErrorType,\n    selectData,\n    GetTransactionConfirmationsQueryKey<config, chainId>\n  >\n\nexport type UseTransactionConfirmationsReturnType<\n  selectData = GetTransactionConfirmationsData,\n> = UseQueryReturnType<selectData, GetTransactionConfirmationsErrorType>\n\n/** https://wagmi.sh/react/api/hooks/useTransactionConfirmations */\nexport function useTransactionConfirmations<\n  config extends Config = ResolvedRegister['config'],\n  chainId extends config['chains'][number]['id'] | undefined = undefined,\n  selectData = GetTransactionConfirmationsData,\n>(\n  parameters: UseTransactionConfirmationsParameters<\n    config,\n    chainId,\n    selectData\n  > = {} as any,\n): UseTransactionConfirmationsReturnType<selectData> {\n  const { hash, transactionReceipt, query = {} } = parameters\n\n  const config = useConfig(parameters)\n  const chainId = useChainId({ config })\n\n  const options = getTransactionConfirmationsQueryOptions(config, {\n    ...parameters,\n    chainId: parameters.chainId ?? chainId,\n  })\n  const enabled = Boolean(\n    !(hash && transactionReceipt) &&\n      (hash || transactionReceipt) &&\n      (query.enabled ?? true),\n  )\n\n  return useQuery({ ...query, ...options, enabled })\n}\n"],"mappings":"AAAA,YAAY;;AAOZ,SAKEA,uCAAuC,QAClC,mBAAmB;AAG1B,SAAkCC,QAAQ,QAAQ,mBAAmB;AACrE,SAASC,UAAU,QAAQ,iBAAiB;AAC5C,SAASC,SAAS,QAAQ,gBAAgB;AAmB1C;AACA,OAAM,SAAUC,2BAA2BA,CAKzCC,UAAA,GAII,EAAS;EAEb,MAAM;IAAEC,IAAI;IAAEC,kBAAkB;IAAEC,KAAK,GAAG;EAAE,CAAE,GAAGH,UAAU;EAE3D,MAAMI,MAAM,GAAGN,SAAS,CAACE,UAAU,CAAC;EACpC,MAAMK,OAAO,GAAGR,UAAU,CAAC;IAAEO;EAAM,CAAE,CAAC;EAEtC,MAAME,OAAO,GAAGX,uCAAuC,CAACS,MAAM,EAAE;IAC9D,GAAGJ,UAAU;IACbK,OAAO,EAAEL,UAAU,CAACK,OAAO,IAAIA;GAChC,CAAC;EACF,MAAME,OAAO,GAAGC,OAAO,CACrB,EAAEP,IAAI,IAAIC,kBAAkB,CAAC,KAC1BD,IAAI,IAAIC,kBAAkB,CAAC,KAC3BC,KAAK,CAACI,OAAO,IAAI,IAAI,CAAC,CAC1B;EAED,OAAOX,QAAQ,CAAC;IAAE,GAAGO,KAAK;IAAE,GAAGG,OAAO;IAAEC;EAAO,CAAE,CAAC;AACpD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}