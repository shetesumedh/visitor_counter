{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hashAuthorization = hashAuthorization;\nconst concat_js_1 = require(\"../data/concat.js\");\nconst toBytes_js_1 = require(\"../encoding/toBytes.js\");\nconst toHex_js_1 = require(\"../encoding/toHex.js\");\nconst toRlp_js_1 = require(\"../encoding/toRlp.js\");\nconst keccak256_js_1 = require(\"../hash/keccak256.js\");\nfunction hashAuthorization(parameters) {\n  const {\n    chainId,\n    nonce,\n    to\n  } = parameters;\n  const address = parameters.contractAddress ?? parameters.address;\n  const hash = (0, keccak256_js_1.keccak256)((0, concat_js_1.concatHex)(['0x05', (0, toRlp_js_1.toRlp)([chainId ? (0, toHex_js_1.numberToHex)(chainId) : '0x', address, nonce ? (0, toHex_js_1.numberToHex)(nonce) : '0x'])]));\n  if (to === 'bytes') return (0, toBytes_js_1.hexToBytes)(hash);\n  return hash;\n}","map":{"version":3,"names":["exports","hashAuthorization","concat_js_1","require","toBytes_js_1","toHex_js_1","toRlp_js_1","keccak256_js_1","parameters","chainId","nonce","to","address","contractAddress","hash","keccak256","concatHex","toRlp","numberToHex","hexToBytes"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/viem/utils/authorization/hashAuthorization.ts"],"sourcesContent":["import type { ErrorType } from '../../errors/utils.js'\nimport type { AuthorizationRequest } from '../../types/authorization.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type ConcatHexErrorType, concatHex } from '../data/concat.js'\nimport { type HexToBytesErrorType, hexToBytes } from '../encoding/toBytes.js'\nimport { type NumberToHexErrorType, numberToHex } from '../encoding/toHex.js'\nimport { type ToRlpErrorType, toRlp } from '../encoding/toRlp.js'\nimport { type Keccak256ErrorType, keccak256 } from '../hash/keccak256.js'\n\ntype To = 'hex' | 'bytes'\n\nexport type HashAuthorizationParameters<to extends To> =\n  AuthorizationRequest & {\n    /** Output format. @default \"hex\" */\n    to?: to | To | undefined\n  }\n\nexport type HashAuthorizationReturnType<to extends To> =\n  | (to extends 'bytes' ? ByteArray : never)\n  | (to extends 'hex' ? Hex : never)\n\nexport type HashAuthorizationErrorType =\n  | Keccak256ErrorType\n  | ConcatHexErrorType\n  | ToRlpErrorType\n  | NumberToHexErrorType\n  | HexToBytesErrorType\n  | ErrorType\n\n/**\n * Computes an Authorization hash in [EIP-7702 format](https://eips.ethereum.org/EIPS/eip-7702): `keccak256('0x05' || rlp([chain_id, address, nonce]))`.\n */\nexport function hashAuthorization<to extends To = 'hex'>(\n  parameters: HashAuthorizationParameters<to>,\n): HashAuthorizationReturnType<to> {\n  const { chainId, nonce, to } = parameters\n  const address = parameters.contractAddress ?? parameters.address\n  const hash = keccak256(\n    concatHex([\n      '0x05',\n      toRlp([\n        chainId ? numberToHex(chainId) : '0x',\n        address,\n        nonce ? numberToHex(nonce) : '0x',\n      ]),\n    ]),\n  )\n  if (to === 'bytes') return hexToBytes(hash) as HashAuthorizationReturnType<to>\n  return hash as HashAuthorizationReturnType<to>\n}\n"],"mappings":";;;;;AAgCAA,OAAA,CAAAC,iBAAA,GAAAA,iBAAA;AA7BA,MAAAC,WAAA,GAAAC,OAAA;AACA,MAAAC,YAAA,GAAAD,OAAA;AACA,MAAAE,UAAA,GAAAF,OAAA;AACA,MAAAG,UAAA,GAAAH,OAAA;AACA,MAAAI,cAAA,GAAAJ,OAAA;AAyBA,SAAgBF,iBAAiBA,CAC/BO,UAA2C;EAE3C,MAAM;IAAEC,OAAO;IAAEC,KAAK;IAAEC;EAAE,CAAE,GAAGH,UAAU;EACzC,MAAMI,OAAO,GAAGJ,UAAU,CAACK,eAAe,IAAIL,UAAU,CAACI,OAAO;EAChE,MAAME,IAAI,GAAG,IAAAP,cAAA,CAAAQ,SAAS,EACpB,IAAAb,WAAA,CAAAc,SAAS,EAAC,CACR,MAAM,EACN,IAAAV,UAAA,CAAAW,KAAK,EAAC,CACJR,OAAO,GAAG,IAAAJ,UAAA,CAAAa,WAAW,EAACT,OAAO,CAAC,GAAG,IAAI,EACrCG,OAAO,EACPF,KAAK,GAAG,IAAAL,UAAA,CAAAa,WAAW,EAACR,KAAK,CAAC,GAAG,IAAI,CAClC,CAAC,CACH,CAAC,CACH;EACD,IAAIC,EAAE,KAAK,OAAO,EAAE,OAAO,IAAAP,YAAA,CAAAe,UAAU,EAACL,IAAI,CAAoC;EAC9E,OAAOA,IAAuC;AAChD","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}