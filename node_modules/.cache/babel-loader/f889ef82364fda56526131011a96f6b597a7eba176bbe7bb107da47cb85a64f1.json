{"ast":null,"code":"import { getTransaction } from '../actions/getTransaction.js';\nimport { filterQueryOptions } from './utils.js';\nexport function getTransactionQueryOptions(config, options = {}) {\n  return {\n    async queryFn({\n      queryKey\n    }) {\n      const {\n        blockHash,\n        blockNumber,\n        blockTag,\n        hash,\n        index\n      } = queryKey[1];\n      if (!blockHash && !blockNumber && !blockTag && !hash) throw new Error('blockHash, blockNumber, blockTag, or hash is required');\n      if (!hash && !index) throw new Error('index is required for blockHash, blockNumber, or blockTag');\n      const {\n        scopeKey: _,\n        ...rest\n      } = queryKey[1];\n      return getTransaction(config, rest);\n    },\n    queryKey: getTransactionQueryKey(options)\n  };\n}\nexport function getTransactionQueryKey(options = {}) {\n  return ['transaction', filterQueryOptions(options)];\n}","map":{"version":3,"names":["getTransaction","filterQueryOptions","getTransactionQueryOptions","config","options","queryFn","queryKey","blockHash","blockNumber","blockTag","hash","index","Error","scopeKey","_","rest","getTransactionQueryKey"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/@wagmi/core/src/query/getTransaction.ts"],"sourcesContent":["import type { QueryOptions } from '@tanstack/query-core'\n\nimport {\n  type GetTransactionErrorType,\n  type GetTransactionParameters,\n  type GetTransactionReturnType,\n  getTransaction,\n} from '../actions/getTransaction.js'\nimport type { Config } from '../createConfig.js'\nimport type { ScopeKeyParameter } from '../types/properties.js'\nimport type { Compute, ExactPartial } from '../types/utils.js'\nimport { filterQueryOptions } from './utils.js'\n\nexport type GetTransactionOptions<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n> = Compute<\n  ExactPartial<GetTransactionParameters<config, chainId>> & ScopeKeyParameter\n>\n\nexport function getTransactionQueryOptions<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n>(config: config, options: GetTransactionOptions<config, chainId> = {}) {\n  return {\n    async queryFn({ queryKey }) {\n      const { blockHash, blockNumber, blockTag, hash, index } = queryKey[1]\n      if (!blockHash && !blockNumber && !blockTag && !hash)\n        throw new Error('blockHash, blockNumber, blockTag, or hash is required')\n      if (!hash && !index)\n        throw new Error(\n          'index is required for blockHash, blockNumber, or blockTag',\n        )\n      const { scopeKey: _, ...rest } = queryKey[1]\n      return getTransaction(\n        config,\n        rest as GetTransactionParameters,\n      ) as unknown as Promise<GetTransactionQueryFnData<config, chainId>>\n    },\n    queryKey: getTransactionQueryKey(options),\n  } as const satisfies QueryOptions<\n    GetTransactionQueryFnData<config, chainId>,\n    GetTransactionErrorType,\n    GetTransactionData<config, chainId>,\n    GetTransactionQueryKey<config, chainId>\n  >\n}\n\nexport type GetTransactionQueryFnData<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n> = GetTransactionReturnType<config, chainId>\n\nexport type GetTransactionData<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n> = GetTransactionQueryFnData<config, chainId>\n\nexport function getTransactionQueryKey<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n>(options: GetTransactionOptions<config, chainId> = {}) {\n  return ['transaction', filterQueryOptions(options)] as const\n}\n\nexport type GetTransactionQueryKey<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n> = ReturnType<typeof getTransactionQueryKey<config, chainId>>\n"],"mappings":"AAEA,SAIEA,cAAc,QACT,8BAA8B;AAIrC,SAASC,kBAAkB,QAAQ,YAAY;AAS/C,OAAM,SAAUC,0BAA0BA,CAGxCC,MAAc,EAAEC,OAAA,GAAkD,EAAE;EACpE,OAAO;IACL,MAAMC,OAAOA,CAAC;MAAEC;IAAQ,CAAE;MACxB,MAAM;QAAEC,SAAS;QAAEC,WAAW;QAAEC,QAAQ;QAAEC,IAAI;QAAEC;MAAK,CAAE,GAAGL,QAAQ,CAAC,CAAC,CAAC;MACrE,IAAI,CAACC,SAAS,IAAI,CAACC,WAAW,IAAI,CAACC,QAAQ,IAAI,CAACC,IAAI,EAClD,MAAM,IAAIE,KAAK,CAAC,uDAAuD,CAAC;MAC1E,IAAI,CAACF,IAAI,IAAI,CAACC,KAAK,EACjB,MAAM,IAAIC,KAAK,CACb,2DAA2D,CAC5D;MACH,MAAM;QAAEC,QAAQ,EAAEC,CAAC;QAAE,GAAGC;MAAI,CAAE,GAAGT,QAAQ,CAAC,CAAC,CAAC;MAC5C,OAAON,cAAc,CACnBG,MAAM,EACNY,IAAgC,CACiC;IACrE,CAAC;IACDT,QAAQ,EAAEU,sBAAsB,CAACZ,OAAO;GAMzC;AACH;AAYA,OAAM,SAAUY,sBAAsBA,CAGpCZ,OAAA,GAAkD,EAAE;EACpD,OAAO,CAAC,aAAa,EAAEH,kBAAkB,CAACG,OAAO,CAAC,CAAU;AAC9D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}