{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseErc6492Signature = parseErc6492Signature;\nconst decodeAbiParameters_js_1 = require(\"../abi/decodeAbiParameters.js\");\nconst isErc6492Signature_js_1 = require(\"./isErc6492Signature.js\");\nfunction parseErc6492Signature(signature) {\n  if (!(0, isErc6492Signature_js_1.isErc6492Signature)(signature)) return {\n    signature\n  };\n  const [address, data, signature_] = (0, decodeAbiParameters_js_1.decodeAbiParameters)([{\n    type: 'address'\n  }, {\n    type: 'bytes'\n  }, {\n    type: 'bytes'\n  }], signature);\n  return {\n    address,\n    data,\n    signature: signature_\n  };\n}","map":{"version":3,"names":["exports","parseErc6492Signature","decodeAbiParameters_js_1","require","isErc6492Signature_js_1","signature","isErc6492Signature","address","data","signature_","decodeAbiParameters","type"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/viem/utils/signature/parseErc6492Signature.ts"],"sourcesContent":["import type { Address } from 'abitype'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { OneOf, Prettify } from '../../types/utils.js'\nimport {\n  type DecodeAbiParametersErrorType,\n  decodeAbiParameters,\n} from '../abi/decodeAbiParameters.js'\nimport {\n  type IsErc6492SignatureErrorType,\n  isErc6492Signature,\n} from './isErc6492Signature.js'\n\nexport type ParseErc6492SignatureParameters = Hex\n\nexport type ParseErc6492SignatureReturnType = Prettify<\n  OneOf<\n    | {\n        /**\n         * The ERC-4337 Account Factory or preparation address to use for counterfactual verification.\n         * `undefined` if the signature is not in ERC-6492 format.\n         */\n        address: Address\n        /**\n         * Calldata to pass to deploy account (if not deployed) for counterfactual verification.\n         * `undefined` if the signature is not in ERC-6492 format.\n         */\n        data: Hex\n        /** The original signature. */\n        signature: Hex\n      }\n    | {\n        /** The original signature. */\n        signature: Hex\n      }\n  >\n>\n\nexport type ParseErc6492SignatureErrorType =\n  | IsErc6492SignatureErrorType\n  | DecodeAbiParametersErrorType\n  | ErrorType\n\n/**\n * @description Parses a hex-formatted ERC-6492 flavoured signature.\n * If the signature is not in ERC-6492 format, then the underlying (original) signature is returned.\n *\n * @param signature ERC-6492 signature in hex format.\n * @returns The parsed ERC-6492 signature.\n *\n * @example\n * parseSignature('0x000000000000000000000000cafebabecafebabecafebabecafebabecafebabe000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000004deadbeef000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041a461f509887bd19e312c0c58467ce8ff8e300d3c1a90b608a760c5b80318eaf15fe57c96f9175d6cd4daad4663763baa7e78836e067d0163e9a2ccf2ff753f5b1b000000000000000000000000000000000000000000000000000000000000006492649264926492649264926492649264926492649264926492649264926492')\n * // { address: '0x...', data: '0x...', signature: '0x...' }\n */\nexport function parseErc6492Signature(\n  signature: ParseErc6492SignatureParameters,\n): ParseErc6492SignatureReturnType {\n  if (!isErc6492Signature(signature)) return { signature }\n\n  const [address, data, signature_] = decodeAbiParameters(\n    [{ type: 'address' }, { type: 'bytes' }, { type: 'bytes' }],\n    signature,\n  )\n  return { address, data, signature: signature_ }\n}\n"],"mappings":";;;;;AAsDAA,OAAA,CAAAC,qBAAA,GAAAA,qBAAA;AAlDA,MAAAC,wBAAA,GAAAC,OAAA;AAIA,MAAAC,uBAAA,GAAAD,OAAA;AA8CA,SAAgBF,qBAAqBA,CACnCI,SAA0C;EAE1C,IAAI,CAAC,IAAAD,uBAAA,CAAAE,kBAAkB,EAACD,SAAS,CAAC,EAAE,OAAO;IAAEA;EAAS,CAAE;EAExD,MAAM,CAACE,OAAO,EAAEC,IAAI,EAAEC,UAAU,CAAC,GAAG,IAAAP,wBAAA,CAAAQ,mBAAmB,EACrD,CAAC;IAAEC,IAAI,EAAE;EAAS,CAAE,EAAE;IAAEA,IAAI,EAAE;EAAO,CAAE,EAAE;IAAEA,IAAI,EAAE;EAAO,CAAE,CAAC,EAC3DN,SAAS,CACV;EACD,OAAO;IAAEE,OAAO;IAAEC,IAAI;IAAEH,SAAS,EAAEI;EAAU,CAAE;AACjD","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}