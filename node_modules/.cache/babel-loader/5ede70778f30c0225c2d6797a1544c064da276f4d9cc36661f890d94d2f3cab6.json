{"ast":null,"code":"import { getEnsAddress } from '../actions/getEnsAddress.js';\nimport { filterQueryOptions } from './utils.js';\nexport function getEnsAddressQueryOptions(config, options = {}) {\n  return {\n    async queryFn({\n      queryKey\n    }) {\n      const {\n        name,\n        scopeKey: _,\n        ...parameters\n      } = queryKey[1];\n      if (!name) throw new Error('name is required');\n      return getEnsAddress(config, {\n        ...parameters,\n        name\n      });\n    },\n    queryKey: getEnsAddressQueryKey(options)\n  };\n}\nexport function getEnsAddressQueryKey(options = {}) {\n  return ['ensAddress', filterQueryOptions(options)];\n}","map":{"version":3,"names":["getEnsAddress","filterQueryOptions","getEnsAddressQueryOptions","config","options","queryFn","queryKey","name","scopeKey","_","parameters","Error","getEnsAddressQueryKey"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/@wagmi/core/src/query/getEnsAddress.ts"],"sourcesContent":["import type { QueryOptions } from '@tanstack/query-core'\n\nimport {\n  type GetEnsAddressErrorType,\n  type GetEnsAddressParameters,\n  type GetEnsAddressReturnType,\n  getEnsAddress,\n} from '../actions/getEnsAddress.js'\nimport type { Config } from '../createConfig.js'\nimport type { ScopeKeyParameter } from '../types/properties.js'\nimport type { Compute, ExactPartial } from '../types/utils.js'\nimport { filterQueryOptions } from './utils.js'\n\nexport type GetEnsAddressOptions<config extends Config> = Compute<\n  ExactPartial<GetEnsAddressParameters<config>> & ScopeKeyParameter\n>\n\nexport function getEnsAddressQueryOptions<config extends Config>(\n  config: config,\n  options: GetEnsAddressOptions<config> = {},\n) {\n  return {\n    async queryFn({ queryKey }) {\n      const { name, scopeKey: _, ...parameters } = queryKey[1]\n      if (!name) throw new Error('name is required')\n      return getEnsAddress(config, { ...parameters, name })\n    },\n    queryKey: getEnsAddressQueryKey(options),\n  } as const satisfies QueryOptions<\n    GetEnsAddressQueryFnData,\n    GetEnsAddressErrorType,\n    GetEnsAddressData,\n    GetEnsAddressQueryKey<config>\n  >\n}\n\nexport type GetEnsAddressQueryFnData = GetEnsAddressReturnType\n\nexport type GetEnsAddressData = GetEnsAddressQueryFnData\n\nexport function getEnsAddressQueryKey<config extends Config>(\n  options: GetEnsAddressOptions<config> = {},\n) {\n  return ['ensAddress', filterQueryOptions(options)] as const\n}\n\nexport type GetEnsAddressQueryKey<config extends Config> = ReturnType<\n  typeof getEnsAddressQueryKey<config>\n>\n"],"mappings":"AAEA,SAIEA,aAAa,QACR,6BAA6B;AAIpC,SAASC,kBAAkB,QAAQ,YAAY;AAM/C,OAAM,SAAUC,yBAAyBA,CACvCC,MAAc,EACdC,OAAA,GAAwC,EAAE;EAE1C,OAAO;IACL,MAAMC,OAAOA,CAAC;MAAEC;IAAQ,CAAE;MACxB,MAAM;QAAEC,IAAI;QAAEC,QAAQ,EAAEC,CAAC;QAAE,GAAGC;MAAU,CAAE,GAAGJ,QAAQ,CAAC,CAAC,CAAC;MACxD,IAAI,CAACC,IAAI,EAAE,MAAM,IAAII,KAAK,CAAC,kBAAkB,CAAC;MAC9C,OAAOX,aAAa,CAACG,MAAM,EAAE;QAAE,GAAGO,UAAU;QAAEH;MAAI,CAAE,CAAC;IACvD,CAAC;IACDD,QAAQ,EAAEM,qBAAqB,CAACR,OAAO;GAMxC;AACH;AAMA,OAAM,SAAUQ,qBAAqBA,CACnCR,OAAA,GAAwC,EAAE;EAE1C,OAAO,CAAC,YAAY,EAAEH,kBAAkB,CAACG,OAAO,CAAC,CAAU;AAC7D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}