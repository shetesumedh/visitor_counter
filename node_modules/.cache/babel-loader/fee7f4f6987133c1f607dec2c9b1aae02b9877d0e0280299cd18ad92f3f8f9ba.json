{"ast":null,"code":"import { getFeeHistory } from '../actions/getFeeHistory.js';\nimport { filterQueryOptions } from './utils.js';\nexport function getFeeHistoryQueryOptions(config, options = {}) {\n  return {\n    async queryFn({\n      queryKey\n    }) {\n      const {\n        blockCount,\n        rewardPercentiles,\n        scopeKey: _,\n        ...parameters\n      } = queryKey[1];\n      if (!blockCount) throw new Error('blockCount is required');\n      if (!rewardPercentiles) throw new Error('rewardPercentiles is required');\n      const feeHistory = await getFeeHistory(config, {\n        ...parameters,\n        blockCount,\n        rewardPercentiles\n      });\n      return feeHistory ?? null;\n    },\n    queryKey: getFeeHistoryQueryKey(options)\n  };\n}\nexport function getFeeHistoryQueryKey(options = {}) {\n  return ['feeHistory', filterQueryOptions(options)];\n}","map":{"version":3,"names":["getFeeHistory","filterQueryOptions","getFeeHistoryQueryOptions","config","options","queryFn","queryKey","blockCount","rewardPercentiles","scopeKey","_","parameters","Error","feeHistory","getFeeHistoryQueryKey"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/@wagmi/core/src/query/getFeeHistory.ts"],"sourcesContent":["import type { QueryOptions } from '@tanstack/query-core'\n\nimport {\n  type GetFeeHistoryErrorType,\n  type GetFeeHistoryParameters,\n  type GetFeeHistoryReturnType,\n  getFeeHistory,\n} from '../actions/getFeeHistory.js'\nimport type { Config } from '../createConfig.js'\nimport type { ScopeKeyParameter } from '../types/properties.js'\nimport type { Compute, PartialBy } from '../types/utils.js'\nimport { filterQueryOptions } from './utils.js'\n\nexport type GetFeeHistoryOptions<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n> = Compute<\n  PartialBy<\n    GetFeeHistoryParameters<config, chainId>,\n    'blockCount' | 'rewardPercentiles'\n  > &\n    ScopeKeyParameter\n>\n\nexport function getFeeHistoryQueryOptions<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n>(config: config, options: GetFeeHistoryOptions<config, chainId> = {}) {\n  return {\n    async queryFn({ queryKey }) {\n      const {\n        blockCount,\n        rewardPercentiles,\n        scopeKey: _,\n        ...parameters\n      } = queryKey[1]\n      if (!blockCount) throw new Error('blockCount is required')\n      if (!rewardPercentiles) throw new Error('rewardPercentiles is required')\n      const feeHistory = await getFeeHistory(config, {\n        ...(parameters as GetFeeHistoryParameters),\n        blockCount,\n        rewardPercentiles,\n      })\n      return feeHistory ?? null\n    },\n    queryKey: getFeeHistoryQueryKey(options),\n  } as const satisfies QueryOptions<\n    GetFeeHistoryQueryFnData,\n    GetFeeHistoryErrorType,\n    GetFeeHistoryData,\n    GetFeeHistoryQueryKey<config, chainId>\n  >\n}\n\nexport type GetFeeHistoryQueryFnData = GetFeeHistoryReturnType\n\nexport type GetFeeHistoryData = GetFeeHistoryQueryFnData\n\nexport function getFeeHistoryQueryKey<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n>(options: GetFeeHistoryOptions<config, chainId> = {}) {\n  return ['feeHistory', filterQueryOptions(options)] as const\n}\n\nexport type GetFeeHistoryQueryKey<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n> = ReturnType<typeof getFeeHistoryQueryKey<config, chainId>>\n"],"mappings":"AAEA,SAIEA,aAAa,QACR,6BAA6B;AAIpC,SAASC,kBAAkB,QAAQ,YAAY;AAa/C,OAAM,SAAUC,yBAAyBA,CAGvCC,MAAc,EAAEC,OAAA,GAAiD,EAAE;EACnE,OAAO;IACL,MAAMC,OAAOA,CAAC;MAAEC;IAAQ,CAAE;MACxB,MAAM;QACJC,UAAU;QACVC,iBAAiB;QACjBC,QAAQ,EAAEC,CAAC;QACX,GAAGC;MAAU,CACd,GAAGL,QAAQ,CAAC,CAAC,CAAC;MACf,IAAI,CAACC,UAAU,EAAE,MAAM,IAAIK,KAAK,CAAC,wBAAwB,CAAC;MAC1D,IAAI,CAACJ,iBAAiB,EAAE,MAAM,IAAII,KAAK,CAAC,+BAA+B,CAAC;MACxE,MAAMC,UAAU,GAAG,MAAMb,aAAa,CAACG,MAAM,EAAE;QAC7C,GAAIQ,UAAsC;QAC1CJ,UAAU;QACVC;OACD,CAAC;MACF,OAAOK,UAAU,IAAI,IAAI;IAC3B,CAAC;IACDP,QAAQ,EAAEQ,qBAAqB,CAACV,OAAO;GAMxC;AACH;AAMA,OAAM,SAAUU,qBAAqBA,CAGnCV,OAAA,GAAiD,EAAE;EACnD,OAAO,CAAC,YAAY,EAAEH,kBAAkB,CAACG,OAAO,CAAC,CAAU;AAC7D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}