{"ast":null,"code":"import { proxy, subscribe as sub } from 'valtio/vanilla';\nimport { subscribeKey as subKey } from 'valtio/vanilla/utils';\nimport { ConstantsUtil } from '@reown/appkit-common';\nimport { MELD_PUBLIC_KEY, ONRAMP_PROVIDERS } from '../utils/ConstantsUtil.js';\nimport { withErrorBoundary } from '../utils/withErrorBoundary.js';\nimport { AccountController } from './AccountController.js';\nimport { ApiController } from './ApiController.js';\nimport { BlockchainApiController } from './BlockchainApiController.js';\nimport { ChainController } from './ChainController.js';\nimport { OptionsController } from './OptionsController.js';\nexport const USDC_CURRENCY_DEFAULT = {\n  id: '2b92315d-eab7-5bef-84fa-089a131333f5',\n  name: 'USD Coin',\n  symbol: 'USDC',\n  networks: [{\n    name: 'ethereum-mainnet',\n    display_name: 'Ethereum',\n    chain_id: '1',\n    contract_address: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48'\n  }, {\n    name: 'polygon-mainnet',\n    display_name: 'Polygon',\n    chain_id: '137',\n    contract_address: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174'\n  }]\n};\nexport const USD_CURRENCY_DEFAULT = {\n  id: 'USD',\n  payment_method_limits: [{\n    id: 'card',\n    min: '10.00',\n    max: '7500.00'\n  }, {\n    id: 'ach_bank_account',\n    min: '10.00',\n    max: '25000.00'\n  }]\n};\nconst defaultState = {\n  providers: ONRAMP_PROVIDERS,\n  selectedProvider: null,\n  error: null,\n  purchaseCurrency: USDC_CURRENCY_DEFAULT,\n  paymentCurrency: USD_CURRENCY_DEFAULT,\n  purchaseCurrencies: [USDC_CURRENCY_DEFAULT],\n  paymentCurrencies: [],\n  quotesLoading: false\n};\n// -- State --------------------------------------------- //\nconst state = proxy(defaultState);\n// -- Controller ---------------------------------------- //\nconst controller = {\n  state,\n  subscribe(callback) {\n    return sub(state, () => callback(state));\n  },\n  subscribeKey(key, callback) {\n    return subKey(state, key, callback);\n  },\n  setSelectedProvider(provider) {\n    if (provider && provider.name === 'meld') {\n      const currency = ChainController.state.activeChain === ConstantsUtil.CHAIN.SOLANA ? 'SOL' : 'USDC';\n      const address = AccountController.state.address ?? '';\n      const url = new URL(provider.url);\n      url.searchParams.append('publicKey', MELD_PUBLIC_KEY);\n      url.searchParams.append('destinationCurrencyCode', currency);\n      url.searchParams.append('walletAddress', address);\n      url.searchParams.append('externalCustomerId', OptionsController.state.projectId);\n      state.selectedProvider = {\n        ...provider,\n        url: url.toString()\n      };\n    } else {\n      state.selectedProvider = provider;\n    }\n  },\n  setOnrampProviders(providers) {\n    if (Array.isArray(providers) && providers.every(item => typeof item === 'string')) {\n      const validOnramp = providers;\n      const newProviders = ONRAMP_PROVIDERS.filter(provider => validOnramp.includes(provider.name));\n      state.providers = newProviders;\n    } else {\n      state.providers = [];\n    }\n  },\n  setPurchaseCurrency(currency) {\n    state.purchaseCurrency = currency;\n  },\n  setPaymentCurrency(currency) {\n    state.paymentCurrency = currency;\n  },\n  setPurchaseAmount(amount) {\n    OnRampController.state.purchaseAmount = amount;\n  },\n  setPaymentAmount(amount) {\n    OnRampController.state.paymentAmount = amount;\n  },\n  async getAvailableCurrencies() {\n    const options = await BlockchainApiController.getOnrampOptions();\n    state.purchaseCurrencies = options.purchaseCurrencies;\n    state.paymentCurrencies = options.paymentCurrencies;\n    state.paymentCurrency = options.paymentCurrencies[0] || USD_CURRENCY_DEFAULT;\n    state.purchaseCurrency = options.purchaseCurrencies[0] || USDC_CURRENCY_DEFAULT;\n    await ApiController.fetchCurrencyImages(options.paymentCurrencies.map(currency => currency.id));\n    await ApiController.fetchTokenImages(options.purchaseCurrencies.map(currency => currency.symbol));\n  },\n  async getQuote() {\n    state.quotesLoading = true;\n    try {\n      const quote = await BlockchainApiController.getOnrampQuote({\n        purchaseCurrency: state.purchaseCurrency,\n        paymentCurrency: state.paymentCurrency,\n        amount: state.paymentAmount?.toString() || '0',\n        network: state.purchaseCurrency?.symbol\n      });\n      state.quotesLoading = false;\n      state.purchaseAmount = Number(quote?.purchaseAmount.amount);\n      return quote;\n    } catch (error) {\n      state.error = error.message;\n      state.quotesLoading = false;\n      return null;\n    } finally {\n      state.quotesLoading = false;\n    }\n  },\n  resetState() {\n    state.selectedProvider = null;\n    state.error = null;\n    state.purchaseCurrency = USDC_CURRENCY_DEFAULT;\n    state.paymentCurrency = USD_CURRENCY_DEFAULT;\n    state.purchaseCurrencies = [USDC_CURRENCY_DEFAULT];\n    state.paymentCurrencies = [];\n    state.paymentAmount = undefined;\n    state.purchaseAmount = undefined;\n    state.quotesLoading = false;\n  }\n};\n// Export the controller wrapped with our error boundary\nexport const OnRampController = withErrorBoundary(controller);","map":{"version":3,"names":["proxy","subscribe","sub","subscribeKey","subKey","ConstantsUtil","MELD_PUBLIC_KEY","ONRAMP_PROVIDERS","withErrorBoundary","AccountController","ApiController","BlockchainApiController","ChainController","OptionsController","USDC_CURRENCY_DEFAULT","id","name","symbol","networks","display_name","chain_id","contract_address","USD_CURRENCY_DEFAULT","payment_method_limits","min","max","defaultState","providers","selectedProvider","error","purchaseCurrency","paymentCurrency","purchaseCurrencies","paymentCurrencies","quotesLoading","state","controller","callback","key","setSelectedProvider","provider","currency","activeChain","CHAIN","SOLANA","address","url","URL","searchParams","append","projectId","toString","setOnrampProviders","Array","isArray","every","item","validOnramp","newProviders","filter","includes","setPurchaseCurrency","setPaymentCurrency","setPurchaseAmount","amount","OnRampController","purchaseAmount","setPaymentAmount","paymentAmount","getAvailableCurrencies","options","getOnrampOptions","fetchCurrencyImages","map","fetchTokenImages","getQuote","quote","getOnrampQuote","network","Number","message","resetState","undefined"],"sources":["../../../../src/controllers/OnRampController.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}