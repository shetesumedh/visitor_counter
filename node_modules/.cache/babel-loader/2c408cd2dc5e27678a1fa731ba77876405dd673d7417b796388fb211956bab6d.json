{"ast":null,"code":"import { getCallsStatus } from '../actions/getCallsStatus.js';\nimport { ConnectorNotConnectedError } from '../errors/config.js';\nimport { filterQueryOptions } from '../query/utils.js';\nexport function getCallsStatusQueryOptions(config, options) {\n  return {\n    async queryFn({\n      queryKey\n    }) {\n      const {\n        scopeKey: _,\n        ...parameters\n      } = queryKey[1];\n      const status = await getCallsStatus(config, parameters);\n      return status;\n    },\n    queryKey: getCallsStatusQueryKey(options),\n    retry(failureCount, error) {\n      if (error instanceof ConnectorNotConnectedError) return false;\n      return failureCount < 3;\n    }\n  };\n}\nexport function getCallsStatusQueryKey(options) {\n  return ['callsStatus', filterQueryOptions(options)];\n}","map":{"version":3,"names":["getCallsStatus","ConnectorNotConnectedError","filterQueryOptions","getCallsStatusQueryOptions","config","options","queryFn","queryKey","scopeKey","_","parameters","status","getCallsStatusQueryKey","retry","failureCount","error"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/@wagmi/core/src/query/getCallsStatus.ts"],"sourcesContent":["import type { QueryOptions } from '@tanstack/query-core'\n\nimport {\n  type GetCallsStatusErrorType,\n  type GetCallsStatusParameters,\n  type GetCallsStatusReturnType,\n  getCallsStatus,\n} from '../actions/getCallsStatus.js'\nimport type { Config } from '../createConfig.js'\nimport { ConnectorNotConnectedError } from '../errors/config.js'\nimport { filterQueryOptions } from '../query/utils.js'\nimport type { ScopeKeyParameter } from '../types/properties.js'\nimport type { Compute } from '../types/utils.js'\n\nexport type GetCallsStatusOptions = Compute<\n  GetCallsStatusParameters & ScopeKeyParameter\n>\n\nexport function getCallsStatusQueryOptions<config extends Config>(\n  config: config,\n  options: GetCallsStatusOptions,\n) {\n  return {\n    async queryFn({ queryKey }) {\n      const { scopeKey: _, ...parameters } = queryKey[1]\n      const status = await getCallsStatus(config, parameters)\n      return status\n    },\n    queryKey: getCallsStatusQueryKey(options),\n    retry(failureCount, error) {\n      if (error instanceof ConnectorNotConnectedError) return false\n      return failureCount < 3\n    },\n  } as const satisfies QueryOptions<\n    GetCallsStatusQueryFnData,\n    GetCallsStatusErrorType,\n    GetCallsStatusData,\n    GetCallsStatusQueryKey\n  >\n}\n\nexport type GetCallsStatusQueryFnData = GetCallsStatusReturnType\n\nexport type GetCallsStatusData = GetCallsStatusQueryFnData\n\nexport function getCallsStatusQueryKey(options: GetCallsStatusOptions) {\n  return ['callsStatus', filterQueryOptions(options)] as const\n}\n\nexport type GetCallsStatusQueryKey = ReturnType<typeof getCallsStatusQueryKey>\n"],"mappings":"AAEA,SAIEA,cAAc,QACT,8BAA8B;AAErC,SAASC,0BAA0B,QAAQ,qBAAqB;AAChE,SAASC,kBAAkB,QAAQ,mBAAmB;AAQtD,OAAM,SAAUC,0BAA0BA,CACxCC,MAAc,EACdC,OAA8B;EAE9B,OAAO;IACL,MAAMC,OAAOA,CAAC;MAAEC;IAAQ,CAAE;MACxB,MAAM;QAAEC,QAAQ,EAAEC,CAAC;QAAE,GAAGC;MAAU,CAAE,GAAGH,QAAQ,CAAC,CAAC,CAAC;MAClD,MAAMI,MAAM,GAAG,MAAMX,cAAc,CAACI,MAAM,EAAEM,UAAU,CAAC;MACvD,OAAOC,MAAM;IACf,CAAC;IACDJ,QAAQ,EAAEK,sBAAsB,CAACP,OAAO,CAAC;IACzCQ,KAAKA,CAACC,YAAY,EAAEC,KAAK;MACvB,IAAIA,KAAK,YAAYd,0BAA0B,EAAE,OAAO,KAAK;MAC7D,OAAOa,YAAY,GAAG,CAAC;IACzB;GAMD;AACH;AAMA,OAAM,SAAUF,sBAAsBA,CAACP,OAA8B;EACnE,OAAO,CAAC,aAAa,EAAEH,kBAAkB,CAACG,OAAO,CAAC,CAAU;AAC9D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}