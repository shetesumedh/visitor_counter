{"ast":null,"code":"'use client';\n\nimport { useContext } from 'react';\nimport { WagmiContext } from '../context.js';\nimport { WagmiProviderNotFoundError } from '../errors/context.js';\n/** https://wagmi.sh/react/api/hooks/useConfig */\nexport function useConfig(parameters = {}) {\n  const config = parameters.config ?? useContext(WagmiContext);\n  if (!config) throw new WagmiProviderNotFoundError();\n  return config;\n}","map":{"version":3,"names":["useContext","WagmiContext","WagmiProviderNotFoundError","useConfig","parameters","config"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/wagmi/src/hooks/useConfig.ts"],"sourcesContent":["'use client'\n\nimport type { Config, ResolvedRegister } from '@wagmi/core'\nimport { useContext } from 'react'\n\nimport { WagmiContext } from '../context.js'\nimport { WagmiProviderNotFoundError } from '../errors/context.js'\nimport type { ConfigParameter } from '../types/properties.js'\n\nexport type UseConfigParameters<config extends Config = Config> =\n  ConfigParameter<config>\n\nexport type UseConfigReturnType<config extends Config = Config> = config\n\n/** https://wagmi.sh/react/api/hooks/useConfig */\nexport function useConfig<config extends Config = ResolvedRegister['config']>(\n  parameters: UseConfigParameters<config> = {},\n): UseConfigReturnType<config> {\n  const config = parameters.config ?? useContext(WagmiContext)\n  if (!config) throw new WagmiProviderNotFoundError()\n  return config as UseConfigReturnType<config>\n}\n"],"mappings":"AAAA,YAAY;;AAGZ,SAASA,UAAU,QAAQ,OAAO;AAElC,SAASC,YAAY,QAAQ,eAAe;AAC5C,SAASC,0BAA0B,QAAQ,sBAAsB;AAQjE;AACA,OAAM,SAAUC,SAASA,CACvBC,UAAA,GAA0C,EAAE;EAE5C,MAAMC,MAAM,GAAGD,UAAU,CAACC,MAAM,IAAIL,UAAU,CAACC,YAAY,CAAC;EAC5D,IAAI,CAACI,MAAM,EAAE,MAAM,IAAIH,0BAA0B,EAAE;EACnD,OAAOG,MAAqC;AAC9C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}