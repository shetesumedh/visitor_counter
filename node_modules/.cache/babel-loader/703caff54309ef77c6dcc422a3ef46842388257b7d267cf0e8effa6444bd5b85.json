{"ast":null,"code":"import { getTransactionReceipt as viem_getTransactionReceipt } from 'viem/actions';\nimport { getAction } from '../utils/getAction.js';\n/** https://wagmi.sh/core/api/actions/getTransactionReceipt */\nexport async function getTransactionReceipt(config, parameters) {\n  const {\n    chainId,\n    ...rest\n  } = parameters;\n  const client = config.getClient({\n    chainId\n  });\n  const action = getAction(client, viem_getTransactionReceipt, 'getTransactionReceipt');\n  return action(rest);\n}","map":{"version":3,"names":["getTransactionReceipt","viem_getTransactionReceipt","getAction","config","parameters","chainId","rest","client","getClient","action"],"sources":["/home/sumedhshete/visitor-counter/frontend/node_modules/@wagmi/core/src/actions/getTransactionReceipt.ts"],"sourcesContent":["import type { Chain } from 'viem'\nimport {\n  type GetTransactionReceiptErrorType as viem_GetTransactionReceiptErrorType,\n  type GetTransactionReceiptParameters as viem_GetTransactionReceiptParameters,\n  type GetTransactionReceiptReturnType as viem_GetTransactionReceiptReturnType,\n  getTransactionReceipt as viem_getTransactionReceipt,\n} from 'viem/actions'\n\nimport type { Config } from '../createConfig.js'\nimport type { SelectChains } from '../types/chain.js'\nimport type { ChainIdParameter } from '../types/properties.js'\nimport type { Compute, IsNarrowable } from '../types/utils.js'\nimport { getAction } from '../utils/getAction.js'\n\nexport type GetTransactionReceiptParameters<\n  config extends Config = Config,\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n> = Compute<\n  viem_GetTransactionReceiptParameters & ChainIdParameter<config, chainId>\n>\n\nexport type GetTransactionReceiptReturnType<\n  config extends Config = Config,\n  chainId extends\n    config['chains'][number]['id'] = config['chains'][number]['id'],\n  ///\n  chains extends readonly Chain[] = SelectChains<config, chainId>,\n> = Compute<\n  {\n    [key in keyof chains]: viem_GetTransactionReceiptReturnType<\n      IsNarrowable<chains[key], Chain> extends true ? chains[key] : undefined\n    > & { chainId: chains[key]['id'] }\n  }[number]\n>\n\nexport type GetTransactionReceiptErrorType = viem_GetTransactionReceiptErrorType\n\n/** https://wagmi.sh/core/api/actions/getTransactionReceipt */\nexport async function getTransactionReceipt<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n>(\n  config: config,\n  parameters: GetTransactionReceiptParameters<config>,\n): Promise<GetTransactionReceiptReturnType<config, chainId>> {\n  const { chainId, ...rest } = parameters\n  const client = config.getClient({ chainId })\n  const action = getAction(\n    client,\n    viem_getTransactionReceipt,\n    'getTransactionReceipt',\n  )\n  return action(rest) as unknown as Promise<\n    GetTransactionReceiptReturnType<config, chainId>\n  >\n}\n"],"mappings":"AACA,SAIEA,qBAAqB,IAAIC,0BAA0B,QAC9C,cAAc;AAMrB,SAASC,SAAS,QAAQ,uBAAuB;AA0BjD;AACA,OAAO,eAAeF,qBAAqBA,CAIzCG,MAAc,EACdC,UAAmD;EAEnD,MAAM;IAAEC,OAAO;IAAE,GAAGC;EAAI,CAAE,GAAGF,UAAU;EACvC,MAAMG,MAAM,GAAGJ,MAAM,CAACK,SAAS,CAAC;IAAEH;EAAO,CAAE,CAAC;EAC5C,MAAMI,MAAM,GAAGP,SAAS,CACtBK,MAAM,EACNN,0BAA0B,EAC1B,uBAAuB,CACxB;EACD,OAAOQ,MAAM,CAACH,IAAI,CAEjB;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}