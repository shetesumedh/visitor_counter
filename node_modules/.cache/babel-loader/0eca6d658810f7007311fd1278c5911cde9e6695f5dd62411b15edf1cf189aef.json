{"ast":null,"code":"import * as Errors from './Errors.js';\n/** @see https://ethereum.github.io/yellowpaper/paper.pdf */\nexport const exponents = {\n  wei: 0,\n  gwei: 9,\n  szabo: 12,\n  finney: 15,\n  ether: 18\n};\n/**\n * Formats a `bigint` Value to its string representation (divided by the given exponent).\n *\n * @example\n * ```ts twoslash\n * import { Value } from 'ox'\n *\n * Value.format(420_000_000_000n, 9)\n * // @log: '420'\n * ```\n *\n * @param value - The `bigint` Value to format.\n * @param decimals - The exponent to divide the `bigint` Value by.\n * @returns The string representation of the Value.\n */\nexport function format(value, decimals = 0) {\n  let display = value.toString();\n  const negative = display.startsWith('-');\n  if (negative) display = display.slice(1);\n  display = display.padStart(decimals, '0');\n  let [integer, fraction] = [display.slice(0, display.length - decimals), display.slice(display.length - decimals)];\n  fraction = fraction.replace(/(0+)$/, '');\n  return `${negative ? '-' : ''}${integer || '0'}${fraction ? `.${fraction}` : ''}`;\n}\n/**\n * Formats a `bigint` Value (default: wei) to a string representation of Ether.\n *\n * @example\n * ```ts twoslash\n * import { Value } from 'ox'\n *\n * Value.formatEther(1_000_000_000_000_000_000n)\n * // @log: '1'\n * ```\n *\n * @param wei - The Value to format.\n * @param unit - The unit to format the Value in. @default 'wei'.\n * @returns The Ether string representation of the Value.\n */\nexport function formatEther(wei, unit = 'wei') {\n  return format(wei, exponents.ether - exponents[unit]);\n}\n/**\n * Formats a `bigint` Value (default: wei) to a string representation of Gwei.\n *\n * @example\n * ```ts twoslash\n * import { Value } from 'ox'\n *\n * Value.formatGwei(1_000_000_000n)\n * // @log: '1'\n * ```\n *\n * @param wei - The Value to format.\n * @param unit - The unit to format the Value in. @default 'wei'.\n * @returns The Gwei string representation of the Value.\n */\nexport function formatGwei(wei, unit = 'wei') {\n  return format(wei, exponents.gwei - exponents[unit]);\n}\n/**\n * Parses a `string` representation of a Value to `bigint` (multiplied by the given exponent).\n *\n * @example\n * ```ts twoslash\n * import { Value } from 'ox'\n *\n * Value.from('420', 9)\n * // @log: 420000000000n\n * ```\n *\n * @param value - The string representation of the Value.\n * @param decimals - The exponent to multiply the Value by.\n * @returns The `bigint` representation of the Value.\n */\nexport function from(value, decimals = 0) {\n  if (!/^(-?)([0-9]*)\\.?([0-9]*)$/.test(value)) throw new InvalidDecimalNumberError({\n    value\n  });\n  let [integer = '', fraction = '0'] = value.split('.');\n  const negative = integer.startsWith('-');\n  if (negative) integer = integer.slice(1);\n  // trim trailing zeros.\n  fraction = fraction.replace(/(0+)$/, '');\n  // round off if the fraction is larger than the number of decimals.\n  if (decimals === 0) {\n    if (Math.round(Number(`.${fraction}`)) === 1) integer = `${BigInt(integer) + 1n}`;\n    fraction = '';\n  } else if (fraction.length > decimals) {\n    const [left, unit, right] = [fraction.slice(0, decimals - 1), fraction.slice(decimals - 1, decimals), fraction.slice(decimals)];\n    const rounded = Math.round(Number(`${unit}.${right}`));\n    if (rounded > 9) fraction = `${BigInt(left) + BigInt(1)}0`.padStart(left.length + 1, '0');else fraction = `${left}${rounded}`;\n    if (fraction.length > decimals) {\n      fraction = fraction.slice(1);\n      integer = `${BigInt(integer) + 1n}`;\n    }\n    fraction = fraction.slice(0, decimals);\n  } else {\n    fraction = fraction.padEnd(decimals, '0');\n  }\n  return BigInt(`${negative ? '-' : ''}${integer}${fraction}`);\n}\n/**\n * Parses a string representation of Ether to a `bigint` Value (default: wei).\n *\n * @example\n * ```ts twoslash\n * import { Value } from 'ox'\n *\n * Value.fromEther('420')\n * // @log: 420000000000000000000n\n * ```\n *\n * @param ether - String representation of Ether.\n * @param unit - The unit to parse to. @default 'wei'.\n * @returns A `bigint` Value.\n */\nexport function fromEther(ether, unit = 'wei') {\n  return from(ether, exponents.ether - exponents[unit]);\n}\n/**\n * Parses a string representation of Gwei to a `bigint` Value (default: wei).\n *\n * @example\n * ```ts twoslash\n * import { Value } from 'ox'\n *\n * Value.fromGwei('420')\n * // @log: 420000000000n\n * ```\n *\n * @param gwei - String representation of Gwei.\n * @param unit - The unit to parse to. @default 'wei'.\n * @returns A `bigint` Value.\n */\nexport function fromGwei(gwei, unit = 'wei') {\n  return from(gwei, exponents.gwei - exponents[unit]);\n}\n/**\n * Thrown when a value is not a valid decimal number.\n *\n * @example\n * ```ts twoslash\n * import { Value } from 'ox'\n *\n * Value.fromEther('123.456.789')\n * // @error: Value.InvalidDecimalNumberError: Value `123.456.789` is not a valid decimal number.\n * ```\n */\nexport class InvalidDecimalNumberError extends Errors.BaseError {\n  constructor({\n    value\n  }) {\n    super(`Value \\`${value}\\` is not a valid decimal number.`);\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'Value.InvalidDecimalNumberError'\n    });\n  }\n}","map":{"version":3,"names":["Errors","exponents","wei","gwei","szabo","finney","ether","format","value","decimals","display","toString","negative","startsWith","slice","padStart","integer","fraction","length","replace","formatEther","unit","formatGwei","from","test","InvalidDecimalNumberError","split","Math","round","Number","BigInt","left","right","rounded","padEnd","fromEther","fromGwei","BaseError","constructor","Object","defineProperty"],"sources":["/home/sumedhshete/visitor-counter/frontend_sepolia/node_modules/ox/core/Value.ts"],"sourcesContent":["import * as Errors from './Errors.js'\n\n/** @see https://ethereum.github.io/yellowpaper/paper.pdf */\nexport const exponents = {\n  wei: 0,\n  gwei: 9,\n  szabo: 12,\n  finney: 15,\n  ether: 18,\n} as const\n\n/**\n * Formats a `bigint` Value to its string representation (divided by the given exponent).\n *\n * @example\n * ```ts twoslash\n * import { Value } from 'ox'\n *\n * Value.format(420_000_000_000n, 9)\n * // @log: '420'\n * ```\n *\n * @param value - The `bigint` Value to format.\n * @param decimals - The exponent to divide the `bigint` Value by.\n * @returns The string representation of the Value.\n */\nexport function format(value: bigint, decimals = 0) {\n  let display = value.toString()\n\n  const negative = display.startsWith('-')\n  if (negative) display = display.slice(1)\n\n  display = display.padStart(decimals, '0')\n\n  let [integer, fraction] = [\n    display.slice(0, display.length - decimals),\n    display.slice(display.length - decimals),\n  ]\n  fraction = fraction.replace(/(0+)$/, '')\n  return `${negative ? '-' : ''}${integer || '0'}${\n    fraction ? `.${fraction}` : ''\n  }`\n}\n\nexport declare namespace format {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Formats a `bigint` Value (default: wei) to a string representation of Ether.\n *\n * @example\n * ```ts twoslash\n * import { Value } from 'ox'\n *\n * Value.formatEther(1_000_000_000_000_000_000n)\n * // @log: '1'\n * ```\n *\n * @param wei - The Value to format.\n * @param unit - The unit to format the Value in. @default 'wei'.\n * @returns The Ether string representation of the Value.\n */\nexport function formatEther(\n  wei: bigint,\n  unit: 'wei' | 'gwei' | 'szabo' | 'finney' = 'wei',\n) {\n  return format(wei, exponents.ether - exponents[unit])\n}\n\nexport declare namespace formatEther {\n  type ErrorType = format.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Formats a `bigint` Value (default: wei) to a string representation of Gwei.\n *\n * @example\n * ```ts twoslash\n * import { Value } from 'ox'\n *\n * Value.formatGwei(1_000_000_000n)\n * // @log: '1'\n * ```\n *\n * @param wei - The Value to format.\n * @param unit - The unit to format the Value in. @default 'wei'.\n * @returns The Gwei string representation of the Value.\n */\nexport function formatGwei(wei: bigint, unit: 'wei' = 'wei') {\n  return format(wei, exponents.gwei - exponents[unit])\n}\n\nexport declare namespace formatGwei {\n  type ErrorType = format.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Parses a `string` representation of a Value to `bigint` (multiplied by the given exponent).\n *\n * @example\n * ```ts twoslash\n * import { Value } from 'ox'\n *\n * Value.from('420', 9)\n * // @log: 420000000000n\n * ```\n *\n * @param value - The string representation of the Value.\n * @param decimals - The exponent to multiply the Value by.\n * @returns The `bigint` representation of the Value.\n */\nexport function from(value: string, decimals = 0) {\n  if (!/^(-?)([0-9]*)\\.?([0-9]*)$/.test(value))\n    throw new InvalidDecimalNumberError({ value })\n\n  let [integer = '', fraction = '0'] = value.split('.')\n\n  const negative = integer.startsWith('-')\n  if (negative) integer = integer.slice(1)\n\n  // trim trailing zeros.\n  fraction = fraction.replace(/(0+)$/, '')\n\n  // round off if the fraction is larger than the number of decimals.\n  if (decimals === 0) {\n    if (Math.round(Number(`.${fraction}`)) === 1)\n      integer = `${BigInt(integer) + 1n}`\n    fraction = ''\n  } else if (fraction.length > decimals) {\n    const [left, unit, right] = [\n      fraction.slice(0, decimals - 1),\n      fraction.slice(decimals - 1, decimals),\n      fraction.slice(decimals),\n    ]\n\n    const rounded = Math.round(Number(`${unit}.${right}`))\n    if (rounded > 9)\n      fraction = `${BigInt(left) + BigInt(1)}0`.padStart(left.length + 1, '0')\n    else fraction = `${left}${rounded}`\n\n    if (fraction.length > decimals) {\n      fraction = fraction.slice(1)\n      integer = `${BigInt(integer) + 1n}`\n    }\n\n    fraction = fraction.slice(0, decimals)\n  } else {\n    fraction = fraction.padEnd(decimals, '0')\n  }\n\n  return BigInt(`${negative ? '-' : ''}${integer}${fraction}`)\n}\n\nexport declare namespace from {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Parses a string representation of Ether to a `bigint` Value (default: wei).\n *\n * @example\n * ```ts twoslash\n * import { Value } from 'ox'\n *\n * Value.fromEther('420')\n * // @log: 420000000000000000000n\n * ```\n *\n * @param ether - String representation of Ether.\n * @param unit - The unit to parse to. @default 'wei'.\n * @returns A `bigint` Value.\n */\nexport function fromEther(\n  ether: string,\n  unit: 'wei' | 'gwei' | 'szabo' | 'finney' = 'wei',\n) {\n  return from(ether, exponents.ether - exponents[unit])\n}\n\nexport declare namespace fromEther {\n  type ErrorType = from.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Parses a string representation of Gwei to a `bigint` Value (default: wei).\n *\n * @example\n * ```ts twoslash\n * import { Value } from 'ox'\n *\n * Value.fromGwei('420')\n * // @log: 420000000000n\n * ```\n *\n * @param gwei - String representation of Gwei.\n * @param unit - The unit to parse to. @default 'wei'.\n * @returns A `bigint` Value.\n */\nexport function fromGwei(gwei: string, unit: 'wei' = 'wei') {\n  return from(gwei, exponents.gwei - exponents[unit])\n}\n\nexport declare namespace fromGwei {\n  type ErrorType = from.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Thrown when a value is not a valid decimal number.\n *\n * @example\n * ```ts twoslash\n * import { Value } from 'ox'\n *\n * Value.fromEther('123.456.789')\n * // @error: Value.InvalidDecimalNumberError: Value `123.456.789` is not a valid decimal number.\n * ```\n */\nexport class InvalidDecimalNumberError extends Errors.BaseError {\n  override readonly name = 'Value.InvalidDecimalNumberError'\n  constructor({ value }: { value: string }) {\n    super(`Value \\`${value}\\` is not a valid decimal number.`)\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}